
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	b0 ee 00 20 21 47 01 00 4f 08 02 00 d9 46 01 00     ... !G..O....F..
   10010:	d9 46 01 00 d9 46 01 00 d9 46 01 00 d9 46 01 00     .F...F...F...F..
	...
   1002c:	49 3e 01 00 d9 46 01 00 00 00 00 00 ed 3d 01 00     I>...F.......=..
   1003c:	d9 46 01 00                                         .F..

00010040 <_irq_vector_table>:
   10040:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10050:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10060:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10070:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10080:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10090:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   100a0:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   100b0:	09 5f 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     ._...>...>...>..
   100c0:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   100d0:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   100e0:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   100f0:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10100:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10110:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10120:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10130:	d9 3e 01 00 d9 3e 01 00 d9 3e 01 00 d9 3e 01 00     .>...>...>...>..
   10140:	d9 3e 01 00                                         .>..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   10210:	d8 79 01 00 01 00 00 00 00 00 01 00 00 00 01 00     .y..............
   10220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00010240 <__aeabi_fmul>:
   10240:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   10248:	bf1e      	ittt	ne
   1024a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1024e:	ea92 0f0c 	teqne	r2, ip
   10252:	ea93 0f0c 	teqne	r3, ip
   10256:	d06f      	beq.n	10338 <__aeabi_fmul+0xf8>
   10258:	441a      	add	r2, r3
   1025a:	ea80 0c01 	eor.w	ip, r0, r1
   1025e:	0240      	lsls	r0, r0, #9
   10260:	bf18      	it	ne
   10262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   10266:	d01e      	beq.n	102a6 <__aeabi_fmul+0x66>
   10268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1026c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   10270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   10274:	fba0 3101 	umull	r3, r1, r0, r1
   10278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1027c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   10280:	bf3e      	ittt	cc
   10282:	0049      	lslcc	r1, r1, #1
   10284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   10288:	005b      	lslcc	r3, r3, #1
   1028a:	ea40 0001 	orr.w	r0, r0, r1
   1028e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   10292:	2afd      	cmp	r2, #253	; 0xfd
   10294:	d81d      	bhi.n	102d2 <__aeabi_fmul+0x92>
   10296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1029a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1029e:	bf08      	it	eq
   102a0:	f020 0001 	biceq.w	r0, r0, #1
   102a4:	4770      	bx	lr
   102a6:	f090 0f00 	teq	r0, #0
   102aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   102ae:	bf08      	it	eq
   102b0:	0249      	lsleq	r1, r1, #9
   102b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   102b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   102ba:	3a7f      	subs	r2, #127	; 0x7f
   102bc:	bfc2      	ittt	gt
   102be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   102c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   102c6:	4770      	bxgt	lr
   102c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   102cc:	f04f 0300 	mov.w	r3, #0
   102d0:	3a01      	subs	r2, #1
   102d2:	dc5d      	bgt.n	10390 <__aeabi_fmul+0x150>
   102d4:	f112 0f19 	cmn.w	r2, #25
   102d8:	bfdc      	itt	le
   102da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   102de:	4770      	bxle	lr
   102e0:	f1c2 0200 	rsb	r2, r2, #0
   102e4:	0041      	lsls	r1, r0, #1
   102e6:	fa21 f102 	lsr.w	r1, r1, r2
   102ea:	f1c2 0220 	rsb	r2, r2, #32
   102ee:	fa00 fc02 	lsl.w	ip, r0, r2
   102f2:	ea5f 0031 	movs.w	r0, r1, rrx
   102f6:	f140 0000 	adc.w	r0, r0, #0
   102fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   102fe:	bf08      	it	eq
   10300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10304:	4770      	bx	lr
   10306:	f092 0f00 	teq	r2, #0
   1030a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1030e:	bf02      	ittt	eq
   10310:	0040      	lsleq	r0, r0, #1
   10312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   10316:	3a01      	subeq	r2, #1
   10318:	d0f9      	beq.n	1030e <__aeabi_fmul+0xce>
   1031a:	ea40 000c 	orr.w	r0, r0, ip
   1031e:	f093 0f00 	teq	r3, #0
   10322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10326:	bf02      	ittt	eq
   10328:	0049      	lsleq	r1, r1, #1
   1032a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1032e:	3b01      	subeq	r3, #1
   10330:	d0f9      	beq.n	10326 <__aeabi_fmul+0xe6>
   10332:	ea41 010c 	orr.w	r1, r1, ip
   10336:	e78f      	b.n	10258 <__aeabi_fmul+0x18>
   10338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1033c:	ea92 0f0c 	teq	r2, ip
   10340:	bf18      	it	ne
   10342:	ea93 0f0c 	teqne	r3, ip
   10346:	d00a      	beq.n	1035e <__aeabi_fmul+0x11e>
   10348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1034c:	bf18      	it	ne
   1034e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   10352:	d1d8      	bne.n	10306 <__aeabi_fmul+0xc6>
   10354:	ea80 0001 	eor.w	r0, r0, r1
   10358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1035c:	4770      	bx	lr
   1035e:	f090 0f00 	teq	r0, #0
   10362:	bf17      	itett	ne
   10364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   10368:	4608      	moveq	r0, r1
   1036a:	f091 0f00 	teqne	r1, #0
   1036e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   10372:	d014      	beq.n	1039e <__aeabi_fmul+0x15e>
   10374:	ea92 0f0c 	teq	r2, ip
   10378:	d101      	bne.n	1037e <__aeabi_fmul+0x13e>
   1037a:	0242      	lsls	r2, r0, #9
   1037c:	d10f      	bne.n	1039e <__aeabi_fmul+0x15e>
   1037e:	ea93 0f0c 	teq	r3, ip
   10382:	d103      	bne.n	1038c <__aeabi_fmul+0x14c>
   10384:	024b      	lsls	r3, r1, #9
   10386:	bf18      	it	ne
   10388:	4608      	movne	r0, r1
   1038a:	d108      	bne.n	1039e <__aeabi_fmul+0x15e>
   1038c:	ea80 0001 	eor.w	r0, r0, r1
   10390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   10394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1039c:	4770      	bx	lr
   1039e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   103a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   103a6:	4770      	bx	lr

000103a8 <__aeabi_drsub>:
   103a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   103ac:	e002      	b.n	103b4 <__adddf3>
   103ae:	bf00      	nop

000103b0 <__aeabi_dsub>:
   103b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000103b4 <__adddf3>:
   103b4:	b530      	push	{r4, r5, lr}
   103b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   103ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   103be:	ea94 0f05 	teq	r4, r5
   103c2:	bf08      	it	eq
   103c4:	ea90 0f02 	teqeq	r0, r2
   103c8:	bf1f      	itttt	ne
   103ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   103ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   103d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   103d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   103da:	f000 80e2 	beq.w	105a2 <__adddf3+0x1ee>
   103de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   103e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   103e6:	bfb8      	it	lt
   103e8:	426d      	neglt	r5, r5
   103ea:	dd0c      	ble.n	10406 <__adddf3+0x52>
   103ec:	442c      	add	r4, r5
   103ee:	ea80 0202 	eor.w	r2, r0, r2
   103f2:	ea81 0303 	eor.w	r3, r1, r3
   103f6:	ea82 0000 	eor.w	r0, r2, r0
   103fa:	ea83 0101 	eor.w	r1, r3, r1
   103fe:	ea80 0202 	eor.w	r2, r0, r2
   10402:	ea81 0303 	eor.w	r3, r1, r3
   10406:	2d36      	cmp	r5, #54	; 0x36
   10408:	bf88      	it	hi
   1040a:	bd30      	pophi	{r4, r5, pc}
   1040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10410:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1041c:	d002      	beq.n	10424 <__adddf3+0x70>
   1041e:	4240      	negs	r0, r0
   10420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10428:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10430:	d002      	beq.n	10438 <__adddf3+0x84>
   10432:	4252      	negs	r2, r2
   10434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10438:	ea94 0f05 	teq	r4, r5
   1043c:	f000 80a7 	beq.w	1058e <__adddf3+0x1da>
   10440:	f1a4 0401 	sub.w	r4, r4, #1
   10444:	f1d5 0e20 	rsbs	lr, r5, #32
   10448:	db0d      	blt.n	10466 <__adddf3+0xb2>
   1044a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1044e:	fa22 f205 	lsr.w	r2, r2, r5
   10452:	1880      	adds	r0, r0, r2
   10454:	f141 0100 	adc.w	r1, r1, #0
   10458:	fa03 f20e 	lsl.w	r2, r3, lr
   1045c:	1880      	adds	r0, r0, r2
   1045e:	fa43 f305 	asr.w	r3, r3, r5
   10462:	4159      	adcs	r1, r3
   10464:	e00e      	b.n	10484 <__adddf3+0xd0>
   10466:	f1a5 0520 	sub.w	r5, r5, #32
   1046a:	f10e 0e20 	add.w	lr, lr, #32
   1046e:	2a01      	cmp	r2, #1
   10470:	fa03 fc0e 	lsl.w	ip, r3, lr
   10474:	bf28      	it	cs
   10476:	f04c 0c02 	orrcs.w	ip, ip, #2
   1047a:	fa43 f305 	asr.w	r3, r3, r5
   1047e:	18c0      	adds	r0, r0, r3
   10480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10488:	d507      	bpl.n	1049a <__adddf3+0xe6>
   1048a:	f04f 0e00 	mov.w	lr, #0
   1048e:	f1dc 0c00 	rsbs	ip, ip, #0
   10492:	eb7e 0000 	sbcs.w	r0, lr, r0
   10496:	eb6e 0101 	sbc.w	r1, lr, r1
   1049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1049e:	d31b      	bcc.n	104d8 <__adddf3+0x124>
   104a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   104a4:	d30c      	bcc.n	104c0 <__adddf3+0x10c>
   104a6:	0849      	lsrs	r1, r1, #1
   104a8:	ea5f 0030 	movs.w	r0, r0, rrx
   104ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   104b0:	f104 0401 	add.w	r4, r4, #1
   104b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   104b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   104bc:	f080 809a 	bcs.w	105f4 <__adddf3+0x240>
   104c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   104c4:	bf08      	it	eq
   104c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   104ca:	f150 0000 	adcs.w	r0, r0, #0
   104ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   104d2:	ea41 0105 	orr.w	r1, r1, r5
   104d6:	bd30      	pop	{r4, r5, pc}
   104d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   104dc:	4140      	adcs	r0, r0
   104de:	eb41 0101 	adc.w	r1, r1, r1
   104e2:	3c01      	subs	r4, #1
   104e4:	bf28      	it	cs
   104e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   104ea:	d2e9      	bcs.n	104c0 <__adddf3+0x10c>
   104ec:	f091 0f00 	teq	r1, #0
   104f0:	bf04      	itt	eq
   104f2:	4601      	moveq	r1, r0
   104f4:	2000      	moveq	r0, #0
   104f6:	fab1 f381 	clz	r3, r1
   104fa:	bf08      	it	eq
   104fc:	3320      	addeq	r3, #32
   104fe:	f1a3 030b 	sub.w	r3, r3, #11
   10502:	f1b3 0220 	subs.w	r2, r3, #32
   10506:	da0c      	bge.n	10522 <__adddf3+0x16e>
   10508:	320c      	adds	r2, #12
   1050a:	dd08      	ble.n	1051e <__adddf3+0x16a>
   1050c:	f102 0c14 	add.w	ip, r2, #20
   10510:	f1c2 020c 	rsb	r2, r2, #12
   10514:	fa01 f00c 	lsl.w	r0, r1, ip
   10518:	fa21 f102 	lsr.w	r1, r1, r2
   1051c:	e00c      	b.n	10538 <__adddf3+0x184>
   1051e:	f102 0214 	add.w	r2, r2, #20
   10522:	bfd8      	it	le
   10524:	f1c2 0c20 	rsble	ip, r2, #32
   10528:	fa01 f102 	lsl.w	r1, r1, r2
   1052c:	fa20 fc0c 	lsr.w	ip, r0, ip
   10530:	bfdc      	itt	le
   10532:	ea41 010c 	orrle.w	r1, r1, ip
   10536:	4090      	lslle	r0, r2
   10538:	1ae4      	subs	r4, r4, r3
   1053a:	bfa2      	ittt	ge
   1053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10540:	4329      	orrge	r1, r5
   10542:	bd30      	popge	{r4, r5, pc}
   10544:	ea6f 0404 	mvn.w	r4, r4
   10548:	3c1f      	subs	r4, #31
   1054a:	da1c      	bge.n	10586 <__adddf3+0x1d2>
   1054c:	340c      	adds	r4, #12
   1054e:	dc0e      	bgt.n	1056e <__adddf3+0x1ba>
   10550:	f104 0414 	add.w	r4, r4, #20
   10554:	f1c4 0220 	rsb	r2, r4, #32
   10558:	fa20 f004 	lsr.w	r0, r0, r4
   1055c:	fa01 f302 	lsl.w	r3, r1, r2
   10560:	ea40 0003 	orr.w	r0, r0, r3
   10564:	fa21 f304 	lsr.w	r3, r1, r4
   10568:	ea45 0103 	orr.w	r1, r5, r3
   1056c:	bd30      	pop	{r4, r5, pc}
   1056e:	f1c4 040c 	rsb	r4, r4, #12
   10572:	f1c4 0220 	rsb	r2, r4, #32
   10576:	fa20 f002 	lsr.w	r0, r0, r2
   1057a:	fa01 f304 	lsl.w	r3, r1, r4
   1057e:	ea40 0003 	orr.w	r0, r0, r3
   10582:	4629      	mov	r1, r5
   10584:	bd30      	pop	{r4, r5, pc}
   10586:	fa21 f004 	lsr.w	r0, r1, r4
   1058a:	4629      	mov	r1, r5
   1058c:	bd30      	pop	{r4, r5, pc}
   1058e:	f094 0f00 	teq	r4, #0
   10592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10596:	bf06      	itte	eq
   10598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1059c:	3401      	addeq	r4, #1
   1059e:	3d01      	subne	r5, #1
   105a0:	e74e      	b.n	10440 <__adddf3+0x8c>
   105a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   105a6:	bf18      	it	ne
   105a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   105ac:	d029      	beq.n	10602 <__adddf3+0x24e>
   105ae:	ea94 0f05 	teq	r4, r5
   105b2:	bf08      	it	eq
   105b4:	ea90 0f02 	teqeq	r0, r2
   105b8:	d005      	beq.n	105c6 <__adddf3+0x212>
   105ba:	ea54 0c00 	orrs.w	ip, r4, r0
   105be:	bf04      	itt	eq
   105c0:	4619      	moveq	r1, r3
   105c2:	4610      	moveq	r0, r2
   105c4:	bd30      	pop	{r4, r5, pc}
   105c6:	ea91 0f03 	teq	r1, r3
   105ca:	bf1e      	ittt	ne
   105cc:	2100      	movne	r1, #0
   105ce:	2000      	movne	r0, #0
   105d0:	bd30      	popne	{r4, r5, pc}
   105d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   105d6:	d105      	bne.n	105e4 <__adddf3+0x230>
   105d8:	0040      	lsls	r0, r0, #1
   105da:	4149      	adcs	r1, r1
   105dc:	bf28      	it	cs
   105de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   105e2:	bd30      	pop	{r4, r5, pc}
   105e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   105e8:	bf3c      	itt	cc
   105ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   105ee:	bd30      	popcc	{r4, r5, pc}
   105f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   105f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   105f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   105fc:	f04f 0000 	mov.w	r0, #0
   10600:	bd30      	pop	{r4, r5, pc}
   10602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10606:	bf1a      	itte	ne
   10608:	4619      	movne	r1, r3
   1060a:	4610      	movne	r0, r2
   1060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10610:	bf1c      	itt	ne
   10612:	460b      	movne	r3, r1
   10614:	4602      	movne	r2, r0
   10616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1061a:	bf06      	itte	eq
   1061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10620:	ea91 0f03 	teqeq	r1, r3
   10624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10628:	bd30      	pop	{r4, r5, pc}
   1062a:	bf00      	nop

0001062c <__aeabi_ui2d>:
   1062c:	f090 0f00 	teq	r0, #0
   10630:	bf04      	itt	eq
   10632:	2100      	moveq	r1, #0
   10634:	4770      	bxeq	lr
   10636:	b530      	push	{r4, r5, lr}
   10638:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10640:	f04f 0500 	mov.w	r5, #0
   10644:	f04f 0100 	mov.w	r1, #0
   10648:	e750      	b.n	104ec <__adddf3+0x138>
   1064a:	bf00      	nop

0001064c <__aeabi_i2d>:
   1064c:	f090 0f00 	teq	r0, #0
   10650:	bf04      	itt	eq
   10652:	2100      	moveq	r1, #0
   10654:	4770      	bxeq	lr
   10656:	b530      	push	{r4, r5, lr}
   10658:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10664:	bf48      	it	mi
   10666:	4240      	negmi	r0, r0
   10668:	f04f 0100 	mov.w	r1, #0
   1066c:	e73e      	b.n	104ec <__adddf3+0x138>
   1066e:	bf00      	nop

00010670 <__aeabi_f2d>:
   10670:	0042      	lsls	r2, r0, #1
   10672:	ea4f 01e2 	mov.w	r1, r2, asr #3
   10676:	ea4f 0131 	mov.w	r1, r1, rrx
   1067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1067e:	bf1f      	itttt	ne
   10680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1068c:	4770      	bxne	lr
   1068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10692:	bf08      	it	eq
   10694:	4770      	bxeq	lr
   10696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1069a:	bf04      	itt	eq
   1069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   106a0:	4770      	bxeq	lr
   106a2:	b530      	push	{r4, r5, lr}
   106a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   106a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   106ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106b0:	e71c      	b.n	104ec <__adddf3+0x138>
   106b2:	bf00      	nop

000106b4 <__aeabi_ul2d>:
   106b4:	ea50 0201 	orrs.w	r2, r0, r1
   106b8:	bf08      	it	eq
   106ba:	4770      	bxeq	lr
   106bc:	b530      	push	{r4, r5, lr}
   106be:	f04f 0500 	mov.w	r5, #0
   106c2:	e00a      	b.n	106da <__aeabi_l2d+0x16>

000106c4 <__aeabi_l2d>:
   106c4:	ea50 0201 	orrs.w	r2, r0, r1
   106c8:	bf08      	it	eq
   106ca:	4770      	bxeq	lr
   106cc:	b530      	push	{r4, r5, lr}
   106ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   106d2:	d502      	bpl.n	106da <__aeabi_l2d+0x16>
   106d4:	4240      	negs	r0, r0
   106d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   106da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   106de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   106e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   106e6:	f43f aed8 	beq.w	1049a <__adddf3+0xe6>
   106ea:	f04f 0203 	mov.w	r2, #3
   106ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   106f2:	bf18      	it	ne
   106f4:	3203      	addne	r2, #3
   106f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   106fa:	bf18      	it	ne
   106fc:	3203      	addne	r2, #3
   106fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   10702:	f1c2 0320 	rsb	r3, r2, #32
   10706:	fa00 fc03 	lsl.w	ip, r0, r3
   1070a:	fa20 f002 	lsr.w	r0, r0, r2
   1070e:	fa01 fe03 	lsl.w	lr, r1, r3
   10712:	ea40 000e 	orr.w	r0, r0, lr
   10716:	fa21 f102 	lsr.w	r1, r1, r2
   1071a:	4414      	add	r4, r2
   1071c:	e6bd      	b.n	1049a <__adddf3+0xe6>
   1071e:	bf00      	nop

00010720 <__aeabi_dmul>:
   10720:	b570      	push	{r4, r5, r6, lr}
   10722:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1072e:	bf1d      	ittte	ne
   10730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10734:	ea94 0f0c 	teqne	r4, ip
   10738:	ea95 0f0c 	teqne	r5, ip
   1073c:	f000 f8de 	bleq	108fc <__aeabi_dmul+0x1dc>
   10740:	442c      	add	r4, r5
   10742:	ea81 0603 	eor.w	r6, r1, r3
   10746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   10752:	bf18      	it	ne
   10754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   10758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   10760:	d038      	beq.n	107d4 <__aeabi_dmul+0xb4>
   10762:	fba0 ce02 	umull	ip, lr, r0, r2
   10766:	f04f 0500 	mov.w	r5, #0
   1076a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   10772:	fbe0 e503 	umlal	lr, r5, r0, r3
   10776:	f04f 0600 	mov.w	r6, #0
   1077a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1077e:	f09c 0f00 	teq	ip, #0
   10782:	bf18      	it	ne
   10784:	f04e 0e01 	orrne.w	lr, lr, #1
   10788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10794:	d204      	bcs.n	107a0 <__aeabi_dmul+0x80>
   10796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1079a:	416d      	adcs	r5, r5
   1079c:	eb46 0606 	adc.w	r6, r6, r6
   107a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   107a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   107a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   107ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   107b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   107b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   107b8:	bf88      	it	hi
   107ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   107be:	d81e      	bhi.n	107fe <__aeabi_dmul+0xde>
   107c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   107c4:	bf08      	it	eq
   107c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   107ca:	f150 0000 	adcs.w	r0, r0, #0
   107ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   107d2:	bd70      	pop	{r4, r5, r6, pc}
   107d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   107d8:	ea46 0101 	orr.w	r1, r6, r1
   107dc:	ea40 0002 	orr.w	r0, r0, r2
   107e0:	ea81 0103 	eor.w	r1, r1, r3
   107e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   107e8:	bfc2      	ittt	gt
   107ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   107ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   107f2:	bd70      	popgt	{r4, r5, r6, pc}
   107f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   107f8:	f04f 0e00 	mov.w	lr, #0
   107fc:	3c01      	subs	r4, #1
   107fe:	f300 80ab 	bgt.w	10958 <__aeabi_dmul+0x238>
   10802:	f114 0f36 	cmn.w	r4, #54	; 0x36
   10806:	bfde      	ittt	le
   10808:	2000      	movle	r0, #0
   1080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1080e:	bd70      	pople	{r4, r5, r6, pc}
   10810:	f1c4 0400 	rsb	r4, r4, #0
   10814:	3c20      	subs	r4, #32
   10816:	da35      	bge.n	10884 <__aeabi_dmul+0x164>
   10818:	340c      	adds	r4, #12
   1081a:	dc1b      	bgt.n	10854 <__aeabi_dmul+0x134>
   1081c:	f104 0414 	add.w	r4, r4, #20
   10820:	f1c4 0520 	rsb	r5, r4, #32
   10824:	fa00 f305 	lsl.w	r3, r0, r5
   10828:	fa20 f004 	lsr.w	r0, r0, r4
   1082c:	fa01 f205 	lsl.w	r2, r1, r5
   10830:	ea40 0002 	orr.w	r0, r0, r2
   10834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   10838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10840:	fa21 f604 	lsr.w	r6, r1, r4
   10844:	eb42 0106 	adc.w	r1, r2, r6
   10848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1084c:	bf08      	it	eq
   1084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10852:	bd70      	pop	{r4, r5, r6, pc}
   10854:	f1c4 040c 	rsb	r4, r4, #12
   10858:	f1c4 0520 	rsb	r5, r4, #32
   1085c:	fa00 f304 	lsl.w	r3, r0, r4
   10860:	fa20 f005 	lsr.w	r0, r0, r5
   10864:	fa01 f204 	lsl.w	r2, r1, r4
   10868:	ea40 0002 	orr.w	r0, r0, r2
   1086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10874:	f141 0100 	adc.w	r1, r1, #0
   10878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1087c:	bf08      	it	eq
   1087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10882:	bd70      	pop	{r4, r5, r6, pc}
   10884:	f1c4 0520 	rsb	r5, r4, #32
   10888:	fa00 f205 	lsl.w	r2, r0, r5
   1088c:	ea4e 0e02 	orr.w	lr, lr, r2
   10890:	fa20 f304 	lsr.w	r3, r0, r4
   10894:	fa01 f205 	lsl.w	r2, r1, r5
   10898:	ea43 0302 	orr.w	r3, r3, r2
   1089c:	fa21 f004 	lsr.w	r0, r1, r4
   108a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   108a4:	fa21 f204 	lsr.w	r2, r1, r4
   108a8:	ea20 0002 	bic.w	r0, r0, r2
   108ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   108b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   108b4:	bf08      	it	eq
   108b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   108ba:	bd70      	pop	{r4, r5, r6, pc}
   108bc:	f094 0f00 	teq	r4, #0
   108c0:	d10f      	bne.n	108e2 <__aeabi_dmul+0x1c2>
   108c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   108c6:	0040      	lsls	r0, r0, #1
   108c8:	eb41 0101 	adc.w	r1, r1, r1
   108cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   108d0:	bf08      	it	eq
   108d2:	3c01      	subeq	r4, #1
   108d4:	d0f7      	beq.n	108c6 <__aeabi_dmul+0x1a6>
   108d6:	ea41 0106 	orr.w	r1, r1, r6
   108da:	f095 0f00 	teq	r5, #0
   108de:	bf18      	it	ne
   108e0:	4770      	bxne	lr
   108e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   108e6:	0052      	lsls	r2, r2, #1
   108e8:	eb43 0303 	adc.w	r3, r3, r3
   108ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   108f0:	bf08      	it	eq
   108f2:	3d01      	subeq	r5, #1
   108f4:	d0f7      	beq.n	108e6 <__aeabi_dmul+0x1c6>
   108f6:	ea43 0306 	orr.w	r3, r3, r6
   108fa:	4770      	bx	lr
   108fc:	ea94 0f0c 	teq	r4, ip
   10900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10904:	bf18      	it	ne
   10906:	ea95 0f0c 	teqne	r5, ip
   1090a:	d00c      	beq.n	10926 <__aeabi_dmul+0x206>
   1090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10910:	bf18      	it	ne
   10912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10916:	d1d1      	bne.n	108bc <__aeabi_dmul+0x19c>
   10918:	ea81 0103 	eor.w	r1, r1, r3
   1091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10920:	f04f 0000 	mov.w	r0, #0
   10924:	bd70      	pop	{r4, r5, r6, pc}
   10926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1092a:	bf06      	itte	eq
   1092c:	4610      	moveq	r0, r2
   1092e:	4619      	moveq	r1, r3
   10930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10934:	d019      	beq.n	1096a <__aeabi_dmul+0x24a>
   10936:	ea94 0f0c 	teq	r4, ip
   1093a:	d102      	bne.n	10942 <__aeabi_dmul+0x222>
   1093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   10940:	d113      	bne.n	1096a <__aeabi_dmul+0x24a>
   10942:	ea95 0f0c 	teq	r5, ip
   10946:	d105      	bne.n	10954 <__aeabi_dmul+0x234>
   10948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1094c:	bf1c      	itt	ne
   1094e:	4610      	movne	r0, r2
   10950:	4619      	movne	r1, r3
   10952:	d10a      	bne.n	1096a <__aeabi_dmul+0x24a>
   10954:	ea81 0103 	eor.w	r1, r1, r3
   10958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10964:	f04f 0000 	mov.w	r0, #0
   10968:	bd70      	pop	{r4, r5, r6, pc}
   1096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   10972:	bd70      	pop	{r4, r5, r6, pc}

00010974 <__aeabi_ddiv>:
   10974:	b570      	push	{r4, r5, r6, lr}
   10976:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   10982:	bf1d      	ittte	ne
   10984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10988:	ea94 0f0c 	teqne	r4, ip
   1098c:	ea95 0f0c 	teqne	r5, ip
   10990:	f000 f8a7 	bleq	10ae2 <__aeabi_ddiv+0x16e>
   10994:	eba4 0405 	sub.w	r4, r4, r5
   10998:	ea81 0e03 	eor.w	lr, r1, r3
   1099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   109a4:	f000 8088 	beq.w	10ab8 <__aeabi_ddiv+0x144>
   109a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   109ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   109b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   109b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   109b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   109bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   109c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   109c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   109c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   109cc:	429d      	cmp	r5, r3
   109ce:	bf08      	it	eq
   109d0:	4296      	cmpeq	r6, r2
   109d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   109d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   109da:	d202      	bcs.n	109e2 <__aeabi_ddiv+0x6e>
   109dc:	085b      	lsrs	r3, r3, #1
   109de:	ea4f 0232 	mov.w	r2, r2, rrx
   109e2:	1ab6      	subs	r6, r6, r2
   109e4:	eb65 0503 	sbc.w	r5, r5, r3
   109e8:	085b      	lsrs	r3, r3, #1
   109ea:	ea4f 0232 	mov.w	r2, r2, rrx
   109ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   109f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   109f6:	ebb6 0e02 	subs.w	lr, r6, r2
   109fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   109fe:	bf22      	ittt	cs
   10a00:	1ab6      	subcs	r6, r6, r2
   10a02:	4675      	movcs	r5, lr
   10a04:	ea40 000c 	orrcs.w	r0, r0, ip
   10a08:	085b      	lsrs	r3, r3, #1
   10a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   10a0e:	ebb6 0e02 	subs.w	lr, r6, r2
   10a12:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a16:	bf22      	ittt	cs
   10a18:	1ab6      	subcs	r6, r6, r2
   10a1a:	4675      	movcs	r5, lr
   10a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   10a20:	085b      	lsrs	r3, r3, #1
   10a22:	ea4f 0232 	mov.w	r2, r2, rrx
   10a26:	ebb6 0e02 	subs.w	lr, r6, r2
   10a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a2e:	bf22      	ittt	cs
   10a30:	1ab6      	subcs	r6, r6, r2
   10a32:	4675      	movcs	r5, lr
   10a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   10a38:	085b      	lsrs	r3, r3, #1
   10a3a:	ea4f 0232 	mov.w	r2, r2, rrx
   10a3e:	ebb6 0e02 	subs.w	lr, r6, r2
   10a42:	eb75 0e03 	sbcs.w	lr, r5, r3
   10a46:	bf22      	ittt	cs
   10a48:	1ab6      	subcs	r6, r6, r2
   10a4a:	4675      	movcs	r5, lr
   10a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   10a50:	ea55 0e06 	orrs.w	lr, r5, r6
   10a54:	d018      	beq.n	10a88 <__aeabi_ddiv+0x114>
   10a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   10a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   10a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   10a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   10a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   10a72:	d1c0      	bne.n	109f6 <__aeabi_ddiv+0x82>
   10a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a78:	d10b      	bne.n	10a92 <__aeabi_ddiv+0x11e>
   10a7a:	ea41 0100 	orr.w	r1, r1, r0
   10a7e:	f04f 0000 	mov.w	r0, #0
   10a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10a86:	e7b6      	b.n	109f6 <__aeabi_ddiv+0x82>
   10a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a8c:	bf04      	itt	eq
   10a8e:	4301      	orreq	r1, r0
   10a90:	2000      	moveq	r0, #0
   10a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10a96:	bf88      	it	hi
   10a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10a9c:	f63f aeaf 	bhi.w	107fe <__aeabi_dmul+0xde>
   10aa0:	ebb5 0c03 	subs.w	ip, r5, r3
   10aa4:	bf04      	itt	eq
   10aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   10aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10aae:	f150 0000 	adcs.w	r0, r0, #0
   10ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10ab6:	bd70      	pop	{r4, r5, r6, pc}
   10ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10ac4:	bfc2      	ittt	gt
   10ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
   10aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10ace:	bd70      	popgt	{r4, r5, r6, pc}
   10ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10ad4:	f04f 0e00 	mov.w	lr, #0
   10ad8:	3c01      	subs	r4, #1
   10ada:	e690      	b.n	107fe <__aeabi_dmul+0xde>
   10adc:	ea45 0e06 	orr.w	lr, r5, r6
   10ae0:	e68d      	b.n	107fe <__aeabi_dmul+0xde>
   10ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10ae6:	ea94 0f0c 	teq	r4, ip
   10aea:	bf08      	it	eq
   10aec:	ea95 0f0c 	teqeq	r5, ip
   10af0:	f43f af3b 	beq.w	1096a <__aeabi_dmul+0x24a>
   10af4:	ea94 0f0c 	teq	r4, ip
   10af8:	d10a      	bne.n	10b10 <__aeabi_ddiv+0x19c>
   10afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10afe:	f47f af34 	bne.w	1096a <__aeabi_dmul+0x24a>
   10b02:	ea95 0f0c 	teq	r5, ip
   10b06:	f47f af25 	bne.w	10954 <__aeabi_dmul+0x234>
   10b0a:	4610      	mov	r0, r2
   10b0c:	4619      	mov	r1, r3
   10b0e:	e72c      	b.n	1096a <__aeabi_dmul+0x24a>
   10b10:	ea95 0f0c 	teq	r5, ip
   10b14:	d106      	bne.n	10b24 <__aeabi_ddiv+0x1b0>
   10b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10b1a:	f43f aefd 	beq.w	10918 <__aeabi_dmul+0x1f8>
   10b1e:	4610      	mov	r0, r2
   10b20:	4619      	mov	r1, r3
   10b22:	e722      	b.n	1096a <__aeabi_dmul+0x24a>
   10b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10b28:	bf18      	it	ne
   10b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10b2e:	f47f aec5 	bne.w	108bc <__aeabi_dmul+0x19c>
   10b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   10b36:	f47f af0d 	bne.w	10954 <__aeabi_dmul+0x234>
   10b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10b3e:	f47f aeeb 	bne.w	10918 <__aeabi_dmul+0x1f8>
   10b42:	e712      	b.n	1096a <__aeabi_dmul+0x24a>

00010b44 <__aeabi_d2f>:
   10b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10b4c:	bf24      	itt	cs
   10b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10b56:	d90d      	bls.n	10b74 <__aeabi_d2f+0x30>
   10b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10b6c:	bf08      	it	eq
   10b6e:	f020 0001 	biceq.w	r0, r0, #1
   10b72:	4770      	bx	lr
   10b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10b78:	d121      	bne.n	10bbe <__aeabi_d2f+0x7a>
   10b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10b7e:	bfbc      	itt	lt
   10b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10b84:	4770      	bxlt	lr
   10b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10b8e:	f1c2 0218 	rsb	r2, r2, #24
   10b92:	f1c2 0c20 	rsb	ip, r2, #32
   10b96:	fa10 f30c 	lsls.w	r3, r0, ip
   10b9a:	fa20 f002 	lsr.w	r0, r0, r2
   10b9e:	bf18      	it	ne
   10ba0:	f040 0001 	orrne.w	r0, r0, #1
   10ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10bac:	fa03 fc0c 	lsl.w	ip, r3, ip
   10bb0:	ea40 000c 	orr.w	r0, r0, ip
   10bb4:	fa23 f302 	lsr.w	r3, r3, r2
   10bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10bbc:	e7cc      	b.n	10b58 <__aeabi_d2f+0x14>
   10bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10bc2:	d107      	bne.n	10bd4 <__aeabi_d2f+0x90>
   10bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10bc8:	bf1e      	ittt	ne
   10bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10bd2:	4770      	bxne	lr
   10bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10be0:	4770      	bx	lr
   10be2:	bf00      	nop

00010be4 <__aeabi_frsub>:
   10be4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   10be8:	e002      	b.n	10bf0 <__addsf3>
   10bea:	bf00      	nop

00010bec <__aeabi_fsub>:
   10bec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00010bf0 <__addsf3>:
   10bf0:	0042      	lsls	r2, r0, #1
   10bf2:	bf1f      	itttt	ne
   10bf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   10bf8:	ea92 0f03 	teqne	r2, r3
   10bfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   10c00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10c04:	d06a      	beq.n	10cdc <__addsf3+0xec>
   10c06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   10c0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   10c0e:	bfc1      	itttt	gt
   10c10:	18d2      	addgt	r2, r2, r3
   10c12:	4041      	eorgt	r1, r0
   10c14:	4048      	eorgt	r0, r1
   10c16:	4041      	eorgt	r1, r0
   10c18:	bfb8      	it	lt
   10c1a:	425b      	neglt	r3, r3
   10c1c:	2b19      	cmp	r3, #25
   10c1e:	bf88      	it	hi
   10c20:	4770      	bxhi	lr
   10c22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   10c26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10c2e:	bf18      	it	ne
   10c30:	4240      	negne	r0, r0
   10c32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   10c3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   10c3e:	bf18      	it	ne
   10c40:	4249      	negne	r1, r1
   10c42:	ea92 0f03 	teq	r2, r3
   10c46:	d03f      	beq.n	10cc8 <__addsf3+0xd8>
   10c48:	f1a2 0201 	sub.w	r2, r2, #1
   10c4c:	fa41 fc03 	asr.w	ip, r1, r3
   10c50:	eb10 000c 	adds.w	r0, r0, ip
   10c54:	f1c3 0320 	rsb	r3, r3, #32
   10c58:	fa01 f103 	lsl.w	r1, r1, r3
   10c5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10c60:	d502      	bpl.n	10c68 <__addsf3+0x78>
   10c62:	4249      	negs	r1, r1
   10c64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10c68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10c6c:	d313      	bcc.n	10c96 <__addsf3+0xa6>
   10c6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   10c72:	d306      	bcc.n	10c82 <__addsf3+0x92>
   10c74:	0840      	lsrs	r0, r0, #1
   10c76:	ea4f 0131 	mov.w	r1, r1, rrx
   10c7a:	f102 0201 	add.w	r2, r2, #1
   10c7e:	2afe      	cmp	r2, #254	; 0xfe
   10c80:	d251      	bcs.n	10d26 <__addsf3+0x136>
   10c82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   10c86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   10c8a:	bf08      	it	eq
   10c8c:	f020 0001 	biceq.w	r0, r0, #1
   10c90:	ea40 0003 	orr.w	r0, r0, r3
   10c94:	4770      	bx	lr
   10c96:	0049      	lsls	r1, r1, #1
   10c98:	eb40 0000 	adc.w	r0, r0, r0
   10c9c:	3a01      	subs	r2, #1
   10c9e:	bf28      	it	cs
   10ca0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   10ca4:	d2ed      	bcs.n	10c82 <__addsf3+0x92>
   10ca6:	fab0 fc80 	clz	ip, r0
   10caa:	f1ac 0c08 	sub.w	ip, ip, #8
   10cae:	ebb2 020c 	subs.w	r2, r2, ip
   10cb2:	fa00 f00c 	lsl.w	r0, r0, ip
   10cb6:	bfaa      	itet	ge
   10cb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   10cbc:	4252      	neglt	r2, r2
   10cbe:	4318      	orrge	r0, r3
   10cc0:	bfbc      	itt	lt
   10cc2:	40d0      	lsrlt	r0, r2
   10cc4:	4318      	orrlt	r0, r3
   10cc6:	4770      	bx	lr
   10cc8:	f092 0f00 	teq	r2, #0
   10ccc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   10cd0:	bf06      	itte	eq
   10cd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   10cd6:	3201      	addeq	r2, #1
   10cd8:	3b01      	subne	r3, #1
   10cda:	e7b5      	b.n	10c48 <__addsf3+0x58>
   10cdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   10ce0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   10ce4:	bf18      	it	ne
   10ce6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   10cea:	d021      	beq.n	10d30 <__addsf3+0x140>
   10cec:	ea92 0f03 	teq	r2, r3
   10cf0:	d004      	beq.n	10cfc <__addsf3+0x10c>
   10cf2:	f092 0f00 	teq	r2, #0
   10cf6:	bf08      	it	eq
   10cf8:	4608      	moveq	r0, r1
   10cfa:	4770      	bx	lr
   10cfc:	ea90 0f01 	teq	r0, r1
   10d00:	bf1c      	itt	ne
   10d02:	2000      	movne	r0, #0
   10d04:	4770      	bxne	lr
   10d06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   10d0a:	d104      	bne.n	10d16 <__addsf3+0x126>
   10d0c:	0040      	lsls	r0, r0, #1
   10d0e:	bf28      	it	cs
   10d10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   10d14:	4770      	bx	lr
   10d16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   10d1a:	bf3c      	itt	cc
   10d1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   10d20:	4770      	bxcc	lr
   10d22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   10d26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   10d2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10d2e:	4770      	bx	lr
   10d30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   10d34:	bf16      	itet	ne
   10d36:	4608      	movne	r0, r1
   10d38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   10d3c:	4601      	movne	r1, r0
   10d3e:	0242      	lsls	r2, r0, #9
   10d40:	bf06      	itte	eq
   10d42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   10d46:	ea90 0f01 	teqeq	r0, r1
   10d4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   10d4e:	4770      	bx	lr

00010d50 <__aeabi_ui2f>:
   10d50:	f04f 0300 	mov.w	r3, #0
   10d54:	e004      	b.n	10d60 <__aeabi_i2f+0x8>
   10d56:	bf00      	nop

00010d58 <__aeabi_i2f>:
   10d58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   10d5c:	bf48      	it	mi
   10d5e:	4240      	negmi	r0, r0
   10d60:	ea5f 0c00 	movs.w	ip, r0
   10d64:	bf08      	it	eq
   10d66:	4770      	bxeq	lr
   10d68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   10d6c:	4601      	mov	r1, r0
   10d6e:	f04f 0000 	mov.w	r0, #0
   10d72:	e01c      	b.n	10dae <__aeabi_l2f+0x2a>

00010d74 <__aeabi_ul2f>:
   10d74:	ea50 0201 	orrs.w	r2, r0, r1
   10d78:	bf08      	it	eq
   10d7a:	4770      	bxeq	lr
   10d7c:	f04f 0300 	mov.w	r3, #0
   10d80:	e00a      	b.n	10d98 <__aeabi_l2f+0x14>
   10d82:	bf00      	nop

00010d84 <__aeabi_l2f>:
   10d84:	ea50 0201 	orrs.w	r2, r0, r1
   10d88:	bf08      	it	eq
   10d8a:	4770      	bxeq	lr
   10d8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   10d90:	d502      	bpl.n	10d98 <__aeabi_l2f+0x14>
   10d92:	4240      	negs	r0, r0
   10d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10d98:	ea5f 0c01 	movs.w	ip, r1
   10d9c:	bf02      	ittt	eq
   10d9e:	4684      	moveq	ip, r0
   10da0:	4601      	moveq	r1, r0
   10da2:	2000      	moveq	r0, #0
   10da4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   10da8:	bf08      	it	eq
   10daa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   10dae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   10db2:	fabc f28c 	clz	r2, ip
   10db6:	3a08      	subs	r2, #8
   10db8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   10dbc:	db10      	blt.n	10de0 <__aeabi_l2f+0x5c>
   10dbe:	fa01 fc02 	lsl.w	ip, r1, r2
   10dc2:	4463      	add	r3, ip
   10dc4:	fa00 fc02 	lsl.w	ip, r0, r2
   10dc8:	f1c2 0220 	rsb	r2, r2, #32
   10dcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10dd0:	fa20 f202 	lsr.w	r2, r0, r2
   10dd4:	eb43 0002 	adc.w	r0, r3, r2
   10dd8:	bf08      	it	eq
   10dda:	f020 0001 	biceq.w	r0, r0, #1
   10dde:	4770      	bx	lr
   10de0:	f102 0220 	add.w	r2, r2, #32
   10de4:	fa01 fc02 	lsl.w	ip, r1, r2
   10de8:	f1c2 0220 	rsb	r2, r2, #32
   10dec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   10df0:	fa21 f202 	lsr.w	r2, r1, r2
   10df4:	eb43 0002 	adc.w	r0, r3, r2
   10df8:	bf08      	it	eq
   10dfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   10dfe:	4770      	bx	lr

00010e00 <__aeabi_uldivmod>:
   10e00:	b953      	cbnz	r3, 10e18 <__aeabi_uldivmod+0x18>
   10e02:	b94a      	cbnz	r2, 10e18 <__aeabi_uldivmod+0x18>
   10e04:	2900      	cmp	r1, #0
   10e06:	bf08      	it	eq
   10e08:	2800      	cmpeq	r0, #0
   10e0a:	bf1c      	itt	ne
   10e0c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10e10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10e14:	f000 b80c 	b.w	10e30 <__aeabi_idiv0>
   10e18:	f1ad 0c08 	sub.w	ip, sp, #8
   10e1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10e20:	f000 f808 	bl	10e34 <__udivmoddi4>
   10e24:	f8dd e004 	ldr.w	lr, [sp, #4]
   10e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e2c:	b004      	add	sp, #16
   10e2e:	4770      	bx	lr

00010e30 <__aeabi_idiv0>:
   10e30:	4770      	bx	lr
   10e32:	bf00      	nop

00010e34 <__udivmoddi4>:
   10e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e38:	4607      	mov	r7, r0
   10e3a:	468c      	mov	ip, r1
   10e3c:	4608      	mov	r0, r1
   10e3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10e40:	4615      	mov	r5, r2
   10e42:	463c      	mov	r4, r7
   10e44:	4619      	mov	r1, r3
   10e46:	2b00      	cmp	r3, #0
   10e48:	f040 80c5 	bne.w	10fd6 <__udivmoddi4+0x1a2>
   10e4c:	4282      	cmp	r2, r0
   10e4e:	fab2 f782 	clz	r7, r2
   10e52:	d946      	bls.n	10ee2 <__udivmoddi4+0xae>
   10e54:	b14f      	cbz	r7, 10e6a <__udivmoddi4+0x36>
   10e56:	f1c7 0e20 	rsb	lr, r7, #32
   10e5a:	fa00 f307 	lsl.w	r3, r0, r7
   10e5e:	40bd      	lsls	r5, r7
   10e60:	fa24 fe0e 	lsr.w	lr, r4, lr
   10e64:	40bc      	lsls	r4, r7
   10e66:	ea4e 0c03 	orr.w	ip, lr, r3
   10e6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   10e6e:	fa1f fe85 	uxth.w	lr, r5
   10e72:	0c22      	lsrs	r2, r4, #16
   10e74:	fbbc f9f8 	udiv	r9, ip, r8
   10e78:	fb08 c319 	mls	r3, r8, r9, ip
   10e7c:	fb09 fa0e 	mul.w	sl, r9, lr
   10e80:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   10e84:	459a      	cmp	sl, r3
   10e86:	d928      	bls.n	10eda <__udivmoddi4+0xa6>
   10e88:	18eb      	adds	r3, r5, r3
   10e8a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   10e8e:	d204      	bcs.n	10e9a <__udivmoddi4+0x66>
   10e90:	459a      	cmp	sl, r3
   10e92:	d902      	bls.n	10e9a <__udivmoddi4+0x66>
   10e94:	f1a9 0002 	sub.w	r0, r9, #2
   10e98:	442b      	add	r3, r5
   10e9a:	eba3 030a 	sub.w	r3, r3, sl
   10e9e:	b2a4      	uxth	r4, r4
   10ea0:	fbb3 f2f8 	udiv	r2, r3, r8
   10ea4:	fb08 3312 	mls	r3, r8, r2, r3
   10ea8:	fb02 fe0e 	mul.w	lr, r2, lr
   10eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10eb0:	45a6      	cmp	lr, r4
   10eb2:	d914      	bls.n	10ede <__udivmoddi4+0xaa>
   10eb4:	192c      	adds	r4, r5, r4
   10eb6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   10eba:	d203      	bcs.n	10ec4 <__udivmoddi4+0x90>
   10ebc:	45a6      	cmp	lr, r4
   10ebe:	d901      	bls.n	10ec4 <__udivmoddi4+0x90>
   10ec0:	1e93      	subs	r3, r2, #2
   10ec2:	442c      	add	r4, r5
   10ec4:	eba4 040e 	sub.w	r4, r4, lr
   10ec8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10ecc:	b11e      	cbz	r6, 10ed6 <__udivmoddi4+0xa2>
   10ece:	40fc      	lsrs	r4, r7
   10ed0:	2300      	movs	r3, #0
   10ed2:	6034      	str	r4, [r6, #0]
   10ed4:	6073      	str	r3, [r6, #4]
   10ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eda:	4648      	mov	r0, r9
   10edc:	e7dd      	b.n	10e9a <__udivmoddi4+0x66>
   10ede:	4613      	mov	r3, r2
   10ee0:	e7f0      	b.n	10ec4 <__udivmoddi4+0x90>
   10ee2:	b902      	cbnz	r2, 10ee6 <__udivmoddi4+0xb2>
   10ee4:	deff      	udf	#255	; 0xff
   10ee6:	bb87      	cbnz	r7, 10f4a <__udivmoddi4+0x116>
   10ee8:	1a83      	subs	r3, r0, r2
   10eea:	2101      	movs	r1, #1
   10eec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10ef0:	b2aa      	uxth	r2, r5
   10ef2:	0c20      	lsrs	r0, r4, #16
   10ef4:	fbb3 fcfe 	udiv	ip, r3, lr
   10ef8:	fb0e 331c 	mls	r3, lr, ip, r3
   10efc:	fb0c f802 	mul.w	r8, ip, r2
   10f00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10f04:	4598      	cmp	r8, r3
   10f06:	d962      	bls.n	10fce <__udivmoddi4+0x19a>
   10f08:	18eb      	adds	r3, r5, r3
   10f0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   10f0e:	d204      	bcs.n	10f1a <__udivmoddi4+0xe6>
   10f10:	4598      	cmp	r8, r3
   10f12:	d902      	bls.n	10f1a <__udivmoddi4+0xe6>
   10f14:	f1ac 0002 	sub.w	r0, ip, #2
   10f18:	442b      	add	r3, r5
   10f1a:	eba3 0308 	sub.w	r3, r3, r8
   10f1e:	b2a4      	uxth	r4, r4
   10f20:	fbb3 fcfe 	udiv	ip, r3, lr
   10f24:	fb0e 331c 	mls	r3, lr, ip, r3
   10f28:	fb0c f202 	mul.w	r2, ip, r2
   10f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10f30:	42a2      	cmp	r2, r4
   10f32:	d94e      	bls.n	10fd2 <__udivmoddi4+0x19e>
   10f34:	192c      	adds	r4, r5, r4
   10f36:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   10f3a:	d204      	bcs.n	10f46 <__udivmoddi4+0x112>
   10f3c:	42a2      	cmp	r2, r4
   10f3e:	d902      	bls.n	10f46 <__udivmoddi4+0x112>
   10f40:	f1ac 0302 	sub.w	r3, ip, #2
   10f44:	442c      	add	r4, r5
   10f46:	1aa4      	subs	r4, r4, r2
   10f48:	e7be      	b.n	10ec8 <__udivmoddi4+0x94>
   10f4a:	f1c7 0c20 	rsb	ip, r7, #32
   10f4e:	40bd      	lsls	r5, r7
   10f50:	fa00 f307 	lsl.w	r3, r0, r7
   10f54:	fa20 f80c 	lsr.w	r8, r0, ip
   10f58:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10f5c:	fa24 fc0c 	lsr.w	ip, r4, ip
   10f60:	40bc      	lsls	r4, r7
   10f62:	ea4c 0203 	orr.w	r2, ip, r3
   10f66:	b2ab      	uxth	r3, r5
   10f68:	fbb8 fcfe 	udiv	ip, r8, lr
   10f6c:	0c11      	lsrs	r1, r2, #16
   10f6e:	fb0e 801c 	mls	r0, lr, ip, r8
   10f72:	fb0c f903 	mul.w	r9, ip, r3
   10f76:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   10f7a:	4581      	cmp	r9, r0
   10f7c:	d923      	bls.n	10fc6 <__udivmoddi4+0x192>
   10f7e:	1828      	adds	r0, r5, r0
   10f80:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   10f84:	d204      	bcs.n	10f90 <__udivmoddi4+0x15c>
   10f86:	4581      	cmp	r9, r0
   10f88:	d902      	bls.n	10f90 <__udivmoddi4+0x15c>
   10f8a:	f1ac 0102 	sub.w	r1, ip, #2
   10f8e:	4428      	add	r0, r5
   10f90:	eba0 0009 	sub.w	r0, r0, r9
   10f94:	b292      	uxth	r2, r2
   10f96:	fbb0 fcfe 	udiv	ip, r0, lr
   10f9a:	fb0e 001c 	mls	r0, lr, ip, r0
   10f9e:	fb0c f803 	mul.w	r8, ip, r3
   10fa2:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   10fa6:	4598      	cmp	r8, r3
   10fa8:	d90f      	bls.n	10fca <__udivmoddi4+0x196>
   10faa:	18eb      	adds	r3, r5, r3
   10fac:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   10fb0:	d204      	bcs.n	10fbc <__udivmoddi4+0x188>
   10fb2:	4598      	cmp	r8, r3
   10fb4:	d902      	bls.n	10fbc <__udivmoddi4+0x188>
   10fb6:	f1ac 0202 	sub.w	r2, ip, #2
   10fba:	442b      	add	r3, r5
   10fbc:	eba3 0308 	sub.w	r3, r3, r8
   10fc0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   10fc4:	e792      	b.n	10eec <__udivmoddi4+0xb8>
   10fc6:	4661      	mov	r1, ip
   10fc8:	e7e2      	b.n	10f90 <__udivmoddi4+0x15c>
   10fca:	4662      	mov	r2, ip
   10fcc:	e7f6      	b.n	10fbc <__udivmoddi4+0x188>
   10fce:	4660      	mov	r0, ip
   10fd0:	e7a3      	b.n	10f1a <__udivmoddi4+0xe6>
   10fd2:	4663      	mov	r3, ip
   10fd4:	e7b7      	b.n	10f46 <__udivmoddi4+0x112>
   10fd6:	4283      	cmp	r3, r0
   10fd8:	d905      	bls.n	10fe6 <__udivmoddi4+0x1b2>
   10fda:	b10e      	cbz	r6, 10fe0 <__udivmoddi4+0x1ac>
   10fdc:	e9c6 7000 	strd	r7, r0, [r6]
   10fe0:	2100      	movs	r1, #0
   10fe2:	4608      	mov	r0, r1
   10fe4:	e777      	b.n	10ed6 <__udivmoddi4+0xa2>
   10fe6:	fab3 f183 	clz	r1, r3
   10fea:	b981      	cbnz	r1, 1100e <__udivmoddi4+0x1da>
   10fec:	4283      	cmp	r3, r0
   10fee:	d301      	bcc.n	10ff4 <__udivmoddi4+0x1c0>
   10ff0:	42ba      	cmp	r2, r7
   10ff2:	d80a      	bhi.n	1100a <__udivmoddi4+0x1d6>
   10ff4:	1abc      	subs	r4, r7, r2
   10ff6:	eb60 0303 	sbc.w	r3, r0, r3
   10ffa:	2001      	movs	r0, #1
   10ffc:	469c      	mov	ip, r3
   10ffe:	2e00      	cmp	r6, #0
   11000:	d067      	beq.n	110d2 <__udivmoddi4+0x29e>
   11002:	e9c6 4c00 	strd	r4, ip, [r6]
   11006:	2100      	movs	r1, #0
   11008:	e765      	b.n	10ed6 <__udivmoddi4+0xa2>
   1100a:	4608      	mov	r0, r1
   1100c:	e7f7      	b.n	10ffe <__udivmoddi4+0x1ca>
   1100e:	f1c1 0c20 	rsb	ip, r1, #32
   11012:	408b      	lsls	r3, r1
   11014:	fa02 f501 	lsl.w	r5, r2, r1
   11018:	fa22 f40c 	lsr.w	r4, r2, ip
   1101c:	fa20 fb0c 	lsr.w	fp, r0, ip
   11020:	fa27 f20c 	lsr.w	r2, r7, ip
   11024:	408f      	lsls	r7, r1
   11026:	431c      	orrs	r4, r3
   11028:	fa00 f301 	lsl.w	r3, r0, r1
   1102c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   11030:	4313      	orrs	r3, r2
   11032:	fa1f fe84 	uxth.w	lr, r4
   11036:	0c1a      	lsrs	r2, r3, #16
   11038:	fbbb f8f9 	udiv	r8, fp, r9
   1103c:	fb09 bb18 	mls	fp, r9, r8, fp
   11040:	fb08 fa0e 	mul.w	sl, r8, lr
   11044:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   11048:	4592      	cmp	sl, r2
   1104a:	d93e      	bls.n	110ca <__udivmoddi4+0x296>
   1104c:	18a2      	adds	r2, r4, r2
   1104e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   11052:	d204      	bcs.n	1105e <__udivmoddi4+0x22a>
   11054:	4592      	cmp	sl, r2
   11056:	d902      	bls.n	1105e <__udivmoddi4+0x22a>
   11058:	f1a8 0002 	sub.w	r0, r8, #2
   1105c:	4422      	add	r2, r4
   1105e:	eba2 020a 	sub.w	r2, r2, sl
   11062:	b29b      	uxth	r3, r3
   11064:	fbb2 f8f9 	udiv	r8, r2, r9
   11068:	fb09 2218 	mls	r2, r9, r8, r2
   1106c:	fb08 fe0e 	mul.w	lr, r8, lr
   11070:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   11074:	4596      	cmp	lr, r2
   11076:	d92a      	bls.n	110ce <__udivmoddi4+0x29a>
   11078:	18a2      	adds	r2, r4, r2
   1107a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1107e:	d204      	bcs.n	1108a <__udivmoddi4+0x256>
   11080:	4596      	cmp	lr, r2
   11082:	d902      	bls.n	1108a <__udivmoddi4+0x256>
   11084:	f1a8 0302 	sub.w	r3, r8, #2
   11088:	4422      	add	r2, r4
   1108a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1108e:	eba2 020e 	sub.w	r2, r2, lr
   11092:	fba0 9305 	umull	r9, r3, r0, r5
   11096:	429a      	cmp	r2, r3
   11098:	46ce      	mov	lr, r9
   1109a:	4698      	mov	r8, r3
   1109c:	d302      	bcc.n	110a4 <__udivmoddi4+0x270>
   1109e:	d106      	bne.n	110ae <__udivmoddi4+0x27a>
   110a0:	454f      	cmp	r7, r9
   110a2:	d204      	bcs.n	110ae <__udivmoddi4+0x27a>
   110a4:	3801      	subs	r0, #1
   110a6:	ebb9 0e05 	subs.w	lr, r9, r5
   110aa:	eb63 0804 	sbc.w	r8, r3, r4
   110ae:	b186      	cbz	r6, 110d2 <__udivmoddi4+0x29e>
   110b0:	ebb7 030e 	subs.w	r3, r7, lr
   110b4:	eb62 0708 	sbc.w	r7, r2, r8
   110b8:	fa07 fc0c 	lsl.w	ip, r7, ip
   110bc:	40cb      	lsrs	r3, r1
   110be:	40cf      	lsrs	r7, r1
   110c0:	ea4c 0303 	orr.w	r3, ip, r3
   110c4:	e9c6 3700 	strd	r3, r7, [r6]
   110c8:	e79d      	b.n	11006 <__udivmoddi4+0x1d2>
   110ca:	4640      	mov	r0, r8
   110cc:	e7c7      	b.n	1105e <__udivmoddi4+0x22a>
   110ce:	4643      	mov	r3, r8
   110d0:	e7db      	b.n	1108a <__udivmoddi4+0x256>
   110d2:	4631      	mov	r1, r6
   110d4:	e6ff      	b.n	10ed6 <__udivmoddi4+0xa2>

000110d6 <strcmp>:
   110d6:	f810 2b01 	ldrb.w	r2, [r0], #1
   110da:	f811 3b01 	ldrb.w	r3, [r1], #1
   110de:	2a01      	cmp	r2, #1
   110e0:	bf28      	it	cs
   110e2:	429a      	cmpcs	r2, r3
   110e4:	d0f7      	beq.n	110d6 <strcmp>
   110e6:	1ad0      	subs	r0, r2, r3
   110e8:	4770      	bx	lr

000110ea <strlen>:
   110ea:	4603      	mov	r3, r0
   110ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   110f0:	2a00      	cmp	r2, #0
   110f2:	d1fb      	bne.n	110ec <strlen+0x2>
   110f4:	1a18      	subs	r0, r3, r0
   110f6:	3801      	subs	r0, #1
   110f8:	4770      	bx	lr
   110fa:	0000      	movs	r0, r0
   110fc:	0000      	movs	r0, r0
	...

00011100 <get_edrx_value>:
	};
	static const uint16_t edrx_lookup_nbiot[16] = {
		2, 2, 2, 4, 2, 8, 2, 2, 2, 16, 32, 64, 128, 256, 512, 1024
	};

	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   11100:	b302      	cbz	r2, 11144 <get_edrx_value+0x44>
{
   11102:	b510      	push	{r4, lr}
   11104:	4614      	mov	r4, r2
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   11106:	290f      	cmp	r1, #15
   11108:	d81f      	bhi.n	1114a <get_edrx_value+0x4a>
		return -EINVAL;
	}

	switch (lte_mode) {
   1110a:	2807      	cmp	r0, #7
   1110c:	d004      	beq.n	11118 <get_edrx_value+0x18>
   1110e:	2809      	cmp	r0, #9
   11110:	d012      	beq.n	11138 <get_edrx_value+0x38>
   11112:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11116:	e00e      	b.n	11136 <get_edrx_value+0x36>
	case LTE_LC_LTE_MODE_LTEM:
		multiplier = edrx_lookup_ltem[idx];
   11118:	4b0f      	ldr	r3, [pc, #60]	; (11158 <get_edrx_value+0x58>)
   1111a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
	default:
		return -ENOTCONN;
	}

	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1111e:	b178      	cbz	r0, 11140 <get_edrx_value+0x40>
   11120:	f7ff fa94 	bl	1064c <__aeabi_i2d>
   11124:	a30a      	add	r3, pc, #40	; (adr r3, 11150 <get_edrx_value+0x50>)
   11126:	e9d3 2300 	ldrd	r2, r3, [r3]
   1112a:	f7ff faf9 	bl	10720 <__aeabi_dmul>
   1112e:	f7ff fd09 	bl	10b44 <__aeabi_d2f>
   11132:	6020      	str	r0, [r4, #0]

	return 0;
   11134:	2000      	movs	r0, #0
}
   11136:	bd10      	pop	{r4, pc}
		multiplier = edrx_lookup_nbiot[idx];
   11138:	4b08      	ldr	r3, [pc, #32]	; (1115c <get_edrx_value+0x5c>)
   1113a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
   1113e:	e7ee      	b.n	1111e <get_edrx_value+0x1e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   11140:	4807      	ldr	r0, [pc, #28]	; (11160 <get_edrx_value+0x60>)
   11142:	e7f6      	b.n	11132 <get_edrx_value+0x32>
		return -EINVAL;
   11144:	f06f 0015 	mvn.w	r0, #21
}
   11148:	4770      	bx	lr
		return -EINVAL;
   1114a:	f06f 0015 	mvn.w	r0, #21
   1114e:	e7f2      	b.n	11136 <get_edrx_value+0x36>
   11150:	47ae147b 	.word	0x47ae147b
   11154:	40247ae1 	.word	0x40247ae1
   11158:	00027118 	.word	0x00027118
   1115c:	00027138 	.word	0x00027138
   11160:	40a3d70a 	.word	0x40a3d70a

00011164 <fds_init>:

/**@brief Initialize the file descriptor structure used by poll.
 */
static int fds_init(struct mqtt_client *c)
{
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   11164:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   11168:	b933      	cbnz	r3, 11178 <fds_init+0x14>
		fds.fd = c->transport.tcp.sock;
   1116a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1116c:	4b04      	ldr	r3, [pc, #16]	; (11180 <fds_init+0x1c>)
   1116e:	601a      	str	r2, [r3, #0]
#else
		return -ENOTSUP;
#endif
	}

	fds.events = POLLIN;
   11170:	2201      	movs	r2, #1
   11172:	809a      	strh	r2, [r3, #4]

	return 0;
   11174:	2000      	movs	r0, #0
   11176:	4770      	bx	lr
		return -ENOTSUP;
   11178:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1117c:	4770      	bx	lr
   1117e:	bf00      	nop
   11180:	2000cc20 	.word	0x2000cc20

00011184 <subscribe>:
{
   11184:	b530      	push	{r4, r5, lr}
   11186:	b087      	sub	sp, #28
	struct mqtt_topic subscribe_topic = {
   11188:	4c16      	ldr	r4, [pc, #88]	; (111e4 <subscribe+0x60>)
   1118a:	9403      	str	r4, [sp, #12]
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
   1118c:	4620      	mov	r0, r4
   1118e:	f7ff ffac 	bl	110ea <strlen>
	struct mqtt_topic subscribe_topic = {
   11192:	9004      	str	r0, [sp, #16]
   11194:	2301      	movs	r3, #1
   11196:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   1119a:	aa03      	add	r2, sp, #12
   1119c:	9201      	str	r2, [sp, #4]
   1119e:	f8ad 3008 	strh.w	r3, [sp, #8]
   111a2:	f240 43d2 	movw	r3, #1234	; 0x4d2
   111a6:	f8ad 300a 	strh.w	r3, [sp, #10]
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   111aa:	4b0f      	ldr	r3, [pc, #60]	; (111e8 <subscribe+0x64>)
   111ac:	4a0f      	ldr	r2, [pc, #60]	; (111ec <subscribe+0x68>)
   111ae:	1a9b      	subs	r3, r3, r2
   111b0:	08db      	lsrs	r3, r3, #3
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
   111b2:	f04f 0500 	mov.w	r5, #0
   111b6:	2203      	movs	r2, #3
   111b8:	f362 0502 	bfi	r5, r2, #0, #3
   111bc:	f36f 05c5 	bfc	r5, #3, #3
   111c0:	f363 158f 	bfi	r5, r3, #6, #10
   111c4:	4620      	mov	r0, r4
   111c6:	f7ff ff90 	bl	110ea <strlen>
   111ca:	4602      	mov	r2, r0
   111cc:	462b      	mov	r3, r5
   111ce:	4621      	mov	r1, r4
   111d0:	4807      	ldr	r0, [pc, #28]	; (111f0 <subscribe+0x6c>)
   111d2:	f001 ff21 	bl	13018 <log_2>
	return mqtt_subscribe(&client, &subscription_list);
   111d6:	a901      	add	r1, sp, #4
   111d8:	4806      	ldr	r0, [pc, #24]	; (111f4 <subscribe+0x70>)
   111da:	f010 faf7 	bl	217cc <mqtt_subscribe>
}
   111de:	b007      	add	sp, #28
   111e0:	bd30      	pop	{r4, r5, pc}
   111e2:	bf00      	nop
   111e4:	00025418 	.word	0x00025418
   111e8:	00025334 	.word	0x00025334
   111ec:	000252ec 	.word	0x000252ec
   111f0:	0002542c 	.word	0x0002542c
   111f4:	2000cba8 	.word	0x2000cba8

000111f8 <publish_get_payload>:
{
   111f8:	b570      	push	{r4, r5, r6, lr}
   111fa:	4605      	mov	r5, r0
   111fc:	460c      	mov	r4, r1
	if (length > sizeof(payload_buf)) {
   111fe:	2980      	cmp	r1, #128	; 0x80
   11200:	d80f      	bhi.n	11222 <publish_get_payload+0x2a>
	int err = 0;
   11202:	2600      	movs	r6, #0
   11204:	e000      	b.n	11208 <publish_get_payload+0x10>
		length -= ret;
   11206:	1a24      	subs	r4, r4, r0
	while (length > sizeof(payload_buf)) {
   11208:	2c80      	cmp	r4, #128	; 0x80
   1120a:	d90d      	bls.n	11228 <publish_get_payload+0x30>
		ret = mqtt_read_publish_payload_blocking(
   1120c:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
   11210:	490c      	ldr	r1, [pc, #48]	; (11244 <publish_get_payload+0x4c>)
   11212:	4628      	mov	r0, r5
   11214:	f010 fbcb 	bl	219ae <mqtt_read_publish_payload_blocking>
		if (ret == 0) {
   11218:	4603      	mov	r3, r0
   1121a:	b170      	cbz	r0, 1123a <publish_get_payload+0x42>
		} else if (ret < 0) {
   1121c:	2800      	cmp	r0, #0
   1121e:	daf2      	bge.n	11206 <publish_get_payload+0xe>
   11220:	e00d      	b.n	1123e <publish_get_payload+0x46>
		err = -EMSGSIZE;
   11222:	f06f 0679 	mvn.w	r6, #121	; 0x79
   11226:	e7ef      	b.n	11208 <publish_get_payload+0x10>
	ret = mqtt_readall_publish_payload(c, payload_buf, length);
   11228:	4622      	mov	r2, r4
   1122a:	4906      	ldr	r1, [pc, #24]	; (11244 <publish_get_payload+0x4c>)
   1122c:	4628      	mov	r0, r5
   1122e:	f010 fbc3 	bl	219b8 <mqtt_readall_publish_payload>
	if (ret) {
   11232:	4603      	mov	r3, r0
   11234:	b918      	cbnz	r0, 1123e <publish_get_payload+0x46>
	return err;
   11236:	4633      	mov	r3, r6
   11238:	e001      	b.n	1123e <publish_get_payload+0x46>
			return -EIO;
   1123a:	f06f 0304 	mvn.w	r3, #4
}
   1123e:	4618      	mov	r0, r3
   11240:	bd70      	pop	{r4, r5, r6, pc}
   11242:	bf00      	nop
   11244:	2000cc28 	.word	0x2000cc28

00011248 <data_print>:
{
   11248:	b5b0      	push	{r4, r5, r7, lr}
   1124a:	af00      	add	r7, sp, #0
   1124c:	4605      	mov	r5, r0
   1124e:	4614      	mov	r4, r2
	char buf[len + 1];
   11250:	f102 0308 	add.w	r3, r2, #8
   11254:	f023 0307 	bic.w	r3, r3, #7
   11258:	ebad 0d03 	sub.w	sp, sp, r3
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1125c:	4668      	mov	r0, sp
   1125e:	f013 fc35 	bl	24acc <memcpy>
	buf[len] = 0;
   11262:	2200      	movs	r2, #0
   11264:	f80d 2004 	strb.w	r2, [sp, r4]
   11268:	4b0d      	ldr	r3, [pc, #52]	; (112a0 <data_print+0x58>)
   1126a:	490e      	ldr	r1, [pc, #56]	; (112a4 <data_print+0x5c>)
   1126c:	1a5b      	subs	r3, r3, r1
   1126e:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11270:	f04f 0400 	mov.w	r4, #0
   11274:	2103      	movs	r1, #3
   11276:	f361 0402 	bfi	r4, r1, #0, #3
   1127a:	f362 04c5 	bfi	r4, r2, #3, #3
   1127e:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   11282:	4628      	mov	r0, r5
   11284:	f001 fd04 	bl	12c90 <z_log_strdup>
   11288:	4605      	mov	r5, r0
   1128a:	4668      	mov	r0, sp
   1128c:	f001 fd00 	bl	12c90 <z_log_strdup>
   11290:	4602      	mov	r2, r0
   11292:	4623      	mov	r3, r4
   11294:	4629      	mov	r1, r5
   11296:	4804      	ldr	r0, [pc, #16]	; (112a8 <data_print+0x60>)
   11298:	f001 febe 	bl	13018 <log_2>
}
   1129c:	46bd      	mov	sp, r7
   1129e:	bdb0      	pop	{r4, r5, r7, pc}
   112a0:	00025334 	.word	0x00025334
   112a4:	000252ec 	.word	0x000252ec
   112a8:	00025448 	.word	0x00025448

000112ac <data_publish>:
{
   112ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   112ae:	b087      	sub	sp, #28
   112b0:	4607      	mov	r7, r0
   112b2:	4615      	mov	r5, r2
   112b4:	461e      	mov	r6, r3
	param.message.topic.qos = qos;
   112b6:	f88d 1008 	strb.w	r1, [sp, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   112ba:	4c1c      	ldr	r4, [pc, #112]	; (1132c <data_publish+0x80>)
   112bc:	9400      	str	r4, [sp, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   112be:	4620      	mov	r0, r4
   112c0:	f7ff ff13 	bl	110ea <strlen>
   112c4:	9001      	str	r0, [sp, #4]
	param.message.payload.data = data;
   112c6:	9503      	str	r5, [sp, #12]
	param.message.payload.len = len;
   112c8:	9604      	str	r6, [sp, #16]
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   112ca:	f003 fe19 	bl	14f00 <z_impl_sys_rand32_get>
	param.message_id = sys_rand32_get();
   112ce:	f8ad 0014 	strh.w	r0, [sp, #20]
	param.dup_flag = 0;
   112d2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   112d6:	f36f 0300 	bfc	r3, #0, #1
   112da:	f88d 3016 	strb.w	r3, [sp, #22]
	param.retain_flag = 0;
   112de:	b2db      	uxtb	r3, r3
   112e0:	f36f 0341 	bfc	r3, #1, #1
   112e4:	f88d 3016 	strb.w	r3, [sp, #22]
	data_print("Publishing: ", data, len);
   112e8:	4632      	mov	r2, r6
   112ea:	4629      	mov	r1, r5
   112ec:	4810      	ldr	r0, [pc, #64]	; (11330 <data_publish+0x84>)
   112ee:	f7ff ffab 	bl	11248 <data_print>
   112f2:	4b10      	ldr	r3, [pc, #64]	; (11334 <data_publish+0x88>)
   112f4:	4a10      	ldr	r2, [pc, #64]	; (11338 <data_publish+0x8c>)
   112f6:	1a9b      	subs	r3, r3, r2
   112f8:	08db      	lsrs	r3, r3, #3
	LOG_INF("to topic: %s len: %u",
   112fa:	f04f 0500 	mov.w	r5, #0
   112fe:	2203      	movs	r2, #3
   11300:	f362 0502 	bfi	r5, r2, #0, #3
   11304:	f36f 05c5 	bfc	r5, #3, #3
   11308:	f363 158f 	bfi	r5, r3, #6, #10
   1130c:	4620      	mov	r0, r4
   1130e:	f7ff feec 	bl	110ea <strlen>
   11312:	4602      	mov	r2, r0
   11314:	462b      	mov	r3, r5
   11316:	4621      	mov	r1, r4
   11318:	4808      	ldr	r0, [pc, #32]	; (1133c <data_publish+0x90>)
   1131a:	f001 fe7d 	bl	13018 <log_2>
	return mqtt_publish(c, &param);
   1131e:	4669      	mov	r1, sp
   11320:	4638      	mov	r0, r7
   11322:	f010 f9b4 	bl	2168e <mqtt_publish>
}
   11326:	b007      	add	sp, #28
   11328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1132a:	bf00      	nop
   1132c:	00025450 	.word	0x00025450
   11330:	00025464 	.word	0x00025464
   11334:	00025334 	.word	0x00025334
   11338:	000252ec 	.word	0x000252ec
   1133c:	00025474 	.word	0x00025474

00011340 <mqtt_evt_handler>:
{
   11340:	b570      	push	{r4, r5, r6, lr}
   11342:	b082      	sub	sp, #8
   11344:	460c      	mov	r4, r1
	switch (evt->type) {
   11346:	7809      	ldrb	r1, [r1, #0]
   11348:	2909      	cmp	r1, #9
   1134a:	f200 811c 	bhi.w	11586 <mqtt_evt_handler+0x246>
   1134e:	e8df f011 	tbh	[pc, r1, lsl #1]
   11352:	000a      	.short	0x000a
   11354:	00430030 	.word	0x00430030
   11358:	011a00bb 	.word	0x011a00bb
   1135c:	011a011a 	.word	0x011a011a
   11360:	011a00e0 	.word	0x011a00e0
   11364:	0105      	.short	0x0105
		if (evt->result != 0) {
   11366:	69e1      	ldr	r1, [r4, #28]
   11368:	b181      	cbz	r1, 1138c <mqtt_evt_handler+0x4c>
   1136a:	4b8f      	ldr	r3, [pc, #572]	; (115a8 <mqtt_evt_handler+0x268>)
   1136c:	4a8f      	ldr	r2, [pc, #572]	; (115ac <mqtt_evt_handler+0x26c>)
   1136e:	1a9b      	subs	r3, r3, r2
   11370:	08db      	lsrs	r3, r3, #3
			LOG_ERR("MQTT connect failed: %d", evt->result);
   11372:	f04f 0200 	mov.w	r2, #0
   11376:	2001      	movs	r0, #1
   11378:	f360 0202 	bfi	r2, r0, #0, #3
   1137c:	f36f 02c5 	bfc	r2, #3, #3
   11380:	f363 128f 	bfi	r2, r3, #6, #10
   11384:	488a      	ldr	r0, [pc, #552]	; (115b0 <mqtt_evt_handler+0x270>)
   11386:	f001 fe15 	bl	12fb4 <log_1>
   1138a:	e023      	b.n	113d4 <mqtt_evt_handler+0x94>
   1138c:	4b86      	ldr	r3, [pc, #536]	; (115a8 <mqtt_evt_handler+0x268>)
   1138e:	4a87      	ldr	r2, [pc, #540]	; (115ac <mqtt_evt_handler+0x26c>)
   11390:	1a9b      	subs	r3, r3, r2
   11392:	08db      	lsrs	r3, r3, #3
		LOG_INF("MQTT client connected");
   11394:	f04f 0100 	mov.w	r1, #0
   11398:	2203      	movs	r2, #3
   1139a:	f362 0102 	bfi	r1, r2, #0, #3
   1139e:	f36f 01c5 	bfc	r1, #3, #3
   113a2:	f363 118f 	bfi	r1, r3, #6, #10
   113a6:	4883      	ldr	r0, [pc, #524]	; (115b4 <mqtt_evt_handler+0x274>)
   113a8:	f001 fdda 	bl	12f60 <log_0>
		subscribe();
   113ac:	f7ff feea 	bl	11184 <subscribe>
		break;
   113b0:	e010      	b.n	113d4 <mqtt_evt_handler+0x94>
   113b2:	4b7d      	ldr	r3, [pc, #500]	; (115a8 <mqtt_evt_handler+0x268>)
   113b4:	4a7d      	ldr	r2, [pc, #500]	; (115ac <mqtt_evt_handler+0x26c>)
   113b6:	1a9b      	subs	r3, r3, r2
   113b8:	08db      	lsrs	r3, r3, #3
		LOG_INF("MQTT client disconnected: %d", evt->result);
   113ba:	f04f 0200 	mov.w	r2, #0
   113be:	2103      	movs	r1, #3
   113c0:	f361 0202 	bfi	r2, r1, #0, #3
   113c4:	f36f 02c5 	bfc	r2, #3, #3
   113c8:	f363 128f 	bfi	r2, r3, #6, #10
   113cc:	69e1      	ldr	r1, [r4, #28]
   113ce:	487a      	ldr	r0, [pc, #488]	; (115b8 <mqtt_evt_handler+0x278>)
   113d0:	f001 fdf0 	bl	12fb4 <log_1>
}
   113d4:	b002      	add	sp, #8
   113d6:	bd70      	pop	{r4, r5, r6, pc}
   113d8:	4605      	mov	r5, r0
   113da:	4a73      	ldr	r2, [pc, #460]	; (115a8 <mqtt_evt_handler+0x268>)
   113dc:	4b73      	ldr	r3, [pc, #460]	; (115ac <mqtt_evt_handler+0x26c>)
   113de:	1ad2      	subs	r2, r2, r3
   113e0:	08d2      	lsrs	r2, r2, #3
		LOG_INF("MQTT PUBLISH result=%d len=%d",
   113e2:	f04f 0300 	mov.w	r3, #0
   113e6:	2103      	movs	r1, #3
   113e8:	f361 0302 	bfi	r3, r1, #0, #3
   113ec:	f36f 03c5 	bfc	r3, #3, #3
   113f0:	f362 138f 	bfi	r3, r2, #6, #10
   113f4:	6962      	ldr	r2, [r4, #20]
   113f6:	69e1      	ldr	r1, [r4, #28]
   113f8:	4870      	ldr	r0, [pc, #448]	; (115bc <mqtt_evt_handler+0x27c>)
   113fa:	f001 fe0d 	bl	13018 <log_2>
		err = publish_get_payload(c, p->message.payload.len);
   113fe:	6961      	ldr	r1, [r4, #20]
   11400:	4628      	mov	r0, r5
   11402:	f7ff fef9 	bl	111f8 <publish_get_payload>
   11406:	4606      	mov	r6, r0
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   11408:	7b23      	ldrb	r3, [r4, #12]
   1140a:	2b01      	cmp	r3, #1
   1140c:	d034      	beq.n	11478 <mqtt_evt_handler+0x138>
		if (err >= 0) {
   1140e:	2e00      	cmp	r6, #0
   11410:	da3a      	bge.n	11488 <mqtt_evt_handler+0x148>
		} else if (err == -EMSGSIZE) {
   11412:	f116 0f7a 	cmn.w	r6, #122	; 0x7a
   11416:	d044      	beq.n	114a2 <mqtt_evt_handler+0x162>
   11418:	4c63      	ldr	r4, [pc, #396]	; (115a8 <mqtt_evt_handler+0x268>)
   1141a:	4b64      	ldr	r3, [pc, #400]	; (115ac <mqtt_evt_handler+0x26c>)
   1141c:	1ae4      	subs	r4, r4, r3
   1141e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("publish_get_payload failed: %d", err);
   11420:	f04f 0200 	mov.w	r2, #0
   11424:	2301      	movs	r3, #1
   11426:	f363 0202 	bfi	r2, r3, #0, #3
   1142a:	f36f 02c5 	bfc	r2, #3, #3
   1142e:	f364 128f 	bfi	r2, r4, #6, #10
   11432:	4631      	mov	r1, r6
   11434:	4862      	ldr	r0, [pc, #392]	; (115c0 <mqtt_evt_handler+0x280>)
   11436:	f001 fdbd 	bl	12fb4 <log_1>
			LOG_INF("Disconnecting MQTT client...");
   1143a:	f04f 0100 	mov.w	r1, #0
   1143e:	2303      	movs	r3, #3
   11440:	f363 0102 	bfi	r1, r3, #0, #3
   11444:	f36f 01c5 	bfc	r1, #3, #3
   11448:	f364 118f 	bfi	r1, r4, #6, #10
   1144c:	485d      	ldr	r0, [pc, #372]	; (115c4 <mqtt_evt_handler+0x284>)
   1144e:	f001 fd87 	bl	12f60 <log_0>
			err = mqtt_disconnect(c);
   11452:	4628      	mov	r0, r5
   11454:	f010 f98c 	bl	21770 <mqtt_disconnect>
			if (err) {
   11458:	4601      	mov	r1, r0
   1145a:	2800      	cmp	r0, #0
   1145c:	d0ba      	beq.n	113d4 <mqtt_evt_handler+0x94>
				LOG_ERR("Could not disconnect: %d", err);
   1145e:	f04f 0200 	mov.w	r2, #0
   11462:	2001      	movs	r0, #1
   11464:	f360 0202 	bfi	r2, r0, #0, #3
   11468:	f36f 02c5 	bfc	r2, #3, #3
   1146c:	f364 128f 	bfi	r2, r4, #6, #10
   11470:	4855      	ldr	r0, [pc, #340]	; (115c8 <mqtt_evt_handler+0x288>)
   11472:	f001 fd9f 	bl	12fb4 <log_1>
   11476:	e7ad      	b.n	113d4 <mqtt_evt_handler+0x94>
				.message_id = p->message_id
   11478:	8b23      	ldrh	r3, [r4, #24]
			const struct mqtt_puback_param ack = {
   1147a:	f8ad 3004 	strh.w	r3, [sp, #4]
			mqtt_publish_qos1_ack(&client, &ack);
   1147e:	a901      	add	r1, sp, #4
   11480:	4852      	ldr	r0, [pc, #328]	; (115cc <mqtt_evt_handler+0x28c>)
   11482:	f010 f947 	bl	21714 <mqtt_publish_qos1_ack>
   11486:	e7c2      	b.n	1140e <mqtt_evt_handler+0xce>
			data_print("Received: ", payload_buf,
   11488:	4d51      	ldr	r5, [pc, #324]	; (115d0 <mqtt_evt_handler+0x290>)
   1148a:	6962      	ldr	r2, [r4, #20]
   1148c:	4629      	mov	r1, r5
   1148e:	4851      	ldr	r0, [pc, #324]	; (115d4 <mqtt_evt_handler+0x294>)
   11490:	f7ff feda 	bl	11248 <data_print>
			data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
   11494:	6963      	ldr	r3, [r4, #20]
   11496:	462a      	mov	r2, r5
   11498:	2101      	movs	r1, #1
   1149a:	484c      	ldr	r0, [pc, #304]	; (115cc <mqtt_evt_handler+0x28c>)
   1149c:	f7ff ff06 	bl	112ac <data_publish>
   114a0:	e798      	b.n	113d4 <mqtt_evt_handler+0x94>
   114a2:	4a41      	ldr	r2, [pc, #260]	; (115a8 <mqtt_evt_handler+0x268>)
   114a4:	4b41      	ldr	r3, [pc, #260]	; (115ac <mqtt_evt_handler+0x26c>)
   114a6:	1ad2      	subs	r2, r2, r3
   114a8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Received payload (%d bytes) is larger than the payload buffer "
   114aa:	f04f 0300 	mov.w	r3, #0
   114ae:	2101      	movs	r1, #1
   114b0:	f361 0302 	bfi	r3, r1, #0, #3
   114b4:	f36f 03c5 	bfc	r3, #3, #3
   114b8:	f362 138f 	bfi	r3, r2, #6, #10
   114bc:	2280      	movs	r2, #128	; 0x80
   114be:	6961      	ldr	r1, [r4, #20]
   114c0:	4845      	ldr	r0, [pc, #276]	; (115d8 <mqtt_evt_handler+0x298>)
   114c2:	f001 fda9 	bl	13018 <log_2>
   114c6:	e785      	b.n	113d4 <mqtt_evt_handler+0x94>
		if (evt->result != 0) {
   114c8:	69e1      	ldr	r1, [r4, #28]
   114ca:	b181      	cbz	r1, 114ee <mqtt_evt_handler+0x1ae>
   114cc:	4b36      	ldr	r3, [pc, #216]	; (115a8 <mqtt_evt_handler+0x268>)
   114ce:	4a37      	ldr	r2, [pc, #220]	; (115ac <mqtt_evt_handler+0x26c>)
   114d0:	1a9b      	subs	r3, r3, r2
   114d2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
   114d4:	f04f 0200 	mov.w	r2, #0
   114d8:	2001      	movs	r0, #1
   114da:	f360 0202 	bfi	r2, r0, #0, #3
   114de:	f36f 02c5 	bfc	r2, #3, #3
   114e2:	f363 128f 	bfi	r2, r3, #6, #10
   114e6:	483d      	ldr	r0, [pc, #244]	; (115dc <mqtt_evt_handler+0x29c>)
   114e8:	f001 fd64 	bl	12fb4 <log_1>
   114ec:	e772      	b.n	113d4 <mqtt_evt_handler+0x94>
   114ee:	4b2e      	ldr	r3, [pc, #184]	; (115a8 <mqtt_evt_handler+0x268>)
   114f0:	4a2e      	ldr	r2, [pc, #184]	; (115ac <mqtt_evt_handler+0x26c>)
   114f2:	1a9b      	subs	r3, r3, r2
   114f4:	08db      	lsrs	r3, r3, #3
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
   114f6:	f04f 0200 	mov.w	r2, #0
   114fa:	2103      	movs	r1, #3
   114fc:	f361 0202 	bfi	r2, r1, #0, #3
   11500:	f36f 02c5 	bfc	r2, #3, #3
   11504:	f363 128f 	bfi	r2, r3, #6, #10
   11508:	88a1      	ldrh	r1, [r4, #4]
   1150a:	4835      	ldr	r0, [pc, #212]	; (115e0 <mqtt_evt_handler+0x2a0>)
   1150c:	f001 fd52 	bl	12fb4 <log_1>
   11510:	e760      	b.n	113d4 <mqtt_evt_handler+0x94>
		if (evt->result != 0) {
   11512:	69e1      	ldr	r1, [r4, #28]
   11514:	b181      	cbz	r1, 11538 <mqtt_evt_handler+0x1f8>
   11516:	4b24      	ldr	r3, [pc, #144]	; (115a8 <mqtt_evt_handler+0x268>)
   11518:	4a24      	ldr	r2, [pc, #144]	; (115ac <mqtt_evt_handler+0x26c>)
   1151a:	1a9b      	subs	r3, r3, r2
   1151c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
   1151e:	f04f 0200 	mov.w	r2, #0
   11522:	2001      	movs	r0, #1
   11524:	f360 0202 	bfi	r2, r0, #0, #3
   11528:	f36f 02c5 	bfc	r2, #3, #3
   1152c:	f363 128f 	bfi	r2, r3, #6, #10
   11530:	482c      	ldr	r0, [pc, #176]	; (115e4 <mqtt_evt_handler+0x2a4>)
   11532:	f001 fd3f 	bl	12fb4 <log_1>
   11536:	e74d      	b.n	113d4 <mqtt_evt_handler+0x94>
   11538:	4b1b      	ldr	r3, [pc, #108]	; (115a8 <mqtt_evt_handler+0x268>)
   1153a:	4a1c      	ldr	r2, [pc, #112]	; (115ac <mqtt_evt_handler+0x26c>)
   1153c:	1a9b      	subs	r3, r3, r2
   1153e:	08db      	lsrs	r3, r3, #3
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
   11540:	f04f 0200 	mov.w	r2, #0
   11544:	2103      	movs	r1, #3
   11546:	f361 0202 	bfi	r2, r1, #0, #3
   1154a:	f36f 02c5 	bfc	r2, #3, #3
   1154e:	f363 128f 	bfi	r2, r3, #6, #10
   11552:	88a1      	ldrh	r1, [r4, #4]
   11554:	4824      	ldr	r0, [pc, #144]	; (115e8 <mqtt_evt_handler+0x2a8>)
   11556:	f001 fd2d 	bl	12fb4 <log_1>
   1155a:	e73b      	b.n	113d4 <mqtt_evt_handler+0x94>
		if (evt->result != 0) {
   1155c:	69e1      	ldr	r1, [r4, #28]
   1155e:	2900      	cmp	r1, #0
   11560:	f43f af38 	beq.w	113d4 <mqtt_evt_handler+0x94>
   11564:	4b10      	ldr	r3, [pc, #64]	; (115a8 <mqtt_evt_handler+0x268>)
   11566:	4a11      	ldr	r2, [pc, #68]	; (115ac <mqtt_evt_handler+0x26c>)
   11568:	1a9b      	subs	r3, r3, r2
   1156a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
   1156c:	f04f 0200 	mov.w	r2, #0
   11570:	2001      	movs	r0, #1
   11572:	f360 0202 	bfi	r2, r0, #0, #3
   11576:	f36f 02c5 	bfc	r2, #3, #3
   1157a:	f363 128f 	bfi	r2, r3, #6, #10
   1157e:	481b      	ldr	r0, [pc, #108]	; (115ec <mqtt_evt_handler+0x2ac>)
   11580:	f001 fd18 	bl	12fb4 <log_1>
   11584:	e726      	b.n	113d4 <mqtt_evt_handler+0x94>
   11586:	4b08      	ldr	r3, [pc, #32]	; (115a8 <mqtt_evt_handler+0x268>)
   11588:	4a08      	ldr	r2, [pc, #32]	; (115ac <mqtt_evt_handler+0x26c>)
   1158a:	1a9b      	subs	r3, r3, r2
   1158c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
   1158e:	f04f 0200 	mov.w	r2, #0
   11592:	2003      	movs	r0, #3
   11594:	f360 0202 	bfi	r2, r0, #0, #3
   11598:	f36f 02c5 	bfc	r2, #3, #3
   1159c:	f363 128f 	bfi	r2, r3, #6, #10
   115a0:	4813      	ldr	r0, [pc, #76]	; (115f0 <mqtt_evt_handler+0x2b0>)
   115a2:	f001 fd07 	bl	12fb4 <log_1>
}
   115a6:	e715      	b.n	113d4 <mqtt_evt_handler+0x94>
   115a8:	00025334 	.word	0x00025334
   115ac:	000252ec 	.word	0x000252ec
   115b0:	0002548c 	.word	0x0002548c
   115b4:	000254a4 	.word	0x000254a4
   115b8:	000254bc 	.word	0x000254bc
   115bc:	000254dc 	.word	0x000254dc
   115c0:	00025558 	.word	0x00025558
   115c4:	00025578 	.word	0x00025578
   115c8:	00025598 	.word	0x00025598
   115cc:	2000cba8 	.word	0x2000cba8
   115d0:	2000cc28 	.word	0x2000cc28
   115d4:	000254fc 	.word	0x000254fc
   115d8:	00025508 	.word	0x00025508
   115dc:	000255b4 	.word	0x000255b4
   115e0:	000255cc 	.word	0x000255cc
   115e4:	000255e4 	.word	0x000255e4
   115e8:	000255fc 	.word	0x000255fc
   115ec:	00025614 	.word	0x00025614
   115f0:	0002562c 	.word	0x0002562c

000115f4 <button_handler>:

#if defined(CONFIG_DK_LIBRARY)
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states &
   115f4:	4001      	ands	r1, r0
   115f6:	f011 0f01 	tst.w	r1, #1
   115fa:	d100      	bne.n	115fe <button_handler+0xa>
   115fc:	4770      	bx	lr
{
   115fe:	b508      	push	{r3, lr}
	    BIT(CONFIG_BUTTON_EVENT_BTN_NUM - 1)) {
		int ret;

		ret = data_publish(&client,
   11600:	2323      	movs	r3, #35	; 0x23
   11602:	4a0c      	ldr	r2, [pc, #48]	; (11634 <button_handler+0x40>)
   11604:	2101      	movs	r1, #1
   11606:	480c      	ldr	r0, [pc, #48]	; (11638 <button_handler+0x44>)
   11608:	f7ff fe50 	bl	112ac <data_publish>
				   MQTT_QOS_1_AT_LEAST_ONCE,
				   CONFIG_BUTTON_EVENT_PUBLISH_MSG,
				   sizeof(CONFIG_BUTTON_EVENT_PUBLISH_MSG)-1);
		if (ret) {
   1160c:	4601      	mov	r1, r0
   1160e:	b900      	cbnz	r0, 11612 <button_handler+0x1e>
			LOG_ERR("Publish failed: %d", ret);
		}
	}
}
   11610:	bd08      	pop	{r3, pc}
   11612:	4b0a      	ldr	r3, [pc, #40]	; (1163c <button_handler+0x48>)
   11614:	4a0a      	ldr	r2, [pc, #40]	; (11640 <button_handler+0x4c>)
   11616:	1a9b      	subs	r3, r3, r2
   11618:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Publish failed: %d", ret);
   1161a:	f04f 0200 	mov.w	r2, #0
   1161e:	2001      	movs	r0, #1
   11620:	f360 0202 	bfi	r2, r0, #0, #3
   11624:	f36f 02c5 	bfc	r2, #3, #3
   11628:	f363 128f 	bfi	r2, r3, #6, #10
   1162c:	4805      	ldr	r0, [pc, #20]	; (11644 <button_handler+0x50>)
   1162e:	f001 fcc1 	bl	12fb4 <log_1>
}
   11632:	e7ed      	b.n	11610 <button_handler+0x1c>
   11634:	0002564c 	.word	0x0002564c
   11638:	2000cba8 	.word	0x2000cba8
   1163c:	00025334 	.word	0x00025334
   11640:	000252ec 	.word	0x000252ec
   11644:	00025670 	.word	0x00025670

00011648 <modem_configure>:

/**@brief Configures modem to provide LTE link. Blocks until link is
 * successfully established.
 */
static int modem_configure(void)
{
   11648:	b538      	push	{r3, r4, r5, lr}
   1164a:	4c24      	ldr	r4, [pc, #144]	; (116dc <modem_configure+0x94>)
   1164c:	4b24      	ldr	r3, [pc, #144]	; (116e0 <modem_configure+0x98>)
   1164e:	1ae4      	subs	r4, r4, r3
   11650:	08e4      	lsrs	r4, r4, #3
	/* Turn off LTE power saving features for a more responsive demo. Also,
	 * request power saving features before network registration. Some
	 * networks rejects timer updates after the device has registered to the
	 * LTE network.
	 */
	LOG_INF("Disabling PSM and eDRX");
   11652:	2503      	movs	r5, #3
   11654:	f04f 0100 	mov.w	r1, #0
   11658:	f365 0102 	bfi	r1, r5, #0, #3
   1165c:	f36f 01c5 	bfc	r1, #3, #3
   11660:	f364 118f 	bfi	r1, r4, #6, #10
   11664:	481f      	ldr	r0, [pc, #124]	; (116e4 <modem_configure+0x9c>)
   11666:	f001 fc7b 	bl	12f60 <log_0>
	lte_lc_psm_req(false);
   1166a:	2000      	movs	r0, #0
   1166c:	f005 ff92 	bl	17594 <lte_lc_psm_req>
	lte_lc_edrx_req(false);
   11670:	2000      	movs	r0, #0
   11672:	f006 f98b 	bl	1798c <lte_lc_edrx_req>
		k_sem_take(&carrier_registered, K_FOREVER);
		LOG_INF("Registered!");
#else /* defined(CONFIG_LWM2M_CARRIER) */
		int err;

		LOG_INF("LTE Link Connecting...");
   11676:	f04f 0100 	mov.w	r1, #0
   1167a:	f365 0102 	bfi	r1, r5, #0, #3
   1167e:	f36f 01c5 	bfc	r1, #3, #3
   11682:	f364 118f 	bfi	r1, r4, #6, #10
   11686:	4818      	ldr	r0, [pc, #96]	; (116e8 <modem_configure+0xa0>)
   11688:	f001 fc6a 	bl	12f60 <log_0>
		err = lte_lc_init_and_connect();
   1168c:	f011 fc7e 	bl	22f8c <lte_lc_init_and_connect>
		if (err) {
   11690:	4604      	mov	r4, r0
   11692:	b988      	cbnz	r0, 116b8 <modem_configure+0x70>
   11694:	4b11      	ldr	r3, [pc, #68]	; (116dc <modem_configure+0x94>)
   11696:	4a12      	ldr	r2, [pc, #72]	; (116e0 <modem_configure+0x98>)
   11698:	1a9b      	subs	r3, r3, r2
   1169a:	08db      	lsrs	r3, r3, #3
			LOG_INF("Failed to establish LTE connection: %d", err);
			return err;
		}
		LOG_INF("LTE Link Connected!");
   1169c:	f04f 0100 	mov.w	r1, #0
   116a0:	2203      	movs	r2, #3
   116a2:	f362 0102 	bfi	r1, r2, #0, #3
   116a6:	f36f 01c5 	bfc	r1, #3, #3
   116aa:	f363 118f 	bfi	r1, r3, #6, #10
   116ae:	480f      	ldr	r0, [pc, #60]	; (116ec <modem_configure+0xa4>)
   116b0:	f001 fc56 	bl	12f60 <log_0>
#endif /* defined(CONFIG_LWM2M_CARRIER) */
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

	return 0;
}
   116b4:	4620      	mov	r0, r4
   116b6:	bd38      	pop	{r3, r4, r5, pc}
   116b8:	4b08      	ldr	r3, [pc, #32]	; (116dc <modem_configure+0x94>)
   116ba:	4a09      	ldr	r2, [pc, #36]	; (116e0 <modem_configure+0x98>)
   116bc:	1a9b      	subs	r3, r3, r2
   116be:	40eb      	lsrs	r3, r5
			LOG_INF("Failed to establish LTE connection: %d", err);
   116c0:	f04f 0200 	mov.w	r2, #0
   116c4:	f365 0202 	bfi	r2, r5, #0, #3
   116c8:	f36f 02c5 	bfc	r2, #3, #3
   116cc:	f363 128f 	bfi	r2, r3, #6, #10
   116d0:	4601      	mov	r1, r0
   116d2:	4807      	ldr	r0, [pc, #28]	; (116f0 <modem_configure+0xa8>)
   116d4:	f001 fc6e 	bl	12fb4 <log_1>
			return err;
   116d8:	e7ec      	b.n	116b4 <modem_configure+0x6c>
   116da:	bf00      	nop
   116dc:	00025334 	.word	0x00025334
   116e0:	000252ec 	.word	0x000252ec
   116e4:	00025684 	.word	0x00025684
   116e8:	0002569c 	.word	0x0002569c
   116ec:	000256dc 	.word	0x000256dc
   116f0:	000256b4 	.word	0x000256b4

000116f4 <broker_init>:
{
   116f4:	b570      	push	{r4, r5, r6, lr}
   116f6:	b09c      	sub	sp, #112	; 0x70
	struct addrinfo hints = {
   116f8:	2250      	movs	r2, #80	; 0x50
   116fa:	2100      	movs	r1, #0
   116fc:	a807      	add	r0, sp, #28
   116fe:	f013 f9f2 	bl	24ae6 <memset>
   11702:	2301      	movs	r3, #1
   11704:	9309      	str	r3, [sp, #36]	; 0x24
   11706:	930a      	str	r3, [sp, #40]	; 0x28

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11708:	ab1b      	add	r3, sp, #108	; 0x6c
   1170a:	aa07      	add	r2, sp, #28
   1170c:	2100      	movs	r1, #0
   1170e:	482e      	ldr	r0, [pc, #184]	; (117c8 <broker_init+0xd4>)
   11710:	f00e ff63 	bl	205da <zsock_getaddrinfo>
	if (err) {
   11714:	4606      	mov	r6, r0
   11716:	b9c8      	cbnz	r0, 1174c <broker_init+0x58>
	addr = result;
   11718:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
	while (addr != NULL) {
   1171a:	2c00      	cmp	r4, #0
   1171c:	d04d      	beq.n	117ba <broker_init+0xc6>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   1171e:	6961      	ldr	r1, [r4, #20]
   11720:	2908      	cmp	r1, #8
   11722:	d027      	beq.n	11774 <broker_init+0x80>
   11724:	4b29      	ldr	r3, [pc, #164]	; (117cc <broker_init+0xd8>)
   11726:	4a2a      	ldr	r2, [pc, #168]	; (117d0 <broker_init+0xdc>)
   11728:	1a9b      	subs	r3, r3, r2
   1172a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("ai_addrlen = %u should be %u or %u",
   1172c:	2201      	movs	r2, #1
   1172e:	f362 0502 	bfi	r5, r2, #0, #3
   11732:	f36f 05c5 	bfc	r5, #3, #3
   11736:	f363 158f 	bfi	r5, r3, #6, #10
   1173a:	f8ad 5000 	strh.w	r5, [sp]
   1173e:	2318      	movs	r3, #24
   11740:	2208      	movs	r2, #8
   11742:	4824      	ldr	r0, [pc, #144]	; (117d4 <broker_init+0xe0>)
   11744:	f001 fbd2 	bl	12eec <log_3>
		addr = addr->ai_next;
   11748:	6824      	ldr	r4, [r4, #0]
   1174a:	e7e6      	b.n	1171a <broker_init+0x26>
   1174c:	4b1f      	ldr	r3, [pc, #124]	; (117cc <broker_init+0xd8>)
   1174e:	4a20      	ldr	r2, [pc, #128]	; (117d0 <broker_init+0xdc>)
   11750:	1a9b      	subs	r3, r3, r2
   11752:	08db      	lsrs	r3, r3, #3
		LOG_ERR("getaddrinfo failed: %d", err);
   11754:	f04f 0200 	mov.w	r2, #0
   11758:	2101      	movs	r1, #1
   1175a:	f361 0202 	bfi	r2, r1, #0, #3
   1175e:	f36f 02c5 	bfc	r2, #3, #3
   11762:	f363 128f 	bfi	r2, r3, #6, #10
   11766:	4601      	mov	r1, r0
   11768:	481b      	ldr	r0, [pc, #108]	; (117d8 <broker_init+0xe4>)
   1176a:	f001 fc23 	bl	12fb4 <log_1>
		return -ECHILD;
   1176e:	f06f 0609 	mvn.w	r6, #9
   11772:	e025      	b.n	117c0 <broker_init+0xcc>
				((struct sockaddr_in *)addr->ai_addr)
   11774:	69a3      	ldr	r3, [r4, #24]
				->sin_addr.s_addr;
   11776:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11778:	4918      	ldr	r1, [pc, #96]	; (117dc <broker_init+0xe8>)
   1177a:	604b      	str	r3, [r1, #4]
			broker4->sin_family = AF_INET;
   1177c:	2001      	movs	r0, #1
   1177e:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11780:	f645 3307 	movw	r3, #23303	; 0x5b07
   11784:	804b      	strh	r3, [r1, #2]
		/* coverity[OVERRUN] */
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11786:	2310      	movs	r3, #16
   11788:	aa03      	add	r2, sp, #12
   1178a:	3104      	adds	r1, #4
   1178c:	f00f f924 	bl	209d8 <z_impl_net_addr_ntop>
   11790:	4b0e      	ldr	r3, [pc, #56]	; (117cc <broker_init+0xd8>)
   11792:	4a0f      	ldr	r2, [pc, #60]	; (117d0 <broker_init+0xdc>)
   11794:	1a9b      	subs	r3, r3, r2
   11796:	08db      	lsrs	r3, r3, #3
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
   11798:	f04f 0400 	mov.w	r4, #0
   1179c:	2203      	movs	r2, #3
   1179e:	f362 0402 	bfi	r4, r2, #0, #3
   117a2:	f36f 04c5 	bfc	r4, #3, #3
   117a6:	f363 148f 	bfi	r4, r3, #6, #10
   117aa:	a803      	add	r0, sp, #12
   117ac:	f001 fa70 	bl	12c90 <z_log_strdup>
   117b0:	4601      	mov	r1, r0
   117b2:	4622      	mov	r2, r4
   117b4:	480a      	ldr	r0, [pc, #40]	; (117e0 <broker_init+0xec>)
   117b6:	f001 fbfd 	bl	12fb4 <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   117ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
   117bc:	f00e ff11 	bl	205e2 <zsock_freeaddrinfo>
}
   117c0:	4630      	mov	r0, r6
   117c2:	b01c      	add	sp, #112	; 0x70
   117c4:	bd70      	pop	{r4, r5, r6, pc}
   117c6:	bf00      	nop
   117c8:	000256f0 	.word	0x000256f0
   117cc:	00025334 	.word	0x00025334
   117d0:	000252ec 	.word	0x000252ec
   117d4:	00025738 	.word	0x00025738
   117d8:	00025708 	.word	0x00025708
   117dc:	2000cb90 	.word	0x2000cb90
   117e0:	00025720 	.word	0x00025720

000117e4 <client_id_get>:
{
   117e4:	b530      	push	{r4, r5, lr}
   117e6:	b089      	sub	sp, #36	; 0x24
	if (strlen(CONFIG_MQTT_CLIENT_ID) > 0) {
   117e8:	4822      	ldr	r0, [pc, #136]	; (11874 <client_id_get+0x90>)
   117ea:	f7ff fc7e 	bl	110ea <strlen>
   117ee:	bb58      	cbnz	r0, 11848 <client_id_get+0x64>
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   117f0:	4a21      	ldr	r2, [pc, #132]	; (11878 <client_id_get+0x94>)
   117f2:	2117      	movs	r1, #23
   117f4:	a802      	add	r0, sp, #8
   117f6:	f00a fdd3 	bl	1c3a0 <nrf_modem_at_cmd>
	if (err) {
   117fa:	4601      	mov	r1, r0
   117fc:	bb40      	cbnz	r0, 11850 <client_id_get+0x6c>
	imei_buf[IMEI_LEN] = '\0';
   117fe:	2300      	movs	r3, #0
   11800:	f88d 3017 	strb.w	r3, [sp, #23]
	snprintf(client_id, sizeof(client_id), "nrf-%.*s", IMEI_LEN, imei_buf);
   11804:	ab02      	add	r3, sp, #8
   11806:	9300      	str	r3, [sp, #0]
   11808:	230f      	movs	r3, #15
   1180a:	4a1c      	ldr	r2, [pc, #112]	; (1187c <client_id_get+0x98>)
   1180c:	2114      	movs	r1, #20
   1180e:	481c      	ldr	r0, [pc, #112]	; (11880 <client_id_get+0x9c>)
   11810:	f00d f906 	bl	1ea20 <sniprintf>
   11814:	4b1b      	ldr	r3, [pc, #108]	; (11884 <client_id_get+0xa0>)
   11816:	4a1c      	ldr	r2, [pc, #112]	; (11888 <client_id_get+0xa4>)
   11818:	1a9b      	subs	r3, r3, r2
   1181a:	08db      	lsrs	r3, r3, #3
	LOG_DBG("client_id = %s", log_strdup(client_id));
   1181c:	f04f 0400 	mov.w	r4, #0
   11820:	2204      	movs	r2, #4
   11822:	f362 0402 	bfi	r4, r2, #0, #3
   11826:	f36f 04c5 	bfc	r4, #3, #3
   1182a:	f363 148f 	bfi	r4, r3, #6, #10
   1182e:	4d14      	ldr	r5, [pc, #80]	; (11880 <client_id_get+0x9c>)
   11830:	4628      	mov	r0, r5
   11832:	f001 fa2d 	bl	12c90 <z_log_strdup>
   11836:	4602      	mov	r2, r0
   11838:	4623      	mov	r3, r4
   1183a:	4914      	ldr	r1, [pc, #80]	; (1188c <client_id_get+0xa8>)
   1183c:	4814      	ldr	r0, [pc, #80]	; (11890 <client_id_get+0xac>)
   1183e:	f001 fbeb 	bl	13018 <log_2>
}
   11842:	4628      	mov	r0, r5
   11844:	b009      	add	sp, #36	; 0x24
   11846:	bd30      	pop	{r4, r5, pc}
		snprintf(client_id, sizeof(client_id), "%s",
   11848:	4b0d      	ldr	r3, [pc, #52]	; (11880 <client_id_get+0x9c>)
   1184a:	2200      	movs	r2, #0
   1184c:	701a      	strb	r2, [r3, #0]
		goto exit;
   1184e:	e7e1      	b.n	11814 <client_id_get+0x30>
   11850:	4b0c      	ldr	r3, [pc, #48]	; (11884 <client_id_get+0xa0>)
   11852:	4a0d      	ldr	r2, [pc, #52]	; (11888 <client_id_get+0xa4>)
   11854:	1a9b      	subs	r3, r3, r2
   11856:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   11858:	f04f 0200 	mov.w	r2, #0
   1185c:	2001      	movs	r0, #1
   1185e:	f360 0202 	bfi	r2, r0, #0, #3
   11862:	f36f 02c5 	bfc	r2, #3, #3
   11866:	f363 128f 	bfi	r2, r3, #6, #10
   1186a:	480a      	ldr	r0, [pc, #40]	; (11894 <client_id_get+0xb0>)
   1186c:	f001 fba2 	bl	12fb4 <log_1>
		goto exit;
   11870:	e7d0      	b.n	11814 <client_id_get+0x30>
   11872:	bf00      	nop
   11874:	00027214 	.word	0x00027214
   11878:	0002575c 	.word	0x0002575c
   1187c:	00025788 	.word	0x00025788
   11880:	2000cc0c 	.word	0x2000cc0c
   11884:	00025334 	.word	0x00025334
   11888:	000252ec 	.word	0x000252ec
   1188c:	000258f8 	.word	0x000258f8
   11890:	00025794 	.word	0x00025794
   11894:	00025764 	.word	0x00025764

00011898 <client_init>:
{
   11898:	b538      	push	{r3, r4, r5, lr}
   1189a:	4604      	mov	r4, r0
	mqtt_client_init(client);
   1189c:	f00f feb5 	bl	2160a <mqtt_client_init>
	err = broker_init();
   118a0:	f7ff ff28 	bl	116f4 <broker_init>
	if (err) {
   118a4:	4605      	mov	r5, r0
   118a6:	b9d0      	cbnz	r0, 118de <client_init+0x46>
	client->broker = &broker;
   118a8:	4b15      	ldr	r3, [pc, #84]	; (11900 <client_init+0x68>)
   118aa:	6363      	str	r3, [r4, #52]	; 0x34
	client->evt_cb = mqtt_evt_handler;
   118ac:	4b15      	ldr	r3, [pc, #84]	; (11904 <client_init+0x6c>)
   118ae:	64a3      	str	r3, [r4, #72]	; 0x48
	client->client_id.utf8 = client_id_get();
   118b0:	f7ff ff98 	bl	117e4 <client_id_get>
   118b4:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(client->client_id.utf8);
   118b6:	f7ff fc18 	bl	110ea <strlen>
   118ba:	6320      	str	r0, [r4, #48]	; 0x30
	client->password = NULL;
   118bc:	2300      	movs	r3, #0
   118be:	63e3      	str	r3, [r4, #60]	; 0x3c
	client->user_name = NULL;
   118c0:	63a3      	str	r3, [r4, #56]	; 0x38
	client->protocol_version = MQTT_VERSION_3_1_1;
   118c2:	2204      	movs	r2, #4
   118c4:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   118c8:	4a0f      	ldr	r2, [pc, #60]	; (11908 <client_init+0x70>)
   118ca:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   118cc:	2280      	movs	r2, #128	; 0x80
   118ce:	6522      	str	r2, [r4, #80]	; 0x50
	client->tx_buf = tx_buffer;
   118d0:	490e      	ldr	r1, [pc, #56]	; (1190c <client_init+0x74>)
   118d2:	6561      	str	r1, [r4, #84]	; 0x54
	client->tx_buf_size = sizeof(tx_buffer);
   118d4:	65a2      	str	r2, [r4, #88]	; 0x58
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   118d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
   118da:	4628      	mov	r0, r5
   118dc:	bd38      	pop	{r3, r4, r5, pc}
   118de:	4b0c      	ldr	r3, [pc, #48]	; (11910 <client_init+0x78>)
   118e0:	4a0c      	ldr	r2, [pc, #48]	; (11914 <client_init+0x7c>)
   118e2:	1a9b      	subs	r3, r3, r2
   118e4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize broker connection");
   118e6:	f04f 0100 	mov.w	r1, #0
   118ea:	2201      	movs	r2, #1
   118ec:	f362 0102 	bfi	r1, r2, #0, #3
   118f0:	f36f 01c5 	bfc	r1, #3, #3
   118f4:	f363 118f 	bfi	r1, r3, #6, #10
   118f8:	4807      	ldr	r0, [pc, #28]	; (11918 <client_init+0x80>)
   118fa:	f001 fb31 	bl	12f60 <log_0>
		return err;
   118fe:	e7ec      	b.n	118da <client_init+0x42>
   11900:	2000cb90 	.word	0x2000cb90
   11904:	00011341 	.word	0x00011341
   11908:	2000cca8 	.word	0x2000cca8
   1190c:	2000cd28 	.word	0x2000cd28
   11910:	00025334 	.word	0x00025334
   11914:	000252ec 	.word	0x000252ec
   11918:	000257a8 	.word	0x000257a8

0001191c <nrf_modem_recoverable_error_handler>:
{
   1191c:	b508      	push	{r3, lr}
   1191e:	4601      	mov	r1, r0
   11920:	4b08      	ldr	r3, [pc, #32]	; (11944 <nrf_modem_recoverable_error_handler+0x28>)
   11922:	4a09      	ldr	r2, [pc, #36]	; (11948 <nrf_modem_recoverable_error_handler+0x2c>)
   11924:	1a9b      	subs	r3, r3, r2
   11926:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Modem library recoverable error: %u", (unsigned int)err);
   11928:	f04f 0200 	mov.w	r2, #0
   1192c:	2001      	movs	r0, #1
   1192e:	f360 0202 	bfi	r2, r0, #0, #3
   11932:	f36f 02c5 	bfc	r2, #3, #3
   11936:	f363 128f 	bfi	r2, r3, #6, #10
   1193a:	4804      	ldr	r0, [pc, #16]	; (1194c <nrf_modem_recoverable_error_handler+0x30>)
   1193c:	f001 fb3a 	bl	12fb4 <log_1>
}
   11940:	bd08      	pop	{r3, pc}
   11942:	bf00      	nop
   11944:	00025334 	.word	0x00025334
   11948:	000252ec 	.word	0x000252ec
   1194c:	000257d0 	.word	0x000257d0

00011950 <main>:

void main(void)
{
   11950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	b085      	sub	sp, #20
   11956:	4b9c      	ldr	r3, [pc, #624]	; (11bc8 <main+0x278>)
   11958:	4a9c      	ldr	r2, [pc, #624]	; (11bcc <main+0x27c>)
   1195a:	1a9b      	subs	r3, r3, r2
   1195c:	08db      	lsrs	r3, r3, #3
	int err;
	uint32_t connect_attempt = 0;

	LOG_INF("The MQTT simple sample started");
   1195e:	f04f 0100 	mov.w	r1, #0
   11962:	2203      	movs	r2, #3
   11964:	f362 0102 	bfi	r1, r2, #0, #3
   11968:	f36f 01c5 	bfc	r1, #3, #3
   1196c:	f363 118f 	bfi	r1, r3, #6, #10
   11970:	4897      	ldr	r0, [pc, #604]	; (11bd0 <main+0x280>)
   11972:	f001 faf5 	bl	12f60 <log_0>
   11976:	e000      	b.n	1197a <main+0x2a>
		if (err) {
			LOG_INF("Retrying in %d seconds",
				CONFIG_LTE_CONNECT_RETRY_DELAY_S);
			k_sleep(K_SECONDS(CONFIG_LTE_CONNECT_RETRY_DELAY_S));
		}
	} while (err);
   11978:	b1d4      	cbz	r4, 119b0 <main+0x60>
		err = modem_configure();
   1197a:	f7ff fe65 	bl	11648 <modem_configure>
		if (err) {
   1197e:	4604      	mov	r4, r0
   11980:	2800      	cmp	r0, #0
   11982:	d0f9      	beq.n	11978 <main+0x28>
   11984:	4b90      	ldr	r3, [pc, #576]	; (11bc8 <main+0x278>)
   11986:	4a91      	ldr	r2, [pc, #580]	; (11bcc <main+0x27c>)
   11988:	1a9b      	subs	r3, r3, r2
   1198a:	08db      	lsrs	r3, r3, #3
			LOG_INF("Retrying in %d seconds",
   1198c:	2203      	movs	r2, #3
   1198e:	f362 0602 	bfi	r6, r2, #0, #3
   11992:	f36f 06c5 	bfc	r6, #3, #3
   11996:	f363 168f 	bfi	r6, r3, #6, #10
   1199a:	4632      	mov	r2, r6
   1199c:	2178      	movs	r1, #120	; 0x78
   1199e:	488d      	ldr	r0, [pc, #564]	; (11bd4 <main+0x284>)
   119a0:	f001 fb08 	bl	12fb4 <log_1>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   119a4:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
   119a8:	2100      	movs	r1, #0
   119aa:	f00c f9db 	bl	1dd64 <z_impl_k_sleep>
   119ae:	e7e3      	b.n	11978 <main+0x28>

	err = client_init(&client);
   119b0:	4889      	ldr	r0, [pc, #548]	; (11bd8 <main+0x288>)
   119b2:	f7ff ff71 	bl	11898 <client_init>
	if (err != 0) {
   119b6:	4601      	mov	r1, r0
   119b8:	b180      	cbz	r0, 119dc <main+0x8c>
   119ba:	4b83      	ldr	r3, [pc, #524]	; (11bc8 <main+0x278>)
   119bc:	4a83      	ldr	r2, [pc, #524]	; (11bcc <main+0x27c>)
   119be:	1a9b      	subs	r3, r3, r2
   119c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("client_init: %d", err);
   119c2:	f04f 0200 	mov.w	r2, #0
   119c6:	2001      	movs	r0, #1
   119c8:	f360 0202 	bfi	r2, r0, #0, #3
   119cc:	f36f 02c5 	bfc	r2, #3, #3
   119d0:	f363 128f 	bfi	r2, r3, #6, #10
   119d4:	4881      	ldr	r0, [pc, #516]	; (11bdc <main+0x28c>)
   119d6:	f001 faed 	bl	12fb4 <log_1>
		return;
   119da:	e073      	b.n	11ac4 <main+0x174>
	}

#if defined(CONFIG_DK_LIBRARY)
	dk_buttons_init(button_handler);
   119dc:	4880      	ldr	r0, [pc, #512]	; (11be0 <main+0x290>)
   119de:	f004 ff4f 	bl	16880 <dk_buttons_init>
	uint32_t connect_attempt = 0;
   119e2:	2300      	movs	r3, #0
   119e4:	f8bd 600e 	ldrh.w	r6, [sp, #14]
   119e8:	e04e      	b.n	11a88 <main+0x138>
   119ea:	4b77      	ldr	r3, [pc, #476]	; (11bc8 <main+0x278>)
   119ec:	4a77      	ldr	r2, [pc, #476]	; (11bcc <main+0x27c>)
   119ee:	1a9b      	subs	r3, r3, r2
   119f0:	08db      	lsrs	r3, r3, #3
#endif

do_connect:
	if (connect_attempt++ > 0) {
		LOG_INF("Reconnecting in %d seconds...",
   119f2:	2203      	movs	r2, #3
   119f4:	f362 0702 	bfi	r7, r2, #0, #3
   119f8:	f36f 07c5 	bfc	r7, #3, #3
   119fc:	f363 178f 	bfi	r7, r3, #6, #10
   11a00:	463a      	mov	r2, r7
   11a02:	213c      	movs	r1, #60	; 0x3c
   11a04:	4877      	ldr	r0, [pc, #476]	; (11be4 <main+0x294>)
   11a06:	f001 fad5 	bl	12fb4 <log_1>
   11a0a:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
   11a0e:	2100      	movs	r1, #0
   11a10:	f00c f9a8 	bl	1dd64 <z_impl_k_sleep>
   11a14:	e03b      	b.n	11a8e <main+0x13e>
   11a16:	4b6c      	ldr	r3, [pc, #432]	; (11bc8 <main+0x278>)
   11a18:	4a6c      	ldr	r2, [pc, #432]	; (11bcc <main+0x27c>)
   11a1a:	1a9b      	subs	r3, r3, r2
   11a1c:	08db      	lsrs	r3, r3, #3
			CONFIG_MQTT_RECONNECT_DELAY_S);
		k_sleep(K_SECONDS(CONFIG_MQTT_RECONNECT_DELAY_S));
	}
	err = mqtt_connect(&client);
	if (err != 0) {
		LOG_ERR("mqtt_connect %d", err);
   11a1e:	2201      	movs	r2, #1
   11a20:	f362 0902 	bfi	r9, r2, #0, #3
   11a24:	f36f 09c5 	bfc	r9, #3, #3
   11a28:	f363 198f 	bfi	r9, r3, #6, #10
   11a2c:	464a      	mov	r2, r9
   11a2e:	486e      	ldr	r0, [pc, #440]	; (11be8 <main+0x298>)
   11a30:	f001 fac0 	bl	12fb4 <log_1>
		goto do_connect;
   11a34:	e027      	b.n	11a86 <main+0x136>
   11a36:	4b64      	ldr	r3, [pc, #400]	; (11bc8 <main+0x278>)
   11a38:	4a64      	ldr	r2, [pc, #400]	; (11bcc <main+0x27c>)
   11a3a:	1a9b      	subs	r3, r3, r2
   11a3c:	08db      	lsrs	r3, r3, #3
	}

	while (1) {
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
		if (err < 0) {
			LOG_ERR("poll: %d", errno);
   11a3e:	2201      	movs	r2, #1
   11a40:	f362 0a02 	bfi	sl, r2, #0, #3
   11a44:	f36f 0ac5 	bfc	sl, #3, #3
   11a48:	f363 1a8f 	bfi	sl, r3, #6, #10
   11a4c:	f00e ff87 	bl	2095e <__errno>
   11a50:	4652      	mov	r2, sl
   11a52:	6801      	ldr	r1, [r0, #0]
   11a54:	4865      	ldr	r0, [pc, #404]	; (11bec <main+0x29c>)
   11a56:	f001 faad 	bl	12fb4 <log_1>
   11a5a:	4b5b      	ldr	r3, [pc, #364]	; (11bc8 <main+0x278>)
   11a5c:	4a5b      	ldr	r2, [pc, #364]	; (11bcc <main+0x27c>)
   11a5e:	1a9b      	subs	r3, r3, r2
   11a60:	08db      	lsrs	r3, r3, #3
			LOG_ERR("POLLNVAL");
			break;
		}
	}

	LOG_INF("Disconnecting MQTT client...");
   11a62:	2203      	movs	r2, #3
   11a64:	f362 0502 	bfi	r5, r2, #0, #3
   11a68:	f36f 05c5 	bfc	r5, #3, #3
   11a6c:	f363 158f 	bfi	r5, r3, #6, #10
   11a70:	4629      	mov	r1, r5
   11a72:	485f      	ldr	r0, [pc, #380]	; (11bf0 <main+0x2a0>)
   11a74:	f001 fa74 	bl	12f60 <log_0>

	err = mqtt_disconnect(&client);
   11a78:	4857      	ldr	r0, [pc, #348]	; (11bd8 <main+0x288>)
   11a7a:	f00f fe79 	bl	21770 <mqtt_disconnect>
	if (err) {
   11a7e:	4601      	mov	r1, r0
   11a80:	2800      	cmp	r0, #0
   11a82:	f040 8091 	bne.w	11ba8 <main+0x258>
do_connect:
   11a86:	4623      	mov	r3, r4
	if (connect_attempt++ > 0) {
   11a88:	1c5c      	adds	r4, r3, #1
   11a8a:	2b00      	cmp	r3, #0
   11a8c:	d1ad      	bne.n	119ea <main+0x9a>
	err = mqtt_connect(&client);
   11a8e:	4852      	ldr	r0, [pc, #328]	; (11bd8 <main+0x288>)
   11a90:	f00f fdd5 	bl	2163e <mqtt_connect>
	if (err != 0) {
   11a94:	4601      	mov	r1, r0
   11a96:	2800      	cmp	r0, #0
   11a98:	d1bd      	bne.n	11a16 <main+0xc6>
	err = fds_init(&client);
   11a9a:	484f      	ldr	r0, [pc, #316]	; (11bd8 <main+0x288>)
   11a9c:	f7ff fb62 	bl	11164 <fds_init>
	if (err != 0) {
   11aa0:	4601      	mov	r1, r0
   11aa2:	b310      	cbz	r0, 11aea <main+0x19a>
   11aa4:	4b48      	ldr	r3, [pc, #288]	; (11bc8 <main+0x278>)
   11aa6:	4a49      	ldr	r2, [pc, #292]	; (11bcc <main+0x27c>)
   11aa8:	1a9b      	subs	r3, r3, r2
   11aaa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fds_init: %d", err);
   11aac:	f04f 0200 	mov.w	r2, #0
   11ab0:	2001      	movs	r0, #1
   11ab2:	f360 0202 	bfi	r2, r0, #0, #3
   11ab6:	f36f 02c5 	bfc	r2, #3, #3
   11aba:	f363 128f 	bfi	r2, r3, #6, #10
   11abe:	484d      	ldr	r0, [pc, #308]	; (11bf4 <main+0x2a4>)
   11ac0:	f001 fa78 	bl	12fb4 <log_1>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
	}
	goto do_connect;
}
   11ac4:	b005      	add	sp, #20
   11ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((fds.revents & POLLIN) == POLLIN) {
   11aca:	4b4b      	ldr	r3, [pc, #300]	; (11bf8 <main+0x2a8>)
   11acc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   11ad0:	f013 0f01 	tst.w	r3, #1
   11ad4:	d12f      	bne.n	11b36 <main+0x1e6>
		if ((fds.revents & POLLERR) == POLLERR) {
   11ad6:	4b48      	ldr	r3, [pc, #288]	; (11bf8 <main+0x2a8>)
   11ad8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
   11adc:	b29a      	uxth	r2, r3
   11ade:	f013 0f08 	tst.w	r3, #8
   11ae2:	d141      	bne.n	11b68 <main+0x218>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11ae4:	f012 0f20 	tst.w	r2, #32
   11ae8:	d14e      	bne.n	11b88 <main+0x238>
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11aea:	483b      	ldr	r0, [pc, #236]	; (11bd8 <main+0x288>)
   11aec:	f00f ff14 	bl	21918 <mqtt_keepalive_time_left>
   11af0:	4602      	mov	r2, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   11af2:	2101      	movs	r1, #1
   11af4:	4840      	ldr	r0, [pc, #256]	; (11bf8 <main+0x2a8>)
   11af6:	f00e fe5f 	bl	207b8 <z_impl_zsock_poll>
		if (err < 0) {
   11afa:	2800      	cmp	r0, #0
   11afc:	db9b      	blt.n	11a36 <main+0xe6>
		err = mqtt_live(&client);
   11afe:	4836      	ldr	r0, [pc, #216]	; (11bd8 <main+0x288>)
   11b00:	f00f fec1 	bl	21886 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
   11b04:	4601      	mov	r1, r0
   11b06:	2800      	cmp	r0, #0
   11b08:	d0df      	beq.n	11aca <main+0x17a>
   11b0a:	f110 0f0b 	cmn.w	r0, #11
   11b0e:	d0dc      	beq.n	11aca <main+0x17a>
   11b10:	4b2d      	ldr	r3, [pc, #180]	; (11bc8 <main+0x278>)
   11b12:	4a2e      	ldr	r2, [pc, #184]	; (11bcc <main+0x27c>)
   11b14:	1a9b      	subs	r3, r3, r2
   11b16:	08db      	lsrs	r3, r3, #3
			LOG_ERR("ERROR: mqtt_live: %d", err);
   11b18:	2201      	movs	r2, #1
   11b1a:	9801      	ldr	r0, [sp, #4]
   11b1c:	f362 0002 	bfi	r0, r2, #0, #3
   11b20:	4602      	mov	r2, r0
   11b22:	f36f 02c5 	bfc	r2, #3, #3
   11b26:	f363 128f 	bfi	r2, r3, #6, #10
   11b2a:	f8ad 2004 	strh.w	r2, [sp, #4]
   11b2e:	4833      	ldr	r0, [pc, #204]	; (11bfc <main+0x2ac>)
   11b30:	f001 fa40 	bl	12fb4 <log_1>
   11b34:	e791      	b.n	11a5a <main+0x10a>
			err = mqtt_input(&client);
   11b36:	4828      	ldr	r0, [pc, #160]	; (11bd8 <main+0x288>)
   11b38:	f00f ff1d 	bl	21976 <mqtt_input>
			if (err != 0) {
   11b3c:	4601      	mov	r1, r0
   11b3e:	2800      	cmp	r0, #0
   11b40:	d0c9      	beq.n	11ad6 <main+0x186>
   11b42:	4b21      	ldr	r3, [pc, #132]	; (11bc8 <main+0x278>)
   11b44:	4a21      	ldr	r2, [pc, #132]	; (11bcc <main+0x27c>)
   11b46:	1a9b      	subs	r3, r3, r2
   11b48:	08db      	lsrs	r3, r3, #3
				LOG_ERR("mqtt_input: %d", err);
   11b4a:	2201      	movs	r2, #1
   11b4c:	9802      	ldr	r0, [sp, #8]
   11b4e:	f362 0002 	bfi	r0, r2, #0, #3
   11b52:	4602      	mov	r2, r0
   11b54:	f36f 02c5 	bfc	r2, #3, #3
   11b58:	f363 128f 	bfi	r2, r3, #6, #10
   11b5c:	f8ad 2008 	strh.w	r2, [sp, #8]
   11b60:	4827      	ldr	r0, [pc, #156]	; (11c00 <main+0x2b0>)
   11b62:	f001 fa27 	bl	12fb4 <log_1>
   11b66:	e778      	b.n	11a5a <main+0x10a>
   11b68:	4b17      	ldr	r3, [pc, #92]	; (11bc8 <main+0x278>)
   11b6a:	4a18      	ldr	r2, [pc, #96]	; (11bcc <main+0x27c>)
   11b6c:	1a9b      	subs	r3, r3, r2
   11b6e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("POLLERR");
   11b70:	2201      	movs	r2, #1
   11b72:	f362 0b02 	bfi	fp, r2, #0, #3
   11b76:	f36f 0bc5 	bfc	fp, #3, #3
   11b7a:	f363 1b8f 	bfi	fp, r3, #6, #10
   11b7e:	4659      	mov	r1, fp
   11b80:	4820      	ldr	r0, [pc, #128]	; (11c04 <main+0x2b4>)
   11b82:	f001 f9ed 	bl	12f60 <log_0>
   11b86:	e768      	b.n	11a5a <main+0x10a>
   11b88:	4b0f      	ldr	r3, [pc, #60]	; (11bc8 <main+0x278>)
   11b8a:	4a10      	ldr	r2, [pc, #64]	; (11bcc <main+0x27c>)
   11b8c:	1a9b      	subs	r3, r3, r2
   11b8e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("POLLNVAL");
   11b90:	2201      	movs	r2, #1
   11b92:	f362 0602 	bfi	r6, r2, #0, #3
   11b96:	f36f 06c5 	bfc	r6, #3, #3
   11b9a:	f363 168f 	bfi	r6, r3, #6, #10
   11b9e:	4631      	mov	r1, r6
   11ba0:	4819      	ldr	r0, [pc, #100]	; (11c08 <main+0x2b8>)
   11ba2:	f001 f9dd 	bl	12f60 <log_0>
   11ba6:	e758      	b.n	11a5a <main+0x10a>
   11ba8:	4b07      	ldr	r3, [pc, #28]	; (11bc8 <main+0x278>)
   11baa:	4a08      	ldr	r2, [pc, #32]	; (11bcc <main+0x27c>)
   11bac:	1a9b      	subs	r3, r3, r2
   11bae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not disconnect MQTT client: %d", err);
   11bb0:	2201      	movs	r2, #1
   11bb2:	f362 0802 	bfi	r8, r2, #0, #3
   11bb6:	f36f 08c5 	bfc	r8, #3, #3
   11bba:	f363 188f 	bfi	r8, r3, #6, #10
   11bbe:	4642      	mov	r2, r8
   11bc0:	4812      	ldr	r0, [pc, #72]	; (11c0c <main+0x2bc>)
   11bc2:	f001 f9f7 	bl	12fb4 <log_1>
	goto do_connect;
   11bc6:	e75e      	b.n	11a86 <main+0x136>
   11bc8:	00025334 	.word	0x00025334
   11bcc:	000252ec 	.word	0x000252ec
   11bd0:	000257f4 	.word	0x000257f4
   11bd4:	00025814 	.word	0x00025814
   11bd8:	2000cba8 	.word	0x2000cba8
   11bdc:	0002582c 	.word	0x0002582c
   11be0:	000115f5 	.word	0x000115f5
   11be4:	0002583c 	.word	0x0002583c
   11be8:	0002585c 	.word	0x0002585c
   11bec:	0002587c 	.word	0x0002587c
   11bf0:	00025578 	.word	0x00025578
   11bf4:	0002586c 	.word	0x0002586c
   11bf8:	2000cc20 	.word	0x2000cc20
   11bfc:	00025888 	.word	0x00025888
   11c00:	000258a0 	.word	0x000258a0
   11c04:	000258b0 	.word	0x000258b0
   11c08:	000258b8 	.word	0x000258b8
   11c0c:	000258c4 	.word	0x000258c4

00011c10 <_check_fd>:
	errno = ENFILE;
	return -1;
}

static int _check_fd(int fd)
{
   11c10:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11c12:	2803      	cmp	r0, #3
   11c14:	d808      	bhi.n	11c28 <_check_fd+0x18>
		return -1;
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
   11c16:	0140      	lsls	r0, r0, #5
   11c18:	3008      	adds	r0, #8
   11c1a:	4b0a      	ldr	r3, [pc, #40]	; (11c44 <_check_fd+0x34>)
   11c1c:	4418      	add	r0, r3
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11c1e:	e8d0 3faf 	lda	r3, [r0]
   11c22:	b143      	cbz	r3, 11c36 <_check_fd+0x26>
		errno = EBADF;
		return -1;
	}

	return 0;
   11c24:	2000      	movs	r0, #0
}
   11c26:	bd08      	pop	{r3, pc}
		errno = EBADF;
   11c28:	f00e fe99 	bl	2095e <__errno>
   11c2c:	2309      	movs	r3, #9
   11c2e:	6003      	str	r3, [r0, #0]
		return -1;
   11c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c34:	e7f7      	b.n	11c26 <_check_fd+0x16>
		errno = EBADF;
   11c36:	f00e fe92 	bl	2095e <__errno>
   11c3a:	2309      	movs	r3, #9
   11c3c:	6003      	str	r3, [r0, #0]
		return -1;
   11c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c42:	e7f0      	b.n	11c26 <_check_fd+0x16>
   11c44:	2000cda8 	.word	0x2000cda8

00011c48 <_find_fd_entry>:
{
   11c48:	b508      	push	{r3, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11c4a:	2000      	movs	r0, #0
   11c4c:	2803      	cmp	r0, #3
   11c4e:	dc09      	bgt.n	11c64 <_find_fd_entry+0x1c>
		if (!atomic_get(&fdtable[fd].refcount)) {
   11c50:	0143      	lsls	r3, r0, #5
   11c52:	f103 0208 	add.w	r2, r3, #8
   11c56:	4b07      	ldr	r3, [pc, #28]	; (11c74 <_find_fd_entry+0x2c>)
   11c58:	4413      	add	r3, r2
   11c5a:	e8d3 3faf 	lda	r3, [r3]
   11c5e:	b13b      	cbz	r3, 11c70 <_find_fd_entry+0x28>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11c60:	3001      	adds	r0, #1
   11c62:	e7f3      	b.n	11c4c <_find_fd_entry+0x4>
	errno = ENFILE;
   11c64:	f00e fe7b 	bl	2095e <__errno>
   11c68:	2317      	movs	r3, #23
   11c6a:	6003      	str	r3, [r0, #0]
	return -1;
   11c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11c70:	bd08      	pop	{r3, pc}
   11c72:	bf00      	nop
   11c74:	2000cda8 	.word	0x2000cda8

00011c78 <z_fd_unref>:
{
   11c78:	b500      	push	{lr}
   11c7a:	4602      	mov	r2, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
   11c7c:	0153      	lsls	r3, r2, #5
   11c7e:	f103 0108 	add.w	r1, r3, #8
   11c82:	4b0e      	ldr	r3, [pc, #56]	; (11cbc <z_fd_unref+0x44>)
   11c84:	440b      	add	r3, r1
   11c86:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   11c8a:	b1a9      	cbz	r1, 11cb8 <z_fd_unref+0x40>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   11c8c:	1e48      	subs	r0, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11c8e:	e8d3 cfef 	ldaex	ip, [r3]
   11c92:	458c      	cmp	ip, r1
   11c94:	d104      	bne.n	11ca0 <z_fd_unref+0x28>
   11c96:	e8c3 0fee 	stlex	lr, r0, [r3]
   11c9a:	f1be 0f00 	cmp.w	lr, #0
   11c9e:	d1f6      	bne.n	11c8e <z_fd_unref+0x16>
   11ca0:	d1ec      	bne.n	11c7c <z_fd_unref+0x4>
	if (old_rc != 1) {
   11ca2:	2901      	cmp	r1, #1
   11ca4:	d106      	bne.n	11cb4 <z_fd_unref+0x3c>
	fdtable[fd].obj = NULL;
   11ca6:	4b05      	ldr	r3, [pc, #20]	; (11cbc <z_fd_unref+0x44>)
   11ca8:	0151      	lsls	r1, r2, #5
   11caa:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   11cae:	2000      	movs	r0, #0
   11cb0:	5058      	str	r0, [r3, r1]
	fdtable[fd].vtable = NULL;
   11cb2:	6050      	str	r0, [r2, #4]
}
   11cb4:	f85d fb04 	ldr.w	pc, [sp], #4
			return 0;
   11cb8:	4608      	mov	r0, r1
   11cba:	e7fb      	b.n	11cb4 <z_fd_unref+0x3c>
   11cbc:	2000cda8 	.word	0x2000cda8

00011cc0 <z_fd_ref>:
	return atomic_inc(&fdtable[fd].refcount) + 1;
   11cc0:	0140      	lsls	r0, r0, #5
   11cc2:	3008      	adds	r0, #8
   11cc4:	4b05      	ldr	r3, [pc, #20]	; (11cdc <z_fd_ref+0x1c>)
   11cc6:	4403      	add	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11cc8:	e8d3 0fef 	ldaex	r0, [r3]
   11ccc:	1c42      	adds	r2, r0, #1
   11cce:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11cd2:	2900      	cmp	r1, #0
   11cd4:	d1f8      	bne.n	11cc8 <z_fd_ref+0x8>
}
   11cd6:	3001      	adds	r0, #1
   11cd8:	4770      	bx	lr
   11cda:	bf00      	nop
   11cdc:	2000cda8 	.word	0x2000cda8

00011ce0 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11ce0:	b570      	push	{r4, r5, r6, lr}
   11ce2:	4604      	mov	r4, r0
   11ce4:	460d      	mov	r5, r1
   11ce6:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11ce8:	f7ff ff92 	bl	11c10 <_check_fd>
   11cec:	2800      	cmp	r0, #0
   11cee:	db0f      	blt.n	11d10 <z_get_fd_obj+0x30>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   11cf0:	b12d      	cbz	r5, 11cfe <z_get_fd_obj+0x1e>
   11cf2:	4b08      	ldr	r3, [pc, #32]	; (11d14 <z_get_fd_obj+0x34>)
   11cf4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   11cf8:	685b      	ldr	r3, [r3, #4]
   11cfa:	42ab      	cmp	r3, r5
   11cfc:	d103      	bne.n	11d06 <z_get_fd_obj+0x26>
		errno = err;
		return NULL;
	}

	return entry->obj;
   11cfe:	0164      	lsls	r4, r4, #5
   11d00:	4b04      	ldr	r3, [pc, #16]	; (11d14 <z_get_fd_obj+0x34>)
   11d02:	5918      	ldr	r0, [r3, r4]
}
   11d04:	bd70      	pop	{r4, r5, r6, pc}
		errno = err;
   11d06:	f00e fe2a 	bl	2095e <__errno>
   11d0a:	6006      	str	r6, [r0, #0]
		return NULL;
   11d0c:	2000      	movs	r0, #0
   11d0e:	e7f9      	b.n	11d04 <z_get_fd_obj+0x24>
		return NULL;
   11d10:	2000      	movs	r0, #0
   11d12:	e7f7      	b.n	11d04 <z_get_fd_obj+0x24>
   11d14:	2000cda8 	.word	0x2000cda8

00011d18 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   11d18:	b570      	push	{r4, r5, r6, lr}
   11d1a:	4604      	mov	r4, r0
   11d1c:	460e      	mov	r6, r1
   11d1e:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   11d20:	f7ff ff76 	bl	11c10 <_check_fd>
   11d24:	2800      	cmp	r0, #0
   11d26:	db10      	blt.n	11d4a <z_get_fd_obj_and_vtable+0x32>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   11d28:	4b09      	ldr	r3, [pc, #36]	; (11d50 <z_get_fd_obj_and_vtable+0x38>)
   11d2a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   11d2e:	685b      	ldr	r3, [r3, #4]
   11d30:	6033      	str	r3, [r6, #0]

	if (lock) {
   11d32:	b135      	cbz	r5, 11d42 <z_get_fd_obj_and_vtable+0x2a>
		*lock = &entry->lock;
   11d34:	0163      	lsls	r3, r4, #5
   11d36:	f103 0208 	add.w	r2, r3, #8
   11d3a:	4b05      	ldr	r3, [pc, #20]	; (11d50 <z_get_fd_obj_and_vtable+0x38>)
   11d3c:	4413      	add	r3, r2
   11d3e:	3304      	adds	r3, #4
   11d40:	602b      	str	r3, [r5, #0]
	}

	return entry->obj;
   11d42:	0164      	lsls	r4, r4, #5
   11d44:	4b02      	ldr	r3, [pc, #8]	; (11d50 <z_get_fd_obj_and_vtable+0x38>)
   11d46:	5918      	ldr	r0, [r3, r4]
}
   11d48:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   11d4a:	2000      	movs	r0, #0
   11d4c:	e7fc      	b.n	11d48 <z_get_fd_obj_and_vtable+0x30>
   11d4e:	bf00      	nop
   11d50:	2000cda8 	.word	0x2000cda8

00011d54 <z_reserve_fd>:

int z_reserve_fd(void)
{
   11d54:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   11d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d5e:	480e      	ldr	r0, [pc, #56]	; (11d98 <z_reserve_fd+0x44>)
   11d60:	f00b f980 	bl	1d064 <z_impl_k_mutex_lock>
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);

	fd = _find_fd_entry();
   11d64:	f7ff ff70 	bl	11c48 <_find_fd_entry>
	if (fd >= 0) {
   11d68:	1e04      	subs	r4, r0, #0
   11d6a:	da04      	bge.n	11d76 <z_reserve_fd+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   11d6c:	480a      	ldr	r0, [pc, #40]	; (11d98 <z_reserve_fd+0x44>)
   11d6e:	f00b fa03 	bl	1d178 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   11d72:	4620      	mov	r0, r4
   11d74:	bd10      	pop	{r4, pc}
		(void)z_fd_ref(fd);
   11d76:	4620      	mov	r0, r4
   11d78:	f7ff ffa2 	bl	11cc0 <z_fd_ref>
		fdtable[fd].obj = NULL;
   11d7c:	4807      	ldr	r0, [pc, #28]	; (11d9c <z_reserve_fd+0x48>)
   11d7e:	0163      	lsls	r3, r4, #5
   11d80:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   11d84:	2200      	movs	r2, #0
   11d86:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   11d88:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   11d8a:	3308      	adds	r3, #8
   11d8c:	4418      	add	r0, r3
   11d8e:	3004      	adds	r0, #4
	return z_impl_k_mutex_init(mutex);
   11d90:	f012 f9fc 	bl	2418c <z_impl_k_mutex_init>
   11d94:	e7ea      	b.n	11d6c <z_reserve_fd+0x18>
   11d96:	bf00      	nop
   11d98:	2000c704 	.word	0x2000c704
   11d9c:	2000cda8 	.word	0x2000cda8

00011da0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   11da0:	b508      	push	{r3, lr}
   11da2:	4603      	mov	r3, r0
   11da4:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   11da6:	4a0b      	ldr	r2, [pc, #44]	; (11dd4 <z_finalize_fd+0x34>)
   11da8:	ea4f 1e43 	mov.w	lr, r3, lsl #5
   11dac:	eb02 1c43 	add.w	ip, r2, r3, lsl #5
   11db0:	f842 100e 	str.w	r1, [r2, lr]
	fdtable[fd].vtable = vtable;
   11db4:	f8cc 0004 	str.w	r0, [ip, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   11db8:	b150      	cbz	r0, 11dd0 <z_finalize_fd+0x30>
   11dba:	68c2      	ldr	r2, [r0, #12]
   11dbc:	b142      	cbz	r2, 11dd0 <z_finalize_fd+0x30>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   11dbe:	4673      	mov	r3, lr
   11dc0:	3308      	adds	r3, #8
   11dc2:	4a04      	ldr	r2, [pc, #16]	; (11dd4 <z_finalize_fd+0x34>)
   11dc4:	4413      	add	r3, r2
   11dc6:	3304      	adds	r3, #4
   11dc8:	f240 1205 	movw	r2, #261	; 0x105
   11dcc:	f00d fd3a 	bl	1f844 <z_fdtable_call_ioctl>
					   &fdtable[fd].lock);
	}
}
   11dd0:	bd08      	pop	{r3, pc}
   11dd2:	bf00      	nop
   11dd4:	2000cda8 	.word	0x2000cda8

00011dd8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   11dd8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11dda:	680b      	ldr	r3, [r1, #0]
   11ddc:	3301      	adds	r3, #1
   11dde:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11de0:	4b01      	ldr	r3, [pc, #4]	; (11de8 <char_out+0x10>)
   11de2:	681b      	ldr	r3, [r3, #0]
   11de4:	4798      	blx	r3
}
   11de6:	bd08      	pop	{r3, pc}
   11de8:	2000c500 	.word	0x2000c500

00011dec <__printk_hook_install>:
	_char_out = fn;
   11dec:	4b01      	ldr	r3, [pc, #4]	; (11df4 <__printk_hook_install+0x8>)
   11dee:	6018      	str	r0, [r3, #0]
}
   11df0:	4770      	bx	lr
   11df2:	bf00      	nop
   11df4:	2000c500 	.word	0x2000c500

00011df8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11df8:	b500      	push	{lr}
   11dfa:	b083      	sub	sp, #12
   11dfc:	4602      	mov	r2, r0
   11dfe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11e00:	2100      	movs	r1, #0
   11e02:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11e04:	a901      	add	r1, sp, #4
   11e06:	4803      	ldr	r0, [pc, #12]	; (11e14 <vprintk+0x1c>)
   11e08:	f000 fad8 	bl	123bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   11e0c:	b003      	add	sp, #12
   11e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   11e12:	bf00      	nop
   11e14:	00011dd9 	.word	0x00011dd9

00011e18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11e18:	b510      	push	{r4, lr}
   11e1a:	b084      	sub	sp, #16
   11e1c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   11e1e:	9001      	str	r0, [sp, #4]
   11e20:	9102      	str	r1, [sp, #8]
   11e22:	2100      	movs	r1, #0
   11e24:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   11e26:	a901      	add	r1, sp, #4
   11e28:	4805      	ldr	r0, [pc, #20]	; (11e40 <vsnprintk+0x28>)
   11e2a:	f000 fac7 	bl	123bc <cbvprintf>

	if (ctx.count < ctx.max) {
   11e2e:	9b03      	ldr	r3, [sp, #12]
   11e30:	9a02      	ldr	r2, [sp, #8]
   11e32:	4293      	cmp	r3, r2
   11e34:	da01      	bge.n	11e3a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   11e36:	2200      	movs	r2, #0
   11e38:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   11e3a:	9803      	ldr	r0, [sp, #12]
   11e3c:	b004      	add	sp, #16
   11e3e:	bd10      	pop	{r4, pc}
   11e40:	0001f8e1 	.word	0x0001f8e1

00011e44 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11e48:	b083      	sub	sp, #12
   11e4a:	4604      	mov	r4, r0
   11e4c:	4608      	mov	r0, r1
   11e4e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e50:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11e52:	f013 0f08 	tst.w	r3, #8
   11e56:	d105      	bne.n	11e64 <process_event+0x20>
   11e58:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11e5c:	2300      	movs	r3, #0
   11e5e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   11e60:	9301      	str	r3, [sp, #4]
}
   11e62:	e069      	b.n	11f38 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   11e64:	2901      	cmp	r1, #1
   11e66:	d009      	beq.n	11e7c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e68:	f043 0320 	orr.w	r3, r3, #32
   11e6c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11e6e:	f385 8811 	msr	BASEPRI, r5
   11e72:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11e76:	b003      	add	sp, #12
   11e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11e7c:	f043 0310 	orr.w	r3, r3, #16
   11e80:	8323      	strh	r3, [r4, #24]
   11e82:	e7f4      	b.n	11e6e <process_event+0x2a>
			evt = process_recheck(mgr);
   11e84:	4620      	mov	r0, r4
   11e86:	f00d fd86 	bl	1f996 <process_recheck>
   11e8a:	e057      	b.n	11f3c <process_event+0xf8>
			res = mgr->last_res;
   11e8c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   11e90:	464a      	mov	r2, r9
   11e92:	4669      	mov	r1, sp
   11e94:	4620      	mov	r0, r4
   11e96:	f00d fd97 	bl	1f9c8 <process_complete>
		onoff_transition_fn transit = NULL;
   11e9a:	2700      	movs	r7, #0
   11e9c:	e05a      	b.n	11f54 <process_event+0x110>
			transit = mgr->transitions->start;
   11e9e:	6923      	ldr	r3, [r4, #16]
   11ea0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   11ea2:	2106      	movs	r1, #6
   11ea4:	4620      	mov	r0, r4
   11ea6:	f00d fd4f 	bl	1f948 <set_state>
		res = 0;
   11eaa:	f04f 0900 	mov.w	r9, #0
   11eae:	e051      	b.n	11f54 <process_event+0x110>
			transit = mgr->transitions->stop;
   11eb0:	6923      	ldr	r3, [r4, #16]
   11eb2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   11eb4:	2104      	movs	r1, #4
   11eb6:	4620      	mov	r0, r4
   11eb8:	f00d fd46 	bl	1f948 <set_state>
		res = 0;
   11ebc:	f04f 0900 	mov.w	r9, #0
   11ec0:	e048      	b.n	11f54 <process_event+0x110>
			transit = mgr->transitions->reset;
   11ec2:	6923      	ldr	r3, [r4, #16]
   11ec4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   11ec6:	2105      	movs	r1, #5
   11ec8:	4620      	mov	r0, r4
   11eca:	f00d fd3d 	bl	1f948 <set_state>
		res = 0;
   11ece:	f04f 0900 	mov.w	r9, #0
   11ed2:	e03f      	b.n	11f54 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   11ed4:	2200      	movs	r2, #0
   11ed6:	e046      	b.n	11f66 <process_event+0x122>
   11ed8:	2200      	movs	r2, #0
   11eda:	e044      	b.n	11f66 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11edc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11ee0:	8323      	strh	r3, [r4, #24]
   11ee2:	f385 8811 	msr	BASEPRI, r5
   11ee6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11eea:	2900      	cmp	r1, #0
   11eec:	d144      	bne.n	11f78 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11eee:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11ef0:	b12b      	cbz	r3, 11efe <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   11ef2:	464b      	mov	r3, r9
   11ef4:	4642      	mov	r2, r8
   11ef6:	4669      	mov	r1, sp
   11ef8:	4620      	mov	r0, r4
   11efa:	f00d fddc 	bl	1fab6 <notify_all>
			if (transit != NULL) {
   11efe:	b117      	cbz	r7, 11f06 <process_event+0xc2>
				transit(mgr, transition_complete);
   11f00:	4925      	ldr	r1, [pc, #148]	; (11f98 <process_event+0x154>)
   11f02:	4620      	mov	r0, r4
   11f04:	47b8      	blx	r7
	__asm__ volatile(
   11f06:	f04f 0320 	mov.w	r3, #32
   11f0a:	f3ef 8511 	mrs	r5, BASEPRI
   11f0e:	f383 8812 	msr	BASEPRI_MAX, r3
   11f12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11f16:	8b23      	ldrh	r3, [r4, #24]
   11f18:	f023 0308 	bic.w	r3, r3, #8
   11f1c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11f1e:	8b23      	ldrh	r3, [r4, #24]
   11f20:	f013 0f10 	tst.w	r3, #16
   11f24:	d02e      	beq.n	11f84 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11f26:	f023 0310 	bic.w	r3, r3, #16
   11f2a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11f2c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11f2e:	8b26      	ldrh	r6, [r4, #24]
   11f30:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   11f34:	2800      	cmp	r0, #0
   11f36:	d09a      	beq.n	11e6e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   11f38:	2802      	cmp	r0, #2
   11f3a:	d0a3      	beq.n	11e84 <process_event+0x40>
		if (evt == EVT_NOP) {
   11f3c:	2800      	cmp	r0, #0
   11f3e:	d096      	beq.n	11e6e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   11f40:	2801      	cmp	r0, #1
   11f42:	d0a3      	beq.n	11e8c <process_event+0x48>
		} else if (evt == EVT_START) {
   11f44:	2803      	cmp	r0, #3
   11f46:	d0aa      	beq.n	11e9e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   11f48:	2804      	cmp	r0, #4
   11f4a:	d0b1      	beq.n	11eb0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   11f4c:	2805      	cmp	r0, #5
   11f4e:	d0b8      	beq.n	11ec2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   11f50:	2700      	movs	r7, #0
		res = 0;
   11f52:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11f54:	8b23      	ldrh	r3, [r4, #24]
   11f56:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11f5a:	45b0      	cmp	r8, r6
   11f5c:	d0ba      	beq.n	11ed4 <process_event+0x90>
   11f5e:	68a2      	ldr	r2, [r4, #8]
   11f60:	2a00      	cmp	r2, #0
   11f62:	d0b9      	beq.n	11ed8 <process_event+0x94>
   11f64:	2201      	movs	r2, #1
		if (do_monitors
   11f66:	4611      	mov	r1, r2
   11f68:	2a00      	cmp	r2, #0
   11f6a:	d1b7      	bne.n	11edc <process_event+0x98>
   11f6c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   11f6e:	2a00      	cmp	r2, #0
   11f70:	d1b4      	bne.n	11edc <process_event+0x98>
		    || (transit != NULL)) {
   11f72:	2f00      	cmp	r7, #0
   11f74:	d1b2      	bne.n	11edc <process_event+0x98>
   11f76:	e7d2      	b.n	11f1e <process_event+0xda>
				notify_monitors(mgr, state, res);
   11f78:	464a      	mov	r2, r9
   11f7a:	4641      	mov	r1, r8
   11f7c:	4620      	mov	r0, r4
   11f7e:	f00d fceb 	bl	1f958 <notify_monitors>
   11f82:	e7b4      	b.n	11eee <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11f84:	f013 0f20 	tst.w	r3, #32
   11f88:	d004      	beq.n	11f94 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11f8a:	f023 0320 	bic.w	r3, r3, #32
   11f8e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   11f90:	2002      	movs	r0, #2
   11f92:	e7cc      	b.n	11f2e <process_event+0xea>
		evt = EVT_NOP;
   11f94:	2000      	movs	r0, #0
   11f96:	e7ca      	b.n	11f2e <process_event+0xea>
   11f98:	0001fae5 	.word	0x0001fae5

00011f9c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11f9c:	4684      	mov	ip, r0
	const char *sp = *str;
   11f9e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   11fa0:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   11fa2:	e005      	b.n	11fb0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
   11fa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11fa8:	3201      	adds	r2, #1
   11faa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   11fae:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11fb0:	7813      	ldrb	r3, [r2, #0]
   11fb2:	4904      	ldr	r1, [pc, #16]	; (11fc4 <extract_decimal+0x28>)
   11fb4:	5c59      	ldrb	r1, [r3, r1]
   11fb6:	f011 0f04 	tst.w	r1, #4
   11fba:	d1f3      	bne.n	11fa4 <extract_decimal+0x8>
	}
	*str = sp;
   11fbc:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
   11fc0:	4770      	bx	lr
   11fc2:	bf00      	nop
   11fc4:	000275b3 	.word	0x000275b3

00011fc8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
   11fc8:	b570      	push	{r4, r5, r6, lr}
   11fca:	b082      	sub	sp, #8
   11fcc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
   11fce:	2300      	movs	r3, #0
   11fd0:	6003      	str	r3, [r0, #0]
   11fd2:	6043      	str	r3, [r0, #4]
   11fd4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   11fd6:	784b      	ldrb	r3, [r1, #1]
   11fd8:	2b25      	cmp	r3, #37	; 0x25
   11fda:	d002      	beq.n	11fe2 <extract_conversion+0x1a>
   11fdc:	1c4e      	adds	r6, r1, #1
	bool loop = true;
   11fde:	2501      	movs	r5, #1
   11fe0:	e01f      	b.n	12022 <extract_conversion+0x5a>
		conv->specifier = *sp++;
   11fe2:	1c88      	adds	r0, r1, #2
   11fe4:	70e3      	strb	r3, [r4, #3]
		return sp;
   11fe6:	e145      	b.n	12274 <extract_conversion+0x2ac>
			conv->flag_dash = true;
   11fe8:	7823      	ldrb	r3, [r4, #0]
   11fea:	f043 0304 	orr.w	r3, r3, #4
   11fee:	7023      	strb	r3, [r4, #0]
		if (loop) {
   11ff0:	b1b5      	cbz	r5, 12020 <extract_conversion+0x58>
			++sp;
   11ff2:	3601      	adds	r6, #1
   11ff4:	e014      	b.n	12020 <extract_conversion+0x58>
			conv->flag_plus = true;
   11ff6:	7823      	ldrb	r3, [r4, #0]
   11ff8:	f043 0308 	orr.w	r3, r3, #8
   11ffc:	7023      	strb	r3, [r4, #0]
			break;
   11ffe:	e7f7      	b.n	11ff0 <extract_conversion+0x28>
			conv->flag_space = true;
   12000:	7823      	ldrb	r3, [r4, #0]
   12002:	f043 0310 	orr.w	r3, r3, #16
   12006:	7023      	strb	r3, [r4, #0]
			break;
   12008:	e7f2      	b.n	11ff0 <extract_conversion+0x28>
			conv->flag_hash = true;
   1200a:	7823      	ldrb	r3, [r4, #0]
   1200c:	f043 0320 	orr.w	r3, r3, #32
   12010:	7023      	strb	r3, [r4, #0]
			break;
   12012:	e7ed      	b.n	11ff0 <extract_conversion+0x28>
			conv->flag_zero = true;
   12014:	7823      	ldrb	r3, [r4, #0]
   12016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1201a:	7023      	strb	r3, [r4, #0]
			break;
   1201c:	e7e8      	b.n	11ff0 <extract_conversion+0x28>
		switch (*sp) {
   1201e:	2500      	movs	r5, #0
	} while (loop);
   12020:	b345      	cbz	r5, 12074 <extract_conversion+0xac>
		switch (*sp) {
   12022:	7833      	ldrb	r3, [r6, #0]
   12024:	3b20      	subs	r3, #32
   12026:	2b10      	cmp	r3, #16
   12028:	d8f9      	bhi.n	1201e <extract_conversion+0x56>
   1202a:	a201      	add	r2, pc, #4	; (adr r2, 12030 <extract_conversion+0x68>)
   1202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12030:	00012001 	.word	0x00012001
   12034:	0001201f 	.word	0x0001201f
   12038:	0001201f 	.word	0x0001201f
   1203c:	0001200b 	.word	0x0001200b
   12040:	0001201f 	.word	0x0001201f
   12044:	0001201f 	.word	0x0001201f
   12048:	0001201f 	.word	0x0001201f
   1204c:	0001201f 	.word	0x0001201f
   12050:	0001201f 	.word	0x0001201f
   12054:	0001201f 	.word	0x0001201f
   12058:	0001201f 	.word	0x0001201f
   1205c:	00011ff7 	.word	0x00011ff7
   12060:	0001201f 	.word	0x0001201f
   12064:	00011fe9 	.word	0x00011fe9
   12068:	0001201f 	.word	0x0001201f
   1206c:	0001201f 	.word	0x0001201f
   12070:	00012015 	.word	0x00012015
	if (conv->flag_zero && conv->flag_dash) {
   12074:	7823      	ldrb	r3, [r4, #0]
   12076:	f003 0344 	and.w	r3, r3, #68	; 0x44
   1207a:	2b44      	cmp	r3, #68	; 0x44
   1207c:	d05f      	beq.n	1213e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
   1207e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
   12080:	7823      	ldrb	r3, [r4, #0]
   12082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12086:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
   12088:	7833      	ldrb	r3, [r6, #0]
   1208a:	2b2a      	cmp	r3, #42	; 0x2a
   1208c:	d05c      	beq.n	12148 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
   1208e:	a801      	add	r0, sp, #4
   12090:	f7ff ff84 	bl	11f9c <extract_decimal>
	if (sp != wp) {
   12094:	9b01      	ldr	r3, [sp, #4]
   12096:	429e      	cmp	r6, r3
   12098:	d00f      	beq.n	120ba <extract_conversion+0xf2>
		conv->width_present = true;
   1209a:	7823      	ldrb	r3, [r4, #0]
   1209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   120a0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   120a2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   120a4:	b2db      	uxtb	r3, r3
   120a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   120aa:	2800      	cmp	r0, #0
   120ac:	db54      	blt.n	12158 <extract_conversion+0x190>
   120ae:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   120b0:	4313      	orrs	r3, r2
   120b2:	7822      	ldrb	r2, [r4, #0]
   120b4:	f363 0241 	bfi	r2, r3, #1, #1
   120b8:	7022      	strb	r2, [r4, #0]
	return sp;
   120ba:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
   120bc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
   120be:	781b      	ldrb	r3, [r3, #0]
   120c0:	2b2e      	cmp	r3, #46	; 0x2e
   120c2:	bf14      	ite	ne
   120c4:	2300      	movne	r3, #0
   120c6:	2301      	moveq	r3, #1
   120c8:	7862      	ldrb	r2, [r4, #1]
   120ca:	f363 0241 	bfi	r2, r3, #1, #1
   120ce:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
   120d0:	2b00      	cmp	r3, #0
   120d2:	d043      	beq.n	1215c <extract_conversion+0x194>
	++sp;
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	1c5a      	adds	r2, r3, #1
   120d8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   120da:	785b      	ldrb	r3, [r3, #1]
   120dc:	2b2a      	cmp	r3, #42	; 0x2a
   120de:	d03f      	beq.n	12160 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
   120e0:	a801      	add	r0, sp, #4
   120e2:	f7ff ff5b 	bl	11f9c <extract_decimal>
	conv->prec_value = prec;
   120e6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   120e8:	7823      	ldrb	r3, [r4, #0]
   120ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   120ee:	2800      	cmp	r0, #0
   120f0:	db3e      	blt.n	12170 <extract_conversion+0x1a8>
   120f2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   120f4:	4313      	orrs	r3, r2
   120f6:	7822      	ldrb	r2, [r4, #0]
   120f8:	f363 0241 	bfi	r2, r3, #1, #1
   120fc:	7022      	strb	r2, [r4, #0]
	return sp;
   120fe:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
   12100:	7803      	ldrb	r3, [r0, #0]
   12102:	3b4c      	subs	r3, #76	; 0x4c
   12104:	2b2e      	cmp	r3, #46	; 0x2e
   12106:	f200 809d 	bhi.w	12244 <extract_conversion+0x27c>
   1210a:	e8df f003 	tbb	[pc, r3]
   1210e:	9b90      	.short	0x9b90
   12110:	9b9b9b9b 	.word	0x9b9b9b9b
   12114:	9b9b9b9b 	.word	0x9b9b9b9b
   12118:	9b9b9b9b 	.word	0x9b9b9b9b
   1211c:	9b9b9b9b 	.word	0x9b9b9b9b
   12120:	9b9b9b9b 	.word	0x9b9b9b9b
   12124:	9b9b9b9b 	.word	0x9b9b9b9b
   12128:	9b339b9b 	.word	0x9b339b9b
   1212c:	9b459b57 	.word	0x9b459b57
   12130:	9b9b9b9b 	.word	0x9b9b9b9b
   12134:	9b899b9b 	.word	0x9b899b9b
   12138:	9b9b9b9b 	.word	0x9b9b9b9b
   1213c:	82          	.byte	0x82
   1213d:	00          	.byte	0x00
		conv->flag_zero = false;
   1213e:	7823      	ldrb	r3, [r4, #0]
   12140:	f36f 1386 	bfc	r3, #6, #1
   12144:	7023      	strb	r3, [r4, #0]
   12146:	e79a      	b.n	1207e <extract_conversion+0xb6>
		conv->width_star = true;
   12148:	7863      	ldrb	r3, [r4, #1]
   1214a:	f043 0301 	orr.w	r3, r3, #1
   1214e:	7063      	strb	r3, [r4, #1]
		return ++sp;
   12150:	4633      	mov	r3, r6
   12152:	3301      	adds	r3, #1
   12154:	9301      	str	r3, [sp, #4]
   12156:	e7b1      	b.n	120bc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
   12158:	2201      	movs	r2, #1
   1215a:	e7a9      	b.n	120b0 <extract_conversion+0xe8>
		return sp;
   1215c:	9801      	ldr	r0, [sp, #4]
   1215e:	e7cf      	b.n	12100 <extract_conversion+0x138>
		conv->prec_star = true;
   12160:	7863      	ldrb	r3, [r4, #1]
   12162:	f043 0304 	orr.w	r3, r3, #4
   12166:	7063      	strb	r3, [r4, #1]
		return ++sp;
   12168:	4610      	mov	r0, r2
   1216a:	3001      	adds	r0, #1
   1216c:	9001      	str	r0, [sp, #4]
   1216e:	e7c7      	b.n	12100 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
   12170:	2201      	movs	r2, #1
   12172:	e7bf      	b.n	120f4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
   12174:	1c42      	adds	r2, r0, #1
   12176:	7843      	ldrb	r3, [r0, #1]
   12178:	2b68      	cmp	r3, #104	; 0x68
   1217a:	d006      	beq.n	1218a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
   1217c:	7863      	ldrb	r3, [r4, #1]
   1217e:	2102      	movs	r1, #2
   12180:	f361 03c6 	bfi	r3, r1, #3, #4
   12184:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
   12186:	4610      	mov	r0, r2
   12188:	e01e      	b.n	121c8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
   1218a:	7863      	ldrb	r3, [r4, #1]
   1218c:	2201      	movs	r2, #1
   1218e:	f362 03c6 	bfi	r3, r2, #3, #4
   12192:	7063      	strb	r3, [r4, #1]
			++sp;
   12194:	3002      	adds	r0, #2
   12196:	e017      	b.n	121c8 <extract_conversion+0x200>
		if (*++sp == 'l') {
   12198:	1c42      	adds	r2, r0, #1
   1219a:	7843      	ldrb	r3, [r0, #1]
   1219c:	2b6c      	cmp	r3, #108	; 0x6c
   1219e:	d006      	beq.n	121ae <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
   121a0:	7863      	ldrb	r3, [r4, #1]
   121a2:	2103      	movs	r1, #3
   121a4:	f361 03c6 	bfi	r3, r1, #3, #4
   121a8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
   121aa:	4610      	mov	r0, r2
   121ac:	e00c      	b.n	121c8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
   121ae:	7863      	ldrb	r3, [r4, #1]
   121b0:	2204      	movs	r2, #4
   121b2:	f362 03c6 	bfi	r3, r2, #3, #4
   121b6:	7063      	strb	r3, [r4, #1]
			++sp;
   121b8:	3002      	adds	r0, #2
   121ba:	e005      	b.n	121c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
   121bc:	7863      	ldrb	r3, [r4, #1]
   121be:	2205      	movs	r2, #5
   121c0:	f362 03c6 	bfi	r3, r2, #3, #4
   121c4:	7063      	strb	r3, [r4, #1]
		++sp;
   121c6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
   121c8:	f810 3b01 	ldrb.w	r3, [r0], #1
   121cc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
   121ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   121d2:	2a37      	cmp	r2, #55	; 0x37
   121d4:	d87d      	bhi.n	122d2 <extract_conversion+0x30a>
   121d6:	e8df f002 	tbb	[pc, r2]
   121da:	7c5e      	.short	0x7c5e
   121dc:	5e5e7c7c 	.word	0x5e5e7c7c
   121e0:	7c7c7c5e 	.word	0x7c7c7c5e
   121e4:	7c7c7c7c 	.word	0x7c7c7c7c
   121e8:	7c7c7c7c 	.word	0x7c7c7c7c
   121ec:	7c7c7c7c 	.word	0x7c7c7c7c
   121f0:	7c7c4f7c 	.word	0x7c7c4f7c
   121f4:	7c7c7c7c 	.word	0x7c7c7c7c
   121f8:	7c5e7c7c 	.word	0x7c5e7c7c
   121fc:	5e5e3a4f 	.word	0x5e5e3a4f
   12200:	7c3a7c5e 	.word	0x7c3a7c5e
   12204:	657c7c7c 	.word	0x657c7c7c
   12208:	7c7c714f 	.word	0x7c7c714f
   1220c:	7c4f7c71 	.word	0x7c4f7c71
   12210:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
   12212:	7863      	ldrb	r3, [r4, #1]
   12214:	2206      	movs	r2, #6
   12216:	f362 03c6 	bfi	r3, r2, #3, #4
   1221a:	7063      	strb	r3, [r4, #1]
		++sp;
   1221c:	3001      	adds	r0, #1
		break;
   1221e:	e7d3      	b.n	121c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
   12220:	7863      	ldrb	r3, [r4, #1]
   12222:	2207      	movs	r2, #7
   12224:	f362 03c6 	bfi	r3, r2, #3, #4
   12228:	7063      	strb	r3, [r4, #1]
		++sp;
   1222a:	3001      	adds	r0, #1
		break;
   1222c:	e7cc      	b.n	121c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
   1222e:	7863      	ldrb	r3, [r4, #1]
   12230:	2208      	movs	r2, #8
   12232:	f362 03c6 	bfi	r3, r2, #3, #4
   12236:	7063      	strb	r3, [r4, #1]
		++sp;
   12238:	3001      	adds	r0, #1
		conv->unsupported = true;
   1223a:	7823      	ldrb	r3, [r4, #0]
   1223c:	f043 0302 	orr.w	r3, r3, #2
   12240:	7023      	strb	r3, [r4, #0]
		break;
   12242:	e7c1      	b.n	121c8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
   12244:	7863      	ldrb	r3, [r4, #1]
   12246:	f36f 03c6 	bfc	r3, #3, #4
   1224a:	7063      	strb	r3, [r4, #1]
		break;
   1224c:	e7bc      	b.n	121c8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
   1224e:	78a2      	ldrb	r2, [r4, #2]
   12250:	2101      	movs	r1, #1
   12252:	f361 0202 	bfi	r2, r1, #0, #3
   12256:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   12258:	7862      	ldrb	r2, [r4, #1]
   1225a:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1225e:	2a40      	cmp	r2, #64	; 0x40
   12260:	d010      	beq.n	12284 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
   12262:	2b63      	cmp	r3, #99	; 0x63
   12264:	d013      	beq.n	1228e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
   12266:	7823      	ldrb	r3, [r4, #0]
   12268:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1226c:	4315      	orrs	r5, r2
   1226e:	f365 0341 	bfi	r3, r5, #1, #1
   12272:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   12274:	b002      	add	sp, #8
   12276:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
   12278:	78a2      	ldrb	r2, [r4, #2]
   1227a:	2102      	movs	r1, #2
   1227c:	f361 0202 	bfi	r2, r1, #0, #3
   12280:	70a2      	strb	r2, [r4, #2]
   12282:	e7e9      	b.n	12258 <extract_conversion+0x290>
			conv->invalid = true;
   12284:	7821      	ldrb	r1, [r4, #0]
   12286:	f041 0101 	orr.w	r1, r1, #1
   1228a:	7021      	strb	r1, [r4, #0]
   1228c:	e7e9      	b.n	12262 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1228e:	1e15      	subs	r5, r2, #0
   12290:	bf18      	it	ne
   12292:	2501      	movne	r5, #1
   12294:	e7e7      	b.n	12266 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
   12296:	78a3      	ldrb	r3, [r4, #2]
   12298:	2204      	movs	r2, #4
   1229a:	f362 0302 	bfi	r3, r2, #0, #3
   1229e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
   122a0:	2501      	movs	r5, #1
			break;
   122a2:	e7e0      	b.n	12266 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   122a4:	78a3      	ldrb	r3, [r4, #2]
   122a6:	2203      	movs	r2, #3
   122a8:	f362 0302 	bfi	r3, r2, #0, #3
   122ac:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   122ae:	7863      	ldrb	r3, [r4, #1]
   122b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   122b4:	2b40      	cmp	r3, #64	; 0x40
   122b6:	d1d6      	bne.n	12266 <extract_conversion+0x29e>
			unsupported = true;
   122b8:	2501      	movs	r5, #1
   122ba:	e7d4      	b.n	12266 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
   122bc:	78a3      	ldrb	r3, [r4, #2]
   122be:	2203      	movs	r2, #3
   122c0:	f362 0302 	bfi	r3, r2, #0, #3
   122c4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
   122c6:	7863      	ldrb	r3, [r4, #1]
   122c8:	f013 0f78 	tst.w	r3, #120	; 0x78
   122cc:	d0cb      	beq.n	12266 <extract_conversion+0x29e>
			unsupported = true;
   122ce:	2501      	movs	r5, #1
   122d0:	e7c9      	b.n	12266 <extract_conversion+0x29e>
		conv->invalid = true;
   122d2:	7823      	ldrb	r3, [r4, #0]
   122d4:	f043 0301 	orr.w	r3, r3, #1
   122d8:	7023      	strb	r3, [r4, #0]
		break;
   122da:	e7c4      	b.n	12266 <extract_conversion+0x29e>

000122dc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e0:	b083      	sub	sp, #12
   122e2:	4604      	mov	r4, r0
   122e4:	460d      	mov	r5, r1
   122e6:	9201      	str	r2, [sp, #4]
   122e8:	469a      	mov	sl, r3
   122ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   122ec:	78d3      	ldrb	r3, [r2, #3]
   122ee:	4a32      	ldr	r2, [pc, #200]	; (123b8 <encode_uint+0xdc>)
   122f0:	f813 b002 	ldrb.w	fp, [r3, r2]
   122f4:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   122f8:	2b6f      	cmp	r3, #111	; 0x6f
   122fa:	d00f      	beq.n	1231c <encode_uint+0x40>
   122fc:	d906      	bls.n	1230c <encode_uint+0x30>
   122fe:	2b70      	cmp	r3, #112	; 0x70
   12300:	d00f      	beq.n	12322 <encode_uint+0x46>
   12302:	2b78      	cmp	r3, #120	; 0x78
   12304:	d110      	bne.n	12328 <encode_uint+0x4c>
		return 16;
   12306:	f04f 0910 	mov.w	r9, #16
   1230a:	e023      	b.n	12354 <encode_uint+0x78>
	switch (specifier) {
   1230c:	2b58      	cmp	r3, #88	; 0x58
   1230e:	d002      	beq.n	12316 <encode_uint+0x3a>
   12310:	f04f 090a 	mov.w	r9, #10
   12314:	e01e      	b.n	12354 <encode_uint+0x78>
		return 16;
   12316:	f04f 0910 	mov.w	r9, #16
   1231a:	e01b      	b.n	12354 <encode_uint+0x78>
		return 8;
   1231c:	f04f 0908 	mov.w	r9, #8
   12320:	e018      	b.n	12354 <encode_uint+0x78>
		return 16;
   12322:	f04f 0910 	mov.w	r9, #16
   12326:	e015      	b.n	12354 <encode_uint+0x78>
	switch (specifier) {
   12328:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1232c:	e012      	b.n	12354 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1232e:	b2d2      	uxtb	r2, r2
   12330:	3230      	adds	r2, #48	; 0x30
   12332:	b2d2      	uxtb	r2, r2
   12334:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   12338:	463a      	mov	r2, r7
   1233a:	4643      	mov	r3, r8
   1233c:	4620      	mov	r0, r4
   1233e:	4629      	mov	r1, r5
   12340:	f7fe fd5e 	bl	10e00 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   12344:	42bc      	cmp	r4, r7
   12346:	f175 0300 	sbcs.w	r3, r5, #0
   1234a:	d319      	bcc.n	12380 <encode_uint+0xa4>
   1234c:	4556      	cmp	r6, sl
   1234e:	d917      	bls.n	12380 <encode_uint+0xa4>
		value /= radix;
   12350:	4604      	mov	r4, r0
   12352:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   12354:	f04f 0800 	mov.w	r8, #0
   12358:	464f      	mov	r7, r9
   1235a:	464a      	mov	r2, r9
   1235c:	4643      	mov	r3, r8
   1235e:	4620      	mov	r0, r4
   12360:	4629      	mov	r1, r5
   12362:	f7fe fd4d 	bl	10e00 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12366:	2a09      	cmp	r2, #9
   12368:	d9e1      	bls.n	1232e <encode_uint+0x52>
   1236a:	f1bb 0f01 	cmp.w	fp, #1
   1236e:	d003      	beq.n	12378 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12370:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12372:	3257      	adds	r2, #87	; 0x57
   12374:	b2d2      	uxtb	r2, r2
   12376:	e7dd      	b.n	12334 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12378:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1237a:	3237      	adds	r2, #55	; 0x37
   1237c:	b2d2      	uxtb	r2, r2
   1237e:	e7d9      	b.n	12334 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12380:	9b01      	ldr	r3, [sp, #4]
   12382:	781b      	ldrb	r3, [r3, #0]
   12384:	f013 0f20 	tst.w	r3, #32
   12388:	d005      	beq.n	12396 <encode_uint+0xba>
		if (radix == 8) {
   1238a:	f1b9 0f08 	cmp.w	r9, #8
   1238e:	d006      	beq.n	1239e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   12390:	f1b9 0f10 	cmp.w	r9, #16
   12394:	d009      	beq.n	123aa <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   12396:	4630      	mov	r0, r6
   12398:	b003      	add	sp, #12
   1239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1239e:	9a01      	ldr	r2, [sp, #4]
   123a0:	7893      	ldrb	r3, [r2, #2]
   123a2:	f043 0308 	orr.w	r3, r3, #8
   123a6:	7093      	strb	r3, [r2, #2]
   123a8:	e7f5      	b.n	12396 <encode_uint+0xba>
			conv->altform_0c = true;
   123aa:	9a01      	ldr	r2, [sp, #4]
   123ac:	7893      	ldrb	r3, [r2, #2]
   123ae:	f043 0310 	orr.w	r3, r3, #16
   123b2:	7093      	strb	r3, [r2, #2]
   123b4:	e7ef      	b.n	12396 <encode_uint+0xba>
   123b6:	bf00      	nop
   123b8:	000275b3 	.word	0x000275b3

000123bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   123bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123c0:	b091      	sub	sp, #68	; 0x44
   123c2:	4606      	mov	r6, r0
   123c4:	460d      	mov	r5, r1
   123c6:	4691      	mov	r9, r2
   123c8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   123ca:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   123cc:	f899 0000 	ldrb.w	r0, [r9]
   123d0:	2800      	cmp	r0, #0
   123d2:	f000 82d5 	beq.w	12980 <cbvprintf+0x5c4>
		if (*fp != '%') {
   123d6:	2825      	cmp	r0, #37	; 0x25
   123d8:	d008      	beq.n	123ec <cbvprintf+0x30>
			OUTC(*fp++);
   123da:	f109 0901 	add.w	r9, r9, #1
   123de:	4629      	mov	r1, r5
   123e0:	47b0      	blx	r6
   123e2:	2800      	cmp	r0, #0
   123e4:	f2c0 82cd 	blt.w	12982 <cbvprintf+0x5c6>
   123e8:	3401      	adds	r4, #1
			continue;
   123ea:	e7ef      	b.n	123cc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   123ec:	2300      	movs	r3, #0
   123ee:	9304      	str	r3, [sp, #16]
   123f0:	9305      	str	r3, [sp, #20]
   123f2:	9306      	str	r3, [sp, #24]
   123f4:	9307      	str	r3, [sp, #28]
   123f6:	9308      	str	r3, [sp, #32]
   123f8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   123fa:	4649      	mov	r1, r9
   123fc:	a806      	add	r0, sp, #24
   123fe:	f7ff fde3 	bl	11fc8 <extract_conversion>
   12402:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   12404:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12408:	f013 0f01 	tst.w	r3, #1
   1240c:	f000 8097 	beq.w	1253e <cbvprintf+0x182>
			width = va_arg(ap, int);
   12410:	9b03      	ldr	r3, [sp, #12]
   12412:	1d1a      	adds	r2, r3, #4
   12414:	9203      	str	r2, [sp, #12]
   12416:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   12418:	2f00      	cmp	r7, #0
   1241a:	f2c0 8088 	blt.w	1252e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   1241e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12422:	f013 0f04 	tst.w	r3, #4
   12426:	f000 809c 	beq.w	12562 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
   1242a:	9b03      	ldr	r3, [sp, #12]
   1242c:	1d1a      	adds	r2, r3, #4
   1242e:	9203      	str	r2, [sp, #12]
   12430:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   12434:	f1ba 0f00 	cmp.w	sl, #0
   12438:	f2c0 808a 	blt.w	12550 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   1243c:	2300      	movs	r3, #0
   1243e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   12440:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   12442:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12446:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1244a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1244e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   12452:	2b01      	cmp	r3, #1
   12454:	f000 808e 	beq.w	12574 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   12458:	2b02      	cmp	r3, #2
   1245a:	f000 80d3 	beq.w	12604 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1245e:	2b04      	cmp	r3, #4
   12460:	f000 8124 	beq.w	126ac <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   12464:	2b03      	cmp	r3, #3
   12466:	f000 813b 	beq.w	126e0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1246a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1246e:	f018 0b03 	ands.w	fp, r8, #3
   12472:	f040 813b 	bne.w	126ec <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   12476:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1247a:	3b25      	subs	r3, #37	; 0x25
   1247c:	2b53      	cmp	r3, #83	; 0x53
   1247e:	f200 81e6 	bhi.w	1284e <cbvprintf+0x492>
   12482:	e8df f013 	tbh	[pc, r3, lsl #1]
   12486:	0140      	.short	0x0140
   12488:	01e401e4 	.word	0x01e401e4
   1248c:	01e401e4 	.word	0x01e401e4
   12490:	01e401e4 	.word	0x01e401e4
   12494:	01e401e4 	.word	0x01e401e4
   12498:	01e401e4 	.word	0x01e401e4
   1249c:	01e401e4 	.word	0x01e401e4
   124a0:	01e401e4 	.word	0x01e401e4
   124a4:	01e401e4 	.word	0x01e401e4
   124a8:	01e401e4 	.word	0x01e401e4
   124ac:	01e401e4 	.word	0x01e401e4
   124b0:	01e401e4 	.word	0x01e401e4
   124b4:	01e401e4 	.word	0x01e401e4
   124b8:	01e401e4 	.word	0x01e401e4
   124bc:	01e401e4 	.word	0x01e401e4
   124c0:	01e401e4 	.word	0x01e401e4
   124c4:	01e401e4 	.word	0x01e401e4
   124c8:	01e401e4 	.word	0x01e401e4
   124cc:	01e401e4 	.word	0x01e401e4
   124d0:	01e401e4 	.word	0x01e401e4
   124d4:	01e401e4 	.word	0x01e401e4
   124d8:	01e401e4 	.word	0x01e401e4
   124dc:	01e401e4 	.word	0x01e401e4
   124e0:	01e401e4 	.word	0x01e401e4
   124e4:	01e401e4 	.word	0x01e401e4
   124e8:	01e401e4 	.word	0x01e401e4
   124ec:	01e40181 	.word	0x01e40181
   124f0:	01e401e4 	.word	0x01e401e4
   124f4:	01e401e4 	.word	0x01e401e4
   124f8:	01e401e4 	.word	0x01e401e4
   124fc:	01e401e4 	.word	0x01e401e4
   12500:	015e01e4 	.word	0x015e01e4
   12504:	01e40167 	.word	0x01e40167
   12508:	01e401e4 	.word	0x01e401e4
   1250c:	016701e4 	.word	0x016701e4
   12510:	01e401e4 	.word	0x01e401e4
   12514:	01e401e4 	.word	0x01e401e4
   12518:	018101be 	.word	0x018101be
   1251c:	01e401a2 	.word	0x01e401a2
   12520:	014d01e4 	.word	0x014d01e4
   12524:	018101e4 	.word	0x018101e4
   12528:	01e401e4 	.word	0x01e401e4
   1252c:	0181      	.short	0x0181
				conv->flag_dash = true;
   1252e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12532:	f043 0304 	orr.w	r3, r3, #4
   12536:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   1253a:	427f      	negs	r7, r7
   1253c:	e76f      	b.n	1241e <cbvprintf+0x62>
		} else if (conv->width_present) {
   1253e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   12542:	2b00      	cmp	r3, #0
   12544:	db02      	blt.n	1254c <cbvprintf+0x190>
		int width = -1;
   12546:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1254a:	e768      	b.n	1241e <cbvprintf+0x62>
			width = conv->width_value;
   1254c:	9f07      	ldr	r7, [sp, #28]
   1254e:	e766      	b.n	1241e <cbvprintf+0x62>
				conv->prec_present = false;
   12550:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12554:	f36f 0341 	bfc	r3, #1, #1
   12558:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   1255c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   12560:	e76c      	b.n	1243c <cbvprintf+0x80>
		} else if (conv->prec_present) {
   12562:	f013 0f02 	tst.w	r3, #2
   12566:	d002      	beq.n	1256e <cbvprintf+0x1b2>
			precision = conv->prec_value;
   12568:	f8dd a020 	ldr.w	sl, [sp, #32]
   1256c:	e766      	b.n	1243c <cbvprintf+0x80>
		int precision = -1;
   1256e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   12572:	e763      	b.n	1243c <cbvprintf+0x80>
			switch (length_mod) {
   12574:	1ecb      	subs	r3, r1, #3
   12576:	2b04      	cmp	r3, #4
   12578:	d804      	bhi.n	12584 <cbvprintf+0x1c8>
   1257a:	e8df f003 	tbb	[pc, r3]
   1257e:	1d0b      	.short	0x1d0b
   12580:	3529      	.short	0x3529
   12582:	35          	.byte	0x35
   12583:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12584:	9b03      	ldr	r3, [sp, #12]
   12586:	1d1a      	adds	r2, r3, #4
   12588:	9203      	str	r2, [sp, #12]
   1258a:	681b      	ldr	r3, [r3, #0]
   1258c:	17da      	asrs	r2, r3, #31
   1258e:	9304      	str	r3, [sp, #16]
   12590:	9205      	str	r2, [sp, #20]
				break;
   12592:	e006      	b.n	125a2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
   12594:	9b03      	ldr	r3, [sp, #12]
   12596:	1d1a      	adds	r2, r3, #4
   12598:	9203      	str	r2, [sp, #12]
   1259a:	681b      	ldr	r3, [r3, #0]
   1259c:	17da      	asrs	r2, r3, #31
   1259e:	9304      	str	r3, [sp, #16]
   125a0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   125a2:	2901      	cmp	r1, #1
   125a4:	d028      	beq.n	125f8 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
   125a6:	2902      	cmp	r1, #2
   125a8:	f47f af5f 	bne.w	1246a <cbvprintf+0xae>
				value->sint = (short)value->sint;
   125ac:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   125b0:	17da      	asrs	r2, r3, #31
   125b2:	9304      	str	r3, [sp, #16]
   125b4:	9205      	str	r2, [sp, #20]
   125b6:	e758      	b.n	1246a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
   125b8:	9b03      	ldr	r3, [sp, #12]
   125ba:	3307      	adds	r3, #7
   125bc:	f023 0307 	bic.w	r3, r3, #7
   125c0:	f103 0208 	add.w	r2, r3, #8
   125c4:	9203      	str	r2, [sp, #12]
   125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   125ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   125ce:	e7e8      	b.n	125a2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   125d0:	9b03      	ldr	r3, [sp, #12]
   125d2:	3307      	adds	r3, #7
   125d4:	f023 0307 	bic.w	r3, r3, #7
   125d8:	f103 0208 	add.w	r2, r3, #8
   125dc:	9203      	str	r2, [sp, #12]
   125de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   125e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   125e6:	e7dc      	b.n	125a2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   125e8:	9b03      	ldr	r3, [sp, #12]
   125ea:	1d1a      	adds	r2, r3, #4
   125ec:	9203      	str	r2, [sp, #12]
   125ee:	681b      	ldr	r3, [r3, #0]
   125f0:	17da      	asrs	r2, r3, #31
				value->sint =
   125f2:	9304      	str	r3, [sp, #16]
   125f4:	9205      	str	r2, [sp, #20]
				break;
   125f6:	e7d4      	b.n	125a2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
   125f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   125fc:	9304      	str	r3, [sp, #16]
   125fe:	2300      	movs	r3, #0
   12600:	9305      	str	r3, [sp, #20]
   12602:	e732      	b.n	1246a <cbvprintf+0xae>
			switch (length_mod) {
   12604:	1ecb      	subs	r3, r1, #3
   12606:	2b04      	cmp	r3, #4
   12608:	d804      	bhi.n	12614 <cbvprintf+0x258>
   1260a:	e8df f003 	tbb	[pc, r3]
   1260e:	1f0b      	.short	0x1f0b
   12610:	4135      	.short	0x4135
   12612:	41          	.byte	0x41
   12613:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   12614:	9b03      	ldr	r3, [sp, #12]
   12616:	1d1a      	adds	r2, r3, #4
   12618:	9203      	str	r2, [sp, #12]
   1261a:	681b      	ldr	r3, [r3, #0]
   1261c:	9304      	str	r3, [sp, #16]
   1261e:	2300      	movs	r3, #0
   12620:	9305      	str	r3, [sp, #20]
				break;
   12622:	e01e      	b.n	12662 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
   12624:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   12628:	2b63      	cmp	r3, #99	; 0x63
   1262a:	d007      	beq.n	1263c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
   1262c:	9b03      	ldr	r3, [sp, #12]
   1262e:	1d1a      	adds	r2, r3, #4
   12630:	9203      	str	r2, [sp, #12]
   12632:	681b      	ldr	r3, [r3, #0]
   12634:	9304      	str	r3, [sp, #16]
   12636:	2300      	movs	r3, #0
   12638:	9305      	str	r3, [sp, #20]
   1263a:	e012      	b.n	12662 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   1263c:	9b03      	ldr	r3, [sp, #12]
   1263e:	1d1a      	adds	r2, r3, #4
   12640:	9203      	str	r2, [sp, #12]
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	9304      	str	r3, [sp, #16]
   12646:	2300      	movs	r3, #0
   12648:	9305      	str	r3, [sp, #20]
   1264a:	e00a      	b.n	12662 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
   1264c:	9b03      	ldr	r3, [sp, #12]
   1264e:	3307      	adds	r3, #7
   12650:	f023 0307 	bic.w	r3, r3, #7
   12654:	f103 0208 	add.w	r2, r3, #8
   12658:	9203      	str	r2, [sp, #12]
   1265a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1265e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   12662:	2901      	cmp	r1, #1
   12664:	d01c      	beq.n	126a0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
   12666:	2902      	cmp	r1, #2
   12668:	f47f aeff 	bne.w	1246a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
   1266c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12670:	9304      	str	r3, [sp, #16]
   12672:	2300      	movs	r3, #0
   12674:	9305      	str	r3, [sp, #20]
   12676:	e6f8      	b.n	1246a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
   12678:	9b03      	ldr	r3, [sp, #12]
   1267a:	3307      	adds	r3, #7
   1267c:	f023 0307 	bic.w	r3, r3, #7
   12680:	f103 0208 	add.w	r2, r3, #8
   12684:	9203      	str	r2, [sp, #12]
   12686:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1268a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1268e:	e7e8      	b.n	12662 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   12690:	9b03      	ldr	r3, [sp, #12]
   12692:	1d1a      	adds	r2, r3, #4
   12694:	9203      	str	r2, [sp, #12]
   12696:	681b      	ldr	r3, [r3, #0]
				value->uint =
   12698:	9304      	str	r3, [sp, #16]
   1269a:	2300      	movs	r3, #0
   1269c:	9305      	str	r3, [sp, #20]
				break;
   1269e:	e7e0      	b.n	12662 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
   126a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   126a4:	9304      	str	r3, [sp, #16]
   126a6:	2300      	movs	r3, #0
   126a8:	9305      	str	r3, [sp, #20]
   126aa:	e6de      	b.n	1246a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   126ac:	2908      	cmp	r1, #8
   126ae:	d00b      	beq.n	126c8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
   126b0:	9b03      	ldr	r3, [sp, #12]
   126b2:	3307      	adds	r3, #7
   126b4:	f023 0307 	bic.w	r3, r3, #7
   126b8:	f103 0208 	add.w	r2, r3, #8
   126bc:	9203      	str	r2, [sp, #12]
   126be:	e9d3 2300 	ldrd	r2, r3, [r3]
   126c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   126c6:	e6d0      	b.n	1246a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
   126c8:	9b03      	ldr	r3, [sp, #12]
   126ca:	3307      	adds	r3, #7
   126cc:	f023 0307 	bic.w	r3, r3, #7
   126d0:	f103 0208 	add.w	r2, r3, #8
   126d4:	9203      	str	r2, [sp, #12]
   126d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   126da:	e9cd 2304 	strd	r2, r3, [sp, #16]
   126de:	e6c4      	b.n	1246a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
   126e0:	9b03      	ldr	r3, [sp, #12]
   126e2:	1d1a      	adds	r2, r3, #4
   126e4:	9203      	str	r2, [sp, #12]
   126e6:	681b      	ldr	r3, [r3, #0]
   126e8:	9304      	str	r3, [sp, #16]
   126ea:	e6be      	b.n	1246a <cbvprintf+0xae>
			OUTS(sp, fp);
   126ec:	9f02      	ldr	r7, [sp, #8]
   126ee:	463b      	mov	r3, r7
   126f0:	464a      	mov	r2, r9
   126f2:	4629      	mov	r1, r5
   126f4:	4630      	mov	r0, r6
   126f6:	f00d fc88 	bl	2000a <outs>
   126fa:	2800      	cmp	r0, #0
   126fc:	f2c0 8141 	blt.w	12982 <cbvprintf+0x5c6>
   12700:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   12702:	46b9      	mov	r9, r7
			continue;
   12704:	e662      	b.n	123cc <cbvprintf+0x10>
		case '%':
			OUTC('%');
   12706:	4629      	mov	r1, r5
   12708:	2025      	movs	r0, #37	; 0x25
   1270a:	47b0      	blx	r6
   1270c:	2800      	cmp	r0, #0
   1270e:	f2c0 8138 	blt.w	12982 <cbvprintf+0x5c6>
   12712:	3401      	adds	r4, #1
		char sign = 0;
   12714:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   12716:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1271a:	f04f 0900 	mov.w	r9, #0
			break;
   1271e:	e09b      	b.n	12858 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
   12720:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   12724:	f1ba 0f00 	cmp.w	sl, #0
   12728:	db07      	blt.n	1273a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
   1272a:	4651      	mov	r1, sl
   1272c:	4648      	mov	r0, r9
   1272e:	f012 fa20 	bl	24b72 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   12732:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   12736:	46d8      	mov	r8, fp
			precision = -1;

			break;
   12738:	e08e      	b.n	12858 <cbvprintf+0x49c>
				len = strlen(bps);
   1273a:	4648      	mov	r0, r9
   1273c:	f7fe fcd5 	bl	110ea <strlen>
   12740:	e7f7      	b.n	12732 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12742:	9b04      	ldr	r3, [sp, #16]
   12744:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   12748:	46d8      	mov	r8, fp
			bpe = buf + 1;
   1274a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   1274e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   12752:	e081      	b.n	12858 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   12754:	f018 0f08 	tst.w	r8, #8
   12758:	d105      	bne.n	12766 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   1275a:	f018 0810 	ands.w	r8, r8, #16
   1275e:	d004      	beq.n	1276a <cbvprintf+0x3ae>
				sign = ' ';
   12760:	f04f 0820 	mov.w	r8, #32
   12764:	e001      	b.n	1276a <cbvprintf+0x3ae>
				sign = '+';
   12766:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   1276a:	9a04      	ldr	r2, [sp, #16]
   1276c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   1276e:	2b00      	cmp	r3, #0
   12770:	db02      	blt.n	12778 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   12772:	9204      	str	r2, [sp, #16]
   12774:	9305      	str	r3, [sp, #20]
   12776:	e008      	b.n	1278a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
   12778:	4252      	negs	r2, r2
   1277a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1277e:	9204      	str	r2, [sp, #16]
   12780:	9305      	str	r3, [sp, #20]
				sign = '-';
   12782:	f04f 082d 	mov.w	r8, #45	; 0x2d
   12786:	e000      	b.n	1278a <cbvprintf+0x3ce>
		switch (conv->specifier) {
   12788:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1278a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1278e:	9300      	str	r3, [sp, #0]
   12790:	ab0a      	add	r3, sp, #40	; 0x28
   12792:	aa06      	add	r2, sp, #24
   12794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   12798:	f7ff fda0 	bl	122dc <encode_uint>
   1279c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1279e:	f1ba 0f00 	cmp.w	sl, #0
   127a2:	f2c0 8088 	blt.w	128b6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
   127a6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   127aa:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   127ae:	f89d 2018 	ldrb.w	r2, [sp, #24]
   127b2:	f36f 1286 	bfc	r2, #6, #1
   127b6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   127ba:	459a      	cmp	sl, r3
   127bc:	d97e      	bls.n	128bc <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
   127be:	ebaa 0303 	sub.w	r3, sl, r3
   127c2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   127c4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   127c8:	e046      	b.n	12858 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   127ca:	9804      	ldr	r0, [sp, #16]
   127cc:	b928      	cbnz	r0, 127da <cbvprintf+0x41e>
		char sign = 0;
   127ce:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   127d0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 12988 <cbvprintf+0x5cc>
			bps = "(nil)";
   127d4:	f1aa 0905 	sub.w	r9, sl, #5
   127d8:	e03e      	b.n	12858 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   127da:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   127de:	9300      	str	r3, [sp, #0]
   127e0:	ab0a      	add	r3, sp, #40	; 0x28
   127e2:	aa06      	add	r2, sp, #24
   127e4:	2100      	movs	r1, #0
   127e6:	f7ff fd79 	bl	122dc <encode_uint>
   127ea:	4681      	mov	r9, r0
				conv->altform_0c = true;
   127ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
   127f0:	f043 0310 	orr.w	r3, r3, #16
   127f4:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   127f8:	2378      	movs	r3, #120	; 0x78
   127fa:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   127fe:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   12800:	e7cd      	b.n	1279e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   12802:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
   12804:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12808:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1280c:	2b07      	cmp	r3, #7
   1280e:	d806      	bhi.n	1281e <cbvprintf+0x462>
   12810:	e8df f003 	tbb	[pc, r3]
   12814:	0f0d0b04 	.word	0x0f0d0b04
   12818:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
   1281c:	6014      	str	r4, [r2, #0]
		char sign = 0;
   1281e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   12820:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   12824:	f04f 0900 	mov.w	r9, #0
}
   12828:	e016      	b.n	12858 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
   1282a:	7014      	strb	r4, [r2, #0]
		break;
   1282c:	e7f7      	b.n	1281e <cbvprintf+0x462>
		*(short *)dp = (short)count;
   1282e:	8014      	strh	r4, [r2, #0]
		break;
   12830:	e7f5      	b.n	1281e <cbvprintf+0x462>
		*(long *)dp = (long)count;
   12832:	6014      	str	r4, [r2, #0]
		break;
   12834:	e7f3      	b.n	1281e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
   12836:	17e3      	asrs	r3, r4, #31
   12838:	6014      	str	r4, [r2, #0]
   1283a:	6053      	str	r3, [r2, #4]
		break;
   1283c:	e7ef      	b.n	1281e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
   1283e:	17e3      	asrs	r3, r4, #31
   12840:	6014      	str	r4, [r2, #0]
   12842:	6053      	str	r3, [r2, #4]
		break;
   12844:	e7eb      	b.n	1281e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
   12846:	6014      	str	r4, [r2, #0]
		break;
   12848:	e7e9      	b.n	1281e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1284a:	6014      	str	r4, [r2, #0]
		break;
   1284c:	e7e7      	b.n	1281e <cbvprintf+0x462>
		switch (conv->specifier) {
   1284e:	46d8      	mov	r8, fp
   12850:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   12854:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   12858:	f1b9 0f00 	cmp.w	r9, #0
   1285c:	f000 808d 	beq.w	1297a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   12860:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   12864:	f1b8 0f00 	cmp.w	r8, #0
   12868:	d000      	beq.n	1286c <cbvprintf+0x4b0>
			nj_len += 1U;
   1286a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   1286c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   12870:	f011 0f10 	tst.w	r1, #16
   12874:	d025      	beq.n	128c2 <cbvprintf+0x506>
			nj_len += 2U;
   12876:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   12878:	9b07      	ldr	r3, [sp, #28]
   1287a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   1287c:	f011 0f40 	tst.w	r1, #64	; 0x40
   12880:	d001      	beq.n	12886 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
   12882:	9a08      	ldr	r2, [sp, #32]
   12884:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   12886:	2f00      	cmp	r7, #0
   12888:	dd31      	ble.n	128ee <cbvprintf+0x532>
			width -= (int)nj_len;
   1288a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   1288c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12890:	f013 0f04 	tst.w	r3, #4
   12894:	d12b      	bne.n	128ee <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   12896:	f013 0f40 	tst.w	r3, #64	; 0x40
   1289a:	d017      	beq.n	128cc <cbvprintf+0x510>
					if (sign != 0) {
   1289c:	f1b8 0f00 	cmp.w	r8, #0
   128a0:	d017      	beq.n	128d2 <cbvprintf+0x516>
						OUTC(sign);
   128a2:	4629      	mov	r1, r5
   128a4:	4640      	mov	r0, r8
   128a6:	47b0      	blx	r6
   128a8:	2800      	cmp	r0, #0
   128aa:	db6a      	blt.n	12982 <cbvprintf+0x5c6>
   128ac:	3401      	adds	r4, #1
						sign = 0;
   128ae:	46d8      	mov	r8, fp
					}
					pad = '0';
   128b0:	f04f 0b30 	mov.w	fp, #48	; 0x30
   128b4:	e00f      	b.n	128d6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
   128b6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   128ba:	e7cd      	b.n	12858 <cbvprintf+0x49c>
   128bc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   128c0:	e7ca      	b.n	12858 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
   128c2:	f011 0f08 	tst.w	r1, #8
   128c6:	d0d7      	beq.n	12878 <cbvprintf+0x4bc>
			nj_len += 1U;
   128c8:	3201      	adds	r2, #1
   128ca:	e7d5      	b.n	12878 <cbvprintf+0x4bc>
				char pad = ' ';
   128cc:	f04f 0b20 	mov.w	fp, #32
   128d0:	e001      	b.n	128d6 <cbvprintf+0x51a>
					pad = '0';
   128d2:	f04f 0b30 	mov.w	fp, #48	; 0x30
   128d6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   128d8:	1e5f      	subs	r7, r3, #1
   128da:	2b00      	cmp	r3, #0
   128dc:	dd07      	ble.n	128ee <cbvprintf+0x532>
					OUTC(pad);
   128de:	4629      	mov	r1, r5
   128e0:	4658      	mov	r0, fp
   128e2:	47b0      	blx	r6
   128e4:	2800      	cmp	r0, #0
   128e6:	db4c      	blt.n	12982 <cbvprintf+0x5c6>
   128e8:	3401      	adds	r4, #1
				while (width-- > 0) {
   128ea:	463b      	mov	r3, r7
   128ec:	e7f4      	b.n	128d8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   128ee:	f1b8 0f00 	cmp.w	r8, #0
   128f2:	d005      	beq.n	12900 <cbvprintf+0x544>
			OUTC(sign);
   128f4:	4629      	mov	r1, r5
   128f6:	4640      	mov	r0, r8
   128f8:	47b0      	blx	r6
   128fa:	2800      	cmp	r0, #0
   128fc:	db41      	blt.n	12982 <cbvprintf+0x5c6>
   128fe:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   12900:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12904:	f3c3 1200 	ubfx	r2, r3, #4, #1
   12908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1290c:	4313      	orrs	r3, r2
   1290e:	d005      	beq.n	1291c <cbvprintf+0x560>
				OUTC('0');
   12910:	4629      	mov	r1, r5
   12912:	2030      	movs	r0, #48	; 0x30
   12914:	47b0      	blx	r6
   12916:	2800      	cmp	r0, #0
   12918:	db33      	blt.n	12982 <cbvprintf+0x5c6>
   1291a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1291c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12920:	f013 0f10 	tst.w	r3, #16
   12924:	d006      	beq.n	12934 <cbvprintf+0x578>
				OUTC(conv->specifier);
   12926:	4629      	mov	r1, r5
   12928:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1292c:	47b0      	blx	r6
   1292e:	2800      	cmp	r0, #0
   12930:	db27      	blt.n	12982 <cbvprintf+0x5c6>
   12932:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   12934:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   12936:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1293a:	2b00      	cmp	r3, #0
   1293c:	dd07      	ble.n	1294e <cbvprintf+0x592>
				OUTC('0');
   1293e:	4629      	mov	r1, r5
   12940:	2030      	movs	r0, #48	; 0x30
   12942:	47b0      	blx	r6
   12944:	2800      	cmp	r0, #0
   12946:	db1c      	blt.n	12982 <cbvprintf+0x5c6>
   12948:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1294a:	4643      	mov	r3, r8
   1294c:	e7f3      	b.n	12936 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
   1294e:	4653      	mov	r3, sl
   12950:	464a      	mov	r2, r9
   12952:	4629      	mov	r1, r5
   12954:	4630      	mov	r0, r6
   12956:	f00d fb58 	bl	2000a <outs>
   1295a:	2800      	cmp	r0, #0
   1295c:	db11      	blt.n	12982 <cbvprintf+0x5c6>
   1295e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   12960:	2f00      	cmp	r7, #0
   12962:	dd07      	ble.n	12974 <cbvprintf+0x5b8>
			OUTC(' ');
   12964:	4629      	mov	r1, r5
   12966:	2020      	movs	r0, #32
   12968:	47b0      	blx	r6
   1296a:	2800      	cmp	r0, #0
   1296c:	db09      	blt.n	12982 <cbvprintf+0x5c6>
   1296e:	3401      	adds	r4, #1
			--width;
   12970:	3f01      	subs	r7, #1
   12972:	e7f5      	b.n	12960 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
   12974:	f8dd 9008 	ldr.w	r9, [sp, #8]
   12978:	e528      	b.n	123cc <cbvprintf+0x10>
   1297a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1297e:	e525      	b.n	123cc <cbvprintf+0x10>
		}
	}

	return count;
   12980:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   12982:	b011      	add	sp, #68	; 0x44
   12984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12988:	0002590d 	.word	0x0002590d

0001298c <nordicsemi_nrf91_init>:
   1298c:	f04f 0220 	mov.w	r2, #32
   12990:	f3ef 8311 	mrs	r3, BASEPRI
   12994:	f382 8812 	msr	BASEPRI_MAX, r2
   12998:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1299c:	4a04      	ldr	r2, [pc, #16]	; (129b0 <nordicsemi_nrf91_init+0x24>)
   1299e:	2101      	movs	r1, #1
   129a0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   129a4:	f383 8811 	msr	BASEPRI, r3
   129a8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   129ac:	2000      	movs	r0, #0
   129ae:	4770      	bx	lr
   129b0:	40039000 	.word	0x40039000

000129b4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   129b4:	b130      	cbz	r0, 129c4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   129b6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   129b8:	0180      	lsls	r0, r0, #6
   129ba:	4b03      	ldr	r3, [pc, #12]	; (129c8 <arch_busy_wait+0x14>)
   129bc:	f043 0301 	orr.w	r3, r3, #1
   129c0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   129c2:	bd08      	pop	{r3, pc}
   129c4:	4770      	bx	lr
   129c6:	bf00      	nop
   129c8:	00025410 	.word	0x00025410

000129cc <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   129cc:	4b05      	ldr	r3, [pc, #20]	; (129e4 <is_rodata+0x18>)
   129ce:	4298      	cmp	r0, r3
   129d0:	d304      	bcc.n	129dc <is_rodata+0x10>
   129d2:	4b05      	ldr	r3, [pc, #20]	; (129e8 <is_rodata+0x1c>)
   129d4:	4298      	cmp	r0, r3
   129d6:	d303      	bcc.n	129e0 <is_rodata+0x14>
   129d8:	2000      	movs	r0, #0
   129da:	4770      	bx	lr
   129dc:	2000      	movs	r0, #0
   129de:	4770      	bx	lr
   129e0:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   129e2:	4770      	bx	lr
   129e4:	00024fd8 	.word	0x00024fd8
   129e8:	00027708 	.word	0x00027708

000129ec <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   129ec:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   129ee:	4b06      	ldr	r3, [pc, #24]	; (12a08 <thread_set+0x1c>)
   129f0:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   129f2:	b118      	cbz	r0, 129fc <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   129f4:	4b05      	ldr	r3, [pc, #20]	; (12a0c <thread_set+0x20>)
   129f6:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   129f8:	2b09      	cmp	r3, #9
   129fa:	dc00      	bgt.n	129fe <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   129fc:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   129fe:	4804      	ldr	r0, [pc, #16]	; (12a10 <thread_set+0x24>)
   12a00:	f00a fc38 	bl	1d274 <z_impl_k_sem_give>
}
   12a04:	e7fa      	b.n	129fc <thread_set+0x10>
   12a06:	bf00      	nop
   12a08:	2000ce58 	.word	0x2000ce58
   12a0c:	2000ce28 	.word	0x2000ce28
   12a10:	2000c768 	.word	0x2000c768

00012a14 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   12a14:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   12a16:	4802      	ldr	r0, [pc, #8]	; (12a20 <log_process_thread_timer_expiry_fn+0xc>)
   12a18:	f00a fc2c 	bl	1d274 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   12a1c:	bd08      	pop	{r3, pc}
   12a1e:	bf00      	nop
   12a20:	2000c768 	.word	0x2000c768

00012a24 <next_pending>:
{
   12a24:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   12a26:	4803      	ldr	r0, [pc, #12]	; (12a34 <next_pending+0x10>)
   12a28:	f00d fb36 	bl	20098 <log_list_head_peek>
}
   12a2c:	3800      	subs	r0, #0
   12a2e:	bf18      	it	ne
   12a30:	2001      	movne	r0, #1
   12a32:	bd08      	pop	{r3, pc}
   12a34:	2000ce34 	.word	0x2000ce34

00012a38 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12a38:	b530      	push	{r4, r5, lr}
   12a3a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12a3c:	2200      	movs	r2, #0
   12a3e:	490f      	ldr	r1, [pc, #60]	; (12a7c <enable_logger+0x44>)
   12a40:	480f      	ldr	r0, [pc, #60]	; (12a80 <enable_logger+0x48>)
   12a42:	f011 ff41 	bl	248c8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12a46:	4d0f      	ldr	r5, [pc, #60]	; (12a84 <enable_logger+0x4c>)
   12a48:	2200      	movs	r2, #0
   12a4a:	2300      	movs	r3, #0
   12a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12a50:	2400      	movs	r4, #0
   12a52:	9404      	str	r4, [sp, #16]
   12a54:	230e      	movs	r3, #14
   12a56:	9303      	str	r3, [sp, #12]
   12a58:	9402      	str	r4, [sp, #8]
   12a5a:	9401      	str	r4, [sp, #4]
   12a5c:	9400      	str	r4, [sp, #0]
   12a5e:	4b0a      	ldr	r3, [pc, #40]	; (12a88 <enable_logger+0x50>)
   12a60:	f44f 7240 	mov.w	r2, #768	; 0x300
   12a64:	4909      	ldr	r1, [pc, #36]	; (12a8c <enable_logger+0x54>)
   12a66:	4628      	mov	r0, r5
   12a68:	f011 fb52 	bl	24110 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12a6c:	4908      	ldr	r1, [pc, #32]	; (12a90 <enable_logger+0x58>)
   12a6e:	4628      	mov	r0, r5
   12a70:	f00a fa14 	bl	1ce9c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12a74:	4620      	mov	r0, r4
   12a76:	b009      	add	sp, #36	; 0x24
   12a78:	bd30      	pop	{r4, r5, pc}
   12a7a:	bf00      	nop
   12a7c:	00012a15 	.word	0x00012a15
   12a80:	2000c7b8 	.word	0x2000c7b8
   12a84:	2000c7f0 	.word	0x2000c7f0
   12a88:	000130dd 	.word	0x000130dd
   12a8c:	2000d6b0 	.word	0x2000d6b0
   12a90:	00025914 	.word	0x00025914

00012a94 <z_log_get_s_mask>:
{
   12a94:	b530      	push	{r4, r5, lr}
   12a96:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   12a98:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   12a9a:	4684      	mov	ip, r0
	bool arm = false;
   12a9c:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   12a9e:	e001      	b.n	12aa4 <z_log_get_s_mask+0x10>
			arm = !arm;
   12aa0:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   12aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
   12aa8:	b1b2      	cbz	r2, 12ad8 <z_log_get_s_mask+0x44>
   12aaa:	458c      	cmp	ip, r1
   12aac:	d214      	bcs.n	12ad8 <z_log_get_s_mask+0x44>
		if (curr == '%') {
   12aae:	2a25      	cmp	r2, #37	; 0x25
   12ab0:	d0f6      	beq.n	12aa0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   12ab2:	2c00      	cmp	r4, #0
   12ab4:	d0f6      	beq.n	12aa4 <z_log_get_s_mask+0x10>
   12ab6:	4d09      	ldr	r5, [pc, #36]	; (12adc <z_log_get_s_mask+0x48>)
   12ab8:	f812 e005 	ldrb.w	lr, [r2, r5]
   12abc:	f01e 0f03 	tst.w	lr, #3
   12ac0:	d0f0      	beq.n	12aa4 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   12ac2:	2a73      	cmp	r2, #115	; 0x73
   12ac4:	d003      	beq.n	12ace <z_log_get_s_mask+0x3a>
			arg++;
   12ac6:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
   12aca:	2400      	movs	r4, #0
   12acc:	e7ea      	b.n	12aa4 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   12ace:	2201      	movs	r2, #1
   12ad0:	fa02 f20c 	lsl.w	r2, r2, ip
   12ad4:	4310      	orrs	r0, r2
   12ad6:	e7f6      	b.n	12ac6 <z_log_get_s_mask+0x32>
}
   12ad8:	bd30      	pop	{r4, r5, pc}
   12ada:	bf00      	nop
   12adc:	000275b3 	.word	0x000275b3

00012ae0 <log_init>:
   12ae0:	4b16      	ldr	r3, [pc, #88]	; (12b3c <log_init+0x5c>)
   12ae2:	e8d3 2fef 	ldaex	r2, [r3]
   12ae6:	1c51      	adds	r1, r2, #1
   12ae8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12aec:	2800      	cmp	r0, #0
   12aee:	d1f8      	bne.n	12ae2 <log_init+0x2>
	if (atomic_inc(&initialized) != 0) {
   12af0:	bb1a      	cbnz	r2, 12b3a <log_init+0x5a>
{
   12af2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   12af4:	2400      	movs	r4, #0
   12af6:	e009      	b.n	12b0c <log_init+0x2c>
					   backend->cb->ctx,
   12af8:	4b11      	ldr	r3, [pc, #68]	; (12b40 <log_init+0x60>)
   12afa:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   12afe:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   12b00:	2204      	movs	r2, #4
   12b02:	6819      	ldr	r1, [r3, #0]
   12b04:	4628      	mov	r0, r5
   12b06:	f000 fb27 	bl	13158 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12b0a:	3401      	adds	r4, #1
   12b0c:	4b0d      	ldr	r3, [pc, #52]	; (12b44 <log_init+0x64>)
   12b0e:	4a0c      	ldr	r2, [pc, #48]	; (12b40 <log_init+0x60>)
   12b10:	1a9b      	subs	r3, r3, r2
   12b12:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12b16:	da0f      	bge.n	12b38 <log_init+0x58>
		const struct log_backend *backend = log_backend_get(i);
   12b18:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   12b1a:	4d09      	ldr	r5, [pc, #36]	; (12b40 <log_init+0x60>)
   12b1c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   12b20:	7b2b      	ldrb	r3, [r5, #12]
   12b22:	2b00      	cmp	r3, #0
   12b24:	d0f1      	beq.n	12b0a <log_init+0x2a>
			if (backend->api->init != NULL) {
   12b26:	0123      	lsls	r3, r4, #4
   12b28:	4a05      	ldr	r2, [pc, #20]	; (12b40 <log_init+0x60>)
   12b2a:	58d3      	ldr	r3, [r2, r3]
   12b2c:	699b      	ldr	r3, [r3, #24]
   12b2e:	2b00      	cmp	r3, #0
   12b30:	d0e2      	beq.n	12af8 <log_init+0x18>
				backend->api->init(backend);
   12b32:	4628      	mov	r0, r5
   12b34:	4798      	blx	r3
   12b36:	e7df      	b.n	12af8 <log_init+0x18>
}
   12b38:	bd70      	pop	{r4, r5, r6, pc}
   12b3a:	4770      	bx	lr
   12b3c:	2000ce30 	.word	0x2000ce30
   12b40:	0002536c 	.word	0x0002536c
   12b44:	0002537c 	.word	0x0002537c

00012b48 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   12b48:	b138      	cbz	r0, 12b5a <log_set_timestamp_func+0x12>
{
   12b4a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   12b4c:	4a04      	ldr	r2, [pc, #16]	; (12b60 <log_set_timestamp_func+0x18>)
   12b4e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   12b50:	4608      	mov	r0, r1
   12b52:	f000 fd81 	bl	13658 <log_output_timestamp_freq_set>
	return 0;
   12b56:	2000      	movs	r0, #0
}
   12b58:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12b5a:	f06f 0015 	mvn.w	r0, #21
}
   12b5e:	4770      	bx	lr
   12b60:	2000c504 	.word	0x2000c504

00012b64 <log_core_init>:
{
   12b64:	b508      	push	{r3, lr}
	panic_mode = false;
   12b66:	2300      	movs	r3, #0
   12b68:	4a0a      	ldr	r2, [pc, #40]	; (12b94 <log_core_init+0x30>)
   12b6a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12b6c:	4a0a      	ldr	r2, [pc, #40]	; (12b98 <log_core_init+0x34>)
   12b6e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   12b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12b74:	4809      	ldr	r0, [pc, #36]	; (12b9c <log_core_init+0x38>)
   12b76:	f7ff ffe7 	bl	12b48 <log_set_timestamp_func>
		log_msg_pool_init();
   12b7a:	f000 fb11 	bl	131a0 <log_msg_pool_init>
		log_list_init(&list);
   12b7e:	4808      	ldr	r0, [pc, #32]	; (12ba0 <log_core_init+0x3c>)
   12b80:	f00d fa7c 	bl	2007c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12b84:	2304      	movs	r3, #4
   12b86:	2234      	movs	r2, #52	; 0x34
   12b88:	4906      	ldr	r1, [pc, #24]	; (12ba4 <log_core_init+0x40>)
   12b8a:	4807      	ldr	r0, [pc, #28]	; (12ba8 <log_core_init+0x44>)
   12b8c:	f011 fa63 	bl	24056 <k_mem_slab_init>
}
   12b90:	bd08      	pop	{r3, pc}
   12b92:	bf00      	nop
   12b94:	2000d56b 	.word	0x2000d56b
   12b98:	2000ce2c 	.word	0x2000ce2c
   12b9c:	000200b1 	.word	0x000200b1
   12ba0:	2000ce34 	.word	0x2000ce34
   12ba4:	200103f0 	.word	0x200103f0
   12ba8:	2000ce3c 	.word	0x2000ce3c

00012bac <get_msg>:
{
   12bac:	b510      	push	{r4, lr}
	__asm__ volatile(
   12bae:	f04f 0320 	mov.w	r3, #32
   12bb2:	f3ef 8411 	mrs	r4, BASEPRI
   12bb6:	f383 8812 	msr	BASEPRI_MAX, r3
   12bba:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   12bbe:	4804      	ldr	r0, [pc, #16]	; (12bd0 <get_msg+0x24>)
   12bc0:	f00d fa6c 	bl	2009c <log_list_head_get>
	__asm__ volatile(
   12bc4:	f384 8811 	msr	BASEPRI, r4
   12bc8:	f3bf 8f6f 	isb	sy
}
   12bcc:	bd10      	pop	{r4, pc}
   12bce:	bf00      	nop
   12bd0:	2000ce34 	.word	0x2000ce34

00012bd4 <z_log_notify_backend_enabled>:
{
   12bd4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12bd6:	4b05      	ldr	r3, [pc, #20]	; (12bec <z_log_notify_backend_enabled+0x18>)
   12bd8:	781b      	ldrb	r3, [r3, #0]
   12bda:	b11b      	cbz	r3, 12be4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   12bdc:	4b03      	ldr	r3, [pc, #12]	; (12bec <z_log_notify_backend_enabled+0x18>)
   12bde:	2201      	movs	r2, #1
   12be0:	701a      	strb	r2, [r3, #0]
}
   12be2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   12be4:	4802      	ldr	r0, [pc, #8]	; (12bf0 <z_log_notify_backend_enabled+0x1c>)
   12be6:	f00a fb45 	bl	1d274 <z_impl_k_sem_give>
}
   12bea:	e7f7      	b.n	12bdc <z_log_notify_backend_enabled+0x8>
   12bec:	2000d56a 	.word	0x2000d56a
   12bf0:	2000c768 	.word	0x2000c768

00012bf4 <z_log_dropped>:
   12bf4:	4b08      	ldr	r3, [pc, #32]	; (12c18 <z_log_dropped+0x24>)
   12bf6:	e8d3 2fef 	ldaex	r2, [r3]
   12bfa:	3201      	adds	r2, #1
   12bfc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12c00:	2900      	cmp	r1, #0
   12c02:	d1f8      	bne.n	12bf6 <z_log_dropped+0x2>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12c04:	4b05      	ldr	r3, [pc, #20]	; (12c1c <z_log_dropped+0x28>)
   12c06:	e8d3 2fef 	ldaex	r2, [r3]
   12c0a:	3a01      	subs	r2, #1
   12c0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12c10:	2900      	cmp	r1, #0
   12c12:	d1f8      	bne.n	12c06 <z_log_dropped+0x12>
}
   12c14:	4770      	bx	lr
   12c16:	bf00      	nop
   12c18:	2000ce2c 	.word	0x2000ce2c
   12c1c:	2000ce28 	.word	0x2000ce28

00012c20 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12c20:	4b04      	ldr	r3, [pc, #16]	; (12c34 <z_log_dropped_read_and_clear+0x14>)
}
   12c22:	2000      	movs	r0, #0
   12c24:	4602      	mov	r2, r0
   12c26:	e8d3 0fef 	ldaex	r0, [r3]
   12c2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12c2e:	2900      	cmp	r1, #0
   12c30:	d1f9      	bne.n	12c26 <z_log_dropped_read_and_clear+0x6>
   12c32:	4770      	bx	lr
   12c34:	2000ce2c 	.word	0x2000ce2c

00012c38 <dropped_notify>:
{
   12c38:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12c3a:	f7ff fff1 	bl	12c20 <z_log_dropped_read_and_clear>
   12c3e:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   12c40:	2400      	movs	r4, #0
   12c42:	e000      	b.n	12c46 <dropped_notify+0xe>
   12c44:	3401      	adds	r4, #1
   12c46:	4b0b      	ldr	r3, [pc, #44]	; (12c74 <dropped_notify+0x3c>)
   12c48:	4a0b      	ldr	r2, [pc, #44]	; (12c78 <dropped_notify+0x40>)
   12c4a:	1a9b      	subs	r3, r3, r2
   12c4c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12c50:	da0f      	bge.n	12c72 <dropped_notify+0x3a>
   12c52:	4809      	ldr	r0, [pc, #36]	; (12c78 <dropped_notify+0x40>)
   12c54:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12c58:	6843      	ldr	r3, [r0, #4]
   12c5a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d0f1      	beq.n	12c44 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   12c60:	0123      	lsls	r3, r4, #4
   12c62:	4a05      	ldr	r2, [pc, #20]	; (12c78 <dropped_notify+0x40>)
   12c64:	58d3      	ldr	r3, [r2, r3]
   12c66:	691b      	ldr	r3, [r3, #16]
   12c68:	2b00      	cmp	r3, #0
   12c6a:	d0eb      	beq.n	12c44 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   12c6c:	4629      	mov	r1, r5
   12c6e:	4798      	blx	r3
   12c70:	e7e8      	b.n	12c44 <dropped_notify+0xc>
}
   12c72:	bd38      	pop	{r3, r4, r5, pc}
   12c74:	0002537c 	.word	0x0002537c
   12c78:	0002536c 	.word	0x0002536c

00012c7c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   12c7c:	4b03      	ldr	r3, [pc, #12]	; (12c8c <z_log_dropped_pending+0x10>)
   12c7e:	6818      	ldr	r0, [r3, #0]
}
   12c80:	2800      	cmp	r0, #0
   12c82:	bfd4      	ite	le
   12c84:	2000      	movle	r0, #0
   12c86:	2001      	movgt	r0, #1
   12c88:	4770      	bx	lr
   12c8a:	bf00      	nop
   12c8c:	2000ce2c 	.word	0x2000ce2c

00012c90 <z_log_strdup>:
{
   12c90:	b570      	push	{r4, r5, r6, lr}
   12c92:	b082      	sub	sp, #8
   12c94:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   12c96:	f7ff fe99 	bl	129cc <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12c9a:	b9f0      	cbnz	r0, 12cda <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12c9c:	2200      	movs	r2, #0
   12c9e:	2300      	movs	r3, #0
   12ca0:	a901      	add	r1, sp, #4
   12ca2:	480f      	ldr	r0, [pc, #60]	; (12ce0 <z_log_strdup+0x50>)
   12ca4:	f00a f8a6 	bl	1cdf4 <k_mem_slab_alloc>
	if (err != 0) {
   12ca8:	b108      	cbz	r0, 12cae <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   12caa:	4c0e      	ldr	r4, [pc, #56]	; (12ce4 <z_log_strdup+0x54>)
   12cac:	e015      	b.n	12cda <z_log_strdup+0x4a>
	(void)atomic_set(&dup->refcount, 1);
   12cae:	9b01      	ldr	r3, [sp, #4]
   12cb0:	2201      	movs	r2, #1
   12cb2:	e8d3 1fef 	ldaex	r1, [r3]
   12cb6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12cba:	2800      	cmp	r0, #0
   12cbc:	d1f9      	bne.n	12cb2 <z_log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12cbe:	9d01      	ldr	r5, [sp, #4]
   12cc0:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12cc2:	222d      	movs	r2, #45	; 0x2d
   12cc4:	4621      	mov	r1, r4
   12cc6:	4630      	mov	r0, r6
   12cc8:	f011 ff40 	bl	24b4c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12ccc:	237e      	movs	r3, #126	; 0x7e
   12cce:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12cd2:	2300      	movs	r3, #0
   12cd4:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	return dup->buf;
   12cd8:	4634      	mov	r4, r6
}
   12cda:	4620      	mov	r0, r4
   12cdc:	b002      	add	sp, #8
   12cde:	bd70      	pop	{r4, r5, r6, pc}
   12ce0:	2000ce3c 	.word	0x2000ce3c
   12ce4:	0002591c 	.word	0x0002591c

00012ce8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12ce8:	b138      	cbz	r0, 12cfa <log_is_strdup+0x12>
   12cea:	4a07      	ldr	r2, [pc, #28]	; (12d08 <log_is_strdup+0x20>)
   12cec:	4290      	cmp	r0, r2
   12cee:	d306      	bcc.n	12cfe <log_is_strdup+0x16>
   12cf0:	32d0      	adds	r2, #208	; 0xd0
   12cf2:	4290      	cmp	r0, r2
   12cf4:	d305      	bcc.n	12d02 <log_is_strdup+0x1a>
   12cf6:	2000      	movs	r0, #0
   12cf8:	4770      	bx	lr
   12cfa:	2000      	movs	r0, #0
   12cfc:	4770      	bx	lr
   12cfe:	2000      	movs	r0, #0
   12d00:	4770      	bx	lr
   12d02:	2001      	movs	r0, #1
}
   12d04:	4770      	bx	lr
   12d06:	bf00      	nop
   12d08:	200103f0 	.word	0x200103f0

00012d0c <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12d0c:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   12d0e:	f013 0f01 	tst.w	r3, #1
   12d12:	d000      	beq.n	12d16 <detect_missed_strdup+0xa>
   12d14:	4770      	bx	lr
{
   12d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d1a:	b083      	sub	sp, #12
   12d1c:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   12d1e:	f00d fa5e 	bl	201de <log_msg_str_get>
   12d22:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12d24:	4630      	mov	r0, r6
   12d26:	f00d fa45 	bl	201b4 <log_msg_nargs_get>
   12d2a:	4601      	mov	r1, r0
   12d2c:	4638      	mov	r0, r7
   12d2e:	f7ff feb1 	bl	12a94 <z_log_get_s_mask>
   12d32:	4605      	mov	r5, r0
	while (mask) {
   12d34:	e004      	b.n	12d40 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   12d36:	2201      	movs	r2, #1
   12d38:	fa02 f404 	lsl.w	r4, r2, r4
   12d3c:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   12d40:	b36d      	cbz	r5, 12d9e <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   12d42:	fab5 f485 	clz	r4, r5
   12d46:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12d4a:	4621      	mov	r1, r4
   12d4c:	4630      	mov	r0, r6
   12d4e:	f00d fa34 	bl	201ba <log_msg_arg_get>
   12d52:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12d54:	f7ff fe3a 	bl	129cc <is_rodata>
   12d58:	2800      	cmp	r0, #0
   12d5a:	d1ec      	bne.n	12d36 <detect_missed_strdup+0x2a>
   12d5c:	4648      	mov	r0, r9
   12d5e:	f7ff ffc3 	bl	12ce8 <log_is_strdup>
   12d62:	2800      	cmp	r0, #0
   12d64:	d1e7      	bne.n	12d36 <detect_missed_strdup+0x2a>
   12d66:	4b0f      	ldr	r3, [pc, #60]	; (12da4 <detect_missed_strdup+0x98>)
   12d68:	4599      	cmp	r9, r3
   12d6a:	d0e4      	beq.n	12d36 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   12d6c:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12d6e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   12d72:	f000 f9e1 	bl	13138 <log_source_name_get>
   12d76:	4602      	mov	r2, r0
   12d78:	4b0b      	ldr	r3, [pc, #44]	; (12da8 <detect_missed_strdup+0x9c>)
   12d7a:	490c      	ldr	r1, [pc, #48]	; (12dac <detect_missed_strdup+0xa0>)
   12d7c:	1a5b      	subs	r3, r3, r1
   12d7e:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12d80:	2101      	movs	r1, #1
   12d82:	f361 0802 	bfi	r8, r1, #0, #3
   12d86:	f36f 08c5 	bfc	r8, #3, #3
   12d8a:	f363 188f 	bfi	r8, r3, #6, #10
   12d8e:	f8ad 8000 	strh.w	r8, [sp]
   12d92:	463b      	mov	r3, r7
   12d94:	4621      	mov	r1, r4
   12d96:	4806      	ldr	r0, [pc, #24]	; (12db0 <detect_missed_strdup+0xa4>)
   12d98:	f000 f8a8 	bl	12eec <log_3>
   12d9c:	e7cb      	b.n	12d36 <detect_missed_strdup+0x2a>
}
   12d9e:	b003      	add	sp, #12
   12da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12da4:	0002591c 	.word	0x0002591c
   12da8:	0002530c 	.word	0x0002530c
   12dac:	000252ec 	.word	0x000252ec
   12db0:	00025938 	.word	0x00025938

00012db4 <msg_process>:
{
   12db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12db6:	4606      	mov	r6, r0
	if (!bypass) {
   12db8:	bb19      	cbnz	r1, 12e02 <msg_process+0x4e>
		    !panic_mode) {
   12dba:	4b14      	ldr	r3, [pc, #80]	; (12e0c <msg_process+0x58>)
   12dbc:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   12dbe:	b10b      	cbz	r3, 12dc4 <msg_process+0x10>
{
   12dc0:	2400      	movs	r4, #0
   12dc2:	e003      	b.n	12dcc <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   12dc4:	f7ff ffa2 	bl	12d0c <detect_missed_strdup>
   12dc8:	e7fa      	b.n	12dc0 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   12dca:	3401      	adds	r4, #1
   12dcc:	4b10      	ldr	r3, [pc, #64]	; (12e10 <msg_process+0x5c>)
   12dce:	4a11      	ldr	r2, [pc, #68]	; (12e14 <msg_process+0x60>)
   12dd0:	1a9b      	subs	r3, r3, r2
   12dd2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   12dd6:	da14      	bge.n	12e02 <msg_process+0x4e>
	return &__log_backends_start[idx];
   12dd8:	4d0e      	ldr	r5, [pc, #56]	; (12e14 <msg_process+0x60>)
   12dda:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   12dde:	686b      	ldr	r3, [r5, #4]
   12de0:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   12de2:	2b00      	cmp	r3, #0
   12de4:	d0f1      	beq.n	12dca <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   12de6:	4631      	mov	r1, r6
   12de8:	4628      	mov	r0, r5
   12dea:	f00d f95f 	bl	200ac <msg_filter_check>
			if (log_backend_is_active(backend) &&
   12dee:	2800      	cmp	r0, #0
   12df0:	d0eb      	beq.n	12dca <msg_process+0x16>
	backend->api->put(backend, msg);
   12df2:	0127      	lsls	r7, r4, #4
   12df4:	4b07      	ldr	r3, [pc, #28]	; (12e14 <msg_process+0x60>)
   12df6:	59db      	ldr	r3, [r3, r7]
   12df8:	685b      	ldr	r3, [r3, #4]
   12dfa:	4631      	mov	r1, r6
   12dfc:	4628      	mov	r0, r5
   12dfe:	4798      	blx	r3
}
   12e00:	e7e3      	b.n	12dca <msg_process+0x16>
			log_msg_put(msg.msg);
   12e02:	4630      	mov	r0, r6
   12e04:	f00d f9ed 	bl	201e2 <log_msg_put>
}
   12e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e0a:	bf00      	nop
   12e0c:	2000d56b 	.word	0x2000d56b
   12e10:	0002537c 	.word	0x0002537c
   12e14:	0002536c 	.word	0x0002536c

00012e18 <z_impl_log_process>:
{
   12e18:	b510      	push	{r4, lr}
   12e1a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12e1c:	4b0f      	ldr	r3, [pc, #60]	; (12e5c <z_impl_log_process+0x44>)
   12e1e:	781b      	ldrb	r3, [r3, #0]
   12e20:	b903      	cbnz	r3, 12e24 <z_impl_log_process+0xc>
   12e22:	b1b0      	cbz	r0, 12e52 <z_impl_log_process+0x3a>
	msg = get_msg();
   12e24:	f7ff fec2 	bl	12bac <get_msg>
	if (msg.msg) {
   12e28:	4603      	mov	r3, r0
   12e2a:	b160      	cbz	r0, 12e46 <z_impl_log_process+0x2e>
		if (!bypass) {
   12e2c:	b93c      	cbnz	r4, 12e3e <z_impl_log_process+0x26>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12e2e:	4a0c      	ldr	r2, [pc, #48]	; (12e60 <z_impl_log_process+0x48>)
   12e30:	e8d2 1fef 	ldaex	r1, [r2]
   12e34:	3901      	subs	r1, #1
   12e36:	e8c2 1fe0 	stlex	r0, r1, [r2]
   12e3a:	2800      	cmp	r0, #0
   12e3c:	d1f8      	bne.n	12e30 <z_impl_log_process+0x18>
		msg_process(msg, bypass);
   12e3e:	4621      	mov	r1, r4
   12e40:	4618      	mov	r0, r3
   12e42:	f7ff ffb7 	bl	12db4 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   12e46:	b914      	cbnz	r4, 12e4e <z_impl_log_process+0x36>
   12e48:	f7ff ff18 	bl	12c7c <z_log_dropped_pending>
   12e4c:	b910      	cbnz	r0, 12e54 <z_impl_log_process+0x3c>
	return next_pending();
   12e4e:	f7ff fde9 	bl	12a24 <next_pending>
}
   12e52:	bd10      	pop	{r4, pc}
		dropped_notify();
   12e54:	f7ff fef0 	bl	12c38 <dropped_notify>
   12e58:	e7f9      	b.n	12e4e <z_impl_log_process+0x36>
   12e5a:	bf00      	nop
   12e5c:	2000d56a 	.word	0x2000d56a
   12e60:	2000ce28 	.word	0x2000ce28

00012e64 <z_log_msg_post_finalize>:
{
   12e64:	b510      	push	{r4, lr}
   12e66:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12e68:	4b1b      	ldr	r3, [pc, #108]	; (12ed8 <z_log_msg_post_finalize+0x74>)
   12e6a:	e8d3 2fef 	ldaex	r2, [r3]
   12e6e:	1c51      	adds	r1, r2, #1
   12e70:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12e74:	2800      	cmp	r0, #0
   12e76:	d1f8      	bne.n	12e6a <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
   12e78:	4b18      	ldr	r3, [pc, #96]	; (12edc <z_log_msg_post_finalize+0x78>)
   12e7a:	781b      	ldrb	r3, [r3, #0]
   12e7c:	b93b      	cbnz	r3, 12e8e <z_log_msg_post_finalize+0x2a>
	} else if (proc_tid != NULL && cnt == 0) {
   12e7e:	4b18      	ldr	r3, [pc, #96]	; (12ee0 <z_log_msg_post_finalize+0x7c>)
   12e80:	681b      	ldr	r3, [r3, #0]
   12e82:	b103      	cbz	r3, 12e86 <z_log_msg_post_finalize+0x22>
   12e84:	b19a      	cbz	r2, 12eae <z_log_msg_post_finalize+0x4a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12e86:	2a0a      	cmp	r2, #10
   12e88:	d01c      	beq.n	12ec4 <z_log_msg_post_finalize+0x60>
}
   12e8a:	b002      	add	sp, #8
   12e8c:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   12e8e:	f04f 0320 	mov.w	r3, #32
   12e92:	f3ef 8411 	mrs	r4, BASEPRI
   12e96:	f383 8812 	msr	BASEPRI_MAX, r3
   12e9a:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12e9e:	2000      	movs	r0, #0
   12ea0:	f7ff ffba 	bl	12e18 <z_impl_log_process>
	__asm__ volatile(
   12ea4:	f384 8811 	msr	BASEPRI, r4
   12ea8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12eac:	e7ed      	b.n	12e8a <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_start(timer, duration, period);
   12eae:	2200      	movs	r2, #0
   12eb0:	2300      	movs	r3, #0
   12eb2:	e9cd 2300 	strd	r2, r3, [sp]
   12eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12eba:	2300      	movs	r3, #0
   12ebc:	4809      	ldr	r0, [pc, #36]	; (12ee4 <z_log_msg_post_finalize+0x80>)
   12ebe:	f00b f98d 	bl	1e1dc <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   12ec2:	e7e2      	b.n	12e8a <z_log_msg_post_finalize+0x26>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d0e0      	beq.n	12e8a <z_log_msg_post_finalize+0x26>
	z_impl_k_timer_stop(timer);
   12ec8:	4806      	ldr	r0, [pc, #24]	; (12ee4 <z_log_msg_post_finalize+0x80>)
   12eca:	f011 fd09 	bl	248e0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12ece:	4806      	ldr	r0, [pc, #24]	; (12ee8 <z_log_msg_post_finalize+0x84>)
   12ed0:	f00a f9d0 	bl	1d274 <z_impl_k_sem_give>
}
   12ed4:	e7d9      	b.n	12e8a <z_log_msg_post_finalize+0x26>
   12ed6:	bf00      	nop
   12ed8:	2000ce28 	.word	0x2000ce28
   12edc:	2000d56b 	.word	0x2000d56b
   12ee0:	2000ce58 	.word	0x2000ce58
   12ee4:	2000c7b8 	.word	0x2000c7b8
   12ee8:	2000c768 	.word	0x2000c768

00012eec <log_3>:
{
   12eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ef0:	4680      	mov	r8, r0
   12ef2:	460f      	mov	r7, r1
   12ef4:	4616      	mov	r6, r2
   12ef6:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12ef8:	f000 f976 	bl	131e8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   12efc:	4604      	mov	r4, r0
   12efe:	b118      	cbz	r0, 12f08 <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   12f00:	2301      	movs	r3, #1
   12f02:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12f04:	2300      	movs	r3, #0
   12f06:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   12f08:	b14c      	cbz	r4, 12f1e <log_3+0x32>
		msg->str = str;
   12f0a:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   12f0e:	7a60      	ldrb	r0, [r4, #9]
   12f10:	2303      	movs	r3, #3
   12f12:	f363 1007 	bfi	r0, r3, #4, #4
   12f16:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
   12f18:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   12f1a:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   12f1c:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   12f1e:	b1c4      	cbz	r4, 12f52 <log_3+0x66>
	msg->hdr.ids = src_level;
   12f20:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12f24:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12f26:	4b0c      	ldr	r3, [pc, #48]	; (12f58 <log_3+0x6c>)
   12f28:	681b      	ldr	r3, [r3, #0]
   12f2a:	4798      	blx	r3
   12f2c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12f2e:	f04f 0320 	mov.w	r3, #32
   12f32:	f3ef 8511 	mrs	r5, BASEPRI
   12f36:	f383 8812 	msr	BASEPRI_MAX, r3
   12f3a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12f3e:	4621      	mov	r1, r4
   12f40:	4806      	ldr	r0, [pc, #24]	; (12f5c <log_3+0x70>)
   12f42:	f00d f89f 	bl	20084 <log_list_add_tail>
	__asm__ volatile(
   12f46:	f385 8811 	msr	BASEPRI, r5
   12f4a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   12f4e:	f7ff ff89 	bl	12e64 <z_log_msg_post_finalize>
}
   12f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f56:	bf00      	nop
   12f58:	2000c504 	.word	0x2000c504
   12f5c:	2000ce34 	.word	0x2000ce34

00012f60 <log_0>:
{
   12f60:	b570      	push	{r4, r5, r6, lr}
   12f62:	4605      	mov	r5, r0
   12f64:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12f66:	f000 f93f 	bl	131e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   12f6a:	4604      	mov	r4, r0
   12f6c:	b118      	cbz	r0, 12f76 <log_0+0x16>
		msg->hdr.ref_cnt = 1;
   12f6e:	2301      	movs	r3, #1
   12f70:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12f72:	2300      	movs	r3, #0
   12f74:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
   12f76:	b104      	cbz	r4, 12f7a <log_0+0x1a>
		msg->str = str;
   12f78:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   12f7a:	b1b4      	cbz	r4, 12faa <log_0+0x4a>
	msg->hdr.ids = src_level;
   12f7c:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12f7e:	4b0b      	ldr	r3, [pc, #44]	; (12fac <log_0+0x4c>)
   12f80:	681b      	ldr	r3, [r3, #0]
   12f82:	4798      	blx	r3
   12f84:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12f86:	f04f 0320 	mov.w	r3, #32
   12f8a:	f3ef 8511 	mrs	r5, BASEPRI
   12f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   12f92:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12f96:	4621      	mov	r1, r4
   12f98:	4805      	ldr	r0, [pc, #20]	; (12fb0 <log_0+0x50>)
   12f9a:	f00d f873 	bl	20084 <log_list_add_tail>
	__asm__ volatile(
   12f9e:	f385 8811 	msr	BASEPRI, r5
   12fa2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   12fa6:	f7ff ff5d 	bl	12e64 <z_log_msg_post_finalize>
}
   12faa:	bd70      	pop	{r4, r5, r6, pc}
   12fac:	2000c504 	.word	0x2000c504
   12fb0:	2000ce34 	.word	0x2000ce34

00012fb4 <log_1>:
{
   12fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fb6:	4607      	mov	r7, r0
   12fb8:	460e      	mov	r6, r1
   12fba:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12fbc:	f000 f914 	bl	131e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   12fc0:	4604      	mov	r4, r0
   12fc2:	b118      	cbz	r0, 12fcc <log_1+0x18>
		msg->hdr.ref_cnt = 1;
   12fc4:	2301      	movs	r3, #1
   12fc6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12fc8:	2300      	movs	r3, #0
   12fca:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
   12fcc:	b134      	cbz	r4, 12fdc <log_1+0x28>
		msg->str = str;
   12fce:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   12fd0:	7a63      	ldrb	r3, [r4, #9]
   12fd2:	2201      	movs	r2, #1
   12fd4:	f362 1307 	bfi	r3, r2, #4, #4
   12fd8:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   12fda:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
   12fdc:	b1b4      	cbz	r4, 1300c <log_1+0x58>
	msg->hdr.ids = src_level;
   12fde:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12fe0:	4b0b      	ldr	r3, [pc, #44]	; (13010 <log_1+0x5c>)
   12fe2:	681b      	ldr	r3, [r3, #0]
   12fe4:	4798      	blx	r3
   12fe6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12fe8:	f04f 0320 	mov.w	r3, #32
   12fec:	f3ef 8511 	mrs	r5, BASEPRI
   12ff0:	f383 8812 	msr	BASEPRI_MAX, r3
   12ff4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12ff8:	4621      	mov	r1, r4
   12ffa:	4806      	ldr	r0, [pc, #24]	; (13014 <log_1+0x60>)
   12ffc:	f00d f842 	bl	20084 <log_list_add_tail>
	__asm__ volatile(
   13000:	f385 8811 	msr	BASEPRI, r5
   13004:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   13008:	f7ff ff2c 	bl	12e64 <z_log_msg_post_finalize>
}
   1300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1300e:	bf00      	nop
   13010:	2000c504 	.word	0x2000c504
   13014:	2000ce34 	.word	0x2000ce34

00013018 <log_2>:
{
   13018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1301c:	4680      	mov	r8, r0
   1301e:	460f      	mov	r7, r1
   13020:	4616      	mov	r6, r2
   13022:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   13024:	f000 f8e0 	bl	131e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   13028:	4604      	mov	r4, r0
   1302a:	b118      	cbz	r0, 13034 <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
   1302c:	2301      	movs	r3, #1
   1302e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   13030:	2300      	movs	r3, #0
   13032:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
   13034:	b144      	cbz	r4, 13048 <log_2+0x30>
		msg->str = str;
   13036:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   1303a:	7a60      	ldrb	r0, [r4, #9]
   1303c:	2302      	movs	r3, #2
   1303e:	f363 1007 	bfi	r0, r3, #4, #4
   13042:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
   13044:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   13046:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
   13048:	b1b4      	cbz	r4, 13078 <log_2+0x60>
	msg->hdr.ids = src_level;
   1304a:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   1304c:	4b0b      	ldr	r3, [pc, #44]	; (1307c <log_2+0x64>)
   1304e:	681b      	ldr	r3, [r3, #0]
   13050:	4798      	blx	r3
   13052:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   13054:	f04f 0320 	mov.w	r3, #32
   13058:	f3ef 8511 	mrs	r5, BASEPRI
   1305c:	f383 8812 	msr	BASEPRI_MAX, r3
   13060:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   13064:	4621      	mov	r1, r4
   13066:	4806      	ldr	r0, [pc, #24]	; (13080 <log_2+0x68>)
   13068:	f00d f80c 	bl	20084 <log_list_add_tail>
	__asm__ volatile(
   1306c:	f385 8811 	msr	BASEPRI, r5
   13070:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   13074:	f7ff fef6 	bl	12e64 <z_log_msg_post_finalize>
}
   13078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1307c:	2000c504 	.word	0x2000c504
   13080:	2000ce34 	.word	0x2000ce34

00013084 <z_impl_log_panic>:
	if (panic_mode) {
   13084:	4b12      	ldr	r3, [pc, #72]	; (130d0 <z_impl_log_panic+0x4c>)
   13086:	781b      	ldrb	r3, [r3, #0]
   13088:	b103      	cbz	r3, 1308c <z_impl_log_panic+0x8>
   1308a:	4770      	bx	lr
{
   1308c:	b510      	push	{r4, lr}
	log_init();
   1308e:	f7ff fd27 	bl	12ae0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   13092:	2400      	movs	r4, #0
   13094:	e000      	b.n	13098 <z_impl_log_panic+0x14>
   13096:	3401      	adds	r4, #1
   13098:	4b0e      	ldr	r3, [pc, #56]	; (130d4 <z_impl_log_panic+0x50>)
   1309a:	4a0f      	ldr	r2, [pc, #60]	; (130d8 <z_impl_log_panic+0x54>)
   1309c:	1a9b      	subs	r3, r3, r2
   1309e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   130a2:	da0c      	bge.n	130be <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   130a4:	480c      	ldr	r0, [pc, #48]	; (130d8 <z_impl_log_panic+0x54>)
   130a6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   130aa:	6843      	ldr	r3, [r0, #4]
   130ac:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   130ae:	2b00      	cmp	r3, #0
   130b0:	d0f1      	beq.n	13096 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   130b2:	0123      	lsls	r3, r4, #4
   130b4:	4a08      	ldr	r2, [pc, #32]	; (130d8 <z_impl_log_panic+0x54>)
   130b6:	58d3      	ldr	r3, [r2, r3]
   130b8:	695b      	ldr	r3, [r3, #20]
   130ba:	4798      	blx	r3
}
   130bc:	e7eb      	b.n	13096 <z_impl_log_panic+0x12>
   130be:	2000      	movs	r0, #0
   130c0:	f7ff feaa 	bl	12e18 <z_impl_log_process>
		while (log_process(false) == true) {
   130c4:	2800      	cmp	r0, #0
   130c6:	d1fa      	bne.n	130be <z_impl_log_panic+0x3a>
	panic_mode = true;
   130c8:	4b01      	ldr	r3, [pc, #4]	; (130d0 <z_impl_log_panic+0x4c>)
   130ca:	2201      	movs	r2, #1
   130cc:	701a      	strb	r2, [r3, #0]
}
   130ce:	bd10      	pop	{r4, pc}
   130d0:	2000d56b 	.word	0x2000d56b
   130d4:	0002537c 	.word	0x0002537c
   130d8:	0002536c 	.word	0x0002536c

000130dc <log_process_thread_func>:
{
   130dc:	b508      	push	{r3, lr}
	log_init();
   130de:	f7ff fcff 	bl	12ae0 <log_init>
	return z_impl_z_current_get();
   130e2:	f00a fe6b 	bl	1ddbc <z_impl_z_current_get>
	thread_set(k_current_get());
   130e6:	f7ff fc81 	bl	129ec <thread_set>
   130ea:	2000      	movs	r0, #0
   130ec:	f7ff fe94 	bl	12e18 <z_impl_log_process>
		if (log_process(false) == false) {
   130f0:	2800      	cmp	r0, #0
   130f2:	d1fa      	bne.n	130ea <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
   130f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   130f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130fc:	4801      	ldr	r0, [pc, #4]	; (13104 <log_process_thread_func+0x28>)
   130fe:	f00a f8e1 	bl	1d2c4 <z_impl_k_sem_take>
   13102:	e7f2      	b.n	130ea <log_process_thread_func+0xe>
   13104:	2000c768 	.word	0x2000c768

00013108 <z_log_free>:
{
   13108:	b500      	push	{lr}
   1310a:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1310c:	3804      	subs	r0, #4
   1310e:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13110:	e8d0 3fef 	ldaex	r3, [r0]
   13114:	1e5a      	subs	r2, r3, #1
   13116:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1311a:	2900      	cmp	r1, #0
   1311c:	d1f8      	bne.n	13110 <z_log_free+0x8>
	if (atomic_dec(&dup->refcount) == 1) {
   1311e:	2b01      	cmp	r3, #1
   13120:	d002      	beq.n	13128 <z_log_free+0x20>
}
   13122:	b003      	add	sp, #12
   13124:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   13128:	a901      	add	r1, sp, #4
   1312a:	4802      	ldr	r0, [pc, #8]	; (13134 <z_log_free+0x2c>)
   1312c:	f010 ffa1 	bl	24072 <k_mem_slab_free>
}
   13130:	e7f7      	b.n	13122 <z_log_free+0x1a>
   13132:	bf00      	nop
   13134:	2000ce3c 	.word	0x2000ce3c

00013138 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   13138:	4b05      	ldr	r3, [pc, #20]	; (13150 <log_source_name_get+0x18>)
   1313a:	4a06      	ldr	r2, [pc, #24]	; (13154 <log_source_name_get+0x1c>)
   1313c:	1a9b      	subs	r3, r3, r2
   1313e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   13142:	d202      	bcs.n	1314a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   13144:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   13148:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1314a:	2000      	movs	r0, #0
}
   1314c:	4770      	bx	lr
   1314e:	bf00      	nop
   13150:	0002536c 	.word	0x0002536c
   13154:	000252ec 	.word	0x000252ec

00013158 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   13158:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1315a:	4b07      	ldr	r3, [pc, #28]	; (13178 <log_backend_enable+0x20>)
   1315c:	1ac3      	subs	r3, r0, r3
   1315e:	111b      	asrs	r3, r3, #4
   13160:	3301      	adds	r3, #1
	backend->cb->id = id;
   13162:	6842      	ldr	r2, [r0, #4]
   13164:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   13166:	6843      	ldr	r3, [r0, #4]
   13168:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1316a:	6843      	ldr	r3, [r0, #4]
   1316c:	2201      	movs	r2, #1
   1316e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   13170:	f7ff fd30 	bl	12bd4 <z_log_notify_backend_enabled>
}
   13174:	bd08      	pop	{r3, pc}
   13176:	bf00      	nop
   13178:	0002536c 	.word	0x0002536c

0001317c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   1317c:	b510      	push	{r4, lr}
   1317e:	b082      	sub	sp, #8
   13180:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   13182:	e005      	b.n	13190 <cont_free+0x14>
		next = cont->next;
   13184:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13186:	a901      	add	r1, sp, #4
   13188:	4804      	ldr	r0, [pc, #16]	; (1319c <cont_free+0x20>)
   1318a:	f010 ff72 	bl	24072 <k_mem_slab_free>
		cont = next;
   1318e:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
   13190:	9b01      	ldr	r3, [sp, #4]
   13192:	2b00      	cmp	r3, #0
   13194:	d1f6      	bne.n	13184 <cont_free+0x8>
	}
}
   13196:	b002      	add	sp, #8
   13198:	bd10      	pop	{r4, pc}
   1319a:	bf00      	nop
   1319c:	2000ce5c 	.word	0x2000ce5c

000131a0 <log_msg_pool_init>:
{
   131a0:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   131a2:	2320      	movs	r3, #32
   131a4:	461a      	mov	r2, r3
   131a6:	4902      	ldr	r1, [pc, #8]	; (131b0 <log_msg_pool_init+0x10>)
   131a8:	4802      	ldr	r0, [pc, #8]	; (131b4 <log_msg_pool_init+0x14>)
   131aa:	f010 ff54 	bl	24056 <k_mem_slab_init>
}
   131ae:	bd08      	pop	{r3, pc}
   131b0:	200104c0 	.word	0x200104c0
   131b4:	2000ce5c 	.word	0x2000ce5c

000131b8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   131b8:	b510      	push	{r4, lr}
   131ba:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   131bc:	2300      	movs	r3, #0
   131be:	9301      	str	r3, [sp, #4]
   131c0:	2001      	movs	r0, #1
   131c2:	f7ff fe29 	bl	12e18 <z_impl_log_process>
   131c6:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   131c8:	f7ff fd14 	bl	12bf4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   131cc:	2200      	movs	r2, #0
   131ce:	2300      	movs	r3, #0
   131d0:	a901      	add	r1, sp, #4
   131d2:	4804      	ldr	r0, [pc, #16]	; (131e4 <log_msg_no_space_handle+0x2c>)
   131d4:	f009 fe0e 	bl	1cdf4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   131d8:	b108      	cbz	r0, 131de <log_msg_no_space_handle+0x26>
   131da:	2c00      	cmp	r4, #0
   131dc:	d1f0      	bne.n	131c0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   131de:	9801      	ldr	r0, [sp, #4]
   131e0:	b002      	add	sp, #8
   131e2:	bd10      	pop	{r4, pc}
   131e4:	2000ce5c 	.word	0x2000ce5c

000131e8 <log_msg_chunk_alloc>:
{
   131e8:	b500      	push	{lr}
   131ea:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   131ec:	2300      	movs	r3, #0
   131ee:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   131f0:	f00c ff64 	bl	200bc <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   131f4:	b150      	cbz	r0, 1320c <log_msg_chunk_alloc+0x24>
   131f6:	2200      	movs	r2, #0
   131f8:	2300      	movs	r3, #0
   131fa:	a901      	add	r1, sp, #4
   131fc:	4807      	ldr	r0, [pc, #28]	; (1321c <log_msg_chunk_alloc+0x34>)
   131fe:	f009 fdf9 	bl	1cdf4 <k_mem_slab_alloc>
	if (err != 0) {
   13202:	b930      	cbnz	r0, 13212 <log_msg_chunk_alloc+0x2a>
}
   13204:	9801      	ldr	r0, [sp, #4]
   13206:	b003      	add	sp, #12
   13208:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1320c:	2200      	movs	r2, #0
   1320e:	2300      	movs	r3, #0
   13210:	e7f3      	b.n	131fa <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   13212:	f7ff ffd1 	bl	131b8 <log_msg_no_space_handle>
   13216:	9001      	str	r0, [sp, #4]
   13218:	e7f4      	b.n	13204 <log_msg_chunk_alloc+0x1c>
   1321a:	bf00      	nop
   1321c:	2000ce5c 	.word	0x2000ce5c

00013220 <msg_free>:
{
   13220:	b5f0      	push	{r4, r5, r6, r7, lr}
   13222:	b083      	sub	sp, #12
   13224:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   13226:	4604      	mov	r4, r0
   13228:	f00c ffc4 	bl	201b4 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1322c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   1322e:	f013 0f01 	tst.w	r3, #1
   13232:	d101      	bne.n	13238 <msg_free+0x18>
   13234:	4606      	mov	r6, r0
   13236:	bb50      	cbnz	r0, 1328e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   13238:	9b01      	ldr	r3, [sp, #4]
   1323a:	7a1a      	ldrb	r2, [r3, #8]
   1323c:	f012 0f02 	tst.w	r2, #2
   13240:	d128      	bne.n	13294 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   13242:	a901      	add	r1, sp, #4
   13244:	4815      	ldr	r0, [pc, #84]	; (1329c <msg_free+0x7c>)
   13246:	f010 ff14 	bl	24072 <k_mem_slab_free>
}
   1324a:	b003      	add	sp, #12
   1324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   1324e:	9801      	ldr	r0, [sp, #4]
   13250:	f00c ffc5 	bl	201de <log_msg_str_get>
   13254:	4631      	mov	r1, r6
   13256:	f7ff fc1d 	bl	12a94 <z_log_get_s_mask>
					if (smask == 0U) {
   1325a:	4607      	mov	r7, r0
   1325c:	b970      	cbnz	r0, 1327c <msg_free+0x5c>
   1325e:	e7eb      	b.n	13238 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
   13260:	3401      	adds	r4, #1
   13262:	42b4      	cmp	r4, r6
   13264:	d2e8      	bcs.n	13238 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   13266:	4621      	mov	r1, r4
   13268:	9801      	ldr	r0, [sp, #4]
   1326a:	f00c ffa6 	bl	201ba <log_msg_arg_get>
   1326e:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   13270:	f7ff fd3a 	bl	12ce8 <log_is_strdup>
   13274:	2800      	cmp	r0, #0
   13276:	d0f3      	beq.n	13260 <msg_free+0x40>
				if (smask == 0U) {
   13278:	2f00      	cmp	r7, #0
   1327a:	d0e8      	beq.n	1324e <msg_free+0x2e>
				if (smask & BIT(i)) {
   1327c:	fa27 f304 	lsr.w	r3, r7, r4
   13280:	f013 0f01 	tst.w	r3, #1
   13284:	d0ec      	beq.n	13260 <msg_free+0x40>
					z_log_free(buf);
   13286:	4628      	mov	r0, r5
   13288:	f7ff ff3e 	bl	13108 <z_log_free>
   1328c:	e7e8      	b.n	13260 <msg_free+0x40>
		uint32_t smask = 0U;
   1328e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   13290:	463c      	mov	r4, r7
   13292:	e7e6      	b.n	13262 <msg_free+0x42>
		cont_free(msg->payload.ext.next);
   13294:	6958      	ldr	r0, [r3, #20]
   13296:	f7ff ff71 	bl	1317c <cont_free>
   1329a:	e7d2      	b.n	13242 <msg_free+0x22>
   1329c:	2000ce5c 	.word	0x2000ce5c

000132a0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   132a0:	b40e      	push	{r1, r2, r3}
   132a2:	b500      	push	{lr}
   132a4:	b082      	sub	sp, #8
   132a6:	4601      	mov	r1, r0
   132a8:	ab03      	add	r3, sp, #12
   132aa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   132ae:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   132b0:	4803      	ldr	r0, [pc, #12]	; (132c0 <print_formatted+0x20>)
   132b2:	f7ff f883 	bl	123bc <cbvprintf>
	va_end(args);

	return length;
}
   132b6:	b002      	add	sp, #8
   132b8:	f85d eb04 	ldr.w	lr, [sp], #4
   132bc:	b003      	add	sp, #12
   132be:	4770      	bx	lr
   132c0:	0002052b 	.word	0x0002052b

000132c4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   132c4:	b530      	push	{r4, r5, lr}
   132c6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   132c8:	f011 0f44 	tst.w	r1, #68	; 0x44
   132cc:	d005      	beq.n	132da <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   132ce:	4b1a      	ldr	r3, [pc, #104]	; (13338 <timestamp_print+0x74>)
   132d0:	681c      	ldr	r4, [r3, #0]
   132d2:	b934      	cbnz	r4, 132e2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   132d4:	2000      	movs	r0, #0
	}

	return length;
}
   132d6:	b005      	add	sp, #20
   132d8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   132da:	4918      	ldr	r1, [pc, #96]	; (1333c <timestamp_print+0x78>)
   132dc:	f7ff ffe0 	bl	132a0 <print_formatted>
   132e0:	e7f9      	b.n	132d6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   132e2:	4b17      	ldr	r3, [pc, #92]	; (13340 <timestamp_print+0x7c>)
   132e4:	6819      	ldr	r1, [r3, #0]
   132e6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   132ea:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   132ee:	4a15      	ldr	r2, [pc, #84]	; (13344 <timestamp_print+0x80>)
   132f0:	fba2 320c 	umull	r3, r2, r2, ip
   132f4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   132f6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   132fa:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   132fe:	4b12      	ldr	r3, [pc, #72]	; (13348 <timestamp_print+0x84>)
   13300:	fba3 530e 	umull	r5, r3, r3, lr
   13304:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   13306:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   1330a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1330e:	fb0c f101 	mul.w	r1, ip, r1
   13312:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13316:	fb05 1114 	mls	r1, r5, r4, r1
   1331a:	fb0c f101 	mul.w	r1, ip, r1
   1331e:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
   13322:	9102      	str	r1, [sp, #8]
   13324:	9501      	str	r5, [sp, #4]
   13326:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1332a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   1332e:	9100      	str	r1, [sp, #0]
   13330:	4906      	ldr	r1, [pc, #24]	; (1334c <timestamp_print+0x88>)
   13332:	f7ff ffb5 	bl	132a0 <print_formatted>
   13336:	e7ce      	b.n	132d6 <timestamp_print+0x12>
   13338:	2000ce78 	.word	0x2000ce78
   1333c:	0002597c 	.word	0x0002597c
   13340:	2000ce7c 	.word	0x2000ce7c
   13344:	91a2b3c5 	.word	0x91a2b3c5
   13348:	88888889 	.word	0x88888889
   1334c:	00025988 	.word	0x00025988

00013350 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   13350:	b161      	cbz	r1, 1336c <color_print+0x1c>
{
   13352:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   13354:	b12a      	cbz	r2, 13362 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   13356:	4a06      	ldr	r2, [pc, #24]	; (13370 <color_print+0x20>)
   13358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1335c:	b912      	cbnz	r2, 13364 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1335e:	4a05      	ldr	r2, [pc, #20]	; (13374 <color_print+0x24>)
   13360:	e000      	b.n	13364 <color_print+0x14>
   13362:	4a04      	ldr	r2, [pc, #16]	; (13374 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   13364:	4904      	ldr	r1, [pc, #16]	; (13378 <color_print+0x28>)
   13366:	f7ff ff9b 	bl	132a0 <print_formatted>
	}
}
   1336a:	bd08      	pop	{r3, pc}
   1336c:	4770      	bx	lr
   1336e:	bf00      	nop
   13370:	000259fc 	.word	0x000259fc
   13374:	000259a4 	.word	0x000259a4
   13378:	000265b8 	.word	0x000265b8

0001337c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1337c:	f011 0f10 	tst.w	r1, #16
   13380:	d10b      	bne.n	1339a <newline_print+0x1e>
{
   13382:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13384:	f011 0f20 	tst.w	r1, #32
   13388:	d003      	beq.n	13392 <newline_print+0x16>
		print_formatted(ctx, "\n");
   1338a:	4904      	ldr	r1, [pc, #16]	; (1339c <newline_print+0x20>)
   1338c:	f7ff ff88 	bl	132a0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   13390:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   13392:	4903      	ldr	r1, [pc, #12]	; (133a0 <newline_print+0x24>)
   13394:	f7ff ff84 	bl	132a0 <print_formatted>
   13398:	e7fa      	b.n	13390 <newline_print+0x14>
   1339a:	4770      	bx	lr
   1339c:	000270bc 	.word	0x000270bc
   133a0:	00027248 	.word	0x00027248

000133a4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   133a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133a8:	4605      	mov	r5, r0
   133aa:	460f      	mov	r7, r1
   133ac:	4616      	mov	r6, r2
   133ae:	4698      	mov	r8, r3
	newline_print(output, flags);
   133b0:	9906      	ldr	r1, [sp, #24]
   133b2:	f7ff ffe3 	bl	1337c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   133b6:	2400      	movs	r4, #0
   133b8:	4544      	cmp	r4, r8
   133ba:	da05      	bge.n	133c8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   133bc:	4924      	ldr	r1, [pc, #144]	; (13450 <hexdump_line_print+0xac>)
   133be:	4628      	mov	r0, r5
   133c0:	f7ff ff6e 	bl	132a0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   133c4:	3401      	adds	r4, #1
   133c6:	e7f7      	b.n	133b8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   133c8:	2400      	movs	r4, #0
   133ca:	e009      	b.n	133e0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   133cc:	4920      	ldr	r1, [pc, #128]	; (13450 <hexdump_line_print+0xac>)
   133ce:	4628      	mov	r0, r5
   133d0:	f7ff ff66 	bl	132a0 <print_formatted>
   133d4:	e00b      	b.n	133ee <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   133d6:	491f      	ldr	r1, [pc, #124]	; (13454 <hexdump_line_print+0xb0>)
   133d8:	4628      	mov	r0, r5
   133da:	f7ff ff61 	bl	132a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   133de:	3401      	adds	r4, #1
   133e0:	2c0f      	cmp	r4, #15
   133e2:	dc0c      	bgt.n	133fe <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   133e4:	2c00      	cmp	r4, #0
   133e6:	dd02      	ble.n	133ee <hexdump_line_print+0x4a>
   133e8:	f014 0f07 	tst.w	r4, #7
   133ec:	d0ee      	beq.n	133cc <hexdump_line_print+0x28>
		if (i < length) {
   133ee:	42b4      	cmp	r4, r6
   133f0:	d2f1      	bcs.n	133d6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   133f2:	5d3a      	ldrb	r2, [r7, r4]
   133f4:	4918      	ldr	r1, [pc, #96]	; (13458 <hexdump_line_print+0xb4>)
   133f6:	4628      	mov	r0, r5
   133f8:	f7ff ff52 	bl	132a0 <print_formatted>
   133fc:	e7ef      	b.n	133de <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   133fe:	4917      	ldr	r1, [pc, #92]	; (1345c <hexdump_line_print+0xb8>)
   13400:	4628      	mov	r0, r5
   13402:	f7ff ff4d 	bl	132a0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13406:	2400      	movs	r4, #0
   13408:	e009      	b.n	1341e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   1340a:	4911      	ldr	r1, [pc, #68]	; (13450 <hexdump_line_print+0xac>)
   1340c:	4628      	mov	r0, r5
   1340e:	f7ff ff47 	bl	132a0 <print_formatted>
   13412:	e00b      	b.n	1342c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   13414:	4912      	ldr	r1, [pc, #72]	; (13460 <hexdump_line_print+0xbc>)
   13416:	4628      	mov	r0, r5
   13418:	f7ff ff42 	bl	132a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1341c:	3401      	adds	r4, #1
   1341e:	2c0f      	cmp	r4, #15
   13420:	dc13      	bgt.n	1344a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   13422:	2c00      	cmp	r4, #0
   13424:	dd02      	ble.n	1342c <hexdump_line_print+0x88>
   13426:	f014 0f07 	tst.w	r4, #7
   1342a:	d0ee      	beq.n	1340a <hexdump_line_print+0x66>
		if (i < length) {
   1342c:	42b4      	cmp	r4, r6
   1342e:	d207      	bcs.n	13440 <hexdump_line_print+0x9c>
			char c = (char)data[i];
   13430:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   13432:	4b0c      	ldr	r3, [pc, #48]	; (13464 <hexdump_line_print+0xc0>)
   13434:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   13436:	f013 0f97 	tst.w	r3, #151	; 0x97
   1343a:	d1eb      	bne.n	13414 <hexdump_line_print+0x70>
   1343c:	222e      	movs	r2, #46	; 0x2e
   1343e:	e7e9      	b.n	13414 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   13440:	4903      	ldr	r1, [pc, #12]	; (13450 <hexdump_line_print+0xac>)
   13442:	4628      	mov	r0, r5
   13444:	f7ff ff2c 	bl	132a0 <print_formatted>
   13448:	e7e8      	b.n	1341c <hexdump_line_print+0x78>
		}
	}
}
   1344a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1344e:	bf00      	nop
   13450:	000259d0 	.word	0x000259d0
   13454:	000259b4 	.word	0x000259b4
   13458:	000259ac 	.word	0x000259ac
   1345c:	000259b8 	.word	0x000259b8
   13460:	000259bc 	.word	0x000259bc
   13464:	000275b3 	.word	0x000275b3

00013468 <ids_print>:
{
   13468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1346c:	4680      	mov	r8, r0
   1346e:	4616      	mov	r6, r2
   13470:	461d      	mov	r5, r3
   13472:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   13476:	b959      	cbnz	r1, 13490 <ids_print+0x28>
	int total = 0;
   13478:	2400      	movs	r4, #0
	if (source_id >= 0) {
   1347a:	2f00      	cmp	r7, #0
   1347c:	db1c      	blt.n	134b8 <ids_print+0x50>
		total += print_formatted(output,
   1347e:	b186      	cbz	r6, 134a2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13480:	2301      	movs	r3, #1
   13482:	9a07      	ldr	r2, [sp, #28]
   13484:	4093      	lsls	r3, r2
				(func_on &&
   13486:	f013 0f10 	tst.w	r3, #16
   1348a:	d118      	bne.n	134be <ids_print+0x56>
		total += print_formatted(output,
   1348c:	4e0d      	ldr	r6, [pc, #52]	; (134c4 <ids_print+0x5c>)
   1348e:	e009      	b.n	134a4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   13490:	4b0d      	ldr	r3, [pc, #52]	; (134c8 <ids_print+0x60>)
   13492:	9a07      	ldr	r2, [sp, #28]
   13494:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13498:	490c      	ldr	r1, [pc, #48]	; (134cc <ids_print+0x64>)
   1349a:	f7ff ff01 	bl	132a0 <print_formatted>
   1349e:	4604      	mov	r4, r0
   134a0:	e7eb      	b.n	1347a <ids_print+0x12>
		total += print_formatted(output,
   134a2:	4e08      	ldr	r6, [pc, #32]	; (134c4 <ids_print+0x5c>)
   134a4:	4639      	mov	r1, r7
   134a6:	4628      	mov	r0, r5
   134a8:	f7ff fe46 	bl	13138 <log_source_name_get>
   134ac:	4602      	mov	r2, r0
   134ae:	4631      	mov	r1, r6
   134b0:	4640      	mov	r0, r8
   134b2:	f7ff fef5 	bl	132a0 <print_formatted>
   134b6:	4404      	add	r4, r0
}
   134b8:	4620      	mov	r0, r4
   134ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   134be:	4e04      	ldr	r6, [pc, #16]	; (134d0 <ids_print+0x68>)
   134c0:	e7f0      	b.n	134a4 <ids_print+0x3c>
   134c2:	bf00      	nop
   134c4:	000259c0 	.word	0x000259c0
   134c8:	00025a38 	.word	0x00025a38
   134cc:	000259cc 	.word	0x000259cc
   134d0:	000259c8 	.word	0x000259c8

000134d4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   134d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	b085      	sub	sp, #20
   134da:	4605      	mov	r5, r0
   134dc:	460c      	mov	r4, r1
   134de:	4616      	mov	r6, r2
   134e0:	9303      	str	r3, [sp, #12]
   134e2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   134e6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   134ea:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   134ee:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   134f2:	f00c fde1 	bl	200b8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   134f6:	b1e8      	cbz	r0, 13534 <prefix_print+0x60>
   134f8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   134fa:	4913      	ldr	r1, [pc, #76]	; (13548 <prefix_print+0x74>)
   134fc:	4628      	mov	r0, r5
   134fe:	f7ff fecf 	bl	132a0 <print_formatted>
   13502:	4607      	mov	r7, r0
	}

	if (stamp) {
   13504:	f1bb 0f00 	cmp.w	fp, #0
   13508:	d116      	bne.n	13538 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   1350a:	4642      	mov	r2, r8
   1350c:	4651      	mov	r1, sl
   1350e:	4628      	mov	r0, r5
   13510:	f00c fe8b 	bl	2022a <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   13514:	f8cd 8004 	str.w	r8, [sp, #4]
   13518:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   1351c:	9300      	str	r3, [sp, #0]
   1351e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   13522:	4632      	mov	r2, r6
   13524:	4649      	mov	r1, r9
   13526:	4628      	mov	r0, r5
   13528:	f7ff ff9e 	bl	13468 <ids_print>
			domain_id, source_id, level);


	return length;
}
   1352c:	4438      	add	r0, r7
   1352e:	b005      	add	sp, #20
   13530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   13534:	2700      	movs	r7, #0
   13536:	e7e5      	b.n	13504 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   13538:	9a03      	ldr	r2, [sp, #12]
   1353a:	4621      	mov	r1, r4
   1353c:	4628      	mov	r0, r5
   1353e:	f7ff fec1 	bl	132c4 <timestamp_print>
   13542:	4407      	add	r7, r0
   13544:	e7e1      	b.n	1350a <prefix_print+0x36>
   13546:	bf00      	nop
   13548:	000259d4 	.word	0x000259d4

0001354c <hexdump_print>:
{
   1354c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13550:	b089      	sub	sp, #36	; 0x24
   13552:	4607      	mov	r7, r0
   13554:	460e      	mov	r6, r1
   13556:	4691      	mov	r9, r2
   13558:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   1355a:	f00c fe40 	bl	201de <log_msg_str_get>
   1355e:	4602      	mov	r2, r0
   13560:	490f      	ldr	r1, [pc, #60]	; (135a0 <hexdump_print+0x54>)
   13562:	4630      	mov	r0, r6
   13564:	f7ff fe9c 	bl	132a0 <print_formatted>
	uint32_t offset = 0U;
   13568:	2400      	movs	r4, #0
   1356a:	e009      	b.n	13580 <hexdump_print+0x34>
			hexdump_line_print(output, buf, length,
   1356c:	f8cd 8000 	str.w	r8, [sp]
   13570:	464b      	mov	r3, r9
   13572:	eb0d 0105 	add.w	r1, sp, r5
   13576:	4630      	mov	r0, r6
   13578:	f7ff ff14 	bl	133a4 <hexdump_line_print>
			offset += length;
   1357c:	9d03      	ldr	r5, [sp, #12]
   1357e:	442c      	add	r4, r5
		length = sizeof(buf);
   13580:	2510      	movs	r5, #16
   13582:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13584:	4623      	mov	r3, r4
   13586:	aa03      	add	r2, sp, #12
   13588:	eb0d 0105 	add.w	r1, sp, r5
   1358c:	4638      	mov	r0, r7
   1358e:	f00c fe37 	bl	20200 <log_msg_hexdump_data_get>
		if (length) {
   13592:	9a03      	ldr	r2, [sp, #12]
   13594:	2a00      	cmp	r2, #0
   13596:	d1e9      	bne.n	1356c <hexdump_print+0x20>
}
   13598:	b009      	add	sp, #36	; 0x24
   1359a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1359e:	bf00      	nop
   135a0:	000265b8 	.word	0x000265b8

000135a4 <raw_string_print>:
{
   135a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   135a6:	b083      	sub	sp, #12
   135a8:	4606      	mov	r6, r0
   135aa:	460c      	mov	r4, r1
	bool eol = false;
   135ac:	2700      	movs	r7, #0
	size_t offset = 0;
   135ae:	463d      	mov	r5, r7
   135b0:	e00d      	b.n	135ce <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
   135b2:	68a2      	ldr	r2, [r4, #8]
   135b4:	4413      	add	r3, r2
   135b6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   135ba:	2f0a      	cmp	r7, #10
   135bc:	bf14      	ite	ne
   135be:	2700      	movne	r7, #0
   135c0:	2701      	moveq	r7, #1
		log_output_flush(output);
   135c2:	4620      	mov	r0, r4
   135c4:	f00c ffa4 	bl	20510 <log_output_flush>
		offset += length;
   135c8:	9b01      	ldr	r3, [sp, #4]
   135ca:	441d      	add	r5, r3
	} while (length > 0);
   135cc:	b173      	cbz	r3, 135ec <raw_string_print+0x48>
		length = output->size;
   135ce:	68e3      	ldr	r3, [r4, #12]
   135d0:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   135d2:	462b      	mov	r3, r5
   135d4:	aa01      	add	r2, sp, #4
   135d6:	68a1      	ldr	r1, [r4, #8]
   135d8:	4630      	mov	r0, r6
   135da:	f00c fe11 	bl	20200 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   135de:	6863      	ldr	r3, [r4, #4]
   135e0:	9a01      	ldr	r2, [sp, #4]
   135e2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   135e4:	9b01      	ldr	r3, [sp, #4]
   135e6:	2b00      	cmp	r3, #0
   135e8:	d0eb      	beq.n	135c2 <raw_string_print+0x1e>
   135ea:	e7e2      	b.n	135b2 <raw_string_print+0xe>
	if (eol) {
   135ec:	b90f      	cbnz	r7, 135f2 <raw_string_print+0x4e>
}
   135ee:	b003      	add	sp, #12
   135f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   135f2:	4902      	ldr	r1, [pc, #8]	; (135fc <raw_string_print+0x58>)
   135f4:	4620      	mov	r0, r4
   135f6:	f7ff fe53 	bl	132a0 <print_formatted>
}
   135fa:	e7f8      	b.n	135ee <raw_string_print+0x4a>
   135fc:	000259d8 	.word	0x000259d8

00013600 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13600:	b570      	push	{r4, r5, r6, lr}
   13602:	b082      	sub	sp, #8
   13604:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   13606:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13608:	f242 730f 	movw	r3, #9999	; 0x270f
   1360c:	428b      	cmp	r3, r1
   1360e:	bf28      	it	cs
   13610:	460b      	movcs	r3, r1
   13612:	4a0e      	ldr	r2, [pc, #56]	; (1364c <log_output_dropped_process+0x4c>)
   13614:	2105      	movs	r1, #5
   13616:	4668      	mov	r0, sp
   13618:	f00c f988 	bl	1f92c <snprintk>
   1361c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   1361e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13620:	685b      	ldr	r3, [r3, #4]
   13622:	220b      	movs	r2, #11
   13624:	490a      	ldr	r1, [pc, #40]	; (13650 <log_output_dropped_process+0x50>)
   13626:	4628      	mov	r0, r5
   13628:	f00c fdf2 	bl	20210 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   1362c:	6863      	ldr	r3, [r4, #4]
   1362e:	685b      	ldr	r3, [r3, #4]
   13630:	4632      	mov	r2, r6
   13632:	4669      	mov	r1, sp
   13634:	4628      	mov	r0, r5
   13636:	f00c fdeb 	bl	20210 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1363a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1363c:	685b      	ldr	r3, [r3, #4]
   1363e:	221b      	movs	r2, #27
   13640:	4904      	ldr	r1, [pc, #16]	; (13654 <log_output_dropped_process+0x54>)
   13642:	4628      	mov	r0, r5
   13644:	f00c fde4 	bl	20210 <buffer_write>
}
   13648:	b002      	add	sp, #8
   1364a:	bd70      	pop	{r4, r5, r6, pc}
   1364c:	00025574 	.word	0x00025574
   13650:	00025a2c 	.word	0x00025a2c
   13654:	00025a10 	.word	0x00025a10

00013658 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13658:	4b07      	ldr	r3, [pc, #28]	; (13678 <log_output_timestamp_freq_set+0x20>)
   1365a:	2201      	movs	r2, #1
   1365c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1365e:	e004      	b.n	1366a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   13660:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13662:	4a05      	ldr	r2, [pc, #20]	; (13678 <log_output_timestamp_freq_set+0x20>)
   13664:	6813      	ldr	r3, [r2, #0]
   13666:	005b      	lsls	r3, r3, #1
   13668:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1366a:	4b04      	ldr	r3, [pc, #16]	; (1367c <log_output_timestamp_freq_set+0x24>)
   1366c:	4298      	cmp	r0, r3
   1366e:	d8f7      	bhi.n	13660 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   13670:	4b03      	ldr	r3, [pc, #12]	; (13680 <log_output_timestamp_freq_set+0x28>)
   13672:	6018      	str	r0, [r3, #0]
}
   13674:	4770      	bx	lr
   13676:	bf00      	nop
   13678:	2000ce7c 	.word	0x2000ce7c
   1367c:	000f4240 	.word	0x000f4240
   13680:	2000ce78 	.word	0x2000ce78

00013684 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13684:	b570      	push	{r4, r5, r6, lr}
   13686:	4606      	mov	r6, r0
   13688:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   1368a:	2400      	movs	r4, #0
   1368c:	e006      	b.n	1369c <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
   1368e:	4b05      	ldr	r3, [pc, #20]	; (136a4 <char_out+0x20>)
   13690:	6818      	ldr	r0, [r3, #0]
   13692:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   13694:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13696:	685b      	ldr	r3, [r3, #4]
   13698:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1369a:	3401      	adds	r4, #1
   1369c:	42ac      	cmp	r4, r5
   1369e:	d3f6      	bcc.n	1368e <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   136a0:	4628      	mov	r0, r5
   136a2:	bd70      	pop	{r4, r5, r6, pc}
   136a4:	2000ce94 	.word	0x2000ce94

000136a8 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   136a8:	4b01      	ldr	r3, [pc, #4]	; (136b0 <log_backend_uart_init+0x8>)
   136aa:	4a02      	ldr	r2, [pc, #8]	; (136b4 <log_backend_uart_init+0xc>)
   136ac:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   136ae:	4770      	bx	lr
   136b0:	2000ce94 	.word	0x2000ce94
   136b4:	000250a8 	.word	0x000250a8

000136b8 <panic>:

static void panic(struct log_backend const *const backend)
{
   136b8:	b508      	push	{r3, lr}
	in_panic = true;
   136ba:	4b03      	ldr	r3, [pc, #12]	; (136c8 <panic+0x10>)
   136bc:	2201      	movs	r2, #1
   136be:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   136c0:	4802      	ldr	r0, [pc, #8]	; (136cc <panic+0x14>)
   136c2:	f00c ff25 	bl	20510 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   136c6:	bd08      	pop	{r3, pc}
   136c8:	2000d56c 	.word	0x2000d56c
   136cc:	00025a88 	.word	0x00025a88

000136d0 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   136d0:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   136d2:	4802      	ldr	r0, [pc, #8]	; (136dc <dropped+0xc>)
   136d4:	f7ff ff94 	bl	13600 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   136d8:	bd08      	pop	{r3, pc}
   136da:	bf00      	nop
   136dc:	00025a88 	.word	0x00025a88

000136e0 <put>:
{
   136e0:	b510      	push	{r4, lr}
   136e2:	460c      	mov	r4, r1
	log_msg_get(msg);
   136e4:	4608      	mov	r0, r1
   136e6:	f00c fd5c 	bl	201a2 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   136ea:	220f      	movs	r2, #15
   136ec:	4621      	mov	r1, r4
   136ee:	4803      	ldr	r0, [pc, #12]	; (136fc <put+0x1c>)
   136f0:	f00c ff33 	bl	2055a <log_output_msg_process>
	log_msg_put(msg);
   136f4:	4620      	mov	r0, r4
   136f6:	f00c fd74 	bl	201e2 <log_msg_put>
}
   136fa:	bd10      	pop	{r4, pc}
   136fc:	00025a88 	.word	0x00025a88

00013700 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   13700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13702:	4605      	mov	r5, r0
   13704:	460e      	mov	r6, r1
   13706:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13708:	4c0e      	ldr	r4, [pc, #56]	; (13744 <z_impl_zsock_socket+0x44>)
   1370a:	4b0f      	ldr	r3, [pc, #60]	; (13748 <z_impl_zsock_socket+0x48>)
   1370c:	429c      	cmp	r4, r3
   1370e:	d211      	bcs.n	13734 <z_impl_zsock_socket+0x34>
		if (sock_family->family != family &&
   13710:	6823      	ldr	r3, [r4, #0]
   13712:	42ab      	cmp	r3, r5
   13714:	d000      	beq.n	13718 <z_impl_zsock_socket+0x18>
   13716:	b95b      	cbnz	r3, 13730 <z_impl_zsock_socket+0x30>
			continue;
		}

		NET_ASSERT(sock_family->is_supported);

		if (!sock_family->is_supported(family, type, proto)) {
   13718:	6863      	ldr	r3, [r4, #4]
   1371a:	463a      	mov	r2, r7
   1371c:	4631      	mov	r1, r6
   1371e:	4628      	mov	r0, r5
   13720:	4798      	blx	r3
   13722:	b128      	cbz	r0, 13730 <z_impl_zsock_socket+0x30>
			continue;
		}

		return sock_family->handler(family, type, proto);
   13724:	68a3      	ldr	r3, [r4, #8]
   13726:	463a      	mov	r2, r7
   13728:	4631      	mov	r1, r6
   1372a:	4628      	mov	r0, r5
   1372c:	4798      	blx	r3
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   1372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13730:	340c      	adds	r4, #12
   13732:	e7ea      	b.n	1370a <z_impl_zsock_socket+0xa>
	errno = EAFNOSUPPORT;
   13734:	f00d f913 	bl	2095e <__errno>
   13738:	236a      	movs	r3, #106	; 0x6a
   1373a:	6003      	str	r3, [r0, #0]
	return -1;
   1373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13740:	e7f5      	b.n	1372e <z_impl_zsock_socket+0x2e>
   13742:	bf00      	nop
   13744:	000252e0 	.word	0x000252e0
   13748:	000252ec 	.word	0x000252ec

0001374c <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   1374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13750:	b09b      	sub	sp, #108	; 0x6c
   13752:	4604      	mov	r4, r0
   13754:	9004      	str	r0, [sp, #16]
   13756:	460d      	mov	r5, r1
   13758:	9105      	str	r1, [sp, #20]
   1375a:	4617      	mov	r7, r2
   1375c:	4698      	mov	r8, r3
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	end = sys_clock_timeout_end_calc(timeout);
   1375e:	4610      	mov	r0, r2
   13760:	4619      	mov	r1, r3
   13762:	f011 f885 	bl	24870 <sys_clock_timeout_end_calc>
   13766:	9006      	str	r0, [sp, #24]
   13768:	9107      	str	r1, [sp, #28]

	pev = poll_events;
   1376a:	ab0b      	add	r3, sp, #44	; 0x2c
   1376c:	930a      	str	r3, [sp, #40]	; 0x28
	void *offl_ctx = NULL;
   1376e:	f04f 0900 	mov.w	r9, #0
	const struct fd_op_vtable *offl_vtable = NULL;
   13772:	46ca      	mov	sl, r9
	bool offload = false;
   13774:	f8cd 900c 	str.w	r9, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   13778:	e009      	b.n	1378e <zsock_poll_internal+0x42>
			/* If POLL_PREPARE returned with EALREADY, it means
			 * it already detected that some socket is ready. In
			 * this case, we still perform a k_poll to pick up
			 * as many events as possible, but without any wait.
			 */
			timeout = K_NO_WAIT;
   1377a:	2700      	movs	r7, #0
   1377c:	46b8      	mov	r8, r7
			result = 0;
   1377e:	463d      	mov	r5, r7
			}

			result = 0;
		}

		k_mutex_unlock(lock);
   13780:	9808      	ldr	r0, [sp, #32]
	return z_impl_k_mutex_unlock(mutex);
   13782:	f009 fcf9 	bl	1d178 <z_impl_k_mutex_unlock>

		if (result < 0) {
   13786:	2d00      	cmp	r5, #0
   13788:	db35      	blt.n	137f6 <zsock_poll_internal+0xaa>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1378a:	3408      	adds	r4, #8
   1378c:	4635      	mov	r5, r6
   1378e:	1e6e      	subs	r6, r5, #1
   13790:	2d00      	cmp	r5, #0
   13792:	d037      	beq.n	13804 <zsock_poll_internal+0xb8>
		if (pfd->fd < 0) {
   13794:	6820      	ldr	r0, [r4, #0]
   13796:	2800      	cmp	r0, #0
   13798:	dbf7      	blt.n	1378a <zsock_poll_internal+0x3e>
	ctx = z_get_fd_obj_and_vtable(sock,
   1379a:	aa08      	add	r2, sp, #32
   1379c:	a909      	add	r1, sp, #36	; 0x24
   1379e:	f7fe fabb 	bl	11d18 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   137a2:	4683      	mov	fp, r0
   137a4:	2800      	cmp	r0, #0
   137a6:	d0f0      	beq.n	1378a <zsock_poll_internal+0x3e>
		(void)k_mutex_lock(lock, K_FOREVER);
   137a8:	9808      	ldr	r0, [sp, #32]
	return z_impl_k_mutex_lock(mutex, timeout);
   137aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   137ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137b2:	f009 fc57 	bl	1d064 <z_impl_k_mutex_lock>
		result = z_fdtable_call_ioctl(vtable, ctx,
   137b6:	ab1a      	add	r3, sp, #104	; 0x68
   137b8:	9301      	str	r3, [sp, #4]
   137ba:	ab0a      	add	r3, sp, #40	; 0x28
   137bc:	9300      	str	r3, [sp, #0]
   137be:	4623      	mov	r3, r4
   137c0:	f44f 7281 	mov.w	r2, #258	; 0x102
   137c4:	4659      	mov	r1, fp
   137c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   137c8:	f00c ff0f 	bl	205ea <z_fdtable_call_ioctl>
   137cc:	4605      	mov	r5, r0
		if (result == -EALREADY) {
   137ce:	f110 0f78 	cmn.w	r0, #120	; 0x78
   137d2:	d0d2      	beq.n	1377a <zsock_poll_internal+0x2e>
		} else if (result == -EXDEV) {
   137d4:	f110 0f12 	cmn.w	r0, #18
   137d8:	d1d2      	bne.n	13780 <zsock_poll_internal+0x34>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   137da:	f1ba 0f00 	cmp.w	sl, #0
   137de:	d003      	beq.n	137e8 <zsock_poll_internal+0x9c>
			result = 0;
   137e0:	2500      	movs	r5, #0
			offload = true;
   137e2:	2301      	movs	r3, #1
   137e4:	9303      	str	r3, [sp, #12]
   137e6:	e7cb      	b.n	13780 <zsock_poll_internal+0x34>
				offl_vtable = vtable;
   137e8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
				offl_ctx = ctx;
   137ec:	46d9      	mov	r9, fp
			result = 0;
   137ee:	2500      	movs	r5, #0
			offload = true;
   137f0:	2301      	movs	r3, #1
   137f2:	9303      	str	r3, [sp, #12]
   137f4:	e7c4      	b.n	13780 <zsock_poll_internal+0x34>
			errno = -result;
   137f6:	f00d f8b2 	bl	2095e <__errno>
   137fa:	426d      	negs	r5, r5
   137fc:	6005      	str	r5, [r0, #0]
			return -1;
   137fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   13802:	e0b6      	b.n	13972 <zsock_poll_internal+0x226>
		}
	}

	if (offload) {
   13804:	9b03      	ldr	r3, [sp, #12]
   13806:	b953      	cbnz	r3, 1381e <zsock_poll_internal+0xd2>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
					    ZFD_IOCTL_POLL_OFFLOAD,
					    fds, nfds, poll_timeout);
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13808:	ea57 0308 	orrs.w	r3, r7, r8
   1380c:	d040      	beq.n	13890 <zsock_poll_internal+0x144>
   1380e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13812:	bf08      	it	eq
   13814:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   13818:	d129      	bne.n	1386e <zsock_poll_internal+0x122>
   1381a:	46ab      	mov	fp, r5
   1381c:	e08f      	b.n	1393e <zsock_poll_internal+0x1f2>
		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1381e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13822:	bf08      	it	eq
   13824:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   13828:	d01e      	beq.n	13868 <zsock_poll_internal+0x11c>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1382a:	0efa      	lsrs	r2, r7, #27
   1382c:	017b      	lsls	r3, r7, #5
   1382e:	1bdb      	subs	r3, r3, r7
   13830:	f162 0200 	sbc.w	r2, r2, #0
   13834:	0092      	lsls	r2, r2, #2
   13836:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1383a:	009b      	lsls	r3, r3, #2
   1383c:	19db      	adds	r3, r3, r7
   1383e:	f142 0200 	adc.w	r2, r2, #0
   13842:	00d2      	lsls	r2, r2, #3
   13844:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   13848:	f3c3 3310 	ubfx	r3, r3, #12, #17
   1384c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   13850:	9301      	str	r3, [sp, #4]
   13852:	9b05      	ldr	r3, [sp, #20]
   13854:	9300      	str	r3, [sp, #0]
   13856:	9b04      	ldr	r3, [sp, #16]
   13858:	f44f 7282 	mov.w	r2, #260	; 0x104
   1385c:	4649      	mov	r1, r9
   1385e:	4650      	mov	r0, sl
   13860:	f00c fec3 	bl	205ea <z_fdtable_call_ioctl>
   13864:	4682      	mov	sl, r0
   13866:	e084      	b.n	13972 <zsock_poll_internal+0x226>
			poll_timeout = SYS_FOREVER_MS;
   13868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1386c:	e7f0      	b.n	13850 <zsock_poll_internal+0x104>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		int64_t remaining = end - sys_clock_tick_get();
   1386e:	f00a fc49 	bl	1e104 <sys_clock_tick_get>
   13872:	9b06      	ldr	r3, [sp, #24]
   13874:	1a1f      	subs	r7, r3, r0
   13876:	9b07      	ldr	r3, [sp, #28]
   13878:	eb63 0801 	sbc.w	r8, r3, r1

		if (remaining <= 0) {
   1387c:	2f01      	cmp	r7, #1
   1387e:	f178 0300 	sbcs.w	r3, r8, #0
   13882:	db01      	blt.n	13888 <zsock_poll_internal+0x13c>
			timeout = K_NO_WAIT;
		} else {
			timeout = Z_TIMEOUT_TICKS(remaining);
   13884:	46ab      	mov	fp, r5
   13886:	e05a      	b.n	1393e <zsock_poll_internal+0x1f2>
			timeout = K_NO_WAIT;
   13888:	2700      	movs	r7, #0
   1388a:	46b8      	mov	r8, r7
   1388c:	46ab      	mov	fp, r5
   1388e:	e056      	b.n	1393e <zsock_poll_internal+0x1f2>
   13890:	46ab      	mov	fp, r5
   13892:	e054      	b.n	1393e <zsock_poll_internal+0x1f2>
		}

		retry = false;
		ret = 0;

		pev = poll_events;
   13894:	ab0b      	add	r3, sp, #44	; 0x2c
   13896:	930a      	str	r3, [sp, #40]	; 0x28
		for (pfd = fds, i = nfds; i--; pfd++) {
   13898:	9c04      	ldr	r4, [sp, #16]
   1389a:	9b05      	ldr	r3, [sp, #20]
		ret = 0;
   1389c:	46da      	mov	sl, fp
		retry = false;
   1389e:	9d03      	ldr	r5, [sp, #12]
		for (pfd = fds, i = nfds; i--; pfd++) {
   138a0:	e005      	b.n	138ae <zsock_poll_internal+0x162>
			ctx = get_sock_vtable(
				pfd->fd,
				(const struct socket_op_vtable **)&vtable,
				&lock);
			if (ctx == NULL) {
				pfd->revents = ZSOCK_POLLNVAL;
   138a2:	2320      	movs	r3, #32
   138a4:	80e3      	strh	r3, [r4, #6]
				ret++;
   138a6:	f10a 0a01 	add.w	sl, sl, #1
		for (pfd = fds, i = nfds; i--; pfd++) {
   138aa:	3408      	adds	r4, #8
   138ac:	4633      	mov	r3, r6
   138ae:	1e5e      	subs	r6, r3, #1
   138b0:	2b00      	cmp	r3, #0
   138b2:	d036      	beq.n	13922 <zsock_poll_internal+0x1d6>
			pfd->revents = 0;
   138b4:	2300      	movs	r3, #0
   138b6:	80e3      	strh	r3, [r4, #6]
			if (pfd->fd < 0) {
   138b8:	6820      	ldr	r0, [r4, #0]
   138ba:	4298      	cmp	r0, r3
   138bc:	dbf5      	blt.n	138aa <zsock_poll_internal+0x15e>
	ctx = z_get_fd_obj_and_vtable(sock,
   138be:	aa08      	add	r2, sp, #32
   138c0:	a909      	add	r1, sp, #36	; 0x24
   138c2:	f7fe fa29 	bl	11d18 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   138c6:	4681      	mov	r9, r0
   138c8:	2800      	cmp	r0, #0
   138ca:	d0ea      	beq.n	138a2 <zsock_poll_internal+0x156>
				continue;
			}

			(void)k_mutex_lock(lock, K_FOREVER);
   138cc:	9808      	ldr	r0, [sp, #32]
   138ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138d6:	f009 fbc5 	bl	1d064 <z_impl_k_mutex_lock>

			result = z_fdtable_call_ioctl(vtable, ctx,
   138da:	ab0a      	add	r3, sp, #40	; 0x28
   138dc:	9300      	str	r3, [sp, #0]
   138de:	4623      	mov	r3, r4
   138e0:	f240 1203 	movw	r2, #259	; 0x103
   138e4:	4649      	mov	r1, r9
   138e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   138e8:	f00c fe7f 	bl	205ea <z_fdtable_call_ioctl>
   138ec:	4681      	mov	r9, r0
						      ZFD_IOCTL_POLL_UPDATE,
						      pfd, &pev);
			k_mutex_unlock(lock);
   138ee:	9808      	ldr	r0, [sp, #32]
	return z_impl_k_mutex_unlock(mutex);
   138f0:	f009 fc42 	bl	1d178 <z_impl_k_mutex_unlock>

			if (result == -EAGAIN) {
   138f4:	f119 0f0b 	cmn.w	r9, #11
   138f8:	d011      	beq.n	1391e <zsock_poll_internal+0x1d2>
				retry = true;
				continue;
			} else if (result != 0) {
   138fa:	f1b9 0f00 	cmp.w	r9, #0
   138fe:	d106      	bne.n	1390e <zsock_poll_internal+0x1c2>
				errno = -result;
				return -1;
			}

			if (pfd->revents != 0) {
   13900:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   13904:	2b00      	cmp	r3, #0
   13906:	d0d0      	beq.n	138aa <zsock_poll_internal+0x15e>
				ret++;
   13908:	f10a 0a01 	add.w	sl, sl, #1
   1390c:	e7cd      	b.n	138aa <zsock_poll_internal+0x15e>
				errno = -result;
   1390e:	f00d f826 	bl	2095e <__errno>
   13912:	f1c9 0300 	rsb	r3, r9, #0
   13916:	6003      	str	r3, [r0, #0]
				return -1;
   13918:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1391c:	e029      	b.n	13972 <zsock_poll_internal+0x226>
				retry = true;
   1391e:	2501      	movs	r5, #1
   13920:	e7c3      	b.n	138aa <zsock_poll_internal+0x15e>
			}
		}

		if (retry) {
   13922:	b15d      	cbz	r5, 1393c <zsock_poll_internal+0x1f0>
			if (ret > 0) {
   13924:	f1ba 0f00 	cmp.w	sl, #0
   13928:	dc23      	bgt.n	13972 <zsock_poll_internal+0x226>
				break;
			}

			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1392a:	ea57 0308 	orrs.w	r3, r7, r8
   1392e:	d020      	beq.n	13972 <zsock_poll_internal+0x226>
				break;
			}

			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13930:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   13934:	bf08      	it	eq
   13936:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   1393a:	d11e      	bne.n	1397a <zsock_poll_internal+0x22e>
				} else {
					timeout = Z_TIMEOUT_TICKS(remaining);
				}
			}
		}
	} while (retry);
   1393c:	b1cd      	cbz	r5, 13972 <zsock_poll_internal+0x226>
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1393e:	a80b      	add	r0, sp, #44	; 0x2c
   13940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13942:	1a19      	subs	r1, r3, r0
   13944:	1089      	asrs	r1, r1, #2
   13946:	4b13      	ldr	r3, [pc, #76]	; (13994 <zsock_poll_internal+0x248>)
   13948:	fb03 f101 	mul.w	r1, r3, r1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1394c:	463a      	mov	r2, r7
   1394e:	4643      	mov	r3, r8
   13950:	f00a fe94 	bl	1e67c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13954:	4604      	mov	r4, r0
   13956:	2800      	cmp	r0, #0
   13958:	d09c      	beq.n	13894 <zsock_poll_internal+0x148>
   1395a:	f110 0f0b 	cmn.w	r0, #11
   1395e:	d099      	beq.n	13894 <zsock_poll_internal+0x148>
   13960:	f110 0f04 	cmn.w	r0, #4
   13964:	d096      	beq.n	13894 <zsock_poll_internal+0x148>
			errno = -ret;
   13966:	f00c fffa 	bl	2095e <__errno>
   1396a:	4264      	negs	r4, r4
   1396c:	6004      	str	r4, [r0, #0]
			return -1;
   1396e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff

	return ret;
}
   13972:	4650      	mov	r0, sl
   13974:	b01b      	add	sp, #108	; 0x6c
   13976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int64_t remaining = end - sys_clock_tick_get();
   1397a:	f00a fbc3 	bl	1e104 <sys_clock_tick_get>
   1397e:	9b06      	ldr	r3, [sp, #24]
   13980:	1a1f      	subs	r7, r3, r0
   13982:	9b07      	ldr	r3, [sp, #28]
   13984:	eb63 0801 	sbc.w	r8, r3, r1
				if (remaining <= 0) {
   13988:	2f01      	cmp	r7, #1
   1398a:	f178 0300 	sbcs.w	r3, r8, #0
   1398e:	dad5      	bge.n	1393c <zsock_poll_internal+0x1f0>
   13990:	e7ef      	b.n	13972 <zsock_poll_internal+0x226>
   13992:	bf00      	nop
   13994:	cccccccd 	.word	0xcccccccd

00013998 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   13998:	4b01      	ldr	r3, [pc, #4]	; (139a0 <socket_offload_dns_register+0x8>)
   1399a:	6018      	str	r0, [r3, #0]
}
   1399c:	4770      	bx	lr
   1399e:	bf00      	nop
   139a0:	2000ce9c 	.word	0x2000ce9c

000139a4 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   139a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   139a6:	4c02      	ldr	r4, [pc, #8]	; (139b0 <socket_offload_getaddrinfo+0xc>)
   139a8:	6824      	ldr	r4, [r4, #0]
   139aa:	6824      	ldr	r4, [r4, #0]
   139ac:	47a0      	blx	r4
}
   139ae:	bd10      	pop	{r4, pc}
   139b0:	2000ce9c 	.word	0x2000ce9c

000139b4 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   139b4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   139b6:	4b02      	ldr	r3, [pc, #8]	; (139c0 <socket_offload_freeaddrinfo+0xc>)
   139b8:	681b      	ldr	r3, [r3, #0]
   139ba:	685b      	ldr	r3, [r3, #4]
   139bc:	4798      	blx	r3
}
   139be:	bd08      	pop	{r3, pc}
   139c0:	2000ce9c 	.word	0x2000ce9c

000139c4 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   139c4:	b570      	push	{r4, r5, r6, lr}
   139c6:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   139c8:	4b29      	ldr	r3, [pc, #164]	; (13a70 <pm_system_resume+0xac>)
   139ca:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   139cc:	f005 031f 	and.w	r3, r5, #31
   139d0:	2201      	movs	r2, #1
   139d2:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   139d4:	0969      	lsrs	r1, r5, #5
   139d6:	4b27      	ldr	r3, [pc, #156]	; (13a74 <pm_system_resume+0xb0>)
   139d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   139dc:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   139de:	e8d3 1fef 	ldaex	r1, [r3]
   139e2:	ea01 0400 	and.w	r4, r1, r0
   139e6:	e8c3 4fe6 	stlex	r6, r4, [r3]
   139ea:	2e00      	cmp	r6, #0
   139ec:	d1f7      	bne.n	139de <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   139ee:	420a      	tst	r2, r1
   139f0:	d03b      	beq.n	13a6a <pm_system_resume+0xa6>
		exit_pos_ops(z_power_states[id]);
   139f2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   139f6:	009a      	lsls	r2, r3, #2
   139f8:	4b1f      	ldr	r3, [pc, #124]	; (13a78 <pm_system_resume+0xb4>)
   139fa:	4413      	add	r3, r2
   139fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13a00:	ab04      	add	r3, sp, #16
   13a02:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   13a06:	4b1d      	ldr	r3, [pc, #116]	; (13a7c <pm_system_resume+0xb8>)
   13a08:	b163      	cbz	r3, 13a24 <pm_system_resume+0x60>
		pm_power_state_exit_post_ops(info);
   13a0a:	f00c fb2c 	bl	20066 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   13a0e:	f04f 0320 	mov.w	r3, #32
   13a12:	f3ef 8611 	mrs	r6, BASEPRI
   13a16:	f383 8812 	msr	BASEPRI_MAX, r3
   13a1a:	f3bf 8f6f 	isb	sy
   13a1e:	4b18      	ldr	r3, [pc, #96]	; (13a80 <pm_system_resume+0xbc>)
   13a20:	681c      	ldr	r4, [r3, #0]
   13a22:	e008      	b.n	13a36 <pm_system_resume+0x72>
	__asm__ volatile(
   13a24:	2300      	movs	r3, #0
   13a26:	f383 8811 	msr	BASEPRI, r3
   13a2a:	f3bf 8f6f 	isb	sy
}
   13a2e:	e7ee      	b.n	13a0e <pm_system_resume+0x4a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   13a30:	b10c      	cbz	r4, 13a36 <pm_system_resume+0x72>
	return node->next;
   13a32:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13a34:	b164      	cbz	r4, 13a50 <pm_system_resume+0x8c>
   13a36:	b15c      	cbz	r4, 13a50 <pm_system_resume+0x8c>
			callback = notifier->state_exit;
   13a38:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
   13a3a:	2a00      	cmp	r2, #0
   13a3c:	d0f8      	beq.n	13a30 <pm_system_resume+0x6c>
			callback(z_power_states[_current_cpu->id].state);
   13a3e:	4b0c      	ldr	r3, [pc, #48]	; (13a70 <pm_system_resume+0xac>)
   13a40:	7d1b      	ldrb	r3, [r3, #20]
   13a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a46:	0099      	lsls	r1, r3, #2
   13a48:	4b0b      	ldr	r3, [pc, #44]	; (13a78 <pm_system_resume+0xb4>)
   13a4a:	5c58      	ldrb	r0, [r3, r1]
   13a4c:	4790      	blx	r2
   13a4e:	e7ef      	b.n	13a30 <pm_system_resume+0x6c>
	__asm__ volatile(
   13a50:	f386 8811 	msr	BASEPRI, r6
   13a54:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13a58:	4807      	ldr	r0, [pc, #28]	; (13a78 <pm_system_resume+0xb4>)
   13a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13a5e:	00aa      	lsls	r2, r5, #2
   13a60:	1881      	adds	r1, r0, r2
   13a62:	2300      	movs	r3, #0
   13a64:	5083      	str	r3, [r0, r2]
   13a66:	604b      	str	r3, [r1, #4]
   13a68:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   13a6a:	b004      	add	sp, #16
   13a6c:	bd70      	pop	{r4, r5, r6, pc}
   13a6e:	bf00      	nop
   13a70:	2000d50c 	.word	0x2000d50c
   13a74:	2000cea8 	.word	0x2000cea8
   13a78:	2000ceac 	.word	0x2000ceac
   13a7c:	00020067 	.word	0x00020067
   13a80:	2000cea0 	.word	0x2000cea0

00013a84 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a86:	b089      	sub	sp, #36	; 0x24
   13a88:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13a8a:	4b4d      	ldr	r3, [pc, #308]	; (13bc0 <pm_system_suspend+0x13c>)
   13a8c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13a8e:	f005 031f 	and.w	r3, r5, #31
   13a92:	2101      	movs	r1, #1
   13a94:	4099      	lsls	r1, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a96:	096a      	lsrs	r2, r5, #5
   13a98:	4b4a      	ldr	r3, [pc, #296]	; (13bc4 <pm_system_suspend+0x140>)
   13a9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a9e:	e8d3 2fef 	ldaex	r2, [r3]
   13aa2:	ea42 0001 	orr.w	r0, r2, r1
   13aa6:	e8c3 0fe6 	stlex	r6, r0, [r3]
   13aaa:	2e00      	cmp	r6, #0
   13aac:	d1f7      	bne.n	13a9e <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13aae:	4211      	tst	r1, r2
   13ab0:	d016      	beq.n	13ae0 <pm_system_suspend+0x5c>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   13ab2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   13ab6:	4a44      	ldr	r2, [pc, #272]	; (13bc8 <pm_system_suspend+0x144>)
   13ab8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   13abc:	2b00      	cmp	r3, #0
   13abe:	d07c      	beq.n	13bba <pm_system_suspend+0x136>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   13ac0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   13ac4:	d11c      	bne.n	13b00 <pm_system_suspend+0x7c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13ac6:	f009 fe31 	bl	1d72c <k_sched_lock>
	__asm__ volatile(
   13aca:	f04f 0320 	mov.w	r3, #32
   13ace:	f3ef 8611 	mrs	r6, BASEPRI
   13ad2:	f383 8812 	msr	BASEPRI_MAX, r3
   13ad6:	f3bf 8f6f 	isb	sy
	return list->head;
   13ada:	4b3c      	ldr	r3, [pc, #240]	; (13bcc <pm_system_suspend+0x148>)
   13adc:	681c      	ldr	r4, [r3, #0]
   13ade:	e02f      	b.n	13b40 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13ae0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   13ae4:	4b38      	ldr	r3, [pc, #224]	; (13bc8 <pm_system_suspend+0x144>)
   13ae6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   13aea:	466f      	mov	r7, sp
   13aec:	4622      	mov	r2, r4
   13aee:	4629      	mov	r1, r5
   13af0:	4638      	mov	r0, r7
   13af2:	f00c fe83 	bl	207fc <pm_policy_next_state>
   13af6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   13afa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   13afe:	e7d8      	b.n	13ab2 <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
   13b00:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   13b04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13b08:	6898      	ldr	r0, [r3, #8]
   13b0a:	0c41      	lsrs	r1, r0, #17
   13b0c:	03c0      	lsls	r0, r0, #15
   13b0e:	4b30      	ldr	r3, [pc, #192]	; (13bd0 <pm_system_suspend+0x14c>)
   13b10:	18c0      	adds	r0, r0, r3
   13b12:	4a30      	ldr	r2, [pc, #192]	; (13bd4 <pm_system_suspend+0x150>)
   13b14:	f04f 0300 	mov.w	r3, #0
   13b18:	f141 0100 	adc.w	r1, r1, #0
   13b1c:	f7fd f970 	bl	10e00 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   13b20:	2101      	movs	r1, #1
   13b22:	1a20      	subs	r0, r4, r0
   13b24:	f010 fe6b 	bl	247fe <z_set_timeout_expiry>
   13b28:	e7cd      	b.n	13ac6 <pm_system_suspend+0x42>
			callback(z_power_states[_current_cpu->id].state);
   13b2a:	4b25      	ldr	r3, [pc, #148]	; (13bc0 <pm_system_suspend+0x13c>)
   13b2c:	7d1b      	ldrb	r3, [r3, #20]
   13b2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13b32:	4925      	ldr	r1, [pc, #148]	; (13bc8 <pm_system_suspend+0x144>)
   13b34:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   13b38:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   13b3a:	b10c      	cbz	r4, 13b40 <pm_system_suspend+0xbc>
	return node->next;
   13b3c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13b3e:	b124      	cbz	r4, 13b4a <pm_system_suspend+0xc6>
   13b40:	b11c      	cbz	r4, 13b4a <pm_system_suspend+0xc6>
			callback = notifier->state_entry;
   13b42:	6862      	ldr	r2, [r4, #4]
		if (callback) {
   13b44:	2a00      	cmp	r2, #0
   13b46:	d1f0      	bne.n	13b2a <pm_system_suspend+0xa6>
   13b48:	e7f7      	b.n	13b3a <pm_system_suspend+0xb6>
	__asm__ volatile(
   13b4a:	f386 8811 	msr	BASEPRI, r6
   13b4e:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b52:	f005 031f 	and.w	r3, r5, #31
   13b56:	2101      	movs	r1, #1
   13b58:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13b5a:	096b      	lsrs	r3, r5, #5
   13b5c:	4a1e      	ldr	r2, [pc, #120]	; (13bd8 <pm_system_suspend+0x154>)
   13b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13b62:	e8d3 2fef 	ldaex	r2, [r3]
   13b66:	430a      	orrs	r2, r1
   13b68:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13b6c:	2800      	cmp	r0, #0
   13b6e:	d1f8      	bne.n	13b62 <pm_system_suspend+0xde>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   13b70:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   13b74:	4a14      	ldr	r2, [pc, #80]	; (13bc8 <pm_system_suspend+0x144>)
   13b76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13b7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13b7e:	ab08      	add	r3, sp, #32
   13b80:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   13b84:	4b15      	ldr	r3, [pc, #84]	; (13bdc <pm_system_suspend+0x158>)
   13b86:	b10b      	cbz	r3, 13b8c <pm_system_suspend+0x108>
		pm_power_state_set(info);
   13b88:	f00c fa5a 	bl	20040 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   13b8c:	f7ff ff1a 	bl	139c4 <pm_system_resume>
	k_sched_unlock();
   13b90:	f009 ffd6 	bl	1db40 <k_sched_unlock>
	bool ret = true;
   13b94:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b96:	f005 021f 	and.w	r2, r5, #31
   13b9a:	2301      	movs	r3, #1
   13b9c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b9e:	096d      	lsrs	r5, r5, #5
   13ba0:	4a08      	ldr	r2, [pc, #32]	; (13bc4 <pm_system_suspend+0x140>)
   13ba2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13ba6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ba8:	e8d5 2fef 	ldaex	r2, [r5]
   13bac:	401a      	ands	r2, r3
   13bae:	e8c5 2fe1 	stlex	r1, r2, [r5]
   13bb2:	2900      	cmp	r1, #0
   13bb4:	d1f8      	bne.n	13ba8 <pm_system_suspend+0x124>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   13bb6:	b009      	add	sp, #36	; 0x24
   13bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   13bba:	2000      	movs	r0, #0
   13bbc:	e7eb      	b.n	13b96 <pm_system_suspend+0x112>
   13bbe:	bf00      	nop
   13bc0:	2000d50c 	.word	0x2000d50c
   13bc4:	2000ceb8 	.word	0x2000ceb8
   13bc8:	2000ceac 	.word	0x2000ceac
   13bcc:	2000cea0 	.word	0x2000cea0
   13bd0:	000f423f 	.word	0x000f423f
   13bd4:	000f4240 	.word	0x000f4240
   13bd8:	2000cea8 	.word	0x2000cea8
   13bdc:	00020041 	.word	0x00020041

00013be0 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   13be0:	b508      	push	{r3, lr}
	k_sched_lock();
   13be2:	f009 fda3 	bl	1d72c <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   13be6:	4802      	ldr	r0, [pc, #8]	; (13bf0 <before_nse+0x10>)
   13be8:	f00c fe63 	bl	208b2 <z_arm_save_fp_context>
}
   13bec:	bd08      	pop	{r3, pc}
   13bee:	bf00      	nop
   13bf0:	2000cebc 	.word	0x2000cebc

00013bf4 <after_nse>:

void after_nse(void)
{
   13bf4:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   13bf6:	4803      	ldr	r0, [pc, #12]	; (13c04 <after_nse+0x10>)
   13bf8:	f00c fe5c 	bl	208b4 <z_arm_restore_fp_context>
	k_sched_unlock();
   13bfc:	f009 ffa0 	bl	1db40 <k_sched_unlock>
}
   13c00:	bd08      	pop	{r3, pc}
   13c02:	bf00      	nop
   13c04:	2000cebc 	.word	0x2000cebc

00013c08 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13c08:	4901      	ldr	r1, [pc, #4]	; (13c10 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13c0a:	2210      	movs	r2, #16
	str	r2, [r1]
   13c0c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13c0e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13c10:	e000ed10 	.word	0xe000ed10

00013c14 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13c14:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13c16:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13c18:	f380 8811 	msr	BASEPRI, r0
	isb
   13c1c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13c20:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13c24:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13c26:	b662      	cpsie	i
	isb
   13c28:	f3bf 8f6f 	isb	sy

	bx	lr
   13c2c:	4770      	bx	lr
   13c2e:	bf00      	nop

00013c30 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13c30:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13c32:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13c34:	f381 8811 	msr	BASEPRI, r1

	wfe
   13c38:	bf20      	wfe

	msr	BASEPRI, r0
   13c3a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13c3e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13c40:	4770      	bx	lr
   13c42:	bf00      	nop

00013c44 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   13c44:	b570      	push	{r4, r5, r6, lr}
   13c46:	b082      	sub	sp, #8
   13c48:	4604      	mov	r4, r0
   13c4a:	4d1f      	ldr	r5, [pc, #124]	; (13cc8 <esf_dump+0x84>)
   13c4c:	4b1f      	ldr	r3, [pc, #124]	; (13ccc <esf_dump+0x88>)
   13c4e:	1aed      	subs	r5, r5, r3
   13c50:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13c52:	2601      	movs	r6, #1
   13c54:	f04f 0300 	mov.w	r3, #0
   13c58:	f366 0302 	bfi	r3, r6, #0, #3
   13c5c:	f36f 03c5 	bfc	r3, #3, #3
   13c60:	f365 138f 	bfi	r3, r5, #6, #10
   13c64:	f8ad 3000 	strh.w	r3, [sp]
   13c68:	6883      	ldr	r3, [r0, #8]
   13c6a:	6842      	ldr	r2, [r0, #4]
   13c6c:	6801      	ldr	r1, [r0, #0]
   13c6e:	4818      	ldr	r0, [pc, #96]	; (13cd0 <esf_dump+0x8c>)
   13c70:	f7ff f93c 	bl	12eec <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13c74:	f04f 0300 	mov.w	r3, #0
   13c78:	f366 0302 	bfi	r3, r6, #0, #3
   13c7c:	f36f 03c5 	bfc	r3, #3, #3
   13c80:	f365 138f 	bfi	r3, r5, #6, #10
   13c84:	f8ad 3000 	strh.w	r3, [sp]
   13c88:	6963      	ldr	r3, [r4, #20]
   13c8a:	6922      	ldr	r2, [r4, #16]
   13c8c:	68e1      	ldr	r1, [r4, #12]
   13c8e:	4811      	ldr	r0, [pc, #68]	; (13cd4 <esf_dump+0x90>)
   13c90:	f7ff f92c 	bl	12eec <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13c94:	f04f 0200 	mov.w	r2, #0
   13c98:	f366 0202 	bfi	r2, r6, #0, #3
   13c9c:	f36f 02c5 	bfc	r2, #3, #3
   13ca0:	f365 128f 	bfi	r2, r5, #6, #10
   13ca4:	69e1      	ldr	r1, [r4, #28]
   13ca6:	480c      	ldr	r0, [pc, #48]	; (13cd8 <esf_dump+0x94>)
   13ca8:	f7ff f984 	bl	12fb4 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13cac:	f04f 0200 	mov.w	r2, #0
   13cb0:	f366 0202 	bfi	r2, r6, #0, #3
   13cb4:	f36f 02c5 	bfc	r2, #3, #3
   13cb8:	f365 128f 	bfi	r2, r5, #6, #10
   13cbc:	69a1      	ldr	r1, [r4, #24]
   13cbe:	4807      	ldr	r0, [pc, #28]	; (13cdc <esf_dump+0x98>)
   13cc0:	f7ff f978 	bl	12fb4 <log_1>
		esf->basic.pc);
}
   13cc4:	b002      	add	sp, #8
   13cc6:	bd70      	pop	{r4, r5, r6, pc}
   13cc8:	0002534c 	.word	0x0002534c
   13ccc:	000252ec 	.word	0x000252ec
   13cd0:	00025a9c 	.word	0x00025a9c
   13cd4:	00025acc 	.word	0x00025acc
   13cd8:	00025afc 	.word	0x00025afc
   13cdc:	00025b0c 	.word	0x00025b0c

00013ce0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13ce0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13ce2:	2800      	cmp	r0, #0
   13ce4:	db07      	blt.n	13cf6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13ce6:	f000 021f 	and.w	r2, r0, #31
   13cea:	0940      	lsrs	r0, r0, #5
   13cec:	2301      	movs	r3, #1
   13cee:	4093      	lsls	r3, r2
   13cf0:	4a01      	ldr	r2, [pc, #4]	; (13cf8 <arch_irq_enable+0x18>)
   13cf2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   13cf6:	4770      	bx	lr
   13cf8:	e000e100 	.word	0xe000e100

00013cfc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13cfc:	0942      	lsrs	r2, r0, #5
   13cfe:	4b05      	ldr	r3, [pc, #20]	; (13d14 <arch_irq_is_enabled+0x18>)
   13d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13d04:	f000 001f 	and.w	r0, r0, #31
   13d08:	2301      	movs	r3, #1
   13d0a:	fa03 f000 	lsl.w	r0, r3, r0
}
   13d0e:	4010      	ands	r0, r2
   13d10:	4770      	bx	lr
   13d12:	bf00      	nop
   13d14:	e000e100 	.word	0xe000e100

00013d18 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13d18:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13d1a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13d1c:	2800      	cmp	r0, #0
   13d1e:	db08      	blt.n	13d32 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d20:	0149      	lsls	r1, r1, #5
   13d22:	b2c9      	uxtb	r1, r1
   13d24:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   13d28:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   13d2c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   13d30:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d32:	f000 000f 	and.w	r0, r0, #15
   13d36:	0149      	lsls	r1, r1, #5
   13d38:	b2c9      	uxtb	r1, r1
   13d3a:	4b01      	ldr	r3, [pc, #4]	; (13d40 <z_arm_irq_priority_set+0x28>)
   13d3c:	5419      	strb	r1, [r3, r0]
}
   13d3e:	4770      	bx	lr
   13d40:	e000ed14 	.word	0xe000ed14

00013d44 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13d44:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13d46:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13d48:	4b05      	ldr	r3, [pc, #20]	; (13d60 <_arch_isr_direct_pm+0x1c>)
   13d4a:	699b      	ldr	r3, [r3, #24]
   13d4c:	b90b      	cbnz	r3, 13d52 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13d4e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13d50:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   13d52:	4b03      	ldr	r3, [pc, #12]	; (13d60 <_arch_isr_direct_pm+0x1c>)
   13d54:	2200      	movs	r2, #0
   13d56:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13d58:	f010 f9fc 	bl	24154 <z_pm_save_idle_exit>
   13d5c:	e7f7      	b.n	13d4e <_arch_isr_direct_pm+0xa>
   13d5e:	bf00      	nop
   13d60:	2000d50c 	.word	0x2000d50c

00013d64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13d64:	bf30      	wfi
    b z_SysNmiOnReset
   13d66:	f7ff bffd 	b.w	13d64 <z_SysNmiOnReset>
   13d6a:	bf00      	nop

00013d6c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13d6c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13d6e:	4b0f      	ldr	r3, [pc, #60]	; (13dac <z_arm_prep_c+0x40>)
   13d70:	4a0f      	ldr	r2, [pc, #60]	; (13db0 <z_arm_prep_c+0x44>)
   13d72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13d76:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13d78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13d80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13d84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   13d8c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13d90:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   13d94:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   13d98:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13d9c:	f008 ffb6 	bl	1cd0c <z_bss_zero>
	z_data_copy();
   13da0:	f00a f85e 	bl	1de60 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13da4:	f000 fca2 	bl	146ec <z_arm_interrupt_init>
	z_cstart();
   13da8:	f008 ffbc 	bl	1cd24 <z_cstart>
   13dac:	e000ed00 	.word	0xe000ed00
   13db0:	00010000 	.word	0x00010000

00013db4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13db4:	4a0a      	ldr	r2, [pc, #40]	; (13de0 <arch_swap+0x2c>)
   13db6:	6893      	ldr	r3, [r2, #8]
   13db8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13dbc:	4909      	ldr	r1, [pc, #36]	; (13de4 <arch_swap+0x30>)
   13dbe:	6809      	ldr	r1, [r1, #0]
   13dc0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13dc4:	4908      	ldr	r1, [pc, #32]	; (13de8 <arch_swap+0x34>)
   13dc6:	684b      	ldr	r3, [r1, #4]
   13dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13dcc:	604b      	str	r3, [r1, #4]
   13dce:	2300      	movs	r3, #0
   13dd0:	f383 8811 	msr	BASEPRI, r3
   13dd4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13dd8:	6893      	ldr	r3, [r2, #8]
}
   13dda:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   13dde:	4770      	bx	lr
   13de0:	2000d50c 	.word	0x2000d50c
   13de4:	00027360 	.word	0x00027360
   13de8:	e000ed00 	.word	0xe000ed00

00013dec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13dec:	4914      	ldr	r1, [pc, #80]	; (13e40 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13dee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13df0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13df4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13df6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13dfa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13dfe:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   13e00:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13e04:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13e08:	4f0e      	ldr	r7, [pc, #56]	; (13e44 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13e0a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13e0e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13e10:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13e12:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13e14:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13e18:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13e1e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13e22:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13e26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13e2a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13e2e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   13e32:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   13e34:	f00c fd11 	bl	2085a <configure_builtin_stack_guard>
    pop {r2, lr}
   13e38:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13e3c:	4770      	bx	lr
   13e3e:	0000      	.short	0x0000
    ldr r1, =_kernel
   13e40:	2000d50c 	.word	0x2000d50c
    ldr v4, =_SCS_ICSR
   13e44:	e000ed04 	.word	0xe000ed04

00013e48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13e48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13e4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13e4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13e52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13e56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13e58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13e5c:	2902      	cmp	r1, #2
    beq _oops
   13e5e:	d0ff      	beq.n	13e60 <_oops>

00013e60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13e60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13e62:	f00c fce8 	bl	20836 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13e66:	bd01      	pop	{r0, pc}

00013e68 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13e68:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13e6a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13e6e:	490e      	ldr	r1, [pc, #56]	; (13ea8 <arch_new_thread+0x40>)
   13e70:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13e74:	f021 0101 	bic.w	r1, r1, #1
   13e78:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13e7c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13e80:	9b01      	ldr	r3, [sp, #4]
   13e82:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13e86:	9b02      	ldr	r3, [sp, #8]
   13e88:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13e8c:	9b03      	ldr	r3, [sp, #12]
   13e8e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13e96:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   13e9a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13e9c:	2300      	movs	r3, #0
   13e9e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13ea2:	bc10      	pop	{r4}
   13ea4:	4770      	bx	lr
   13ea6:	bf00      	nop
   13ea8:	0001fbf3 	.word	0x0001fbf3

00013eac <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13eac:	4b09      	ldr	r3, [pc, #36]	; (13ed4 <arch_switch_to_main_thread+0x28>)
   13eae:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   13eb0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   13eb4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13eb8:	4610      	mov	r0, r2
   13eba:	f381 8809 	msr	PSP, r1
   13ebe:	2100      	movs	r1, #0
   13ec0:	b663      	cpsie	if
   13ec2:	f381 8811 	msr	BASEPRI, r1
   13ec6:	f3bf 8f6f 	isb	sy
   13eca:	2200      	movs	r2, #0
   13ecc:	2300      	movs	r3, #0
   13ece:	f00b fe90 	bl	1fbf2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13ed2:	bf00      	nop
   13ed4:	2000d50c 	.word	0x2000d50c

00013ed8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13ed8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13eda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13edc:	4a0b      	ldr	r2, [pc, #44]	; (13f0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13ede:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13ee0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13ee2:	bf1e      	ittt	ne
	movne	r1, #0
   13ee4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13ee6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13ee8:	f010 f934 	blne	24154 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13eec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13eee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13ef2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13ef6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13efa:	4905      	ldr	r1, [pc, #20]	; (13f10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13efc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13efe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13f00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13f02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13f06:	4903      	ldr	r1, [pc, #12]	; (13f14 <_isr_wrapper+0x3c>)
	bx r1
   13f08:	4708      	bx	r1
   13f0a:	0000      	.short	0x0000
	ldr r2, =_kernel
   13f0c:	2000d50c 	.word	0x2000d50c
	ldr r1, =_sw_isr_table
   13f10:	000250d8 	.word	0x000250d8
	ldr r1, =z_arm_int_exit
   13f14:	00013f19 	.word	0x00013f19

00013f18 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13f18:	4b04      	ldr	r3, [pc, #16]	; (13f2c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13f1a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13f1c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13f1e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13f20:	d003      	beq.n	13f2a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13f22:	4903      	ldr	r1, [pc, #12]	; (13f30 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13f28:	600a      	str	r2, [r1, #0]

00013f2a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13f2a:	4770      	bx	lr
	ldr r3, =_kernel
   13f2c:	2000d50c 	.word	0x2000d50c
	ldr r1, =_SCS_ICSR
   13f30:	e000ed04 	.word	0xe000ed04

00013f34 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   13f34:	b510      	push	{r4, lr}
   13f36:	4b5a      	ldr	r3, [pc, #360]	; (140a0 <usage_fault+0x16c>)
   13f38:	4a5a      	ldr	r2, [pc, #360]	; (140a4 <usage_fault+0x170>)
   13f3a:	1a9b      	subs	r3, r3, r2
   13f3c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13f3e:	f04f 0100 	mov.w	r1, #0
   13f42:	2201      	movs	r2, #1
   13f44:	f362 0102 	bfi	r1, r2, #0, #3
   13f48:	f36f 01c5 	bfc	r1, #3, #3
   13f4c:	f363 118f 	bfi	r1, r3, #6, #10
   13f50:	4855      	ldr	r0, [pc, #340]	; (140a8 <usage_fault+0x174>)
   13f52:	f7ff f805 	bl	12f60 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13f56:	4b55      	ldr	r3, [pc, #340]	; (140ac <usage_fault+0x178>)
   13f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13f5e:	d126      	bne.n	13fae <usage_fault+0x7a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13f60:	4b52      	ldr	r3, [pc, #328]	; (140ac <usage_fault+0x178>)
   13f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   13f68:	d132      	bne.n	13fd0 <usage_fault+0x9c>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13f6a:	4b50      	ldr	r3, [pc, #320]	; (140ac <usage_fault+0x178>)
   13f6c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   13f6e:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   13f72:	d13e      	bne.n	13ff2 <usage_fault+0xbe>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13f74:	4b4d      	ldr	r3, [pc, #308]	; (140ac <usage_fault+0x178>)
   13f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f78:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13f7c:	d14b      	bne.n	14016 <usage_fault+0xe2>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13f7e:	4b4b      	ldr	r3, [pc, #300]	; (140ac <usage_fault+0x178>)
   13f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f82:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13f86:	d157      	bne.n	14038 <usage_fault+0x104>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13f88:	4b48      	ldr	r3, [pc, #288]	; (140ac <usage_fault+0x178>)
   13f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   13f90:	d163      	bne.n	1405a <usage_fault+0x126>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13f92:	4b46      	ldr	r3, [pc, #280]	; (140ac <usage_fault+0x178>)
   13f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13f9a:	d16f      	bne.n	1407c <usage_fault+0x148>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13f9c:	4a43      	ldr	r2, [pc, #268]	; (140ac <usage_fault+0x178>)
   13f9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13fa0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13fa4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13fa8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13faa:	4620      	mov	r0, r4
   13fac:	bd10      	pop	{r4, pc}
   13fae:	4b3c      	ldr	r3, [pc, #240]	; (140a0 <usage_fault+0x16c>)
   13fb0:	4a3c      	ldr	r2, [pc, #240]	; (140a4 <usage_fault+0x170>)
   13fb2:	1a9b      	subs	r3, r3, r2
   13fb4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   13fb6:	f04f 0100 	mov.w	r1, #0
   13fba:	2201      	movs	r2, #1
   13fbc:	f362 0102 	bfi	r1, r2, #0, #3
   13fc0:	f36f 01c5 	bfc	r1, #3, #3
   13fc4:	f363 118f 	bfi	r1, r3, #6, #10
   13fc8:	4839      	ldr	r0, [pc, #228]	; (140b0 <usage_fault+0x17c>)
   13fca:	f7fe ffc9 	bl	12f60 <log_0>
   13fce:	e7c7      	b.n	13f60 <usage_fault+0x2c>
   13fd0:	4b33      	ldr	r3, [pc, #204]	; (140a0 <usage_fault+0x16c>)
   13fd2:	4a34      	ldr	r2, [pc, #208]	; (140a4 <usage_fault+0x170>)
   13fd4:	1a9b      	subs	r3, r3, r2
   13fd6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   13fd8:	f04f 0100 	mov.w	r1, #0
   13fdc:	2201      	movs	r2, #1
   13fde:	f362 0102 	bfi	r1, r2, #0, #3
   13fe2:	f36f 01c5 	bfc	r1, #3, #3
   13fe6:	f363 118f 	bfi	r1, r3, #6, #10
   13fea:	4832      	ldr	r0, [pc, #200]	; (140b4 <usage_fault+0x180>)
   13fec:	f7fe ffb8 	bl	12f60 <log_0>
   13ff0:	e7bb      	b.n	13f6a <usage_fault+0x36>
   13ff2:	4b2b      	ldr	r3, [pc, #172]	; (140a0 <usage_fault+0x16c>)
   13ff4:	4a2b      	ldr	r2, [pc, #172]	; (140a4 <usage_fault+0x170>)
   13ff6:	1a9b      	subs	r3, r3, r2
   13ff8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   13ffa:	f04f 0100 	mov.w	r1, #0
   13ffe:	2201      	movs	r2, #1
   14000:	f362 0102 	bfi	r1, r2, #0, #3
   14004:	f36f 01c5 	bfc	r1, #3, #3
   14008:	f363 118f 	bfi	r1, r3, #6, #10
   1400c:	482a      	ldr	r0, [pc, #168]	; (140b8 <usage_fault+0x184>)
   1400e:	f7fe ffa7 	bl	12f60 <log_0>
		reason = K_ERR_STACK_CHK_FAIL;
   14012:	2402      	movs	r4, #2
   14014:	e7ae      	b.n	13f74 <usage_fault+0x40>
   14016:	4b22      	ldr	r3, [pc, #136]	; (140a0 <usage_fault+0x16c>)
   14018:	4a22      	ldr	r2, [pc, #136]	; (140a4 <usage_fault+0x170>)
   1401a:	1a9b      	subs	r3, r3, r2
   1401c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   1401e:	f04f 0100 	mov.w	r1, #0
   14022:	2201      	movs	r2, #1
   14024:	f362 0102 	bfi	r1, r2, #0, #3
   14028:	f36f 01c5 	bfc	r1, #3, #3
   1402c:	f363 118f 	bfi	r1, r3, #6, #10
   14030:	4822      	ldr	r0, [pc, #136]	; (140bc <usage_fault+0x188>)
   14032:	f7fe ff95 	bl	12f60 <log_0>
   14036:	e7a2      	b.n	13f7e <usage_fault+0x4a>
   14038:	4b19      	ldr	r3, [pc, #100]	; (140a0 <usage_fault+0x16c>)
   1403a:	4a1a      	ldr	r2, [pc, #104]	; (140a4 <usage_fault+0x170>)
   1403c:	1a9b      	subs	r3, r3, r2
   1403e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14040:	f04f 0100 	mov.w	r1, #0
   14044:	2201      	movs	r2, #1
   14046:	f362 0102 	bfi	r1, r2, #0, #3
   1404a:	f36f 01c5 	bfc	r1, #3, #3
   1404e:	f363 118f 	bfi	r1, r3, #6, #10
   14052:	481b      	ldr	r0, [pc, #108]	; (140c0 <usage_fault+0x18c>)
   14054:	f7fe ff84 	bl	12f60 <log_0>
   14058:	e796      	b.n	13f88 <usage_fault+0x54>
   1405a:	4b11      	ldr	r3, [pc, #68]	; (140a0 <usage_fault+0x16c>)
   1405c:	4a11      	ldr	r2, [pc, #68]	; (140a4 <usage_fault+0x170>)
   1405e:	1a9b      	subs	r3, r3, r2
   14060:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14062:	f04f 0100 	mov.w	r1, #0
   14066:	2201      	movs	r2, #1
   14068:	f362 0102 	bfi	r1, r2, #0, #3
   1406c:	f36f 01c5 	bfc	r1, #3, #3
   14070:	f363 118f 	bfi	r1, r3, #6, #10
   14074:	4813      	ldr	r0, [pc, #76]	; (140c4 <usage_fault+0x190>)
   14076:	f7fe ff73 	bl	12f60 <log_0>
   1407a:	e78a      	b.n	13f92 <usage_fault+0x5e>
   1407c:	4b08      	ldr	r3, [pc, #32]	; (140a0 <usage_fault+0x16c>)
   1407e:	4a09      	ldr	r2, [pc, #36]	; (140a4 <usage_fault+0x170>)
   14080:	1a9b      	subs	r3, r3, r2
   14082:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14084:	f04f 0100 	mov.w	r1, #0
   14088:	2201      	movs	r2, #1
   1408a:	f362 0102 	bfi	r1, r2, #0, #3
   1408e:	f36f 01c5 	bfc	r1, #3, #3
   14092:	f363 118f 	bfi	r1, r3, #6, #10
   14096:	480c      	ldr	r0, [pc, #48]	; (140c8 <usage_fault+0x194>)
   14098:	f7fe ff62 	bl	12f60 <log_0>
   1409c:	e77e      	b.n	13f9c <usage_fault+0x68>
   1409e:	bf00      	nop
   140a0:	0002534c 	.word	0x0002534c
   140a4:	000252ec 	.word	0x000252ec
   140a8:	00025b3c 	.word	0x00025b3c
   140ac:	e000ed00 	.word	0xe000ed00
   140b0:	00025b54 	.word	0x00025b54
   140b4:	00025b68 	.word	0x00025b68
   140b8:	00025b84 	.word	0x00025b84
   140bc:	00025bb0 	.word	0x00025bb0
   140c0:	00025bd0 	.word	0x00025bd0
   140c4:	00025bf8 	.word	0x00025bf8
   140c8:	00025c14 	.word	0x00025c14

000140cc <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   140cc:	b508      	push	{r3, lr}
	*recoverable = false;
   140ce:	2200      	movs	r2, #0
   140d0:	700a      	strb	r2, [r1, #0]
   140d2:	4b08      	ldr	r3, [pc, #32]	; (140f4 <debug_monitor+0x28>)
   140d4:	4908      	ldr	r1, [pc, #32]	; (140f8 <debug_monitor+0x2c>)
   140d6:	1a5b      	subs	r3, r3, r1
   140d8:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   140da:	f04f 0100 	mov.w	r1, #0
   140de:	2001      	movs	r0, #1
   140e0:	f360 0102 	bfi	r1, r0, #0, #3
   140e4:	f362 01c5 	bfi	r1, r2, #3, #3
   140e8:	f363 118f 	bfi	r1, r3, #6, #10
   140ec:	4803      	ldr	r0, [pc, #12]	; (140fc <debug_monitor+0x30>)
   140ee:	f7fe ff37 	bl	12f60 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   140f2:	bd08      	pop	{r3, pc}
   140f4:	0002534c 	.word	0x0002534c
   140f8:	000252ec 	.word	0x000252ec
   140fc:	00025c40 	.word	0x00025c40

00014100 <mem_manage_fault>:
{
   14100:	b570      	push	{r4, r5, r6, lr}
   14102:	4605      	mov	r5, r0
   14104:	460e      	mov	r6, r1
   14106:	4614      	mov	r4, r2
   14108:	4b56      	ldr	r3, [pc, #344]	; (14264 <mem_manage_fault+0x164>)
   1410a:	4a57      	ldr	r2, [pc, #348]	; (14268 <mem_manage_fault+0x168>)
   1410c:	1a9b      	subs	r3, r3, r2
   1410e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14110:	f04f 0100 	mov.w	r1, #0
   14114:	2201      	movs	r2, #1
   14116:	f362 0102 	bfi	r1, r2, #0, #3
   1411a:	f36f 01c5 	bfc	r1, #3, #3
   1411e:	f363 118f 	bfi	r1, r3, #6, #10
   14122:	4852      	ldr	r0, [pc, #328]	; (1426c <mem_manage_fault+0x16c>)
   14124:	f7fe ff1c 	bl	12f60 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14128:	4b51      	ldr	r3, [pc, #324]	; (14270 <mem_manage_fault+0x170>)
   1412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1412c:	f013 0f10 	tst.w	r3, #16
   14130:	d126      	bne.n	14180 <mem_manage_fault+0x80>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14132:	4b4f      	ldr	r3, [pc, #316]	; (14270 <mem_manage_fault+0x170>)
   14134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14136:	f013 0f08 	tst.w	r3, #8
   1413a:	d132      	bne.n	141a2 <mem_manage_fault+0xa2>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1413c:	4b4c      	ldr	r3, [pc, #304]	; (14270 <mem_manage_fault+0x170>)
   1413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14140:	f013 0f02 	tst.w	r3, #2
   14144:	d13e      	bne.n	141c4 <mem_manage_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14146:	4b4a      	ldr	r3, [pc, #296]	; (14270 <mem_manage_fault+0x170>)
   14148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1414a:	f013 0f01 	tst.w	r3, #1
   1414e:	d167      	bne.n	14220 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14150:	4b47      	ldr	r3, [pc, #284]	; (14270 <mem_manage_fault+0x170>)
   14152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14154:	f013 0f20 	tst.w	r3, #32
   14158:	d173      	bne.n	14242 <mem_manage_fault+0x142>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1415a:	4b45      	ldr	r3, [pc, #276]	; (14270 <mem_manage_fault+0x170>)
   1415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1415e:	f013 0f10 	tst.w	r3, #16
   14162:	d101      	bne.n	14168 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14164:	4b42      	ldr	r3, [pc, #264]	; (14270 <mem_manage_fault+0x170>)
   14166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14168:	4a41      	ldr	r2, [pc, #260]	; (14270 <mem_manage_fault+0x170>)
   1416a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1416c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14170:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14172:	2101      	movs	r1, #1
   14174:	4628      	mov	r0, r5
   14176:	f00c fb75 	bl	20864 <memory_fault_recoverable>
   1417a:	7020      	strb	r0, [r4, #0]
}
   1417c:	2000      	movs	r0, #0
   1417e:	bd70      	pop	{r4, r5, r6, pc}
   14180:	4b38      	ldr	r3, [pc, #224]	; (14264 <mem_manage_fault+0x164>)
   14182:	4a39      	ldr	r2, [pc, #228]	; (14268 <mem_manage_fault+0x168>)
   14184:	1a9b      	subs	r3, r3, r2
   14186:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   14188:	f04f 0100 	mov.w	r1, #0
   1418c:	2201      	movs	r2, #1
   1418e:	f362 0102 	bfi	r1, r2, #0, #3
   14192:	f36f 01c5 	bfc	r1, #3, #3
   14196:	f363 118f 	bfi	r1, r3, #6, #10
   1419a:	4836      	ldr	r0, [pc, #216]	; (14274 <mem_manage_fault+0x174>)
   1419c:	f7fe fee0 	bl	12f60 <log_0>
   141a0:	e7c7      	b.n	14132 <mem_manage_fault+0x32>
   141a2:	4b30      	ldr	r3, [pc, #192]	; (14264 <mem_manage_fault+0x164>)
   141a4:	4a30      	ldr	r2, [pc, #192]	; (14268 <mem_manage_fault+0x168>)
   141a6:	1a9b      	subs	r3, r3, r2
   141a8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   141aa:	f04f 0100 	mov.w	r1, #0
   141ae:	2201      	movs	r2, #1
   141b0:	f362 0102 	bfi	r1, r2, #0, #3
   141b4:	f36f 01c5 	bfc	r1, #3, #3
   141b8:	f363 118f 	bfi	r1, r3, #6, #10
   141bc:	482e      	ldr	r0, [pc, #184]	; (14278 <mem_manage_fault+0x178>)
   141be:	f7fe fecf 	bl	12f60 <log_0>
   141c2:	e7bb      	b.n	1413c <mem_manage_fault+0x3c>
   141c4:	4b27      	ldr	r3, [pc, #156]	; (14264 <mem_manage_fault+0x164>)
   141c6:	4a28      	ldr	r2, [pc, #160]	; (14268 <mem_manage_fault+0x168>)
   141c8:	1a9b      	subs	r3, r3, r2
   141ca:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   141cc:	f04f 0100 	mov.w	r1, #0
   141d0:	2201      	movs	r2, #1
   141d2:	f362 0102 	bfi	r1, r2, #0, #3
   141d6:	f36f 01c5 	bfc	r1, #3, #3
   141da:	f363 118f 	bfi	r1, r3, #6, #10
   141de:	4827      	ldr	r0, [pc, #156]	; (1427c <mem_manage_fault+0x17c>)
   141e0:	f7fe febe 	bl	12f60 <log_0>
		uint32_t temp = SCB->MMFAR;
   141e4:	4b22      	ldr	r3, [pc, #136]	; (14270 <mem_manage_fault+0x170>)
   141e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   141e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   141ea:	f013 0f80 	tst.w	r3, #128	; 0x80
   141ee:	d0aa      	beq.n	14146 <mem_manage_fault+0x46>
   141f0:	4b1c      	ldr	r3, [pc, #112]	; (14264 <mem_manage_fault+0x164>)
   141f2:	4a1d      	ldr	r2, [pc, #116]	; (14268 <mem_manage_fault+0x168>)
   141f4:	1a9b      	subs	r3, r3, r2
   141f6:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   141f8:	f04f 0200 	mov.w	r2, #0
   141fc:	2001      	movs	r0, #1
   141fe:	f360 0202 	bfi	r2, r0, #0, #3
   14202:	f36f 02c5 	bfc	r2, #3, #3
   14206:	f363 128f 	bfi	r2, r3, #6, #10
   1420a:	481d      	ldr	r0, [pc, #116]	; (14280 <mem_manage_fault+0x180>)
   1420c:	f7fe fed2 	bl	12fb4 <log_1>
			if (from_hard_fault != 0) {
   14210:	2e00      	cmp	r6, #0
   14212:	d098      	beq.n	14146 <mem_manage_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14214:	4a16      	ldr	r2, [pc, #88]	; (14270 <mem_manage_fault+0x170>)
   14216:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1421c:	6293      	str	r3, [r2, #40]	; 0x28
   1421e:	e792      	b.n	14146 <mem_manage_fault+0x46>
   14220:	4b10      	ldr	r3, [pc, #64]	; (14264 <mem_manage_fault+0x164>)
   14222:	4a11      	ldr	r2, [pc, #68]	; (14268 <mem_manage_fault+0x168>)
   14224:	1a9b      	subs	r3, r3, r2
   14226:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   14228:	f04f 0100 	mov.w	r1, #0
   1422c:	2201      	movs	r2, #1
   1422e:	f362 0102 	bfi	r1, r2, #0, #3
   14232:	f36f 01c5 	bfc	r1, #3, #3
   14236:	f363 118f 	bfi	r1, r3, #6, #10
   1423a:	4812      	ldr	r0, [pc, #72]	; (14284 <mem_manage_fault+0x184>)
   1423c:	f7fe fe90 	bl	12f60 <log_0>
   14240:	e786      	b.n	14150 <mem_manage_fault+0x50>
   14242:	4b08      	ldr	r3, [pc, #32]	; (14264 <mem_manage_fault+0x164>)
   14244:	4a08      	ldr	r2, [pc, #32]	; (14268 <mem_manage_fault+0x168>)
   14246:	1a9b      	subs	r3, r3, r2
   14248:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   1424a:	f04f 0100 	mov.w	r1, #0
   1424e:	2201      	movs	r2, #1
   14250:	f362 0102 	bfi	r1, r2, #0, #3
   14254:	f36f 01c5 	bfc	r1, #3, #3
   14258:	f363 118f 	bfi	r1, r3, #6, #10
   1425c:	480a      	ldr	r0, [pc, #40]	; (14288 <mem_manage_fault+0x188>)
   1425e:	f7fe fe7f 	bl	12f60 <log_0>
   14262:	e77a      	b.n	1415a <mem_manage_fault+0x5a>
   14264:	0002534c 	.word	0x0002534c
   14268:	000252ec 	.word	0x000252ec
   1426c:	00025c64 	.word	0x00025c64
   14270:	e000ed00 	.word	0xe000ed00
   14274:	00025c7c 	.word	0x00025c7c
   14278:	00025cb0 	.word	0x00025cb0
   1427c:	00025cc4 	.word	0x00025cc4
   14280:	00025cdc 	.word	0x00025cdc
   14284:	00025cf4 	.word	0x00025cf4
   14288:	00025d14 	.word	0x00025d14

0001428c <bus_fault>:
{
   1428c:	b570      	push	{r4, r5, r6, lr}
   1428e:	4605      	mov	r5, r0
   14290:	460e      	mov	r6, r1
   14292:	4614      	mov	r4, r2
   14294:	4b5e      	ldr	r3, [pc, #376]	; (14410 <bus_fault+0x184>)
   14296:	4a5f      	ldr	r2, [pc, #380]	; (14414 <bus_fault+0x188>)
   14298:	1a9b      	subs	r3, r3, r2
   1429a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   1429c:	f04f 0100 	mov.w	r1, #0
   142a0:	2201      	movs	r2, #1
   142a2:	f362 0102 	bfi	r1, r2, #0, #3
   142a6:	f36f 01c5 	bfc	r1, #3, #3
   142aa:	f363 118f 	bfi	r1, r3, #6, #10
   142ae:	485a      	ldr	r0, [pc, #360]	; (14418 <bus_fault+0x18c>)
   142b0:	f7fe fe56 	bl	12f60 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   142b4:	4b59      	ldr	r3, [pc, #356]	; (1441c <bus_fault+0x190>)
   142b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   142bc:	d124      	bne.n	14308 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   142be:	4b57      	ldr	r3, [pc, #348]	; (1441c <bus_fault+0x190>)
   142c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   142c6:	d130      	bne.n	1432a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   142c8:	4b54      	ldr	r3, [pc, #336]	; (1441c <bus_fault+0x190>)
   142ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142cc:	f413 7f00 	tst.w	r3, #512	; 0x200
   142d0:	d13c      	bne.n	1434c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   142d2:	4b52      	ldr	r3, [pc, #328]	; (1441c <bus_fault+0x190>)
   142d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   142da:	d165      	bne.n	143a8 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   142dc:	4b4f      	ldr	r3, [pc, #316]	; (1441c <bus_fault+0x190>)
   142de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   142e4:	d171      	bne.n	143ca <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   142e6:	4b4d      	ldr	r3, [pc, #308]	; (1441c <bus_fault+0x190>)
   142e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   142ee:	d17d      	bne.n	143ec <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   142f0:	4a4a      	ldr	r2, [pc, #296]	; (1441c <bus_fault+0x190>)
   142f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   142f4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   142f8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   142fa:	2101      	movs	r1, #1
   142fc:	4628      	mov	r0, r5
   142fe:	f00c fab1 	bl	20864 <memory_fault_recoverable>
   14302:	7020      	strb	r0, [r4, #0]
}
   14304:	2000      	movs	r0, #0
   14306:	bd70      	pop	{r4, r5, r6, pc}
   14308:	4b41      	ldr	r3, [pc, #260]	; (14410 <bus_fault+0x184>)
   1430a:	4a42      	ldr	r2, [pc, #264]	; (14414 <bus_fault+0x188>)
   1430c:	1a9b      	subs	r3, r3, r2
   1430e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   14310:	f04f 0100 	mov.w	r1, #0
   14314:	2201      	movs	r2, #1
   14316:	f362 0102 	bfi	r1, r2, #0, #3
   1431a:	f36f 01c5 	bfc	r1, #3, #3
   1431e:	f363 118f 	bfi	r1, r3, #6, #10
   14322:	483f      	ldr	r0, [pc, #252]	; (14420 <bus_fault+0x194>)
   14324:	f7fe fe1c 	bl	12f60 <log_0>
   14328:	e7c9      	b.n	142be <bus_fault+0x32>
   1432a:	4b39      	ldr	r3, [pc, #228]	; (14410 <bus_fault+0x184>)
   1432c:	4a39      	ldr	r2, [pc, #228]	; (14414 <bus_fault+0x188>)
   1432e:	1a9b      	subs	r3, r3, r2
   14330:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   14332:	f04f 0100 	mov.w	r1, #0
   14336:	2201      	movs	r2, #1
   14338:	f362 0102 	bfi	r1, r2, #0, #3
   1433c:	f36f 01c5 	bfc	r1, #3, #3
   14340:	f363 118f 	bfi	r1, r3, #6, #10
   14344:	4837      	ldr	r0, [pc, #220]	; (14424 <bus_fault+0x198>)
   14346:	f7fe fe0b 	bl	12f60 <log_0>
   1434a:	e7bd      	b.n	142c8 <bus_fault+0x3c>
   1434c:	4b30      	ldr	r3, [pc, #192]	; (14410 <bus_fault+0x184>)
   1434e:	4a31      	ldr	r2, [pc, #196]	; (14414 <bus_fault+0x188>)
   14350:	1a9b      	subs	r3, r3, r2
   14352:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   14354:	f04f 0100 	mov.w	r1, #0
   14358:	2201      	movs	r2, #1
   1435a:	f362 0102 	bfi	r1, r2, #0, #3
   1435e:	f36f 01c5 	bfc	r1, #3, #3
   14362:	f363 118f 	bfi	r1, r3, #6, #10
   14366:	4830      	ldr	r0, [pc, #192]	; (14428 <bus_fault+0x19c>)
   14368:	f7fe fdfa 	bl	12f60 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1436c:	4b2b      	ldr	r3, [pc, #172]	; (1441c <bus_fault+0x190>)
   1436e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14372:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14376:	d0ac      	beq.n	142d2 <bus_fault+0x46>
   14378:	4b25      	ldr	r3, [pc, #148]	; (14410 <bus_fault+0x184>)
   1437a:	4a26      	ldr	r2, [pc, #152]	; (14414 <bus_fault+0x188>)
   1437c:	1a9b      	subs	r3, r3, r2
   1437e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14380:	f04f 0200 	mov.w	r2, #0
   14384:	2001      	movs	r0, #1
   14386:	f360 0202 	bfi	r2, r0, #0, #3
   1438a:	f36f 02c5 	bfc	r2, #3, #3
   1438e:	f363 128f 	bfi	r2, r3, #6, #10
   14392:	4826      	ldr	r0, [pc, #152]	; (1442c <bus_fault+0x1a0>)
   14394:	f7fe fe0e 	bl	12fb4 <log_1>
			if (from_hard_fault != 0) {
   14398:	2e00      	cmp	r6, #0
   1439a:	d09a      	beq.n	142d2 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1439c:	4a1f      	ldr	r2, [pc, #124]	; (1441c <bus_fault+0x190>)
   1439e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   143a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   143a4:	6293      	str	r3, [r2, #40]	; 0x28
   143a6:	e794      	b.n	142d2 <bus_fault+0x46>
   143a8:	4b19      	ldr	r3, [pc, #100]	; (14410 <bus_fault+0x184>)
   143aa:	4a1a      	ldr	r2, [pc, #104]	; (14414 <bus_fault+0x188>)
   143ac:	1a9b      	subs	r3, r3, r2
   143ae:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   143b0:	f04f 0100 	mov.w	r1, #0
   143b4:	2201      	movs	r2, #1
   143b6:	f362 0102 	bfi	r1, r2, #0, #3
   143ba:	f36f 01c5 	bfc	r1, #3, #3
   143be:	f363 118f 	bfi	r1, r3, #6, #10
   143c2:	481b      	ldr	r0, [pc, #108]	; (14430 <bus_fault+0x1a4>)
   143c4:	f7fe fdcc 	bl	12f60 <log_0>
   143c8:	e788      	b.n	142dc <bus_fault+0x50>
   143ca:	4b11      	ldr	r3, [pc, #68]	; (14410 <bus_fault+0x184>)
   143cc:	4a11      	ldr	r2, [pc, #68]	; (14414 <bus_fault+0x188>)
   143ce:	1a9b      	subs	r3, r3, r2
   143d0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   143d2:	f04f 0100 	mov.w	r1, #0
   143d6:	2201      	movs	r2, #1
   143d8:	f362 0102 	bfi	r1, r2, #0, #3
   143dc:	f36f 01c5 	bfc	r1, #3, #3
   143e0:	f363 118f 	bfi	r1, r3, #6, #10
   143e4:	4813      	ldr	r0, [pc, #76]	; (14434 <bus_fault+0x1a8>)
   143e6:	f7fe fdbb 	bl	12f60 <log_0>
   143ea:	e781      	b.n	142f0 <bus_fault+0x64>
   143ec:	4b08      	ldr	r3, [pc, #32]	; (14410 <bus_fault+0x184>)
   143ee:	4a09      	ldr	r2, [pc, #36]	; (14414 <bus_fault+0x188>)
   143f0:	1a9b      	subs	r3, r3, r2
   143f2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   143f4:	f04f 0100 	mov.w	r1, #0
   143f8:	2201      	movs	r2, #1
   143fa:	f362 0102 	bfi	r1, r2, #0, #3
   143fe:	f36f 01c5 	bfc	r1, #3, #3
   14402:	f363 118f 	bfi	r1, r3, #6, #10
   14406:	480c      	ldr	r0, [pc, #48]	; (14438 <bus_fault+0x1ac>)
   14408:	f7fe fdaa 	bl	12f60 <log_0>
   1440c:	e770      	b.n	142f0 <bus_fault+0x64>
   1440e:	bf00      	nop
   14410:	0002534c 	.word	0x0002534c
   14414:	000252ec 	.word	0x000252ec
   14418:	00025d44 	.word	0x00025d44
   1441c:	e000ed00 	.word	0xe000ed00
   14420:	00025d5c 	.word	0x00025d5c
   14424:	00025cb0 	.word	0x00025cb0
   14428:	00025d70 	.word	0x00025d70
   1442c:	00025d8c 	.word	0x00025d8c
   14430:	00025da4 	.word	0x00025da4
   14434:	00025dc0 	.word	0x00025dc0
   14438:	00025d14 	.word	0x00025d14

0001443c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   1443c:	b570      	push	{r4, r5, r6, lr}
   1443e:	4605      	mov	r5, r0
   14440:	460c      	mov	r4, r1
   14442:	4b46      	ldr	r3, [pc, #280]	; (1455c <hard_fault+0x120>)
   14444:	4a46      	ldr	r2, [pc, #280]	; (14560 <hard_fault+0x124>)
   14446:	1a9b      	subs	r3, r3, r2
   14448:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   1444a:	f04f 0100 	mov.w	r1, #0
   1444e:	2201      	movs	r2, #1
   14450:	f362 0102 	bfi	r1, r2, #0, #3
   14454:	f36f 01c5 	bfc	r1, #3, #3
   14458:	f363 118f 	bfi	r1, r3, #6, #10
   1445c:	4841      	ldr	r0, [pc, #260]	; (14564 <hard_fault+0x128>)
   1445e:	f7fe fd7f 	bl	12f60 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   14462:	2300      	movs	r3, #0
   14464:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14466:	4b40      	ldr	r3, [pc, #256]	; (14568 <hard_fault+0x12c>)
   14468:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1446a:	f016 0602 	ands.w	r6, r6, #2
   1446e:	d109      	bne.n	14484 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14470:	4b3d      	ldr	r3, [pc, #244]	; (14568 <hard_fault+0x12c>)
   14472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14474:	2b00      	cmp	r3, #0
   14476:	db17      	blt.n	144a8 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14478:	4b3b      	ldr	r3, [pc, #236]	; (14568 <hard_fault+0x12c>)
   1447a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1447c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   14480:	d124      	bne.n	144cc <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   14482:	bd70      	pop	{r4, r5, r6, pc}
   14484:	4b35      	ldr	r3, [pc, #212]	; (1455c <hard_fault+0x120>)
   14486:	4a36      	ldr	r2, [pc, #216]	; (14560 <hard_fault+0x124>)
   14488:	1a9b      	subs	r3, r3, r2
   1448a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   1448c:	f04f 0100 	mov.w	r1, #0
   14490:	2201      	movs	r2, #1
   14492:	f362 0102 	bfi	r1, r2, #0, #3
   14496:	f36f 01c5 	bfc	r1, #3, #3
   1449a:	f363 118f 	bfi	r1, r3, #6, #10
   1449e:	4833      	ldr	r0, [pc, #204]	; (1456c <hard_fault+0x130>)
   144a0:	f7fe fd5e 	bl	12f60 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   144a4:	2000      	movs	r0, #0
   144a6:	e7ec      	b.n	14482 <hard_fault+0x46>
   144a8:	4b2c      	ldr	r3, [pc, #176]	; (1455c <hard_fault+0x120>)
   144aa:	4a2d      	ldr	r2, [pc, #180]	; (14560 <hard_fault+0x124>)
   144ac:	1a9b      	subs	r3, r3, r2
   144ae:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   144b0:	f04f 0100 	mov.w	r1, #0
   144b4:	2201      	movs	r2, #1
   144b6:	f362 0102 	bfi	r1, r2, #0, #3
   144ba:	f36f 01c5 	bfc	r1, #3, #3
   144be:	f363 118f 	bfi	r1, r3, #6, #10
   144c2:	482b      	ldr	r0, [pc, #172]	; (14570 <hard_fault+0x134>)
   144c4:	f7fe fd4c 	bl	12f60 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   144c8:	4630      	mov	r0, r6
   144ca:	e7da      	b.n	14482 <hard_fault+0x46>
   144cc:	4b23      	ldr	r3, [pc, #140]	; (1455c <hard_fault+0x120>)
   144ce:	4a24      	ldr	r2, [pc, #144]	; (14560 <hard_fault+0x124>)
   144d0:	1a9b      	subs	r3, r3, r2
   144d2:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   144d4:	f04f 0100 	mov.w	r1, #0
   144d8:	2201      	movs	r2, #1
   144da:	f362 0102 	bfi	r1, r2, #0, #3
   144de:	f36f 01c5 	bfc	r1, #3, #3
   144e2:	f363 118f 	bfi	r1, r3, #6, #10
   144e6:	4823      	ldr	r0, [pc, #140]	; (14574 <hard_fault+0x138>)
   144e8:	f7fe fd3a 	bl	12f60 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   144ec:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   144ee:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   144f2:	f64d 7302 	movw	r3, #57090	; 0xdf02
   144f6:	429a      	cmp	r2, r3
   144f8:	d00d      	beq.n	14516 <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
   144fa:	4b1b      	ldr	r3, [pc, #108]	; (14568 <hard_fault+0x12c>)
   144fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   14500:	b9e3      	cbnz	r3, 1453c <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
   14502:	4b19      	ldr	r3, [pc, #100]	; (14568 <hard_fault+0x12c>)
   14504:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   14508:	b9f3      	cbnz	r3, 14548 <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
   1450a:	4b17      	ldr	r3, [pc, #92]	; (14568 <hard_fault+0x12c>)
   1450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   1450e:	b29b      	uxth	r3, r3
   14510:	bb03      	cbnz	r3, 14554 <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14512:	4630      	mov	r0, r6
	return reason;
   14514:	e7b5      	b.n	14482 <hard_fault+0x46>
   14516:	4b11      	ldr	r3, [pc, #68]	; (1455c <hard_fault+0x120>)
   14518:	4a11      	ldr	r2, [pc, #68]	; (14560 <hard_fault+0x124>)
   1451a:	1a9b      	subs	r3, r3, r2
   1451c:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1451e:	f04f 0200 	mov.w	r2, #0
   14522:	2101      	movs	r1, #1
   14524:	f361 0202 	bfi	r2, r1, #0, #3
   14528:	f36f 02c5 	bfc	r2, #3, #3
   1452c:	f363 128f 	bfi	r2, r3, #6, #10
   14530:	6829      	ldr	r1, [r5, #0]
   14532:	4811      	ldr	r0, [pc, #68]	; (14578 <hard_fault+0x13c>)
   14534:	f7fe fd3e 	bl	12fb4 <log_1>
			reason = esf->basic.r0;
   14538:	6828      	ldr	r0, [r5, #0]
   1453a:	e7a2      	b.n	14482 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   1453c:	4622      	mov	r2, r4
   1453e:	2101      	movs	r1, #1
   14540:	4628      	mov	r0, r5
   14542:	f7ff fddd 	bl	14100 <mem_manage_fault>
   14546:	e79c      	b.n	14482 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   14548:	4622      	mov	r2, r4
   1454a:	2101      	movs	r1, #1
   1454c:	4628      	mov	r0, r5
   1454e:	f7ff fe9d 	bl	1428c <bus_fault>
   14552:	e796      	b.n	14482 <hard_fault+0x46>
			reason = usage_fault(esf);
   14554:	4628      	mov	r0, r5
   14556:	f7ff fced 	bl	13f34 <usage_fault>
   1455a:	e792      	b.n	14482 <hard_fault+0x46>
   1455c:	0002534c 	.word	0x0002534c
   14560:	000252ec 	.word	0x000252ec
   14564:	00025dd8 	.word	0x00025dd8
   14568:	e000ed00 	.word	0xe000ed00
   1456c:	00025df0 	.word	0x00025df0
   14570:	00025e14 	.word	0x00025e14
   14574:	00025e24 	.word	0x00025e24
   14578:	00025e44 	.word	0x00025e44

0001457c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   1457c:	b508      	push	{r3, lr}
   1457e:	460a      	mov	r2, r1
   14580:	480b      	ldr	r0, [pc, #44]	; (145b0 <reserved_exception+0x34>)
   14582:	4b0c      	ldr	r3, [pc, #48]	; (145b4 <reserved_exception+0x38>)
   14584:	1ac0      	subs	r0, r0, r3
   14586:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   14588:	f04f 0300 	mov.w	r3, #0
   1458c:	2101      	movs	r1, #1
   1458e:	f361 0302 	bfi	r3, r1, #0, #3
   14592:	f36f 03c5 	bfc	r3, #3, #3
   14596:	f360 138f 	bfi	r3, r0, #6, #10
   1459a:	2a0f      	cmp	r2, #15
   1459c:	dc05      	bgt.n	145aa <reserved_exception+0x2e>
   1459e:	4906      	ldr	r1, [pc, #24]	; (145b8 <reserved_exception+0x3c>)
   145a0:	3a10      	subs	r2, #16
   145a2:	4806      	ldr	r0, [pc, #24]	; (145bc <reserved_exception+0x40>)
   145a4:	f7fe fd38 	bl	13018 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   145a8:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   145aa:	4905      	ldr	r1, [pc, #20]	; (145c0 <reserved_exception+0x44>)
   145ac:	e7f8      	b.n	145a0 <reserved_exception+0x24>
   145ae:	bf00      	nop
   145b0:	0002534c 	.word	0x0002534c
   145b4:	000252ec 	.word	0x000252ec
   145b8:	00025e60 	.word	0x00025e60
   145bc:	00025e94 	.word	0x00025e94
   145c0:	00025e78 	.word	0x00025e78

000145c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   145c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   145c8:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   145ca:	4b39      	ldr	r3, [pc, #228]	; (146b0 <z_arm_fault+0xec>)
   145cc:	685e      	ldr	r6, [r3, #4]
   145ce:	f3c6 0608 	ubfx	r6, r6, #0, #9
   145d2:	2300      	movs	r3, #0
   145d4:	f383 8811 	msr	BASEPRI, r3
   145d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   145dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   145e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   145e4:	d12c      	bne.n	14640 <z_arm_fault+0x7c>
   145e6:	4680      	mov	r8, r0
   145e8:	4689      	mov	r9, r1
   145ea:	4615      	mov	r5, r2
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   145ec:	f012 0f01 	tst.w	r2, #1
   145f0:	d129      	bne.n	14646 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   145f2:	f012 0f40 	tst.w	r2, #64	; 0x40
   145f6:	d107      	bne.n	14608 <z_arm_fault+0x44>
	z_arch_esf_t *ptr_esf = NULL;
   145f8:	2400      	movs	r4, #0
	bool alternative_state_exc = false;
   145fa:	4627      	mov	r7, r4
	if (!alternative_state_exc) {
   145fc:	bb37      	cbnz	r7, 1464c <z_arm_fault+0x88>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   145fe:	f015 0f08 	tst.w	r5, #8
   14602:	d01a      	beq.n	1463a <z_arm_fault+0x76>
			ptr_esf =  (z_arch_esf_t *)psp;
   14604:	464c      	mov	r4, r9
   14606:	e022      	b.n	1464e <z_arm_fault+0x8a>
   14608:	4b2a      	ldr	r3, [pc, #168]	; (146b4 <z_arm_fault+0xf0>)
   1460a:	4a2b      	ldr	r2, [pc, #172]	; (146b8 <z_arm_fault+0xf4>)
   1460c:	1a9b      	subs	r3, r3, r2
   1460e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("Exception occurred in Secure State");
   14610:	f04f 0100 	mov.w	r1, #0
   14614:	2201      	movs	r2, #1
   14616:	f362 0102 	bfi	r1, r2, #0, #3
   1461a:	f36f 01c5 	bfc	r1, #3, #3
   1461e:	f363 118f 	bfi	r1, r3, #6, #10
   14622:	4826      	ldr	r0, [pc, #152]	; (146bc <z_arm_fault+0xf8>)
   14624:	f7fe fc9c 	bl	12f60 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14628:	f015 0f04 	tst.w	r5, #4
   1462c:	d002      	beq.n	14634 <z_arm_fault+0x70>
			ptr_esf = (z_arch_esf_t *)psp;
   1462e:	464c      	mov	r4, r9
		alternative_state_exc = true;
   14630:	2701      	movs	r7, #1
   14632:	e7e3      	b.n	145fc <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   14634:	4644      	mov	r4, r8
		alternative_state_exc = true;
   14636:	2701      	movs	r7, #1
   14638:	e7e0      	b.n	145fc <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   1463a:	4644      	mov	r4, r8
			*nested_exc = true;
   1463c:	2701      	movs	r7, #1
   1463e:	e006      	b.n	1464e <z_arm_fault+0x8a>
	*nested_exc = false;
   14640:	2700      	movs	r7, #0
		return NULL;
   14642:	463c      	mov	r4, r7
   14644:	e003      	b.n	1464e <z_arm_fault+0x8a>
	*nested_exc = false;
   14646:	2700      	movs	r7, #0
		return NULL;
   14648:	463c      	mov	r4, r7
   1464a:	e000      	b.n	1464e <z_arm_fault+0x8a>
	*nested_exc = false;
   1464c:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1464e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   14652:	4631      	mov	r1, r6
   14654:	4620      	mov	r0, r4
   14656:	f00c f907 	bl	20868 <fault_handle>
   1465a:	4605      	mov	r5, r0
	if (recoverable) {
   1465c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   14660:	b113      	cbz	r3, 14668 <z_arm_fault+0xa4>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   14662:	b00b      	add	sp, #44	; 0x2c
   14664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14668:	f10d 0c04 	add.w	ip, sp, #4
   1466c:	6820      	ldr	r0, [r4, #0]
   1466e:	6861      	ldr	r1, [r4, #4]
   14670:	68a2      	ldr	r2, [r4, #8]
   14672:	68e3      	ldr	r3, [r4, #12]
   14674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14678:	6920      	ldr	r0, [r4, #16]
   1467a:	6961      	ldr	r1, [r4, #20]
   1467c:	69a2      	ldr	r2, [r4, #24]
   1467e:	69e3      	ldr	r3, [r4, #28]
   14680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
   14684:	b147      	cbz	r7, 14698 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14686:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1468a:	b95a      	cbnz	r2, 146a4 <z_arm_fault+0xe0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1468c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14690:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   14694:	9308      	str	r3, [sp, #32]
   14696:	e005      	b.n	146a4 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14698:	9b08      	ldr	r3, [sp, #32]
   1469a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1469e:	f023 0301 	bic.w	r3, r3, #1
   146a2:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   146a4:	a901      	add	r1, sp, #4
   146a6:	4628      	mov	r0, r5
   146a8:	f00c f8b9 	bl	2081e <z_arm_fatal_error>
   146ac:	e7d9      	b.n	14662 <z_arm_fault+0x9e>
   146ae:	bf00      	nop
   146b0:	e000ed00 	.word	0xe000ed00
   146b4:	0002534c 	.word	0x0002534c
   146b8:	000252ec 	.word	0x000252ec
   146bc:	00025ea8 	.word	0x00025ea8

000146c0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   146c0:	4b04      	ldr	r3, [pc, #16]	; (146d4 <z_arm_fault_init+0x14>)
   146c2:	695a      	ldr	r2, [r3, #20]
   146c4:	f042 0210 	orr.w	r2, r2, #16
   146c8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   146ca:	695a      	ldr	r2, [r3, #20]
   146cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   146d0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   146d2:	4770      	bx	lr
   146d4:	e000ed00 	.word	0xe000ed00

000146d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   146d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   146dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   146e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   146e2:	4672      	mov	r2, lr
	bl z_arm_fault
   146e4:	f7ff ff6e 	bl	145c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   146e8:	bd01      	pop	{r0, pc}
   146ea:	bf00      	nop

000146ec <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   146ec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   146ee:	e006      	b.n	146fe <z_arm_interrupt_init+0x12>
   146f0:	f002 010f 	and.w	r1, r2, #15
   146f4:	4b09      	ldr	r3, [pc, #36]	; (1471c <z_arm_interrupt_init+0x30>)
   146f6:	440b      	add	r3, r1
   146f8:	2120      	movs	r1, #32
   146fa:	7619      	strb	r1, [r3, #24]
   146fc:	3201      	adds	r2, #1
   146fe:	2a40      	cmp	r2, #64	; 0x40
   14700:	dc0a      	bgt.n	14718 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   14702:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   14704:	2b00      	cmp	r3, #0
   14706:	dbf3      	blt.n	146f0 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14708:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1470c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14710:	2120      	movs	r1, #32
   14712:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   14716:	e7f1      	b.n	146fc <z_arm_interrupt_init+0x10>
	}
}
   14718:	4770      	bx	lr
   1471a:	bf00      	nop
   1471c:	e000ecfc 	.word	0xe000ecfc

00014720 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14720:	f010 fc54 	bl	24fcc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14724:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14726:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1472a:	4808      	ldr	r0, [pc, #32]	; (1474c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1472c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   14730:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14732:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14736:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1473a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1473c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1473e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14742:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14746:	f7ff fb11 	bl	13d6c <z_arm_prep_c>
   1474a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1474c:	2000eff0 	.word	0x2000eff0

00014750 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14750:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14754:	4905      	ldr	r1, [pc, #20]	; (1476c <sys_arch_reboot+0x1c>)
   14756:	68ca      	ldr	r2, [r1, #12]
   14758:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1475c:	4b04      	ldr	r3, [pc, #16]	; (14770 <sys_arch_reboot+0x20>)
   1475e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14760:	60cb      	str	r3, [r1, #12]
   14762:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14766:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14768:	e7fd      	b.n	14766 <sys_arch_reboot+0x16>
   1476a:	bf00      	nop
   1476c:	e000ed00 	.word	0xe000ed00
   14770:	05fa0004 	.word	0x05fa0004

00014774 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14774:	b508      	push	{r3, lr}
	if (_current == thread) {
   14776:	4b08      	ldr	r3, [pc, #32]	; (14798 <z_impl_k_thread_abort+0x24>)
   14778:	689b      	ldr	r3, [r3, #8]
   1477a:	4283      	cmp	r3, r0
   1477c:	d002      	beq.n	14784 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   1477e:	f009 fb33 	bl	1dde8 <z_thread_abort>
}
   14782:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14784:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14788:	2b00      	cmp	r3, #0
   1478a:	d0f8      	beq.n	1477e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1478c:	4a03      	ldr	r2, [pc, #12]	; (1479c <z_impl_k_thread_abort+0x28>)
   1478e:	6853      	ldr	r3, [r2, #4]
   14790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14794:	6053      	str	r3, [r2, #4]
   14796:	e7f2      	b.n	1477e <z_impl_k_thread_abort+0xa>
   14798:	2000d50c 	.word	0x2000d50c
   1479c:	e000ed00 	.word	0xe000ed00

000147a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   147a0:	b510      	push	{r4, lr}
   147a2:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   147a4:	4c0a      	ldr	r4, [pc, #40]	; (147d0 <z_arm_configure_static_mpu_regions+0x30>)
   147a6:	4623      	mov	r3, r4
   147a8:	4a0a      	ldr	r2, [pc, #40]	; (147d4 <z_arm_configure_static_mpu_regions+0x34>)
   147aa:	2101      	movs	r1, #1
   147ac:	480a      	ldr	r0, [pc, #40]	; (147d8 <z_arm_configure_static_mpu_regions+0x38>)
   147ae:	f00c f8bd 	bl	2092c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   147b2:	2300      	movs	r3, #0
   147b4:	9301      	str	r3, [sp, #4]
   147b6:	9302      	str	r3, [sp, #8]
   147b8:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   147ba:	4b08      	ldr	r3, [pc, #32]	; (147dc <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   147bc:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   147be:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   147c0:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   147c2:	2101      	movs	r1, #1
   147c4:	a801      	add	r0, sp, #4
   147c6:	f00c f8b5 	bl	20934 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   147ca:	b004      	add	sp, #16
   147cc:	bd10      	pop	{r4, pc}
   147ce:	bf00      	nop
   147d0:	20040000 	.word	0x20040000
   147d4:	2000c500 	.word	0x2000c500
   147d8:	00025ed0 	.word	0x00025ed0
   147dc:	2000c7b8 	.word	0x2000c7b8

000147e0 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   147e0:	4b02      	ldr	r3, [pc, #8]	; (147ec <mpu_init+0xc>)
   147e2:	4a03      	ldr	r2, [pc, #12]	; (147f0 <mpu_init+0x10>)
   147e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   147e8:	4770      	bx	lr
   147ea:	bf00      	nop
   147ec:	e000ed00 	.word	0xe000ed00
   147f0:	0044ffaa 	.word	0x0044ffaa

000147f4 <region_init>:
{
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   147f4:	680b      	ldr	r3, [r1, #0]
   147f6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   147fa:	f891 c008 	ldrb.w	ip, [r1, #8]
   147fe:	f00c 031f 	and.w	r3, ip, #31
   14802:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14804:	68cb      	ldr	r3, [r1, #12]
   14806:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1480a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1480e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14812:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14816:	4904      	ldr	r1, [pc, #16]	; (14828 <region_init+0x34>)
   14818:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   1481c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   14820:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14824:	4770      	bx	lr
   14826:	bf00      	nop
   14828:	e000ed00 	.word	0xe000ed00

0001482c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   1482c:	b510      	push	{r4, lr}
   1482e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   14830:	280f      	cmp	r0, #15
   14832:	d803      	bhi.n	1483c <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   14834:	f7ff ffde 	bl	147f4 <region_init>

	return index;
   14838:	4620      	mov	r0, r4
}
   1483a:	bd10      	pop	{r4, pc}
   1483c:	4b09      	ldr	r3, [pc, #36]	; (14864 <region_allocate_and_init+0x38>)
   1483e:	4a0a      	ldr	r2, [pc, #40]	; (14868 <region_allocate_and_init+0x3c>)
   14840:	1a9b      	subs	r3, r3, r2
   14842:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14844:	f04f 0200 	mov.w	r2, #0
   14848:	2101      	movs	r1, #1
   1484a:	f361 0202 	bfi	r2, r1, #0, #3
   1484e:	f36f 02c5 	bfc	r2, #3, #3
   14852:	f363 128f 	bfi	r2, r3, #6, #10
   14856:	4601      	mov	r1, r0
   14858:	4804      	ldr	r0, [pc, #16]	; (1486c <region_allocate_and_init+0x40>)
   1485a:	f7fe fbab 	bl	12fb4 <log_1>
		return -EINVAL;
   1485e:	f06f 0015 	mvn.w	r0, #21
   14862:	e7ea      	b.n	1483a <region_allocate_and_init+0xe>
   14864:	0002532c 	.word	0x0002532c
   14868:	000252ec 	.word	0x000252ec
   1486c:	00025edc 	.word	0x00025edc

00014870 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14874:	b087      	sub	sp, #28
   14876:	4681      	mov	r9, r0
   14878:	9100      	str	r1, [sp, #0]
   1487a:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   1487c:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   1487e:	2600      	movs	r6, #0
   14880:	e061      	b.n	14946 <mpu_configure_regions_and_partition+0xd6>
   14882:	4b74      	ldr	r3, [pc, #464]	; (14a54 <mpu_configure_regions_and_partition+0x1e4>)
   14884:	4a74      	ldr	r2, [pc, #464]	; (14a58 <mpu_configure_regions_and_partition+0x1e8>)
   14886:	1a9b      	subs	r3, r3, r2
   14888:	08db      	lsrs	r3, r3, #3
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1488a:	f04f 0200 	mov.w	r2, #0
   1488e:	2101      	movs	r1, #1
   14890:	f361 0202 	bfi	r2, r1, #0, #3
   14894:	f36f 02c5 	bfc	r2, #3, #3
   14898:	f363 128f 	bfi	r2, r3, #6, #10
   1489c:	4631      	mov	r1, r6
   1489e:	486f      	ldr	r0, [pc, #444]	; (14a5c <mpu_configure_regions_and_partition+0x1ec>)
   148a0:	f7fe fb88 	bl	12fb4 <log_1>
			return -EINVAL;
   148a4:	f06f 0415 	mvn.w	r4, #21
   148a8:	e015      	b.n	148d6 <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
   148aa:	f06f 0715 	mvn.w	r7, #21
   148ae:	e06c      	b.n	1498a <mpu_configure_regions_and_partition+0x11a>
   148b0:	4b68      	ldr	r3, [pc, #416]	; (14a54 <mpu_configure_regions_and_partition+0x1e4>)
   148b2:	4a69      	ldr	r2, [pc, #420]	; (14a58 <mpu_configure_regions_and_partition+0x1e8>)
   148b4:	1a9b      	subs	r3, r3, r2
   148b6:	08db      	lsrs	r3, r3, #3
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   148b8:	f04f 0200 	mov.w	r2, #0
   148bc:	2101      	movs	r1, #1
   148be:	f361 0202 	bfi	r2, r1, #0, #3
   148c2:	f36f 02c5 	bfc	r2, #3, #3
   148c6:	f363 128f 	bfi	r2, r3, #6, #10
   148ca:	4639      	mov	r1, r7
   148cc:	4864      	ldr	r0, [pc, #400]	; (14a60 <mpu_configure_regions_and_partition+0x1f0>)
   148ce:	f7fe fb71 	bl	12fb4 <log_1>
				u_reg_index);
			return -EINVAL;
   148d2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   148d6:	4620      	mov	r0, r4
   148d8:	b007      	add	sp, #28
   148da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i].start == u_reg_base) &&
   148de:	45d8      	cmp	r8, fp
   148e0:	d16f      	bne.n	149c2 <mpu_configure_regions_and_partition+0x152>
			mpu_configure_region(u_reg_index, &regions[i]);
   148e2:	4629      	mov	r1, r5
   148e4:	b2f8      	uxtb	r0, r7
   148e6:	f00c f802 	bl	208ee <mpu_configure_region>
   148ea:	e02b      	b.n	14944 <mpu_configure_regions_and_partition+0xd4>
	MPU->RNR = index;
   148ec:	4b5d      	ldr	r3, [pc, #372]	; (14a64 <mpu_configure_regions_and_partition+0x1f4>)
   148ee:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   148f2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   148f6:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
   148fa:	f022 021f 	bic.w	r2, r2, #31
   148fe:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   14904:	4629      	mov	r1, r5
   14906:	b2e0      	uxtb	r0, r4
   14908:	f00b fff1 	bl	208ee <mpu_configure_region>
   1490c:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1490e:	f110 0f16 	cmn.w	r0, #22
   14912:	d0e0      	beq.n	148d6 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14914:	3401      	adds	r4, #1
   14916:	e015      	b.n	14944 <mpu_configure_regions_and_partition+0xd4>
				regions[i].start - 1);
   14918:	3b01      	subs	r3, #1
	MPU->RNR = index;
   1491a:	4a52      	ldr	r2, [pc, #328]	; (14a64 <mpu_configure_regions_and_partition+0x1f4>)
   1491c:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14920:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
   14924:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   14928:	f023 031f 	bic.w	r3, r3, #31
   1492c:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1492e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   14932:	4629      	mov	r1, r5
   14934:	b2e0      	uxtb	r0, r4
   14936:	f00b ffda 	bl	208ee <mpu_configure_region>
   1493a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1493c:	f110 0f16 	cmn.w	r0, #22
   14940:	d0c9      	beq.n	148d6 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14942:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   14944:	3601      	adds	r6, #1
   14946:	9b00      	ldr	r3, [sp, #0]
   14948:	429e      	cmp	r6, r3
   1494a:	dac4      	bge.n	148d6 <mpu_configure_regions_and_partition+0x66>
		if (regions[i].size == 0U) {
   1494c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   14950:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   14954:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   14958:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1495c:	f1b8 0f00 	cmp.w	r8, #0
   14960:	d0f0      	beq.n	14944 <mpu_configure_regions_and_partition+0xd4>
		if (do_sanity_check &&
   14962:	9b01      	ldr	r3, [sp, #4]
   14964:	b123      	cbz	r3, 14970 <mpu_configure_regions_and_partition+0x100>
			(!mpu_partition_is_valid(&regions[i]))) {
   14966:	4628      	mov	r0, r5
   14968:	f00b ffaf 	bl	208ca <mpu_partition_is_valid>
		if (do_sanity_check &&
   1496c:	2800      	cmp	r0, #0
   1496e:	d088      	beq.n	14882 <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i].start, regions[i].size);
   14970:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14974:	4658      	mov	r0, fp
   14976:	f00b ff9e 	bl	208b6 <arm_cmse_mpu_region_get>
   1497a:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1497c:	eb08 000b 	add.w	r0, r8, fp
   14980:	3801      	subs	r0, #1
   14982:	f00b ff98 	bl	208b6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14986:	4287      	cmp	r7, r0
   14988:	d18f      	bne.n	148aa <mpu_configure_regions_and_partition+0x3a>
		if ((u_reg_index == -EINVAL) ||
   1498a:	f117 0f16 	cmn.w	r7, #22
   1498e:	d08f      	beq.n	148b0 <mpu_configure_regions_and_partition+0x40>
			(u_reg_index > (reg_index - 1))) {
   14990:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   14992:	42bb      	cmp	r3, r7
   14994:	db8c      	blt.n	148b0 <mpu_configure_regions_and_partition+0x40>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   14996:	4638      	mov	r0, r7
	MPU->RNR = index;
   14998:	4b32      	ldr	r3, [pc, #200]	; (14a64 <mpu_configure_regions_and_partition+0x1f4>)
   1499a:	f8c3 7098 	str.w	r7, [r3, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1499e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   149a2:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
   149a6:	f8c3 7098 	str.w	r7, [r3, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   149aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   149ae:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   149b2:	f859 300a 	ldr.w	r3, [r9, sl]
   149b6:	686a      	ldr	r2, [r5, #4]
   149b8:	441a      	add	r2, r3
   149ba:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   149be:	4299      	cmp	r1, r3
   149c0:	d08d      	beq.n	148de <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i].start == u_reg_base) {
   149c2:	4299      	cmp	r1, r3
   149c4:	d092      	beq.n	148ec <mpu_configure_regions_and_partition+0x7c>
		} else if (reg_last == u_reg_last) {
   149c6:	45d8      	cmp	r8, fp
   149c8:	d0a6      	beq.n	14918 <mpu_configure_regions_and_partition+0xa8>
				regions[i].start - 1);
   149ca:	3b01      	subs	r3, #1
	MPU->RNR = index;
   149cc:	4a25      	ldr	r2, [pc, #148]	; (14a64 <mpu_configure_regions_and_partition+0x1f4>)
   149ce:	4607      	mov	r7, r0
   149d0:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   149d4:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
   149d8:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   149dc:	f023 031f 	bic.w	r3, r3, #31
   149e0:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   149e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   149e6:	4629      	mov	r1, r5
   149e8:	b2e0      	uxtb	r0, r4
   149ea:	f00b ff80 	bl	208ee <mpu_configure_region>
   149ee:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   149f0:	f110 0f16 	cmn.w	r0, #22
   149f4:	f43f af6f 	beq.w	148d6 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   149f8:	3001      	adds	r0, #1
	MPU->RNR = index;
   149fa:	4b1a      	ldr	r3, [pc, #104]	; (14a64 <mpu_configure_regions_and_partition+0x1f4>)
   149fc:	f8c3 7098 	str.w	r7, [r3, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   14a00:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   14a04:	f89d 2010 	ldrb.w	r2, [sp, #16]
   14a08:	f361 0204 	bfi	r2, r1, #0, #5
   14a0c:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14a10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   14a14:	f3c3 0342 	ubfx	r3, r3, #1, #3
   14a18:	b2d2      	uxtb	r2, r2
   14a1a:	f363 1247 	bfi	r2, r3, #5, #3
   14a1e:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
   14a22:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   14a26:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   14a28:	4413      	add	r3, r2
   14a2a:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   14a2c:	f023 031f 	bic.w	r3, r3, #31
   14a30:	eba8 080b 	sub.w	r8, r8, fp
   14a34:	4443      	add	r3, r8
   14a36:	3b01      	subs	r3, #1
   14a38:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   14a3c:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   14a3e:	a902      	add	r1, sp, #8
   14a40:	b2c0      	uxtb	r0, r0
   14a42:	f7ff fef3 	bl	1482c <region_allocate_and_init>
   14a46:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14a48:	f110 0f16 	cmn.w	r0, #22
   14a4c:	f43f af43 	beq.w	148d6 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
   14a50:	3401      	adds	r4, #1
   14a52:	e777      	b.n	14944 <mpu_configure_regions_and_partition+0xd4>
   14a54:	0002532c 	.word	0x0002532c
   14a58:	000252ec 	.word	0x000252ec
   14a5c:	00025f04 	.word	0x00025f04
   14a60:	00025f28 	.word	0x00025f28
   14a64:	e000ed00 	.word	0xe000ed00

00014a68 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   14a68:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   14a6a:	4c03      	ldr	r4, [pc, #12]	; (14a78 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14a6c:	2301      	movs	r3, #1
   14a6e:	7822      	ldrb	r2, [r4, #0]
   14a70:	f7ff fefe 	bl	14870 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14a74:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   14a76:	bd10      	pop	{r4, pc}
   14a78:	2000d56d 	.word	0x2000d56d

00014a7c <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   14a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a80:	4607      	mov	r7, r0
   14a82:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14a84:	2400      	movs	r4, #0
   14a86:	e003      	b.n	14a90 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
   14a88:	f06f 0515 	mvn.w	r5, #21
   14a8c:	e017      	b.n	14abe <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14a8e:	3401      	adds	r4, #1
   14a90:	45a0      	cmp	r8, r4
   14a92:	dd43      	ble.n	14b1c <mpu_mark_areas_for_dynamic_regions+0xa0>
		if (dyn_region_areas[i].size == 0U) {
   14a94:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14a98:	009a      	lsls	r2, r3, #2
   14a9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   14a9e:	685e      	ldr	r6, [r3, #4]
   14aa0:	2e00      	cmp	r6, #0
   14aa2:	d0f4      	beq.n	14a8e <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14aa4:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14aa8:	4648      	mov	r0, r9
   14aaa:	f00b ff04 	bl	208b6 <arm_cmse_mpu_region_get>
   14aae:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14ab0:	eb06 0009 	add.w	r0, r6, r9
   14ab4:	3801      	subs	r0, #1
   14ab6:	f00b fefe 	bl	208b6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14aba:	4285      	cmp	r5, r0
   14abc:	d1e4      	bne.n	14a88 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
   14abe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14ac2:	4a1a      	ldr	r2, [pc, #104]	; (14b2c <mpu_mark_areas_for_dynamic_regions+0xb0>)
   14ac4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   14ac8:	f115 0f16 	cmn.w	r5, #22
   14acc:	d027      	beq.n	14b1e <mpu_mark_areas_for_dynamic_regions+0xa2>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   14ace:	4b18      	ldr	r3, [pc, #96]	; (14b30 <mpu_mark_areas_for_dynamic_regions+0xb4>)
   14ad0:	781b      	ldrb	r3, [r3, #0]
   14ad2:	42ab      	cmp	r3, r5
   14ad4:	dd26      	ble.n	14b24 <mpu_mark_areas_for_dynamic_regions+0xa8>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   14ad6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   14ada:	4b14      	ldr	r3, [pc, #80]	; (14b2c <mpu_mark_areas_for_dynamic_regions+0xb0>)
   14adc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	MPU->RNR = index;
   14ae0:	4b14      	ldr	r3, [pc, #80]	; (14b34 <mpu_mark_areas_for_dynamic_regions+0xb8>)
   14ae2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	MPU->RNR = index;
   14ae6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   14aea:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
   14aee:	7b10      	ldrb	r0, [r2, #12]
   14af0:	f365 0004 	bfi	r0, r5, #0, #5
   14af4:	7310      	strb	r0, [r2, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14af6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
   14afa:	f3c0 0042 	ubfx	r0, r0, #1, #3
   14afe:	7b15      	ldrb	r5, [r2, #12]
   14b00:	f360 1547 	bfi	r5, r0, #5, #3
   14b04:	7315      	strb	r5, [r2, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14b06:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   14b0a:	f020 001f 	bic.w	r0, r0, #31
   14b0e:	6050      	str	r0, [r2, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   14b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   14b14:	f023 031f 	bic.w	r3, r3, #31
   14b18:	6113      	str	r3, [r2, #16]
}
   14b1a:	e7b8      	b.n	14a8e <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   14b1c:	2500      	movs	r5, #0
}
   14b1e:	4628      	mov	r0, r5
   14b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   14b24:	f06f 0515 	mvn.w	r5, #21
   14b28:	e7f9      	b.n	14b1e <mpu_mark_areas_for_dynamic_regions+0xa2>
   14b2a:	bf00      	nop
   14b2c:	2000cf44 	.word	0x2000cf44
   14b30:	2000d56d 	.word	0x2000d56d
   14b34:	e000ed00 	.word	0xe000ed00

00014b38 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14b38:	4b04      	ldr	r3, [pc, #16]	; (14b4c <arm_core_mpu_enable+0x14>)
   14b3a:	2205      	movs	r2, #5
   14b3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14b40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b44:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14b48:	4770      	bx	lr
   14b4a:	bf00      	nop
   14b4c:	e000ed00 	.word	0xe000ed00

00014b50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14b50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14b54:	4b02      	ldr	r3, [pc, #8]	; (14b60 <arm_core_mpu_disable+0x10>)
   14b56:	2200      	movs	r2, #0
   14b58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14b5c:	4770      	bx	lr
   14b5e:	bf00      	nop
   14b60:	e000ed00 	.word	0xe000ed00

00014b64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14b64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14b66:	4b0e      	ldr	r3, [pc, #56]	; (14ba0 <z_arm_mpu_init+0x3c>)
   14b68:	681d      	ldr	r5, [r3, #0]
   14b6a:	2d10      	cmp	r5, #16
   14b6c:	d815      	bhi.n	14b9a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14b6e:	f7ff ffef 	bl	14b50 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   14b72:	f7ff fe35 	bl	147e0 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b76:	2400      	movs	r4, #0
   14b78:	e007      	b.n	14b8a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14b7a:	4b09      	ldr	r3, [pc, #36]	; (14ba0 <z_arm_mpu_init+0x3c>)
   14b7c:	6859      	ldr	r1, [r3, #4]
   14b7e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   14b82:	4620      	mov	r0, r4
   14b84:	f7ff fe36 	bl	147f4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14b88:	3401      	adds	r4, #1
   14b8a:	42a5      	cmp	r5, r4
   14b8c:	d8f5      	bhi.n	14b7a <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14b8e:	4b05      	ldr	r3, [pc, #20]	; (14ba4 <z_arm_mpu_init+0x40>)
   14b90:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   14b92:	f7ff ffd1 	bl	14b38 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14b96:	2000      	movs	r0, #0
}
   14b98:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   14b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b9e:	e7fb      	b.n	14b98 <z_arm_mpu_init+0x34>
   14ba0:	00025f5c 	.word	0x00025f5c
   14ba4:	2000d56d 	.word	0x2000d56d

00014ba8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14ba8:	4b01      	ldr	r3, [pc, #4]	; (14bb0 <__stdout_hook_install+0x8>)
   14baa:	6018      	str	r0, [r3, #0]
}
   14bac:	4770      	bx	lr
   14bae:	bf00      	nop
   14bb0:	2000c508 	.word	0x2000c508

00014bb4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   14bb4:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   14bb6:	4b08      	ldr	r3, [pc, #32]	; (14bd8 <_sbrk+0x24>)
   14bb8:	6819      	ldr	r1, [r3, #0]
   14bba:	4b08      	ldr	r3, [pc, #32]	; (14bdc <_sbrk+0x28>)
   14bbc:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   14bbe:	440a      	add	r2, r1
   14bc0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   14bc4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   14bc8:	429a      	cmp	r2, r3
   14bca:	d202      	bcs.n	14bd2 <_sbrk+0x1e>
		heap_sz += count;
   14bcc:	4b02      	ldr	r3, [pc, #8]	; (14bd8 <_sbrk+0x24>)
   14bce:	601a      	str	r2, [r3, #0]
		ret = ptr;
   14bd0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   14bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
   14bd6:	4770      	bx	lr
   14bd8:	2000cf58 	.word	0x2000cf58
   14bdc:	200108c0 	.word	0x200108c0

00014be0 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   14be0:	b538      	push	{r3, r4, r5, lr}
   14be2:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   14be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14bec:	4820      	ldr	r0, [pc, #128]	; (14c70 <net_if_up+0x90>)
   14bee:	f008 fa39 	bl	1d064 <z_impl_k_mutex_lock>
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
	if (iface == NULL) {
   14bf2:	b134      	cbz	r4, 14c02 <net_if_up+0x22>
		return false;
	}

	return atomic_test_bit(iface->if_dev->flags, value);
   14bf4:	6823      	ldr	r3, [r4, #0]
   14bf6:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14bf8:	e8d3 3faf 	lda	r3, [r3]

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   14bfc:	f013 0f01 	tst.w	r3, #1
   14c00:	d132      	bne.n	14c68 <net_if_up+0x88>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   14c02:	6823      	ldr	r3, [r4, #0]
   14c04:	7e9a      	ldrb	r2, [r3, #26]
		status = -EALREADY;
		goto out;
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   14c06:	b9e2      	cbnz	r2, 14c42 <net_if_up+0x62>
	if (!iface || !iface->if_dev) {
   14c08:	b334      	cbz	r4, 14c58 <net_if_up+0x78>
   14c0a:	b33b      	cbz	r3, 14c5c <net_if_up+0x7c>
	return iface->if_dev->l2;
   14c0c:	685b      	ldr	r3, [r3, #4]
		net_if_flag_set(iface, NET_IF_UP);
		goto notify;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   14c0e:	b33b      	cbz	r3, 14c60 <net_if_up+0x80>
   14c10:	689b      	ldr	r3, [r3, #8]
   14c12:	b33b      	cbz	r3, 14c64 <net_if_up+0x84>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
   14c14:	2101      	movs	r1, #1
   14c16:	4620      	mov	r0, r4
   14c18:	4798      	blx	r3
	if (status < 0) {
   14c1a:	1e05      	subs	r5, r0, #0
   14c1c:	db0c      	blt.n	14c38 <net_if_up+0x58>
	atomic_set_bit(iface->if_dev->flags, value);
   14c1e:	6823      	ldr	r3, [r4, #0]
   14c20:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c22:	e8d3 2fef 	ldaex	r2, [r3]
   14c26:	f042 0201 	orr.w	r2, r2, #1
   14c2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14c2e:	2900      	cmp	r1, #0
   14c30:	d1f7      	bne.n	14c22 <net_if_up+0x42>
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   14c32:	4620      	mov	r0, r4
   14c34:	f00b fea2 	bl	2097c <l2_flags_get>
	return z_impl_k_mutex_unlock(mutex);
   14c38:	480d      	ldr	r0, [pc, #52]	; (14c70 <net_if_up+0x90>)
   14c3a:	f008 fa9d 	bl	1d178 <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
   14c3e:	4628      	mov	r0, r5
   14c40:	bd38      	pop	{r3, r4, r5, pc}
   14c42:	330c      	adds	r3, #12
   14c44:	e8d3 2fef 	ldaex	r2, [r3]
   14c48:	f042 0201 	orr.w	r2, r2, #1
   14c4c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14c50:	2900      	cmp	r1, #0
   14c52:	d1f7      	bne.n	14c44 <net_if_up+0x64>
	int status = 0;
   14c54:	2500      	movs	r5, #0
		goto notify;
   14c56:	e7ef      	b.n	14c38 <net_if_up+0x58>
	int status = 0;
   14c58:	2500      	movs	r5, #0
   14c5a:	e7e0      	b.n	14c1e <net_if_up+0x3e>
   14c5c:	2500      	movs	r5, #0
   14c5e:	e7de      	b.n	14c1e <net_if_up+0x3e>
   14c60:	2500      	movs	r5, #0
   14c62:	e7dc      	b.n	14c1e <net_if_up+0x3e>
   14c64:	2500      	movs	r5, #0
   14c66:	e7da      	b.n	14c1e <net_if_up+0x3e>
		status = -EALREADY;
   14c68:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14c6c:	e7e4      	b.n	14c38 <net_if_up+0x58>
   14c6e:	bf00      	nop
   14c70:	2000c740 	.word	0x2000c740

00014c74 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   14c74:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   14c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c7e:	480c      	ldr	r0, [pc, #48]	; (14cb0 <net_if_init+0x3c>)
   14c80:	f008 f9f0 	bl	1d064 <z_impl_k_mutex_lock>

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   14c84:	4c0b      	ldr	r4, [pc, #44]	; (14cb4 <net_if_init+0x40>)
   14c86:	e000      	b.n	14c8a <net_if_init+0x16>
   14c88:	3404      	adds	r4, #4
   14c8a:	4b0b      	ldr	r3, [pc, #44]	; (14cb8 <net_if_init+0x44>)
   14c8c:	429c      	cmp	r4, r3
   14c8e:	d20a      	bcs.n	14ca6 <net_if_init+0x32>
	return iface->if_dev->dev;
   14c90:	6823      	ldr	r3, [r4, #0]
   14c92:	681b      	ldr	r3, [r3, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
   14c94:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   14c96:	2b00      	cmp	r3, #0
   14c98:	d0f6      	beq.n	14c88 <net_if_init+0x14>
   14c9a:	681b      	ldr	r3, [r3, #0]
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d0f3      	beq.n	14c88 <net_if_init+0x14>
	api->init(iface);
   14ca0:	4620      	mov	r0, r4
   14ca2:	4798      	blx	r3
   14ca4:	e7f0      	b.n	14c88 <net_if_init+0x14>
	return z_impl_k_mutex_unlock(mutex);
   14ca6:	4802      	ldr	r0, [pc, #8]	; (14cb0 <net_if_init+0x3c>)
   14ca8:	f008 fa66 	bl	1d178 <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   14cac:	bd10      	pop	{r4, pc}
   14cae:	bf00      	nop
   14cb0:	2000c740 	.word	0x2000c740
   14cb4:	2000c798 	.word	0x2000c798
   14cb8:	2000c79c 	.word	0x2000c79c

00014cbc <net_if_post_init>:

void net_if_post_init(void)
{
   14cbc:	b510      	push	{r4, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   14cbe:	4c0a      	ldr	r4, [pc, #40]	; (14ce8 <net_if_post_init+0x2c>)
   14cc0:	e003      	b.n	14cca <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
   14cc2:	4620      	mov	r0, r4
   14cc4:	f7ff ff8c 	bl	14be0 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   14cc8:	3404      	adds	r4, #4
   14cca:	4b08      	ldr	r3, [pc, #32]	; (14cec <net_if_post_init+0x30>)
   14ccc:	429c      	cmp	r4, r3
   14cce:	d20a      	bcs.n	14ce6 <net_if_post_init+0x2a>
	if (iface == NULL) {
   14cd0:	2c00      	cmp	r4, #0
   14cd2:	d0f6      	beq.n	14cc2 <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
   14cd4:	6823      	ldr	r3, [r4, #0]
   14cd6:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14cd8:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14cdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d1f1      	bne.n	14cc8 <net_if_post_init+0xc>
   14ce4:	e7ed      	b.n	14cc2 <net_if_post_init+0x6>
		}
	}
}
   14ce6:	bd10      	pop	{r4, pc}
   14ce8:	2000c798 	.word	0x2000c798
   14cec:	2000c79c 	.word	0x2000c79c

00014cf0 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, uint32_t value, int precision)
{
   14cf0:	b510      	push	{r4, lr}
   14cf2:	4604      	mov	r4, r0
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000U;
	if (precision < 0) {
   14cf4:	f1b2 0e00 	subs.w	lr, r2, #0
   14cf8:	db04      	blt.n	14d04 <net_value_to_udec+0x14>
	for (i = 9; i >= 0; i--, divisor /= 10U) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   14cfa:	4620      	mov	r0, r4
   14cfc:	f04f 0c09 	mov.w	ip, #9
   14d00:	4b0f      	ldr	r3, [pc, #60]	; (14d40 <net_value_to_udec+0x50>)
   14d02:	e00c      	b.n	14d1e <net_value_to_udec+0x2e>
		precision = 1;
   14d04:	f04f 0e01 	mov.w	lr, #1
   14d08:	e7f7      	b.n	14cfa <net_value_to_udec+0xa>
			*buf++ = (char) (temp + '0');
   14d0a:	3230      	adds	r2, #48	; 0x30
   14d0c:	f800 2b01 	strb.w	r2, [r0], #1
			precision = i;
   14d10:	46e6      	mov	lr, ip
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   14d12:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   14d16:	4a0b      	ldr	r2, [pc, #44]	; (14d44 <net_value_to_udec+0x54>)
   14d18:	fba2 2303 	umull	r2, r3, r2, r3
   14d1c:	08db      	lsrs	r3, r3, #3
   14d1e:	f1bc 0f00 	cmp.w	ip, #0
   14d22:	db08      	blt.n	14d36 <net_value_to_udec+0x46>
		temp = value / divisor;
   14d24:	fbb1 f2f3 	udiv	r2, r1, r3
		value = value % divisor;
   14d28:	fb03 1112 	mls	r1, r3, r2, r1
		if ((precision > i) || (temp != 0)) {
   14d2c:	45e6      	cmp	lr, ip
   14d2e:	dcec      	bgt.n	14d0a <net_value_to_udec+0x1a>
   14d30:	2a00      	cmp	r2, #0
   14d32:	d0ee      	beq.n	14d12 <net_value_to_udec+0x22>
   14d34:	e7e9      	b.n	14d0a <net_value_to_udec+0x1a>
		}
	}
	*buf = 0;
   14d36:	2300      	movs	r3, #0
   14d38:	7003      	strb	r3, [r0, #0]

	return buf - start;
}
   14d3a:	1b00      	subs	r0, r0, r4
   14d3c:	bd10      	pop	{r4, pc}
   14d3e:	bf00      	nop
   14d40:	3b9aca00 	.word	0x3b9aca00
   14d44:	cccccccd 	.word	0xcccccccd

00014d48 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   14d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d4c:	4605      	mov	r5, r0
   14d4e:	460c      	mov	r4, r1
	uint8_t connect_flags = client->clean_session << 1;
   14d50:	f890 7060 	ldrb.w	r7, [r0, #96]	; 0x60
   14d54:	f007 0702 	and.w	r7, r7, #2
	const struct mqtt_utf8 *mqtt_proto_desc;
	uint8_t *connect_flags_pos;
	int err_code;
	uint8_t *start;

	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   14d58:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
   14d5c:	2b04      	cmp	r3, #4
   14d5e:	d00b      	beq.n	14d78 <connect_request_encode+0x30>
		mqtt_proto_desc = &mqtt_3_1_1_proto_desc;
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
   14d60:	4838      	ldr	r0, [pc, #224]	; (14e44 <connect_request_encode+0xfc>)
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14d62:	6826      	ldr	r6, [r4, #0]
   14d64:	3605      	adds	r6, #5
   14d66:	6026      	str	r6, [r4, #0]
	start = buf->cur;

	MQTT_HEXDUMP_TRC(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14d68:	4621      	mov	r1, r4
   14d6a:	f00c f8ba 	bl	20ee2 <pack_utf8_str>
	if (err_code != 0) {
   14d6e:	4603      	mov	r3, r0
   14d70:	b120      	cbz	r0, 14d7c <connect_request_encode+0x34>

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   14d72:	4618      	mov	r0, r3
   14d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mqtt_proto_desc = &mqtt_3_1_1_proto_desc;
   14d78:	4833      	ldr	r0, [pc, #204]	; (14e48 <connect_request_encode+0x100>)
   14d7a:	e7f2      	b.n	14d62 <connect_request_encode+0x1a>
	err_code = pack_uint8(client->protocol_version, buf);
   14d7c:	4621      	mov	r1, r4
   14d7e:	f895 005e 	ldrb.w	r0, [r5, #94]	; 0x5e
   14d82:	f00c f81c 	bl	20dbe <pack_uint8>
	if (err_code != 0) {
   14d86:	4603      	mov	r3, r0
   14d88:	2800      	cmp	r0, #0
   14d8a:	d1f2      	bne.n	14d72 <connect_request_encode+0x2a>
	connect_flags_pos = buf->cur;
   14d8c:	f8d4 8000 	ldr.w	r8, [r4]
	err_code = pack_uint8(0, buf);
   14d90:	4621      	mov	r1, r4
   14d92:	f00c f814 	bl	20dbe <pack_uint8>
	if (err_code != 0) {
   14d96:	4603      	mov	r3, r0
   14d98:	2800      	cmp	r0, #0
   14d9a:	d1ea      	bne.n	14d72 <connect_request_encode+0x2a>
	err_code = pack_uint16(client->keepalive, buf);
   14d9c:	4621      	mov	r1, r4
   14d9e:	f8b5 005c 	ldrh.w	r0, [r5, #92]	; 0x5c
   14da2:	f00c f818 	bl	20dd6 <pack_uint16>
	if (err_code != 0) {
   14da6:	4603      	mov	r3, r0
   14da8:	2800      	cmp	r0, #0
   14daa:	d1e2      	bne.n	14d72 <connect_request_encode+0x2a>
	err_code = pack_utf8_str(&client->client_id, buf);
   14dac:	4621      	mov	r1, r4
   14dae:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   14db2:	f00c f896 	bl	20ee2 <pack_utf8_str>
	if (err_code != 0) {
   14db6:	4603      	mov	r3, r0
   14db8:	2800      	cmp	r0, #0
   14dba:	d1da      	bne.n	14d72 <connect_request_encode+0x2a>
	if (client->will_topic != NULL) {
   14dbc:	6c28      	ldr	r0, [r5, #64]	; 0x40
   14dbe:	b1e0      	cbz	r0, 14dfa <connect_request_encode+0xb2>
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   14dc0:	f047 0304 	orr.w	r3, r7, #4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   14dc4:	7a07      	ldrb	r7, [r0, #8]
   14dc6:	00ff      	lsls	r7, r7, #3
   14dc8:	f007 0718 	and.w	r7, r7, #24
   14dcc:	431f      	orrs	r7, r3
   14dce:	b27f      	sxtb	r7, r7
		connect_flags |= client->will_retain << 5;
   14dd0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   14dd4:	f003 0301 	and.w	r3, r3, #1
   14dd8:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   14ddc:	b2ff      	uxtb	r7, r7
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   14dde:	4621      	mov	r1, r4
   14de0:	f00c f87f 	bl	20ee2 <pack_utf8_str>
		if (err_code != 0) {
   14de4:	4603      	mov	r3, r0
   14de6:	2800      	cmp	r0, #0
   14de8:	d1c3      	bne.n	14d72 <connect_request_encode+0x2a>
		if (client->will_message != NULL) {
   14dea:	6c68      	ldr	r0, [r5, #68]	; 0x44
   14dec:	b310      	cbz	r0, 14e34 <connect_request_encode+0xec>
			err_code = pack_utf8_str(client->will_message, buf);
   14dee:	4621      	mov	r1, r4
   14df0:	f00c f877 	bl	20ee2 <pack_utf8_str>
			if (err_code != 0) {
   14df4:	4603      	mov	r3, r0
   14df6:	2800      	cmp	r0, #0
   14df8:	d1bb      	bne.n	14d72 <connect_request_encode+0x2a>
	if (client->user_name != NULL) {
   14dfa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   14dfc:	b138      	cbz	r0, 14e0e <connect_request_encode+0xc6>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   14dfe:	f047 0780 	orr.w	r7, r7, #128	; 0x80
		err_code = pack_utf8_str(client->user_name, buf);
   14e02:	4621      	mov	r1, r4
   14e04:	f00c f86d 	bl	20ee2 <pack_utf8_str>
		if (err_code != 0) {
   14e08:	4603      	mov	r3, r0
   14e0a:	2800      	cmp	r0, #0
   14e0c:	d1b1      	bne.n	14d72 <connect_request_encode+0x2a>
	if (client->password != NULL) {
   14e0e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   14e10:	b138      	cbz	r0, 14e22 <connect_request_encode+0xda>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   14e12:	f047 0740 	orr.w	r7, r7, #64	; 0x40
		err_code = pack_utf8_str(client->password, buf);
   14e16:	4621      	mov	r1, r4
   14e18:	f00c f863 	bl	20ee2 <pack_utf8_str>
		if (err_code != 0) {
   14e1c:	4603      	mov	r3, r0
   14e1e:	2800      	cmp	r0, #0
   14e20:	d1a7      	bne.n	14d72 <connect_request_encode+0x2a>
	*connect_flags_pos = connect_flags;
   14e22:	f888 7000 	strb.w	r7, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   14e26:	4622      	mov	r2, r4
   14e28:	4631      	mov	r1, r6
   14e2a:	2010      	movs	r0, #16
   14e2c:	f00c f815 	bl	20e5a <mqtt_encode_fixed_header>
   14e30:	4603      	mov	r3, r0
   14e32:	e79e      	b.n	14d72 <connect_request_encode+0x2a>
			err_code = zero_len_str_encode(buf);
   14e34:	4620      	mov	r0, r4
   14e36:	f00c f838 	bl	20eaa <zero_len_str_encode>
			if (err_code != 0) {
   14e3a:	4603      	mov	r3, r0
   14e3c:	2800      	cmp	r0, #0
   14e3e:	d0dc      	beq.n	14dfa <connect_request_encode+0xb2>
   14e40:	e797      	b.n	14d72 <connect_request_encode+0x2a>
   14e42:	bf00      	nop
   14e44:	00025fa0 	.word	0x00025fa0
   14e48:	00025fa8 	.word	0x00025fa8

00014e4c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   14e4c:	6843      	ldr	r3, [r0, #4]
   14e4e:	6802      	ldr	r2, [r0, #0]
   14e50:	1a9b      	subs	r3, r3, r2
   14e52:	2b01      	cmp	r3, #1
   14e54:	d907      	bls.n	14e66 <disconnect_encode+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14e56:	4b05      	ldr	r3, [pc, #20]	; (14e6c <disconnect_encode+0x20>)
   14e58:	881b      	ldrh	r3, [r3, #0]
   14e5a:	8013      	strh	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   14e5c:	6803      	ldr	r3, [r0, #0]
   14e5e:	3302      	adds	r3, #2
   14e60:	6043      	str	r3, [r0, #4]

	return 0;
   14e62:	2000      	movs	r0, #0
   14e64:	4770      	bx	lr
		return -ENOMEM;
   14e66:	f06f 000b 	mvn.w	r0, #11
}
   14e6a:	4770      	bx	lr
   14e6c:	00025f9c 	.word	0x00025f9c

00014e70 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   14e70:	6843      	ldr	r3, [r0, #4]
   14e72:	6802      	ldr	r2, [r0, #0]
   14e74:	1a9b      	subs	r3, r3, r2
   14e76:	2b01      	cmp	r3, #1
   14e78:	d907      	bls.n	14e8a <ping_request_encode+0x1a>
   14e7a:	4b05      	ldr	r3, [pc, #20]	; (14e90 <ping_request_encode+0x20>)
   14e7c:	881b      	ldrh	r3, [r3, #0]
   14e7e:	8013      	strh	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   14e80:	6803      	ldr	r3, [r0, #0]
   14e82:	3302      	adds	r3, #2
   14e84:	6043      	str	r3, [r0, #4]

	return 0;
   14e86:	2000      	movs	r0, #0
   14e88:	4770      	bx	lr
		return -ENOMEM;
   14e8a:	f06f 000b 	mvn.w	r0, #11
}
   14e8e:	4770      	bx	lr
   14e90:	00025fb0 	.word	0x00025fb0

00014e94 <mqtt_transport_connect>:
	},
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
   14e94:	b508      	push	{r3, lr}
	return transport_fn[client->transport.type].connect(client);
   14e96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14e9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14e9e:	4a02      	ldr	r2, [pc, #8]	; (14ea8 <mqtt_transport_connect+0x14>)
   14ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ea4:	4798      	blx	r3
}
   14ea6:	bd08      	pop	{r3, pc}
   14ea8:	00025fb4 	.word	0x00025fb4

00014eac <mqtt_transport_write>:

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   14eac:	b510      	push	{r4, lr}
	return transport_fn[client->transport.type].write(client, data,
   14eae:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14eb6:	4c03      	ldr	r4, [pc, #12]	; (14ec4 <mqtt_transport_write+0x18>)
   14eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   14ebc:	685b      	ldr	r3, [r3, #4]
   14ebe:	4798      	blx	r3
							  datalen);
}
   14ec0:	bd10      	pop	{r4, pc}
   14ec2:	bf00      	nop
   14ec4:	00025fb4 	.word	0x00025fb4

00014ec8 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   14ec8:	b508      	push	{r3, lr}
	return transport_fn[client->transport.type].write_msg(client, message);
   14eca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14ece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14ed2:	4a03      	ldr	r2, [pc, #12]	; (14ee0 <mqtt_transport_write_msg+0x18>)
   14ed4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14ed8:	689b      	ldr	r3, [r3, #8]
   14eda:	4798      	blx	r3
}
   14edc:	bd08      	pop	{r3, pc}
   14ede:	bf00      	nop
   14ee0:	00025fb4 	.word	0x00025fb4

00014ee4 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   14ee4:	b510      	push	{r4, lr}
	return transport_fn[client->transport.type].read(client, data, buflen,
   14ee6:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
   14eea:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
   14eee:	4c03      	ldr	r4, [pc, #12]	; (14efc <mqtt_transport_read+0x18>)
   14ef0:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
   14ef4:	f8dc 400c 	ldr.w	r4, [ip, #12]
   14ef8:	47a0      	blx	r4
							 shall_block);
}
   14efa:	bd10      	pop	{r4, pc}
   14efc:	00025fb4 	.word	0x00025fb4

00014f00 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   14f00:	b500      	push	{lr}
   14f02:	b083      	sub	sp, #12
	const struct device *dev = entropy_driver;
   14f04:	4b0c      	ldr	r3, [pc, #48]	; (14f38 <z_impl_sys_rand32_get+0x38>)
   14f06:	6818      	ldr	r0, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   14f08:	b158      	cbz	r0, 14f22 <z_impl_sys_rand32_get+0x22>

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   14f0a:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   14f0c:	681b      	ldr	r3, [r3, #0]
   14f0e:	2204      	movs	r2, #4
   14f10:	eb0d 0102 	add.w	r1, sp, r2
   14f14:	4798      	blx	r3
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   14f16:	2800      	cmp	r0, #0
   14f18:	db09      	blt.n	14f2e <z_impl_sys_rand32_get+0x2e>

		random_num = k_cycle_get_32();
	}

	return random_num;
}
   14f1a:	9801      	ldr	r0, [sp, #4]
   14f1c:	b003      	add	sp, #12
   14f1e:	f85d fb04 	ldr.w	pc, [sp], #4
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   14f22:	4806      	ldr	r0, [pc, #24]	; (14f3c <z_impl_sys_rand32_get+0x3c>)
   14f24:	f007 fd78 	bl	1ca18 <z_impl_device_get_binding>
		entropy_driver = dev;
   14f28:	4b03      	ldr	r3, [pc, #12]	; (14f38 <z_impl_sys_rand32_get+0x38>)
   14f2a:	6018      	str	r0, [r3, #0]
   14f2c:	e7ed      	b.n	14f0a <z_impl_sys_rand32_get+0xa>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   14f2e:	f00d f8dd 	bl	220ec <sys_clock_cycle_get_32>
		random_num = k_cycle_get_32();
   14f32:	9001      	str	r0, [sp, #4]
   14f34:	e7f1      	b.n	14f1a <z_impl_sys_rand32_get+0x1a>
   14f36:	bf00      	nop
   14f38:	2000cf5c 	.word	0x2000cf5c
   14f3c:	00025fc8 	.word	0x00025fc8

00014f40 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   14f40:	4800      	ldr	r0, [pc, #0]	; (14f44 <get_hf_flags+0x4>)
   14f42:	4770      	bx	lr
   14f44:	2000cfb0 	.word	0x2000cfb0

00014f48 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   14f48:	4b03      	ldr	r3, [pc, #12]	; (14f58 <get_subsys+0x10>)
   14f4a:	1ac0      	subs	r0, r0, r3
   14f4c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   14f4e:	4b03      	ldr	r3, [pc, #12]	; (14f5c <get_subsys+0x14>)
   14f50:	fb03 f000 	mul.w	r0, r3, r0
   14f54:	4770      	bx	lr
   14f56:	bf00      	nop
   14f58:	2000cf70 	.word	0x2000cf70
   14f5c:	b6db6db7 	.word	0xb6db6db7

00014f60 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14f60:	b538      	push	{r3, r4, r5, lr}
   14f62:	4605      	mov	r5, r0
   14f64:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14f66:	f7ff ffef 	bl	14f48 <get_subsys>
   14f6a:	4601      	mov	r1, r0
   14f6c:	2240      	movs	r2, #64	; 0x40
   14f6e:	4803      	ldr	r0, [pc, #12]	; (14f7c <onoff_stop+0x1c>)
   14f70:	f00c fdaf 	bl	21ad2 <stop>
   14f74:	4601      	mov	r1, r0
	notify(mgr, res);
   14f76:	4628      	mov	r0, r5
   14f78:	47a0      	blx	r4
}
   14f7a:	bd38      	pop	{r3, r4, r5, pc}
   14f7c:	00025060 	.word	0x00025060

00014f80 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14f80:	b530      	push	{r4, r5, lr}
   14f82:	b083      	sub	sp, #12
   14f84:	4605      	mov	r5, r0
   14f86:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14f88:	f7ff ffde 	bl	14f48 <get_subsys>
   14f8c:	4601      	mov	r1, r0
   14f8e:	2340      	movs	r3, #64	; 0x40
   14f90:	9300      	str	r3, [sp, #0]
   14f92:	4623      	mov	r3, r4
   14f94:	4a05      	ldr	r2, [pc, #20]	; (14fac <onoff_start+0x2c>)
   14f96:	4806      	ldr	r0, [pc, #24]	; (14fb0 <onoff_start+0x30>)
   14f98:	f00c fdb5 	bl	21b06 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   14f9c:	1e01      	subs	r1, r0, #0
   14f9e:	db01      	blt.n	14fa4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   14fa0:	b003      	add	sp, #12
   14fa2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   14fa4:	4628      	mov	r0, r5
   14fa6:	47a0      	blx	r4
}
   14fa8:	e7fa      	b.n	14fa0 <onoff_start+0x20>
   14faa:	bf00      	nop
   14fac:	00021b4f 	.word	0x00021b4f
   14fb0:	00025060 	.word	0x00025060

00014fb4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   14fb4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   14fb6:	b110      	cbz	r0, 14fbe <clock_event_handler+0xa>
   14fb8:	2801      	cmp	r0, #1
   14fba:	d00d      	beq.n	14fd8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   14fbc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   14fbe:	2100      	movs	r1, #0
   14fc0:	4808      	ldr	r0, [pc, #32]	; (14fe4 <clock_event_handler+0x30>)
   14fc2:	f00c fd0f 	bl	219e4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14fc6:	6883      	ldr	r3, [r0, #8]
   14fc8:	f013 0f07 	tst.w	r3, #7
   14fcc:	d1f6      	bne.n	14fbc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   14fce:	2100      	movs	r1, #0
   14fd0:	4804      	ldr	r0, [pc, #16]	; (14fe4 <clock_event_handler+0x30>)
   14fd2:	f00c fd6c 	bl	21aae <clkstarted_handle>
   14fd6:	e7f1      	b.n	14fbc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14fd8:	2101      	movs	r1, #1
   14fda:	4802      	ldr	r0, [pc, #8]	; (14fe4 <clock_event_handler+0x30>)
   14fdc:	f00c fd67 	bl	21aae <clkstarted_handle>
}
   14fe0:	e7ec      	b.n	14fbc <clock_event_handler+0x8>
   14fe2:	bf00      	nop
   14fe4:	00025060 	.word	0x00025060

00014fe8 <generic_hfclk_start>:
{
   14fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
   14fea:	f04f 0320 	mov.w	r3, #32
   14fee:	f3ef 8411 	mrs	r4, BASEPRI
   14ff2:	f383 8812 	msr	BASEPRI_MAX, r3
   14ff6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14ffa:	4a13      	ldr	r2, [pc, #76]	; (15048 <generic_hfclk_start+0x60>)
   14ffc:	6813      	ldr	r3, [r2, #0]
   14ffe:	f043 0302 	orr.w	r3, r3, #2
   15002:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   15004:	f013 0f01 	tst.w	r3, #1
   15008:	d108      	bne.n	1501c <generic_hfclk_start+0x34>
	bool already_started = false;
   1500a:	2300      	movs	r3, #0
	__asm__ volatile(
   1500c:	f384 8811 	msr	BASEPRI, r4
   15010:	f3bf 8f6f 	isb	sy
	if (already_started) {
   15014:	b993      	cbnz	r3, 1503c <generic_hfclk_start+0x54>
	hfclk_start();
   15016:	f00c fda2 	bl	21b5e <hfclk_start>
}
   1501a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1501c:	4b0b      	ldr	r3, [pc, #44]	; (1504c <generic_hfclk_start+0x64>)
   1501e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15022:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   15026:	f012 0f01 	tst.w	r2, #1
   1502a:	d101      	bne.n	15030 <generic_hfclk_start+0x48>
	bool already_started = false;
   1502c:	2300      	movs	r3, #0
   1502e:	e7ed      	b.n	1500c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   15030:	f7ff ff86 	bl	14f40 <get_hf_flags>
   15034:	f00c fd28 	bl	21a88 <set_on_state>
			already_started = true;
   15038:	2301      	movs	r3, #1
   1503a:	e7e7      	b.n	1500c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1503c:	2100      	movs	r1, #0
   1503e:	4804      	ldr	r0, [pc, #16]	; (15050 <generic_hfclk_start+0x68>)
   15040:	f00c fd35 	bl	21aae <clkstarted_handle>
		return;
   15044:	e7e9      	b.n	1501a <generic_hfclk_start+0x32>
   15046:	bf00      	nop
   15048:	2000cfc0 	.word	0x2000cfc0
   1504c:	40005000 	.word	0x40005000
   15050:	00025060 	.word	0x00025060

00015054 <generic_hfclk_stop>:
{
   15054:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15056:	4b08      	ldr	r3, [pc, #32]	; (15078 <generic_hfclk_stop+0x24>)
   15058:	e8d3 2fef 	ldaex	r2, [r3]
   1505c:	f022 0102 	bic.w	r1, r2, #2
   15060:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15064:	2800      	cmp	r0, #0
   15066:	d1f7      	bne.n	15058 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   15068:	f012 0f01 	tst.w	r2, #1
   1506c:	d000      	beq.n	15070 <generic_hfclk_stop+0x1c>
}
   1506e:	bd08      	pop	{r3, pc}
	hfclk_stop();
   15070:	f00c fd7f 	bl	21b72 <hfclk_stop>
   15074:	e7fb      	b.n	1506e <generic_hfclk_stop+0x1a>
   15076:	bf00      	nop
   15078:	2000cfc0 	.word	0x2000cfc0

0001507c <api_blocking_start>:
{
   1507c:	b500      	push	{lr}
   1507e:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15080:	f8cd d000 	str.w	sp, [sp]
   15084:	f8cd d004 	str.w	sp, [sp, #4]
   15088:	2300      	movs	r3, #0
   1508a:	9302      	str	r3, [sp, #8]
   1508c:	2301      	movs	r3, #1
   1508e:	9303      	str	r3, [sp, #12]
   15090:	ab04      	add	r3, sp, #16
   15092:	9304      	str	r3, [sp, #16]
   15094:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15096:	466b      	mov	r3, sp
   15098:	4a06      	ldr	r2, [pc, #24]	; (150b4 <api_blocking_start+0x38>)
   1509a:	f00c fd50 	bl	21b3e <api_start>
	if (err < 0) {
   1509e:	2800      	cmp	r0, #0
   150a0:	db05      	blt.n	150ae <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   150a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   150a6:	2300      	movs	r3, #0
   150a8:	4668      	mov	r0, sp
   150aa:	f008 f90b 	bl	1d2c4 <z_impl_k_sem_take>
}
   150ae:	b007      	add	sp, #28
   150b0:	f85d fb04 	ldr.w	pc, [sp], #4
   150b4:	00021b87 	.word	0x00021b87

000150b8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   150b8:	b570      	push	{r4, r5, r6, lr}
   150ba:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   150bc:	2200      	movs	r2, #0
   150be:	2101      	movs	r1, #1
   150c0:	2005      	movs	r0, #5
   150c2:	f7fe fe29 	bl	13d18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   150c6:	2005      	movs	r0, #5
   150c8:	f7fe fe0a 	bl	13ce0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   150cc:	4811      	ldr	r0, [pc, #68]	; (15114 <clk_init+0x5c>)
   150ce:	f004 f851 	bl	19174 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   150d2:	4b11      	ldr	r3, [pc, #68]	; (15118 <clk_init+0x60>)
   150d4:	4298      	cmp	r0, r3
   150d6:	d119      	bne.n	1510c <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   150d8:	f00d ffdf 	bl	2309a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   150dc:	2400      	movs	r4, #0
   150de:	2c01      	cmp	r4, #1
   150e0:	d812      	bhi.n	15108 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   150e2:	4621      	mov	r1, r4
   150e4:	4630      	mov	r0, r6
   150e6:	f00c fc7d 	bl	219e4 <get_sub_data>
   150ea:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   150ec:	4621      	mov	r1, r4
   150ee:	4630      	mov	r0, r6
   150f0:	f00c fc85 	bl	219fe <get_onoff_manager>
   150f4:	4909      	ldr	r1, [pc, #36]	; (1511c <clk_init+0x64>)
   150f6:	f00a fd03 	bl	1fb00 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   150fa:	2800      	cmp	r0, #0
   150fc:	db05      	blt.n	1510a <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   150fe:	2301      	movs	r3, #1
   15100:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   15102:	441c      	add	r4, r3
   15104:	b2e4      	uxtb	r4, r4
   15106:	e7ea      	b.n	150de <clk_init+0x26>
	}

	return 0;
   15108:	2000      	movs	r0, #0
}
   1510a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1510c:	f06f 0004 	mvn.w	r0, #4
   15110:	e7fb      	b.n	1510a <clk_init+0x52>
   15112:	bf00      	nop
   15114:	00014fb5 	.word	0x00014fb5
   15118:	0bad0000 	.word	0x0bad0000
   1511c:	00026030 	.word	0x00026030

00015120 <lfclk_spinwait>:
{
   15120:	b570      	push	{r4, r5, r6, lr}
   15122:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15124:	2801      	cmp	r0, #1
   15126:	d106      	bne.n	15136 <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   15128:	4b32      	ldr	r3, [pc, #200]	; (151f4 <lfclk_spinwait+0xd4>)
   1512a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1512e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   15132:	2b02      	cmp	r3, #2
   15134:	d03c      	beq.n	151b0 <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15136:	f00e ffd4 	bl	240e2 <k_is_in_isr>
   1513a:	b920      	cbnz	r0, 15146 <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1513c:	4b2e      	ldr	r3, [pc, #184]	; (151f8 <lfclk_spinwait+0xd8>)
   1513e:	781b      	ldrb	r3, [r3, #0]
   15140:	b193      	cbz	r3, 15168 <lfclk_spinwait+0x48>
   15142:	2300      	movs	r3, #0
   15144:	e000      	b.n	15148 <lfclk_spinwait+0x28>
   15146:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   15148:	461c      	mov	r4, r3
   1514a:	b17b      	cbz	r3, 1516c <lfclk_spinwait+0x4c>
	__asm__ volatile(
   1514c:	f04f 0320 	mov.w	r3, #32
   15150:	f3ef 8611 	mrs	r6, BASEPRI
   15154:	f383 8812 	msr	BASEPRI_MAX, r3
   15158:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1515c:	b994      	cbnz	r4, 15184 <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
   1515e:	4b25      	ldr	r3, [pc, #148]	; (151f4 <lfclk_spinwait+0xd4>)
   15160:	2202      	movs	r2, #2
   15162:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15166:	e00d      	b.n	15184 <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15168:	2301      	movs	r3, #1
   1516a:	e7ed      	b.n	15148 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
   1516c:	2600      	movs	r6, #0
   1516e:	e7f5      	b.n	1515c <lfclk_spinwait+0x3c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   15170:	b1fc      	cbz	r4, 151b2 <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   15172:	4630      	mov	r0, r6
   15174:	f7fe fd5c 	bl	13c30 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   15178:	4b1e      	ldr	r3, [pc, #120]	; (151f4 <lfclk_spinwait+0xd4>)
   1517a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1517e:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   15180:	2b01      	cmp	r3, #1
   15182:	d01b      	beq.n	151bc <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15184:	4a1b      	ldr	r2, [pc, #108]	; (151f4 <lfclk_spinwait+0xd4>)
   15186:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1518a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1518e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   15192:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   15196:	d126      	bne.n	151e6 <lfclk_spinwait+0xc6>
    return false;
   15198:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1519a:	2a00      	cmp	r2, #0
   1519c:	d0e8      	beq.n	15170 <lfclk_spinwait+0x50>
   1519e:	2b02      	cmp	r3, #2
   151a0:	d001      	beq.n	151a6 <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   151a2:	2d01      	cmp	r5, #1
   151a4:	d1e4      	bne.n	15170 <lfclk_spinwait+0x50>
	if (isr_mode) {
   151a6:	b304      	cbz	r4, 151ea <lfclk_spinwait+0xca>
	__asm__ volatile(
   151a8:	f386 8811 	msr	BASEPRI, r6
   151ac:	f3bf 8f6f 	isb	sy
}
   151b0:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   151b2:	2021      	movs	r0, #33	; 0x21
   151b4:	2100      	movs	r1, #0
   151b6:	f008 fdd5 	bl	1dd64 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   151ba:	e7dd      	b.n	15178 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   151bc:	4b0d      	ldr	r3, [pc, #52]	; (151f4 <lfclk_spinwait+0xd4>)
   151be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   151c2:	2b00      	cmp	r3, #0
   151c4:	d0de      	beq.n	15184 <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   151c6:	4b0b      	ldr	r3, [pc, #44]	; (151f4 <lfclk_spinwait+0xd4>)
   151c8:	2200      	movs	r2, #0
   151ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   151ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   151d2:	2202      	movs	r2, #2
   151d4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   151d8:	4a08      	ldr	r2, [pc, #32]	; (151fc <lfclk_spinwait+0xdc>)
   151da:	2120      	movs	r1, #32
   151dc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   151e0:	2201      	movs	r2, #1
   151e2:	609a      	str	r2, [r3, #8]
}
   151e4:	e7ce      	b.n	15184 <lfclk_spinwait+0x64>
                return true;
   151e6:	2201      	movs	r2, #1
   151e8:	e7d7      	b.n	1519a <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
   151ea:	4b02      	ldr	r3, [pc, #8]	; (151f4 <lfclk_spinwait+0xd4>)
   151ec:	2202      	movs	r2, #2
   151ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   151f2:	e7dd      	b.n	151b0 <lfclk_spinwait+0x90>
   151f4:	40005000 	.word	0x40005000
   151f8:	2000d6aa 	.word	0x2000d6aa
   151fc:	e000e100 	.word	0xe000e100

00015200 <z_nrf_clock_control_lf_on>:
{
   15200:	b510      	push	{r4, lr}
   15202:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15204:	4b0e      	ldr	r3, [pc, #56]	; (15240 <z_nrf_clock_control_lf_on+0x40>)
   15206:	2101      	movs	r1, #1
   15208:	e8d3 2fef 	ldaex	r2, [r3]
   1520c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   15210:	2800      	cmp	r0, #0
   15212:	d1f9      	bne.n	15208 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   15214:	b11a      	cbz	r2, 1521e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   15216:	1e63      	subs	r3, r4, #1
   15218:	2b01      	cmp	r3, #1
   1521a:	d90d      	bls.n	15238 <z_nrf_clock_control_lf_on+0x38>
}
   1521c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1521e:	4809      	ldr	r0, [pc, #36]	; (15244 <z_nrf_clock_control_lf_on+0x44>)
   15220:	f00c fbed 	bl	219fe <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   15224:	4908      	ldr	r1, [pc, #32]	; (15248 <z_nrf_clock_control_lf_on+0x48>)
   15226:	2300      	movs	r3, #0
   15228:	604b      	str	r3, [r1, #4]
   1522a:	608b      	str	r3, [r1, #8]
   1522c:	60cb      	str	r3, [r1, #12]
   1522e:	2301      	movs	r3, #1
   15230:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   15232:	f00a fc82 	bl	1fb3a <onoff_request>
   15236:	e7ee      	b.n	15216 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   15238:	4620      	mov	r0, r4
   1523a:	f7ff ff71 	bl	15120 <lfclk_spinwait>
		break;
   1523e:	e7ed      	b.n	1521c <z_nrf_clock_control_lf_on+0x1c>
   15240:	2000cfc4 	.word	0x2000cfc4
   15244:	00025060 	.word	0x00025060
   15248:	2000cf60 	.word	0x2000cf60

0001524c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1524c:	b510      	push	{r4, lr}
   1524e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   15250:	280a      	cmp	r0, #10
   15252:	d007      	beq.n	15264 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   15254:	4b07      	ldr	r3, [pc, #28]	; (15274 <console_out+0x28>)
   15256:	6818      	ldr	r0, [r3, #0]
   15258:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1525a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1525c:	685b      	ldr	r3, [r3, #4]
   1525e:	4798      	blx	r3

	return c;
}
   15260:	4620      	mov	r0, r4
   15262:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   15264:	4b03      	ldr	r3, [pc, #12]	; (15274 <console_out+0x28>)
   15266:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   15268:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1526a:	685b      	ldr	r3, [r3, #4]
   1526c:	210d      	movs	r1, #13
   1526e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   15270:	e7f0      	b.n	15254 <console_out+0x8>
   15272:	bf00      	nop
   15274:	2000cfc8 	.word	0x2000cfc8

00015278 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   15278:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1527a:	4c04      	ldr	r4, [pc, #16]	; (1528c <uart_console_hook_install+0x14>)
   1527c:	4620      	mov	r0, r4
   1527e:	f7ff fc93 	bl	14ba8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   15282:	4620      	mov	r0, r4
   15284:	f7fc fdb2 	bl	11dec <__printk_hook_install>
#endif
}
   15288:	bd10      	pop	{r4, pc}
   1528a:	bf00      	nop
   1528c:	0001524d 	.word	0x0001524d

00015290 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   15290:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   15292:	4809      	ldr	r0, [pc, #36]	; (152b8 <uart_console_init+0x28>)
   15294:	4b09      	ldr	r3, [pc, #36]	; (152bc <uart_console_init+0x2c>)
   15296:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   15298:	f00e fe40 	bl	23f1c <z_device_ready>
   1529c:	b128      	cbz	r0, 152aa <uart_console_init+0x1a>
   1529e:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
   152a0:	b933      	cbnz	r3, 152b0 <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
   152a2:	f7ff ffe9 	bl	15278 <uart_console_hook_install>

	return 0;
   152a6:	2000      	movs	r0, #0
}
   152a8:	bd08      	pop	{r3, pc}
   152aa:	f06f 0312 	mvn.w	r3, #18
   152ae:	e7f7      	b.n	152a0 <uart_console_init+0x10>
		return -ENODEV;
   152b0:	f06f 0012 	mvn.w	r0, #18
   152b4:	e7f8      	b.n	152a8 <uart_console_init+0x18>
   152b6:	bf00      	nop
   152b8:	000250a8 	.word	0x000250a8
   152bc:	2000cfc8 	.word	0x2000cfc8

000152c0 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   152c0:	4b1f      	ldr	r3, [pc, #124]	; (15340 <get_drive+0x80>)
   152c2:	4003      	ands	r3, r0
   152c4:	4a1f      	ldr	r2, [pc, #124]	; (15344 <get_drive+0x84>)
   152c6:	4293      	cmp	r3, r2
   152c8:	d032      	beq.n	15330 <get_drive+0x70>
   152ca:	d816      	bhi.n	152fa <get_drive+0x3a>
   152cc:	2b06      	cmp	r3, #6
   152ce:	d02b      	beq.n	15328 <get_drive+0x68>
   152d0:	d906      	bls.n	152e0 <get_drive+0x20>
   152d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   152d6:	d10d      	bne.n	152f4 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   152d8:	2301      	movs	r3, #1
   152da:	700b      	strb	r3, [r1, #0]
	int err = 0;
   152dc:	2000      	movs	r0, #0
		break;
   152de:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   152e0:	b1fb      	cbz	r3, 15322 <get_drive+0x62>
   152e2:	2b02      	cmp	r3, #2
   152e4:	d103      	bne.n	152ee <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   152e6:	2304      	movs	r3, #4
   152e8:	700b      	strb	r3, [r1, #0]
	int err = 0;
   152ea:	2000      	movs	r0, #0
		break;
   152ec:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   152ee:	f06f 0015 	mvn.w	r0, #21
   152f2:	4770      	bx	lr
   152f4:	f06f 0015 	mvn.w	r0, #21
   152f8:	4770      	bx	lr
   152fa:	4a13      	ldr	r2, [pc, #76]	; (15348 <get_drive+0x88>)
   152fc:	4293      	cmp	r3, r2
   152fe:	d01b      	beq.n	15338 <get_drive+0x78>
   15300:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15304:	d103      	bne.n	1530e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   15306:	2303      	movs	r3, #3
   15308:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1530a:	2000      	movs	r0, #0
		break;
   1530c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1530e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15312:	d103      	bne.n	1531c <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   15314:	2302      	movs	r3, #2
   15316:	700b      	strb	r3, [r1, #0]
	int err = 0;
   15318:	2000      	movs	r0, #0
		break;
   1531a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1531c:	f06f 0015 	mvn.w	r0, #21
   15320:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   15322:	2000      	movs	r0, #0
   15324:	7008      	strb	r0, [r1, #0]
		break;
   15326:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   15328:	2306      	movs	r3, #6
   1532a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1532c:	2000      	movs	r0, #0
		break;
   1532e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   15330:	2307      	movs	r3, #7
   15332:	700b      	strb	r3, [r1, #0]
	int err = 0;
   15334:	2000      	movs	r0, #0
		break;
   15336:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   15338:	2305      	movs	r3, #5
   1533a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1533c:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   1533e:	4770      	bx	lr
   15340:	00f00006 	.word	0x00f00006
   15344:	00100006 	.word	0x00100006
   15348:	00400002 	.word	0x00400002

0001534c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1534c:	b908      	cbnz	r0, 15352 <get_dev+0x6>
   1534e:	4802      	ldr	r0, [pc, #8]	; (15358 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   15350:	4770      	bx	lr
	const struct device *dev = NULL;
   15352:	2000      	movs	r0, #0
   15354:	4770      	bx	lr
   15356:	bf00      	nop
   15358:	00025078 	.word	0x00025078

0001535c <gpio_nrfx_pin_interrupt_configure>:
{
   1535c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1535e:	b085      	sub	sp, #20
   15360:	460e      	mov	r6, r1
   15362:	4619      	mov	r1, r3
	return port->config;
   15364:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15366:	7b1b      	ldrb	r3, [r3, #12]
   15368:	f006 051f 	and.w	r5, r6, #31
   1536c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   15370:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15374:	d022      	beq.n	153bc <gpio_nrfx_pin_interrupt_configure+0x60>
   15376:	4607      	mov	r7, r0
   15378:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1537a:	2300      	movs	r3, #0
   1537c:	9302      	str	r3, [sp, #8]
   1537e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   15380:	4610      	mov	r0, r2
   15382:	f00c fc31 	bl	21be8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15386:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   1538a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1538c:	6899      	ldr	r1, [r3, #8]
   1538e:	40f1      	lsrs	r1, r6
   15390:	f011 0f01 	tst.w	r1, #1
   15394:	d102      	bne.n	1539c <gpio_nrfx_pin_interrupt_configure+0x40>
   15396:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1539a:	d014      	beq.n	153c6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1539c:	2300      	movs	r3, #0
   1539e:	aa02      	add	r2, sp, #8
   153a0:	4619      	mov	r1, r3
   153a2:	4628      	mov	r0, r5
   153a4:	f004 f9b0 	bl	19708 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   153a8:	4b18      	ldr	r3, [pc, #96]	; (1540c <gpio_nrfx_pin_interrupt_configure+0xb0>)
   153aa:	4298      	cmp	r0, r3
   153ac:	d12a      	bne.n	15404 <gpio_nrfx_pin_interrupt_configure+0xa8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   153ae:	2101      	movs	r1, #1
   153b0:	4628      	mov	r0, r5
   153b2:	f004 fb77 	bl	19aa4 <nrfx_gpiote_trigger_enable>
	return 0;
   153b6:	2000      	movs	r0, #0
}
   153b8:	b005      	add	sp, #20
   153ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   153bc:	4628      	mov	r0, r5
   153be:	f004 fbc9 	bl	19b54 <nrfx_gpiote_trigger_disable>
		return 0;
   153c2:	2000      	movs	r0, #0
   153c4:	e7f8      	b.n	153b8 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   153c6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   153ca:	3380      	adds	r3, #128	; 0x80
   153cc:	4a10      	ldr	r2, [pc, #64]	; (15410 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   153ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   153d2:	f013 0f01 	tst.w	r3, #1
   153d6:	d1e1      	bne.n	1539c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   153d8:	f10d 0107 	add.w	r1, sp, #7
   153dc:	4628      	mov	r0, r5
   153de:	f004 fb05 	bl	199ec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   153e2:	4b0c      	ldr	r3, [pc, #48]	; (15414 <gpio_nrfx_pin_interrupt_configure+0xb8>)
   153e4:	4298      	cmp	r0, r3
   153e6:	d003      	beq.n	153f0 <gpio_nrfx_pin_interrupt_configure+0x94>
		trigger_config.p_in_channel = &ch;
   153e8:	f10d 0307 	add.w	r3, sp, #7
   153ec:	9303      	str	r3, [sp, #12]
   153ee:	e7d5      	b.n	1539c <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   153f0:	f10d 0007 	add.w	r0, sp, #7
   153f4:	f004 fb4e 	bl	19a94 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   153f8:	4b04      	ldr	r3, [pc, #16]	; (1540c <gpio_nrfx_pin_interrupt_configure+0xb0>)
   153fa:	4298      	cmp	r0, r3
   153fc:	d0f4      	beq.n	153e8 <gpio_nrfx_pin_interrupt_configure+0x8c>
				return -ENOMEM;
   153fe:	f06f 000b 	mvn.w	r0, #11
   15402:	e7d9      	b.n	153b8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   15404:	f06f 0004 	mvn.w	r0, #4
   15408:	e7d6      	b.n	153b8 <gpio_nrfx_pin_interrupt_configure+0x5c>
   1540a:	bf00      	nop
   1540c:	0bad0000 	.word	0x0bad0000
   15410:	40842500 	.word	0x40842500
   15414:	0bad0004 	.word	0x0bad0004

00015418 <pin_uninit>:
{
   15418:	b530      	push	{r4, r5, lr}
   1541a:	b083      	sub	sp, #12
   1541c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1541e:	f10d 0107 	add.w	r1, sp, #7
   15422:	f004 fae3 	bl	199ec <nrfx_gpiote_channel_get>
   15426:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   15428:	4620      	mov	r0, r4
   1542a:	f004 fbbd 	bl	19ba8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1542e:	4b0b      	ldr	r3, [pc, #44]	; (1545c <pin_uninit+0x44>)
   15430:	4298      	cmp	r0, r3
   15432:	d10f      	bne.n	15454 <pin_uninit+0x3c>
	if (free_ch) {
   15434:	429d      	cmp	r5, r3
   15436:	d005      	beq.n	15444 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   15438:	4b08      	ldr	r3, [pc, #32]	; (1545c <pin_uninit+0x44>)
   1543a:	4298      	cmp	r0, r3
   1543c:	d107      	bne.n	1544e <pin_uninit+0x36>
   1543e:	2000      	movs	r0, #0
}
   15440:	b003      	add	sp, #12
   15442:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   15444:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15448:	f004 fb1c 	bl	19a84 <nrfx_gpiote_channel_free>
   1544c:	e7f4      	b.n	15438 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1544e:	f06f 0004 	mvn.w	r0, #4
   15452:	e7f5      	b.n	15440 <pin_uninit+0x28>
		return -EIO;
   15454:	f06f 0004 	mvn.w	r0, #4
   15458:	e7f2      	b.n	15440 <pin_uninit+0x28>
   1545a:	bf00      	nop
   1545c:	0bad0000 	.word	0x0bad0000

00015460 <gpio_nrfx_pin_configure>:
{
   15460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15464:	b087      	sub	sp, #28
	return port->config;
   15466:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1546a:	f898 300c 	ldrb.w	r3, [r8, #12]
   1546e:	f001 051f 	and.w	r5, r1, #31
   15472:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   15476:	2a00      	cmp	r2, #0
   15478:	d043      	beq.n	15502 <gpio_nrfx_pin_configure+0xa2>
   1547a:	460c      	mov	r4, r1
   1547c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1547e:	2600      	movs	r6, #0
   15480:	9603      	str	r6, [sp, #12]
   15482:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   15484:	f10d 0117 	add.w	r1, sp, #23
   15488:	4620      	mov	r0, r4
   1548a:	f004 faaf 	bl	199ec <nrfx_gpiote_channel_get>
   1548e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15490:	4633      	mov	r3, r6
   15492:	aa03      	add	r2, sp, #12
   15494:	4631      	mov	r1, r6
   15496:	4628      	mov	r0, r5
   15498:	f004 f936 	bl	19708 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1549c:	4b2f      	ldr	r3, [pc, #188]	; (1555c <gpio_nrfx_pin_configure+0xfc>)
   1549e:	4298      	cmp	r0, r3
   154a0:	d159      	bne.n	15556 <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
   154a2:	4599      	cmp	r9, r3
   154a4:	d035      	beq.n	15512 <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
   154a6:	f417 7f00 	tst.w	r7, #512	; 0x200
   154aa:	d041      	beq.n	15530 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
   154ac:	f10d 0103 	add.w	r1, sp, #3
   154b0:	4638      	mov	r0, r7
   154b2:	f7ff ff05 	bl	152c0 <get_drive>
		if (rv != 0) {
   154b6:	4606      	mov	r6, r0
   154b8:	bb38      	cbnz	r0, 1550a <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
   154ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
   154be:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   154c2:	f417 7f80 	tst.w	r7, #256	; 0x100
   154c6:	bf0c      	ite	eq
   154c8:	2301      	moveq	r3, #1
   154ca:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   154cc:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   154d0:	4638      	mov	r0, r7
   154d2:	f00c fb5d 	bl	21b90 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   154d6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   154da:	f417 6f00 	tst.w	r7, #2048	; 0x800
   154de:	d01d      	beq.n	1551c <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   154e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   154e4:	2101      	movs	r1, #1
   154e6:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   154ea:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   154ec:	2200      	movs	r2, #0
   154ee:	a901      	add	r1, sp, #4
   154f0:	4628      	mov	r0, r5
   154f2:	f004 f9bd 	bl	19870 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   154f6:	4b19      	ldr	r3, [pc, #100]	; (1555c <gpio_nrfx_pin_configure+0xfc>)
   154f8:	4298      	cmp	r0, r3
   154fa:	d006      	beq.n	1550a <gpio_nrfx_pin_configure+0xaa>
   154fc:	f06f 0615 	mvn.w	r6, #21
   15500:	e003      	b.n	1550a <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
   15502:	4628      	mov	r0, r5
   15504:	f7ff ff88 	bl	15418 <pin_uninit>
   15508:	4606      	mov	r6, r0
}
   1550a:	4630      	mov	r0, r6
   1550c:	b007      	add	sp, #28
   1550e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   15512:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15516:	f004 fab5 	bl	19a84 <nrfx_gpiote_channel_free>
   1551a:	e7c4      	b.n	154a6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1551c:	f417 6f80 	tst.w	r7, #1024	; 0x400
   15520:	d0e4      	beq.n	154ec <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15522:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15526:	2301      	movs	r3, #1
   15528:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   1552c:	60d4      	str	r4, [r2, #12]
}
   1552e:	e7dd      	b.n	154ec <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   15530:	4638      	mov	r0, r7
   15532:	f00c fb2d 	bl	21b90 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   15536:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1553a:	2300      	movs	r3, #0
   1553c:	461a      	mov	r2, r3
   1553e:	a902      	add	r1, sp, #8
   15540:	4628      	mov	r0, r5
   15542:	f004 f8e1 	bl	19708 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   15546:	4b05      	ldr	r3, [pc, #20]	; (1555c <gpio_nrfx_pin_configure+0xfc>)
   15548:	4298      	cmp	r0, r3
   1554a:	d101      	bne.n	15550 <gpio_nrfx_pin_configure+0xf0>
   1554c:	2600      	movs	r6, #0
   1554e:	e7dc      	b.n	1550a <gpio_nrfx_pin_configure+0xaa>
   15550:	f06f 0615 	mvn.w	r6, #21
   15554:	e7d9      	b.n	1550a <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
   15556:	f06f 0615 	mvn.w	r6, #21
   1555a:	e7d6      	b.n	1550a <gpio_nrfx_pin_configure+0xaa>
   1555c:	0bad0000 	.word	0x0bad0000

00015560 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15560:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   15562:	f004 fa85 	bl	19a70 <nrfx_gpiote_is_init>
   15566:	b108      	cbz	r0, 1556c <gpio_nrfx_init+0xc>
		return 0;
   15568:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1556a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1556c:	f004 fa56 	bl	19a1c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   15570:	4b08      	ldr	r3, [pc, #32]	; (15594 <gpio_nrfx_init+0x34>)
   15572:	4298      	cmp	r0, r3
   15574:	d10a      	bne.n	1558c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   15576:	2100      	movs	r1, #0
   15578:	4807      	ldr	r0, [pc, #28]	; (15598 <gpio_nrfx_init+0x38>)
   1557a:	f004 fa31 	bl	199e0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1557e:	2200      	movs	r2, #0
   15580:	2105      	movs	r1, #5
   15582:	2031      	movs	r0, #49	; 0x31
   15584:	f7fe fbc8 	bl	13d18 <z_arm_irq_priority_set>
	return 0;
   15588:	2000      	movs	r0, #0
   1558a:	e7ee      	b.n	1556a <gpio_nrfx_init+0xa>
		return -EIO;
   1558c:	f06f 0004 	mvn.w	r0, #4
   15590:	e7eb      	b.n	1556a <gpio_nrfx_init+0xa>
   15592:	bf00      	nop
   15594:	0bad0000 	.word	0x0bad0000
   15598:	00021c87 	.word	0x00021c87

0001559c <uarte_nrfx_pins_configure>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   1559c:	6843      	ldr	r3, [r0, #4]
#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   1559e:	2900      	cmp	r1, #0
   155a0:	d153      	bne.n	1564a <uarte_nrfx_pins_configure+0xae>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   155a2:	68da      	ldr	r2, [r3, #12]
   155a4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   155a8:	d00d      	beq.n	155c6 <uarte_nrfx_pins_configure+0x2a>
    *p_pin = pin_number & 0x1F;
   155aa:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   155ae:	2101      	movs	r1, #1
   155b0:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   155b4:	493b      	ldr	r1, [pc, #236]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   155b6:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   155b8:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   155ba:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   155be:	3280      	adds	r2, #128	; 0x80
   155c0:	2003      	movs	r0, #3
   155c2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   155c6:	691a      	ldr	r2, [r3, #16]
   155c8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   155cc:	d00a      	beq.n	155e4 <uarte_nrfx_pins_configure+0x48>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   155ce:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   155d0:	2900      	cmp	r1, #0
   155d2:	d036      	beq.n	15642 <uarte_nrfx_pins_configure+0xa6>
   155d4:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   155d6:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   155da:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   155dc:	3280      	adds	r2, #128	; 0x80
   155de:	4831      	ldr	r0, [pc, #196]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   155e0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   155e4:	695a      	ldr	r2, [r3, #20]
   155e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   155ea:	d00d      	beq.n	15608 <uarte_nrfx_pins_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   155ec:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   155f0:	2101      	movs	r1, #1
   155f2:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   155f6:	492b      	ldr	r1, [pc, #172]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   155f8:	608a      	str	r2, [r1, #8]
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   155fa:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   155fc:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15600:	3280      	adds	r2, #128	; 0x80
   15602:	2003      	movs	r0, #3
   15604:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15608:	699a      	ldr	r2, [r3, #24]
   1560a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1560e:	d009      	beq.n	15624 <uarte_nrfx_pins_configure+0x88>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   15610:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   15612:	b1c1      	cbz	r1, 15646 <uarte_nrfx_pins_configure+0xaa>
   15614:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   15616:	f002 021f 	and.w	r2, r2, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1561a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1561c:	3280      	adds	r2, #128	; 0x80
   1561e:	4821      	ldr	r0, [pc, #132]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   15620:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   15624:	681a      	ldr	r2, [r3, #0]
   15626:	68d8      	ldr	r0, [r3, #12]
   15628:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   1562a:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1562e:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   15632:	681a      	ldr	r2, [r3, #0]
   15634:	6959      	ldr	r1, [r3, #20]
   15636:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   15638:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1563c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   15640:	4770      	bx	lr
			nrf_gpio_cfg_input(cfg->rx_pin,
   15642:	2100      	movs	r1, #0
   15644:	e7c7      	b.n	155d6 <uarte_nrfx_pins_configure+0x3a>
			nrf_gpio_cfg_input(cfg->cts_pin,
   15646:	2100      	movs	r1, #0
   15648:	e7e5      	b.n	15616 <uarte_nrfx_pins_configure+0x7a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1564a:	68da      	ldr	r2, [r3, #12]
   1564c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15650:	d006      	beq.n	15660 <uarte_nrfx_pins_configure+0xc4>
    *p_pin = pin_number & 0x1F;
   15652:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15656:	3280      	adds	r2, #128	; 0x80
   15658:	4912      	ldr	r1, [pc, #72]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   1565a:	2002      	movs	r0, #2
   1565c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15660:	691a      	ldr	r2, [r3, #16]
   15662:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15666:	d006      	beq.n	15676 <uarte_nrfx_pins_configure+0xda>
    *p_pin = pin_number & 0x1F;
   15668:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   1566c:	3280      	adds	r2, #128	; 0x80
   1566e:	490d      	ldr	r1, [pc, #52]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   15670:	2002      	movs	r0, #2
   15672:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15676:	695a      	ldr	r2, [r3, #20]
   15678:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1567c:	d006      	beq.n	1568c <uarte_nrfx_pins_configure+0xf0>
    *p_pin = pin_number & 0x1F;
   1567e:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15682:	3280      	adds	r2, #128	; 0x80
   15684:	4907      	ldr	r1, [pc, #28]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   15686:	2002      	movs	r0, #2
   15688:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1568c:	699a      	ldr	r2, [r3, #24]
   1568e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15692:	d0c7      	beq.n	15624 <uarte_nrfx_pins_configure+0x88>
    *p_pin = pin_number & 0x1F;
   15694:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
   15698:	3280      	adds	r2, #128	; 0x80
   1569a:	4902      	ldr	r1, [pc, #8]	; (156a4 <uarte_nrfx_pins_configure+0x108>)
   1569c:	2002      	movs	r0, #2
   1569e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
   156a2:	e7bf      	b.n	15624 <uarte_nrfx_pins_configure+0x88>
   156a4:	40842500 	.word	0x40842500

000156a8 <baudrate_set>:
	return dev->config;
   156a8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   156aa:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   156ac:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   156b0:	d06f      	beq.n	15792 <baudrate_set+0xea>
   156b2:	d83a      	bhi.n	1572a <baudrate_set+0x82>
   156b4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   156b8:	d06e      	beq.n	15798 <baudrate_set+0xf0>
   156ba:	d90a      	bls.n	156d2 <baudrate_set+0x2a>
   156bc:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   156c0:	d075      	beq.n	157ae <baudrate_set+0x106>
   156c2:	d924      	bls.n	1570e <baudrate_set+0x66>
   156c4:	f647 2312 	movw	r3, #31250	; 0x7a12
   156c8:	4299      	cmp	r1, r3
   156ca:	d12b      	bne.n	15724 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   156cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   156d0:	e013      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   156d2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   156d6:	d061      	beq.n	1579c <baudrate_set+0xf4>
   156d8:	d907      	bls.n	156ea <baudrate_set+0x42>
   156da:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   156de:	d063      	beq.n	157a8 <baudrate_set+0x100>
   156e0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   156e4:	d110      	bne.n	15708 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   156e6:	4b3c      	ldr	r3, [pc, #240]	; (157d8 <baudrate_set+0x130>)
   156e8:	e007      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   156ea:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   156ee:	d058      	beq.n	157a2 <baudrate_set+0xfa>
   156f0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   156f4:	d105      	bne.n	15702 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   156f6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   156fa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   156fe:	2000      	movs	r0, #0
   15700:	4770      	bx	lr
	switch (baudrate) {
   15702:	f06f 0015 	mvn.w	r0, #21
   15706:	4770      	bx	lr
   15708:	f06f 0015 	mvn.w	r0, #21
   1570c:	4770      	bx	lr
   1570e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   15712:	d04e      	beq.n	157b2 <baudrate_set+0x10a>
   15714:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   15718:	d101      	bne.n	1571e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1571a:	4b30      	ldr	r3, [pc, #192]	; (157dc <baudrate_set+0x134>)
   1571c:	e7ed      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   1571e:	f06f 0015 	mvn.w	r0, #21
   15722:	4770      	bx	lr
   15724:	f06f 0015 	mvn.w	r0, #21
   15728:	4770      	bx	lr
   1572a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1572e:	d042      	beq.n	157b6 <baudrate_set+0x10e>
   15730:	d909      	bls.n	15746 <baudrate_set+0x9e>
   15732:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   15736:	d046      	beq.n	157c6 <baudrate_set+0x11e>
   15738:	d91f      	bls.n	1577a <baudrate_set+0xd2>
   1573a:	4b29      	ldr	r3, [pc, #164]	; (157e0 <baudrate_set+0x138>)
   1573c:	4299      	cmp	r1, r3
   1573e:	d148      	bne.n	157d2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15744:	e7d9      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   15746:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1574a:	d037      	beq.n	157bc <baudrate_set+0x114>
   1574c:	d905      	bls.n	1575a <baudrate_set+0xb2>
   1574e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   15752:	d10f      	bne.n	15774 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15754:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15758:	e7cf      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   1575a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1575e:	4299      	cmp	r1, r3
   15760:	d02e      	beq.n	157c0 <baudrate_set+0x118>
   15762:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   15766:	d102      	bne.n	1576e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15768:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1576c:	e7c5      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   1576e:	f06f 0015 	mvn.w	r0, #21
   15772:	4770      	bx	lr
   15774:	f06f 0015 	mvn.w	r0, #21
   15778:	4770      	bx	lr
   1577a:	4b1a      	ldr	r3, [pc, #104]	; (157e4 <baudrate_set+0x13c>)
   1577c:	4299      	cmp	r1, r3
   1577e:	d025      	beq.n	157cc <baudrate_set+0x124>
   15780:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   15784:	d102      	bne.n	1578c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15786:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1578a:	e7b6      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   1578c:	f06f 0015 	mvn.w	r0, #21
   15790:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15792:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15796:	e7b0      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15798:	4b13      	ldr	r3, [pc, #76]	; (157e8 <baudrate_set+0x140>)
   1579a:	e7ae      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1579c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   157a0:	e7ab      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   157a2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   157a6:	e7a8      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   157a8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   157ac:	e7a5      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   157ae:	4b0f      	ldr	r3, [pc, #60]	; (157ec <baudrate_set+0x144>)
   157b0:	e7a3      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   157b2:	4b0f      	ldr	r3, [pc, #60]	; (157f0 <baudrate_set+0x148>)
   157b4:	e7a1      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   157b6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   157ba:	e79e      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   157bc:	4b0d      	ldr	r3, [pc, #52]	; (157f4 <baudrate_set+0x14c>)
   157be:	e79c      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   157c0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   157c4:	e799      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   157c6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   157ca:	e796      	b.n	156fa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   157cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   157d0:	e793      	b.n	156fa <baudrate_set+0x52>
	switch (baudrate) {
   157d2:	f06f 0015 	mvn.w	r0, #21
}
   157d6:	4770      	bx	lr
   157d8:	0013b000 	.word	0x0013b000
   157dc:	004ea000 	.word	0x004ea000
   157e0:	000f4240 	.word	0x000f4240
   157e4:	0003d090 	.word	0x0003d090
   157e8:	00275000 	.word	0x00275000
   157ec:	0075c000 	.word	0x0075c000
   157f0:	003af000 	.word	0x003af000
   157f4:	013a9000 	.word	0x013a9000

000157f8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157fc:	4605      	mov	r5, r0
   157fe:	460f      	mov	r7, r1
	return dev->data;
   15800:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15804:	f00e fc6d 	bl	240e2 <k_is_in_isr>
   15808:	b920      	cbnz	r0, 15814 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1580a:	4b16      	ldr	r3, [pc, #88]	; (15864 <uarte_nrfx_poll_out+0x6c>)
   1580c:	781b      	ldrb	r3, [r3, #0]
   1580e:	b143      	cbz	r3, 15822 <uarte_nrfx_poll_out+0x2a>
   15810:	2300      	movs	r3, #0
   15812:	e000      	b.n	15816 <uarte_nrfx_poll_out+0x1e>
   15814:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   15816:	b953      	cbnz	r3, 1582e <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   15818:	4628      	mov	r0, r5
   1581a:	f00c fb4f 	bl	21ebc <wait_tx_ready>
   1581e:	4606      	mov	r6, r0
   15820:	e013      	b.n	1584a <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15822:	2301      	movs	r3, #1
   15824:	e7f7      	b.n	15816 <uarte_nrfx_poll_out+0x1e>
   15826:	f384 8811 	msr	BASEPRI, r4
   1582a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1582e:	f04f 0320 	mov.w	r3, #32
   15832:	f3ef 8411 	mrs	r4, BASEPRI
   15836:	f383 8812 	msr	BASEPRI_MAX, r3
   1583a:	f3bf 8f6f 	isb	sy
			key = irq_lock();
   1583e:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   15840:	4628      	mov	r0, r5
   15842:	f00c faec 	bl	21e1e <is_tx_ready>
   15846:	2800      	cmp	r0, #0
   15848:	d0ed      	beq.n	15826 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
   1584a:	4641      	mov	r1, r8
   1584c:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   15850:	2201      	movs	r2, #1
   15852:	4628      	mov	r0, r5
   15854:	f00c fafd 	bl	21e52 <tx_start>
	__asm__ volatile(
   15858:	f386 8811 	msr	BASEPRI, r6
   1585c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   15860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15864:	2000d6aa 	.word	0x2000d6aa

00015868 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   15868:	b538      	push	{r3, r4, r5, lr}
   1586a:	4605      	mov	r5, r0
   1586c:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1586e:	f101 0012 	add.w	r0, r1, #18
   15872:	f003 fd6d 	bl	19350 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15876:	4b12      	ldr	r3, [pc, #72]	; (158c0 <endtx_stoptx_ppi_init+0x58>)
   15878:	4298      	cmp	r0, r3
   1587a:	d10e      	bne.n	1589a <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1587c:	7ca3      	ldrb	r3, [r4, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1587e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15882:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15886:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1588a:	7ca2      	ldrb	r2, [r4, #18]
   1588c:	2301      	movs	r3, #1
   1588e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   15890:	4a0c      	ldr	r2, [pc, #48]	; (158c4 <endtx_stoptx_ppi_init+0x5c>)
   15892:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   15896:	2000      	movs	r0, #0
}
   15898:	bd38      	pop	{r3, r4, r5, pc}
   1589a:	4b0b      	ldr	r3, [pc, #44]	; (158c8 <endtx_stoptx_ppi_init+0x60>)
   1589c:	4a0b      	ldr	r2, [pc, #44]	; (158cc <endtx_stoptx_ppi_init+0x64>)
   1589e:	1a9b      	subs	r3, r3, r2
   158a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   158a2:	f04f 0100 	mov.w	r1, #0
   158a6:	2201      	movs	r2, #1
   158a8:	f362 0102 	bfi	r1, r2, #0, #3
   158ac:	f36f 01c5 	bfc	r1, #3, #3
   158b0:	f363 118f 	bfi	r1, r3, #6, #10
   158b4:	4806      	ldr	r0, [pc, #24]	; (158d0 <endtx_stoptx_ppi_init+0x68>)
   158b6:	f7fd fb53 	bl	12f60 <log_0>
		return -EIO;
   158ba:	f06f 0004 	mvn.w	r0, #4
   158be:	e7eb      	b.n	15898 <endtx_stoptx_ppi_init+0x30>
   158c0:	0bad0000 	.word	0x0bad0000
   158c4:	40017000 	.word	0x40017000
   158c8:	00025364 	.word	0x00025364
   158cc:	000252ec 	.word	0x000252ec
   158d0:	00026078 	.word	0x00026078

000158d4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   158d4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   158d8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   158dc:	4b01      	ldr	r3, [pc, #4]	; (158e4 <set_comparator+0x10>)
   158de:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   158e2:	4770      	bx	lr
   158e4:	40015000 	.word	0x40015000

000158e8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   158e8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   158ec:	4b01      	ldr	r3, [pc, #4]	; (158f4 <get_comparator+0xc>)
   158ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   158f2:	4770      	bx	lr
   158f4:	40015000 	.word	0x40015000

000158f8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   158f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   158fc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   158fe:	4a02      	ldr	r2, [pc, #8]	; (15908 <event_enable+0x10>)
   15900:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   15904:	4770      	bx	lr
   15906:	bf00      	nop
   15908:	40015000 	.word	0x40015000

0001590c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1590c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15910:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   15912:	4a02      	ldr	r2, [pc, #8]	; (1591c <event_disable+0x10>)
   15914:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   15918:	4770      	bx	lr
   1591a:	bf00      	nop
   1591c:	40015000 	.word	0x40015000

00015920 <counter>:
     return p_reg->COUNTER;
   15920:	4b01      	ldr	r3, [pc, #4]	; (15928 <counter+0x8>)
   15922:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   15926:	4770      	bx	lr
   15928:	40015000 	.word	0x40015000

0001592c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1592c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1592e:	2301      	movs	r3, #1
   15930:	4083      	lsls	r3, r0
   15932:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15936:	4a0c      	ldr	r2, [pc, #48]	; (15968 <compare_int_lock+0x3c>)
   15938:	e8d2 1fef 	ldaex	r1, [r2]
   1593c:	ea01 0e0c 	and.w	lr, r1, ip
   15940:	e8c2 efe4 	stlex	r4, lr, [r2]
   15944:	2c00      	cmp	r4, #0
   15946:	d1f7      	bne.n	15938 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1594c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   15950:	4a06      	ldr	r2, [pc, #24]	; (1596c <compare_int_lock+0x40>)
   15952:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   15956:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1595a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1595e:	420b      	tst	r3, r1
}
   15960:	bf14      	ite	ne
   15962:	2001      	movne	r0, #1
   15964:	2000      	moveq	r0, #0
   15966:	bd10      	pop	{r4, pc}
   15968:	2000cfdc 	.word	0x2000cfdc
   1596c:	40015000 	.word	0x40015000

00015970 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   15970:	b570      	push	{r4, r5, r6, lr}
   15972:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   15974:	f00c fb58 	bl	22028 <full_int_lock>
   15978:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1597a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1597e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   15980:	4a15      	ldr	r2, [pc, #84]	; (159d8 <channel_processing_check_and_clear+0x68>)
   15982:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   15986:	4213      	tst	r3, r2
   15988:	d105      	bne.n	15996 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1598a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1598c:	4628      	mov	r0, r5
   1598e:	f00c fb54 	bl	2203a <full_int_unlock>

	return result;
}
   15992:	4630      	mov	r0, r6
   15994:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15996:	2301      	movs	r3, #1
   15998:	40a3      	lsls	r3, r4
   1599a:	43db      	mvns	r3, r3
   1599c:	4a0f      	ldr	r2, [pc, #60]	; (159dc <channel_processing_check_and_clear+0x6c>)
   1599e:	e8d2 1fef 	ldaex	r1, [r2]
   159a2:	ea01 0003 	and.w	r0, r1, r3
   159a6:	e8c2 0fe6 	stlex	r6, r0, [r2]
   159aa:	2e00      	cmp	r6, #0
   159ac:	d1f7      	bne.n	1599e <channel_processing_check_and_clear+0x2e>
   159ae:	b959      	cbnz	r1, 159c8 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   159b0:	f104 0350 	add.w	r3, r4, #80	; 0x50
   159b4:	009b      	lsls	r3, r3, #2
   159b6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   159b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   159bc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   159c0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   159c2:	b113      	cbz	r3, 159ca <channel_processing_check_and_clear+0x5a>
   159c4:	2301      	movs	r3, #1
   159c6:	e000      	b.n	159ca <channel_processing_check_and_clear+0x5a>
   159c8:	2301      	movs	r3, #1
		if (result) {
   159ca:	461e      	mov	r6, r3
   159cc:	2b00      	cmp	r3, #0
   159ce:	d0dd      	beq.n	1598c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   159d0:	4620      	mov	r0, r4
   159d2:	f00c fb1a 	bl	2200a <event_clear>
   159d6:	e7d9      	b.n	1598c <channel_processing_check_and_clear+0x1c>
   159d8:	40015000 	.word	0x40015000
   159dc:	2000cfd8 	.word	0x2000cfd8

000159e0 <compare_int_unlock>:
	if (key) {
   159e0:	b901      	cbnz	r1, 159e4 <compare_int_unlock+0x4>
}
   159e2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   159e4:	2301      	movs	r3, #1
   159e6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   159e8:	4a0e      	ldr	r2, [pc, #56]	; (15a24 <compare_int_unlock+0x44>)
   159ea:	e8d2 1fef 	ldaex	r1, [r2]
   159ee:	4319      	orrs	r1, r3
   159f0:	e8c2 1fec 	stlex	ip, r1, [r2]
   159f4:	f1bc 0f00 	cmp.w	ip, #0
   159f8:	d1f7      	bne.n	159ea <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   159fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   159fe:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   15a00:	4a09      	ldr	r2, [pc, #36]	; (15a28 <compare_int_unlock+0x48>)
   15a02:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a06:	4b09      	ldr	r3, [pc, #36]	; (15a2c <compare_int_unlock+0x4c>)
   15a08:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   15a0c:	fa23 f000 	lsr.w	r0, r3, r0
   15a10:	f010 0f01 	tst.w	r0, #1
   15a14:	d0e5      	beq.n	159e2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a16:	4b06      	ldr	r3, [pc, #24]	; (15a30 <compare_int_unlock+0x50>)
   15a18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15a1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15a20:	e7df      	b.n	159e2 <compare_int_unlock+0x2>
   15a22:	bf00      	nop
   15a24:	2000cfdc 	.word	0x2000cfdc
   15a28:	40015000 	.word	0x40015000
   15a2c:	2000cfd8 	.word	0x2000cfd8
   15a30:	e000e100 	.word	0xe000e100

00015a34 <sys_clock_timeout_handler>:
{
   15a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15a38:	4607      	mov	r7, r0
   15a3a:	4614      	mov	r4, r2
   15a3c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   15a3e:	4610      	mov	r0, r2
   15a40:	4619      	mov	r1, r3
   15a42:	f00c faee 	bl	22022 <absolute_time_to_cc>
   15a46:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15a48:	4b15      	ldr	r3, [pc, #84]	; (15aa0 <sys_clock_timeout_handler+0x6c>)
   15a4a:	681a      	ldr	r2, [r3, #0]
   15a4c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   15a4e:	601c      	str	r4, [r3, #0]
   15a50:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   15a52:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   15a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   15a5a:	d309      	bcc.n	15a70 <sys_clock_timeout_handler+0x3c>
	return false;
   15a5c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15a5e:	f008 faef 	bl	1e040 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   15a62:	4638      	mov	r0, r7
   15a64:	f7ff ff40 	bl	158e8 <get_comparator>
   15a68:	42a8      	cmp	r0, r5
   15a6a:	d00e      	beq.n	15a8a <sys_clock_timeout_handler+0x56>
}
   15a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   15a70:	4b0c      	ldr	r3, [pc, #48]	; (15aa4 <sys_clock_timeout_handler+0x70>)
   15a72:	681b      	ldr	r3, [r3, #0]
   15a74:	0a1a      	lsrs	r2, r3, #8
   15a76:	061b      	lsls	r3, r3, #24
   15a78:	eb15 0803 	adds.w	r8, r5, r3
   15a7c:	f142 0900 	adc.w	r9, r2, #0
   15a80:	4b09      	ldr	r3, [pc, #36]	; (15aa8 <sys_clock_timeout_handler+0x74>)
   15a82:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   15a86:	2401      	movs	r4, #1
   15a88:	e7e9      	b.n	15a5e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   15a8a:	b11c      	cbz	r4, 15a94 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   15a8c:	4638      	mov	r0, r7
   15a8e:	f7ff ff33 	bl	158f8 <event_enable>
}
   15a92:	e7eb      	b.n	15a6c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   15a94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   15a98:	4638      	mov	r0, r7
   15a9a:	f7ff ff1b 	bl	158d4 <set_comparator>
   15a9e:	e7f5      	b.n	15a8c <sys_clock_timeout_handler+0x58>
   15aa0:	2000c8c0 	.word	0x2000c8c0
   15aa4:	2000cfe0 	.word	0x2000cfe0
   15aa8:	2000c8a8 	.word	0x2000c8a8

00015aac <z_nrf_rtc_timer_read>:
{
   15aac:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   15aae:	4b0d      	ldr	r3, [pc, #52]	; (15ae4 <z_nrf_rtc_timer_read+0x38>)
   15ab0:	681c      	ldr	r4, [r3, #0]
   15ab2:	0a25      	lsrs	r5, r4, #8
   15ab4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   15ab6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   15aba:	f7ff ff31 	bl	15920 <counter>
   15abe:	4603      	mov	r3, r0
	val += cntr;
   15ac0:	1900      	adds	r0, r0, r4
   15ac2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   15ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15aca:	d20a      	bcs.n	15ae2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   15acc:	4b06      	ldr	r3, [pc, #24]	; (15ae8 <z_nrf_rtc_timer_read+0x3c>)
   15ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ad2:	4290      	cmp	r0, r2
   15ad4:	eb71 0303 	sbcs.w	r3, r1, r3
   15ad8:	d203      	bcs.n	15ae2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   15ada:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   15ade:	f141 0100 	adc.w	r1, r1, #0
}
   15ae2:	bd38      	pop	{r3, r4, r5, pc}
   15ae4:	2000cfe0 	.word	0x2000cfe0
   15ae8:	2000c8a8 	.word	0x2000c8a8

00015aec <compare_set_nolocks>:
{
   15aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aee:	4606      	mov	r6, r0
   15af0:	4614      	mov	r4, r2
   15af2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   15af4:	4610      	mov	r0, r2
   15af6:	4619      	mov	r1, r3
   15af8:	f00c fa93 	bl	22022 <absolute_time_to_cc>
   15afc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   15afe:	f7ff ffd5 	bl	15aac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   15b02:	42a0      	cmp	r0, r4
   15b04:	eb71 0305 	sbcs.w	r3, r1, r5
   15b08:	d21d      	bcs.n	15b46 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   15b0a:	1a23      	subs	r3, r4, r0
   15b0c:	eb65 0101 	sbc.w	r1, r5, r1
   15b10:	4a19      	ldr	r2, [pc, #100]	; (15b78 <compare_set_nolocks+0x8c>)
   15b12:	4293      	cmp	r3, r2
   15b14:	f171 0300 	sbcs.w	r3, r1, #0
   15b18:	d22b      	bcs.n	15b72 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
   15b1a:	4b18      	ldr	r3, [pc, #96]	; (15b7c <compare_set_nolocks+0x90>)
   15b1c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   15b20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   15b24:	42ab      	cmp	r3, r5
   15b26:	bf08      	it	eq
   15b28:	42a2      	cmpeq	r2, r4
   15b2a:	d016      	beq.n	15b5a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   15b2c:	4639      	mov	r1, r7
   15b2e:	4630      	mov	r0, r6
   15b30:	f00c fa88 	bl	22044 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   15b34:	4639      	mov	r1, r7
   15b36:	f00c fa64 	bl	22002 <counter_sub>
   15b3a:	1900      	adds	r0, r0, r4
   15b3c:	f145 0300 	adc.w	r3, r5, #0
   15b40:	4604      	mov	r4, r0
   15b42:	461d      	mov	r5, r3
   15b44:	e009      	b.n	15b5a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
   15b46:	2301      	movs	r3, #1
   15b48:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15b4a:	4a0d      	ldr	r2, [pc, #52]	; (15b80 <compare_set_nolocks+0x94>)
   15b4c:	e8d2 1fef 	ldaex	r1, [r2]
   15b50:	4319      	orrs	r1, r3
   15b52:	e8c2 1fe0 	stlex	r0, r1, [r2]
   15b56:	2800      	cmp	r0, #0
   15b58:	d1f8      	bne.n	15b4c <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
   15b5a:	4b08      	ldr	r3, [pc, #32]	; (15b7c <compare_set_nolocks+0x90>)
   15b5c:	0132      	lsls	r2, r6, #4
   15b5e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   15b62:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   15b66:	9906      	ldr	r1, [sp, #24]
   15b68:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   15b6a:	9b07      	ldr	r3, [sp, #28]
   15b6c:	6073      	str	r3, [r6, #4]
	return ret;
   15b6e:	2000      	movs	r0, #0
}
   15b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   15b72:	f06f 0015 	mvn.w	r0, #21
   15b76:	e7fb      	b.n	15b70 <compare_set_nolocks+0x84>
   15b78:	01000001 	.word	0x01000001
   15b7c:	2000c8b0 	.word	0x2000c8b0
   15b80:	2000cfd8 	.word	0x2000cfd8

00015b84 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15b84:	b530      	push	{r4, r5, lr}
   15b86:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   15b88:	2300      	movs	r3, #0
   15b8a:	4a1d      	ldr	r2, [pc, #116]	; (15c00 <sys_clock_driver_init+0x7c>)
   15b8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15b90:	2b00      	cmp	r3, #0
   15b92:	dd24      	ble.n	15bde <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   15b94:	4c1a      	ldr	r4, [pc, #104]	; (15c00 <sys_clock_driver_init+0x7c>)
   15b96:	2502      	movs	r5, #2
   15b98:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15b9c:	4b19      	ldr	r3, [pc, #100]	; (15c04 <sys_clock_driver_init+0x80>)
   15b9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15ba2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   15ba6:	2200      	movs	r2, #0
   15ba8:	2101      	movs	r1, #1
   15baa:	2015      	movs	r0, #21
   15bac:	f7fe f8b4 	bl	13d18 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   15bb0:	2015      	movs	r0, #21
   15bb2:	f7fe f895 	bl	13ce0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15bb6:	2301      	movs	r3, #1
   15bb8:	60a3      	str	r3, [r4, #8]
   15bba:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   15bbc:	4a12      	ldr	r2, [pc, #72]	; (15c08 <sys_clock_driver_init+0x84>)
   15bbe:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   15bc0:	2400      	movs	r4, #0
   15bc2:	9401      	str	r4, [sp, #4]
   15bc4:	4b11      	ldr	r3, [pc, #68]	; (15c0c <sys_clock_driver_init+0x88>)
   15bc6:	9300      	str	r3, [sp, #0]
   15bc8:	4a11      	ldr	r2, [pc, #68]	; (15c10 <sys_clock_driver_init+0x8c>)
   15bca:	2300      	movs	r3, #0
   15bcc:	4620      	mov	r0, r4
   15bce:	f00c fa74 	bl	220ba <compare_set>

	z_nrf_clock_control_lf_on(mode);
   15bd2:	4628      	mov	r0, r5
   15bd4:	f7ff fb14 	bl	15200 <z_nrf_clock_control_lf_on>

	return 0;
}
   15bd8:	4620      	mov	r0, r4
   15bda:	b003      	add	sp, #12
   15bdc:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15bde:	4a0d      	ldr	r2, [pc, #52]	; (15c14 <sys_clock_driver_init+0x90>)
   15be0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15bec:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15bf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15bf4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   15bf6:	4902      	ldr	r1, [pc, #8]	; (15c00 <sys_clock_driver_init+0x7c>)
   15bf8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15bfc:	3301      	adds	r3, #1
   15bfe:	e7c7      	b.n	15b90 <sys_clock_driver_init+0xc>
   15c00:	40015000 	.word	0x40015000
   15c04:	e000e100 	.word	0xe000e100
   15c08:	2000cfdc 	.word	0x2000cfdc
   15c0c:	00015a35 	.word	0x00015a35
   15c10:	007fffff 	.word	0x007fffff
   15c14:	2000c8b0 	.word	0x2000c8b0

00015c18 <process_channel>:
{
   15c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c1c:	b082      	sub	sp, #8
   15c1e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   15c20:	f7ff fea6 	bl	15970 <channel_processing_check_and_clear>
   15c24:	b910      	cbnz	r0, 15c2c <process_channel+0x14>
}
   15c26:	b002      	add	sp, #8
   15c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   15c2c:	f7ff ff3e 	bl	15aac <z_nrf_rtc_timer_read>
   15c30:	4682      	mov	sl, r0
   15c32:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   15c34:	f00c f9f8 	bl	22028 <full_int_lock>
   15c38:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   15c3a:	4b13      	ldr	r3, [pc, #76]	; (15c88 <process_channel+0x70>)
   15c3c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   15c40:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   15c44:	45c2      	cmp	sl, r8
   15c46:	eb76 0309 	sbcs.w	r3, r6, r9
   15c4a:	d20b      	bcs.n	15c64 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   15c4c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   15c4e:	4628      	mov	r0, r5
   15c50:	f00c f9f3 	bl	2203a <full_int_unlock>
		if (handler) {
   15c54:	2e00      	cmp	r6, #0
   15c56:	d0e6      	beq.n	15c26 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   15c58:	9700      	str	r7, [sp, #0]
   15c5a:	4642      	mov	r2, r8
   15c5c:	464b      	mov	r3, r9
   15c5e:	4620      	mov	r0, r4
   15c60:	47b0      	blx	r6
}
   15c62:	e7e0      	b.n	15c26 <process_channel+0xe>
			handler = cc_data[chan].callback;
   15c64:	4a08      	ldr	r2, [pc, #32]	; (15c88 <process_channel+0x70>)
   15c66:	0123      	lsls	r3, r4, #4
   15c68:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   15c6c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   15c6e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   15c70:	2000      	movs	r0, #0
   15c72:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   15c80:	4620      	mov	r0, r4
   15c82:	f7ff fe43 	bl	1590c <event_disable>
   15c86:	e7e2      	b.n	15c4e <process_channel+0x36>
   15c88:	2000c8b0 	.word	0x2000c8b0

00015c8c <rtc_nrf_isr>:
{
   15c8c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   15c8e:	4b0e      	ldr	r3, [pc, #56]	; (15cc8 <rtc_nrf_isr+0x3c>)
   15c90:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15c94:	f013 0f02 	tst.w	r3, #2
   15c98:	d00d      	beq.n	15cb6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c9a:	4b0b      	ldr	r3, [pc, #44]	; (15cc8 <rtc_nrf_isr+0x3c>)
   15c9c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   15ca0:	b14b      	cbz	r3, 15cb6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15ca2:	4b09      	ldr	r3, [pc, #36]	; (15cc8 <rtc_nrf_isr+0x3c>)
   15ca4:	2200      	movs	r2, #0
   15ca6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15caa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   15cae:	4a07      	ldr	r2, [pc, #28]	; (15ccc <rtc_nrf_isr+0x40>)
   15cb0:	6813      	ldr	r3, [r2, #0]
   15cb2:	3301      	adds	r3, #1
   15cb4:	6013      	str	r3, [r2, #0]
{
   15cb6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15cb8:	2c00      	cmp	r4, #0
   15cba:	dd00      	ble.n	15cbe <rtc_nrf_isr+0x32>
}
   15cbc:	bd10      	pop	{r4, pc}
		process_channel(chan);
   15cbe:	4620      	mov	r0, r4
   15cc0:	f7ff ffaa 	bl	15c18 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15cc4:	3401      	adds	r4, #1
   15cc6:	e7f7      	b.n	15cb8 <rtc_nrf_isr+0x2c>
   15cc8:	40015000 	.word	0x40015000
   15ccc:	2000cfe0 	.word	0x2000cfe0

00015cd0 <sys_clock_set_timeout>:
{
   15cd0:	b510      	push	{r4, lr}
   15cd2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15cd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15cd8:	d007      	beq.n	15cea <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15cda:	1e44      	subs	r4, r0, #1
   15cdc:	2c00      	cmp	r4, #0
   15cde:	dd07      	ble.n	15cf0 <sys_clock_set_timeout+0x20>
   15ce0:	4b11      	ldr	r3, [pc, #68]	; (15d28 <sys_clock_set_timeout+0x58>)
   15ce2:	429c      	cmp	r4, r3
   15ce4:	dd05      	ble.n	15cf2 <sys_clock_set_timeout+0x22>
   15ce6:	4c11      	ldr	r4, [pc, #68]	; (15d2c <sys_clock_set_timeout+0x5c>)
   15ce8:	e003      	b.n	15cf2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15cea:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   15cee:	e7f4      	b.n	15cda <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15cf0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   15cf2:	f7ff fedb 	bl	15aac <z_nrf_rtc_timer_read>
   15cf6:	4b0e      	ldr	r3, [pc, #56]	; (15d30 <sys_clock_set_timeout+0x60>)
   15cf8:	681a      	ldr	r2, [r3, #0]
   15cfa:	685b      	ldr	r3, [r3, #4]
   15cfc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   15cfe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15d02:	d300      	bcc.n	15d06 <sys_clock_set_timeout+0x36>
		ticks = 0;
   15d04:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15d06:	4404      	add	r4, r0
   15d08:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   15d0a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   15d0e:	d300      	bcc.n	15d12 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   15d10:	4c06      	ldr	r4, [pc, #24]	; (15d2c <sys_clock_set_timeout+0x5c>)
	uint64_t target_time = cyc + last_count;
   15d12:	2000      	movs	r0, #0
   15d14:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15d16:	9001      	str	r0, [sp, #4]
   15d18:	4906      	ldr	r1, [pc, #24]	; (15d34 <sys_clock_set_timeout+0x64>)
   15d1a:	9100      	str	r1, [sp, #0]
   15d1c:	f143 0300 	adc.w	r3, r3, #0
   15d20:	f00c f9cb 	bl	220ba <compare_set>
}
   15d24:	b002      	add	sp, #8
   15d26:	bd10      	pop	{r4, pc}
   15d28:	007ffffe 	.word	0x007ffffe
   15d2c:	007fffff 	.word	0x007fffff
   15d30:	2000c8c0 	.word	0x2000c8c0
   15d34:	00015a35 	.word	0x00015a35

00015d38 <sys_clock_elapsed>:
{
   15d38:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   15d3a:	f7ff feb7 	bl	15aac <z_nrf_rtc_timer_read>
   15d3e:	4b02      	ldr	r3, [pc, #8]	; (15d48 <sys_clock_elapsed+0x10>)
   15d40:	681b      	ldr	r3, [r3, #0]
}
   15d42:	1ac0      	subs	r0, r0, r3
   15d44:	bd08      	pop	{r3, pc}
   15d46:	bf00      	nop
   15d48:	2000c8c0 	.word	0x2000c8c0

00015d4c <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   15d4c:	b510      	push	{r4, lr}
	if (!first_time_init) {
   15d4e:	4b1d      	ldr	r3, [pc, #116]	; (15dc4 <_nrf_modem_lib_init+0x78>)
   15d50:	781b      	ldrb	r3, [r3, #0]
   15d52:	b1c3      	cbz	r3, 15d86 <_nrf_modem_lib_init+0x3a>
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   15d54:	2200      	movs	r2, #0
   15d56:	4611      	mov	r1, r2
   15d58:	202a      	movs	r0, #42	; 0x2a
   15d5a:	f7fd ffdd 	bl	13d18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   15d5e:	2100      	movs	r1, #0
   15d60:	4819      	ldr	r0, [pc, #100]	; (15dc8 <_nrf_modem_lib_init+0x7c>)
   15d62:	f006 fdc9 	bl	1c8f8 <nrf_modem_init>
   15d66:	4b19      	ldr	r3, [pc, #100]	; (15dcc <_nrf_modem_lib_init+0x80>)
   15d68:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   15d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d72:	4817      	ldr	r0, [pc, #92]	; (15dd0 <_nrf_modem_lib_init+0x84>)
   15d74:	f007 f976 	bl	1d064 <z_impl_k_mutex_lock>
	return list->head;
   15d78:	4b16      	ldr	r3, [pc, #88]	; (15dd4 <_nrf_modem_lib_init+0x88>)
   15d7a:	6818      	ldr	r0, [r3, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   15d7c:	b1e0      	cbz	r0, 15db8 <_nrf_modem_lib_init+0x6c>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   15d7e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   15d80:	b178      	cbz	r0, 15da2 <_nrf_modem_lib_init+0x56>
	return node->next;
   15d82:	6804      	ldr	r4, [r0, #0]
   15d84:	e00d      	b.n	15da2 <_nrf_modem_lib_init+0x56>
	list->head = NULL;
   15d86:	4b13      	ldr	r3, [pc, #76]	; (15dd4 <_nrf_modem_lib_init+0x88>)
   15d88:	2200      	movs	r2, #0
   15d8a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   15d8c:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_init(mutex);
   15d8e:	4810      	ldr	r0, [pc, #64]	; (15dd0 <_nrf_modem_lib_init+0x84>)
   15d90:	f00e f9fc 	bl	2418c <z_impl_k_mutex_init>
		first_time_init = true;
   15d94:	4b0b      	ldr	r3, [pc, #44]	; (15dc4 <_nrf_modem_lib_init+0x78>)
   15d96:	2201      	movs	r2, #1
   15d98:	701a      	strb	r2, [r3, #0]
   15d9a:	e7db      	b.n	15d54 <_nrf_modem_lib_init+0x8>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   15d9c:	4623      	mov	r3, r4
   15d9e:	4620      	mov	r0, r4
   15da0:	461c      	mov	r4, r3
   15da2:	b148      	cbz	r0, 15db8 <_nrf_modem_lib_init+0x6c>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   15da4:	3004      	adds	r0, #4
	z_impl_k_sem_give(sem);
   15da6:	f007 fa65 	bl	1d274 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   15daa:	2c00      	cmp	r4, #0
   15dac:	d0f6      	beq.n	15d9c <_nrf_modem_lib_init+0x50>
   15dae:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   15db0:	2c00      	cmp	r4, #0
   15db2:	d0f4      	beq.n	15d9e <_nrf_modem_lib_init+0x52>
	return node->next;
   15db4:	6823      	ldr	r3, [r4, #0]
   15db6:	e7f2      	b.n	15d9e <_nrf_modem_lib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   15db8:	4805      	ldr	r0, [pc, #20]	; (15dd0 <_nrf_modem_lib_init+0x84>)
   15dba:	f007 f9dd 	bl	1d178 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   15dbe:	2000      	movs	r0, #0
   15dc0:	bd10      	pop	{r4, pc}
   15dc2:	bf00      	nop
   15dc4:	2000d56e 	.word	0x2000d56e
   15dc8:	000260ec 	.word	0x000260ec
   15dcc:	2000cfe4 	.word	0x2000cfe4
   15dd0:	2000cff0 	.word	0x2000cff0
   15dd4:	2000cfe8 	.word	0x2000cfe8

00015dd8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   15dd8:	b410      	push	{r4}
   15dda:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   15ddc:	f04f 0c00 	mov.w	ip, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   15de0:	4810      	ldr	r0, [pc, #64]	; (15e24 <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   15de2:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   15de4:	e000      	b.n	15de8 <thread_monitor_entry_get+0x10>
   15de6:	3308      	adds	r3, #8
   15de8:	b19b      	cbz	r3, 15e12 <thread_monitor_entry_get+0x3a>
   15dea:	4a0e      	ldr	r2, [pc, #56]	; (15e24 <thread_monitor_entry_get+0x4c>)
   15dec:	4293      	cmp	r3, r2
   15dee:	d310      	bcc.n	15e12 <thread_monitor_entry_get+0x3a>
   15df0:	3250      	adds	r2, #80	; 0x50
   15df2:	4293      	cmp	r3, r2
   15df4:	d20d      	bcs.n	15e12 <thread_monitor_entry_get+0x3a>
		if (entry->id == id) {
   15df6:	681a      	ldr	r2, [r3, #0]
   15df8:	42a2      	cmp	r2, r4
   15dfa:	d011      	beq.n	15e20 <thread_monitor_entry_get+0x48>
			return entry;
		} else if (entry->id == 0) {
   15dfc:	b142      	cbz	r2, 15e10 <thread_monitor_entry_get+0x38>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   15dfe:	4a0a      	ldr	r2, [pc, #40]	; (15e28 <thread_monitor_entry_get+0x50>)
   15e00:	6812      	ldr	r2, [r2, #0]
   15e02:	6859      	ldr	r1, [r3, #4]
   15e04:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   15e06:	4594      	cmp	ip, r2
   15e08:	daed      	bge.n	15de6 <thread_monitor_entry_get+0xe>
			oldest_entry_age = entry_age;
   15e0a:	4694      	mov	ip, r2
			new_entry = entry;
   15e0c:	4618      	mov	r0, r3
   15e0e:	e7ea      	b.n	15de6 <thread_monitor_entry_get+0xe>
			new_entry = entry;
   15e10:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   15e12:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   15e14:	4b04      	ldr	r3, [pc, #16]	; (15e28 <thread_monitor_entry_get+0x50>)
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	3b01      	subs	r3, #1
   15e1a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   15e1c:	bc10      	pop	{r4}
   15e1e:	4770      	bx	lr
			return entry;
   15e20:	4618      	mov	r0, r3
   15e22:	e7fb      	b.n	15e1c <thread_monitor_entry_get+0x44>
   15e24:	2000d074 	.word	0x2000d074
   15e28:	2000d050 	.word	0x2000d050

00015e2c <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   15e2c:	4b01      	ldr	r3, [pc, #4]	; (15e34 <thread_monitor_entry_update+0x8>)
   15e2e:	681b      	ldr	r3, [r3, #0]
   15e30:	6043      	str	r3, [r0, #4]
}
   15e32:	4770      	bx	lr
   15e34:	2000d050 	.word	0x2000d050

00015e38 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   15e38:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   15e3a:	6842      	ldr	r2, [r0, #4]
   15e3c:	4b04      	ldr	r3, [pc, #16]	; (15e50 <can_thread_sleep+0x18>)
   15e3e:	681b      	ldr	r3, [r3, #0]
   15e40:	429a      	cmp	r2, r3
   15e42:	d101      	bne.n	15e48 <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   15e44:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   15e46:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   15e48:	f7ff fff0 	bl	15e2c <thread_monitor_entry_update>
		allow_to_sleep = false;
   15e4c:	2000      	movs	r0, #0
   15e4e:	e7fa      	b.n	15e46 <can_thread_sleep+0xe>
   15e50:	2000d050 	.word	0x2000d050

00015e54 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   15e54:	b538      	push	{r3, r4, r5, lr}
   15e56:	4604      	mov	r4, r0
	__asm__ volatile(
   15e58:	f04f 0320 	mov.w	r3, #32
   15e5c:	f3ef 8511 	mrs	r5, BASEPRI
   15e60:	f383 8812 	msr	BASEPRI_MAX, r3
   15e64:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15e68:	f007 ffa8 	bl	1ddbc <z_impl_z_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   15e6c:	f7ff ffb4 	bl	15dd8 <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   15e70:	f7ff ffe2 	bl	15e38 <can_thread_sleep>
   15e74:	b138      	cbz	r0, 15e86 <sleeping_thread_add+0x32>
	parent->next = child;
   15e76:	2300      	movs	r3, #0
   15e78:	6023      	str	r3, [r4, #0]
	return list->tail;
   15e7a:	4b07      	ldr	r3, [pc, #28]	; (15e98 <sleeping_thread_add+0x44>)
   15e7c:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15e7e:	b13b      	cbz	r3, 15e90 <sleeping_thread_add+0x3c>
	parent->next = child;
   15e80:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15e82:	4b05      	ldr	r3, [pc, #20]	; (15e98 <sleeping_thread_add+0x44>)
   15e84:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   15e86:	f385 8811 	msr	BASEPRI, r5
   15e8a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   15e8e:	bd38      	pop	{r3, r4, r5, pc}
   15e90:	4b01      	ldr	r3, [pc, #4]	; (15e98 <sleeping_thread_add+0x44>)
   15e92:	605c      	str	r4, [r3, #4]
	list->head = node;
   15e94:	601c      	str	r4, [r3, #0]
}
   15e96:	e7f6      	b.n	15e86 <sleeping_thread_add+0x32>
   15e98:	2000d06c 	.word	0x2000d06c

00015e9c <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   15e9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   15e9e:	f04f 0320 	mov.w	r3, #32
   15ea2:	f3ef 8411 	mrs	r4, BASEPRI
   15ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   15eaa:	f3bf 8f6f 	isb	sy
	return list->head;
   15eae:	4b15      	ldr	r3, [pc, #84]	; (15f04 <sleeping_thread_remove+0x68>)
   15eb0:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15eb2:	2200      	movs	r2, #0
   15eb4:	e00d      	b.n	15ed2 <sleeping_thread_remove+0x36>
	return node->next;
   15eb6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   15eb8:	4b12      	ldr	r3, [pc, #72]	; (15f04 <sleeping_thread_remove+0x68>)
   15eba:	601a      	str	r2, [r3, #0]
	return list->tail;
   15ebc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15ebe:	4298      	cmp	r0, r3
   15ec0:	d112      	bne.n	15ee8 <sleeping_thread_remove+0x4c>
	list->tail = node;
   15ec2:	4b10      	ldr	r3, [pc, #64]	; (15f04 <sleeping_thread_remove+0x68>)
   15ec4:	605a      	str	r2, [r3, #4]
}
   15ec6:	e00f      	b.n	15ee8 <sleeping_thread_remove+0x4c>
	list->tail = node;
   15ec8:	4b0e      	ldr	r3, [pc, #56]	; (15f04 <sleeping_thread_remove+0x68>)
   15eca:	605a      	str	r2, [r3, #4]
}
   15ecc:	e00c      	b.n	15ee8 <sleeping_thread_remove+0x4c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15ece:	461a      	mov	r2, r3
   15ed0:	681b      	ldr	r3, [r3, #0]
   15ed2:	b15b      	cbz	r3, 15eec <sleeping_thread_remove+0x50>
   15ed4:	4298      	cmp	r0, r3
   15ed6:	d1fa      	bne.n	15ece <sleeping_thread_remove+0x32>
Z_GENLIST_REMOVE(slist, snode)
   15ed8:	2a00      	cmp	r2, #0
   15eda:	d0ec      	beq.n	15eb6 <sleeping_thread_remove+0x1a>
	return node->next;
   15edc:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   15ede:	6013      	str	r3, [r2, #0]
	return list->tail;
   15ee0:	4b08      	ldr	r3, [pc, #32]	; (15f04 <sleeping_thread_remove+0x68>)
   15ee2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15ee4:	4298      	cmp	r0, r3
   15ee6:	d0ef      	beq.n	15ec8 <sleeping_thread_remove+0x2c>
	parent->next = child;
   15ee8:	2300      	movs	r3, #0
   15eea:	6003      	str	r3, [r0, #0]
   15eec:	f007 ff66 	bl	1ddbc <z_impl_z_current_get>

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);

	entry = thread_monitor_entry_get(k_current_get());
   15ef0:	f7ff ff72 	bl	15dd8 <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   15ef4:	f7ff ff9a 	bl	15e2c <thread_monitor_entry_update>
	__asm__ volatile(
   15ef8:	f384 8811 	msr	BASEPRI, r4
   15efc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   15f00:	bd10      	pop	{r4, pc}
   15f02:	bf00      	nop
   15f04:	2000d06c 	.word	0x2000d06c

00015f08 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15f08:	4668      	mov	r0, sp
   15f0a:	f020 0107 	bic.w	r1, r0, #7
   15f0e:	468d      	mov	sp, r1
   15f10:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15f12:	4b0e      	ldr	r3, [pc, #56]	; (15f4c <rpc_proxy_irq_handler+0x44>)
   15f14:	e8d3 2fef 	ldaex	r2, [r3]
   15f18:	3201      	adds	r2, #1
   15f1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15f1e:	2900      	cmp	r1, #0
   15f20:	d1f8      	bne.n	15f14 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   15f22:	f004 f9af 	bl	1a284 <nrf_modem_application_irq_handler>
	return list->head;
   15f26:	4b0a      	ldr	r3, [pc, #40]	; (15f50 <rpc_proxy_irq_handler+0x48>)
   15f28:	681c      	ldr	r4, [r3, #0]

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15f2a:	b13c      	cbz	r4, 15f3c <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
   15f2c:	1d20      	adds	r0, r4, #4
	z_impl_k_sem_give(sem);
   15f2e:	f007 f9a1 	bl	1d274 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15f32:	2c00      	cmp	r4, #0
   15f34:	d0f9      	beq.n	15f2a <rpc_proxy_irq_handler+0x22>
	return node->next;
   15f36:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15f38:	2c00      	cmp	r4, #0
   15f3a:	d1f6      	bne.n	15f2a <rpc_proxy_irq_handler+0x22>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   15f3c:	f7fd ff02 	bl	13d44 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   15f40:	f7fd ffea 	bl	13f18 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15f44:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   15f48:	4685      	mov	sp, r0
   15f4a:	4770      	bx	lr
   15f4c:	2000d050 	.word	0x2000d050
   15f50:	2000d06c 	.word	0x2000d06c

00015f54 <nrf_modem_os_sem_init>:
{
   15f54:	b510      	push	{r4, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   15f56:	6803      	ldr	r3, [r0, #0]
   15f58:	b12b      	cbz	r3, 15f66 <nrf_modem_os_sem_init+0x12>
   15f5a:	4c0b      	ldr	r4, [pc, #44]	; (15f88 <nrf_modem_os_sem_init+0x34>)
   15f5c:	42a3      	cmp	r3, r4
   15f5e:	d302      	bcc.n	15f66 <nrf_modem_os_sem_init+0x12>
   15f60:	3448      	adds	r4, #72	; 0x48
   15f62:	42a3      	cmp	r3, r4
   15f64:	d30b      	bcc.n	15f7e <nrf_modem_os_sem_init+0x2a>
	*sem = &nrf_modem_os_sems[used++];
   15f66:	4c09      	ldr	r4, [pc, #36]	; (15f8c <nrf_modem_os_sem_init+0x38>)
   15f68:	7823      	ldrb	r3, [r4, #0]
   15f6a:	f103 0c01 	add.w	ip, r3, #1
   15f6e:	f884 c000 	strb.w	ip, [r4]
   15f72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15f76:	4c04      	ldr	r4, [pc, #16]	; (15f88 <nrf_modem_os_sem_init+0x34>)
   15f78:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   15f7c:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   15f7e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15f80:	f00e f99c 	bl	242bc <z_impl_k_sem_init>
}
   15f84:	bd10      	pop	{r4, pc}
   15f86:	bf00      	nop
   15f88:	2000d008 	.word	0x2000d008
   15f8c:	2000d56f 	.word	0x2000d56f

00015f90 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f90:	4b02      	ldr	r3, [pc, #8]	; (15f9c <nrf_modem_os_application_irq_set+0xc>)
   15f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15f96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15f9a:	4770      	bx	lr
   15f9c:	e000e100 	.word	0xe000e100

00015fa0 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fa0:	4b02      	ldr	r3, [pc, #8]	; (15fac <nrf_modem_os_application_irq_clear+0xc>)
   15fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15fa6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15faa:	4770      	bx	lr
   15fac:	e000e100 	.word	0xe000e100

00015fb0 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fb0:	4b02      	ldr	r3, [pc, #8]	; (15fbc <nrf_modem_os_trace_irq_set+0xc>)
   15fb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15fb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15fba:	4770      	bx	lr
   15fbc:	e000e100 	.word	0xe000e100

00015fc0 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fc0:	4b02      	ldr	r3, [pc, #8]	; (15fcc <nrf_modem_os_trace_irq_clear+0xc>)
   15fc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15fca:	4770      	bx	lr
   15fcc:	e000e100 	.word	0xe000e100

00015fd0 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   15fd0:	b508      	push	{r3, lr}
   15fd2:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   15fd4:	2200      	movs	r2, #0
   15fd6:	2300      	movs	r3, #0
   15fd8:	4801      	ldr	r0, [pc, #4]	; (15fe0 <nrf_modem_os_alloc+0x10>)
   15fda:	f00d fffd 	bl	23fd8 <k_heap_alloc>
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   15fde:	bd08      	pop	{r3, pc}
   15fe0:	2000c6c8 	.word	0x2000c6c8

00015fe4 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   15fe4:	b508      	push	{r3, lr}
   15fe6:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   15fe8:	4801      	ldr	r0, [pc, #4]	; (15ff0 <nrf_modem_os_free+0xc>)
   15fea:	f00e f800 	bl	23fee <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   15fee:	bd08      	pop	{r3, pc}
   15ff0:	2000c6c8 	.word	0x2000c6c8

00015ff4 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   15ff4:	b508      	push	{r3, lr}
   15ff6:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   15ff8:	2200      	movs	r2, #0
   15ffa:	2300      	movs	r3, #0
   15ffc:	4801      	ldr	r0, [pc, #4]	; (16004 <nrf_modem_os_shm_tx_alloc+0x10>)
   15ffe:	f00d ffeb 	bl	23fd8 <k_heap_alloc>
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   16002:	bd08      	pop	{r3, pc}
   16004:	2000d058 	.word	0x2000d058

00016008 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   16008:	b508      	push	{r3, lr}
   1600a:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   1600c:	4801      	ldr	r0, [pc, #4]	; (16014 <nrf_modem_os_shm_tx_free+0xc>)
   1600e:	f00d ffee 	bl	23fee <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   16012:	bd08      	pop	{r3, pc}
   16014:	2000d058 	.word	0x2000d058

00016018 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   16018:	b510      	push	{r4, lr}
	list->head = NULL;
   1601a:	4b0c      	ldr	r3, [pc, #48]	; (1604c <nrf_modem_os_init+0x34>)
   1601c:	2400      	movs	r4, #0
   1601e:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   16020:	605c      	str	r4, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16022:	4b0b      	ldr	r3, [pc, #44]	; (16050 <nrf_modem_os_init+0x38>)
   16024:	e8d3 2fef 	ldaex	r2, [r3]
   16028:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1602c:	2900      	cmp	r1, #0
   1602e:	d1f9      	bne.n	16024 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16030:	f00c f929 	bl	22286 <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   16034:	4b07      	ldr	r3, [pc, #28]	; (16054 <nrf_modem_os_init+0x3c>)
   16036:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   16038:	4b07      	ldr	r3, [pc, #28]	; (16058 <nrf_modem_os_init+0x40>)
   1603a:	601c      	str	r4, [r3, #0]

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   1603c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16040:	4906      	ldr	r1, [pc, #24]	; (1605c <nrf_modem_os_init+0x44>)
   16042:	4807      	ldr	r0, [pc, #28]	; (16060 <nrf_modem_os_init+0x48>)
   16044:	f00d ff77 	bl	23f36 <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   16048:	bd10      	pop	{r4, pc}
   1604a:	bf00      	nop
   1604c:	2000d06c 	.word	0x2000d06c
   16050:	2000d050 	.word	0x2000d050
   16054:	2000d004 	.word	0x2000d004
   16058:	2000d054 	.word	0x2000d054
   1605c:	200084e8 	.word	0x200084e8
   16060:	2000d058 	.word	0x2000d058

00016064 <nrf91_socket_is_supported>:
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
}

static bool nrf91_socket_is_supported(int family, int type, int proto)
{
	if (offload_disabled) {
   16064:	4b0c      	ldr	r3, [pc, #48]	; (16098 <nrf91_socket_is_supported+0x34>)
   16066:	7818      	ldrb	r0, [r3, #0]
   16068:	b990      	cbnz	r0, 16090 <nrf91_socket_is_supported+0x2c>
		return false;
	}

	if (tls_offload_disabled && proto_is_secure(proto)) {
   1606a:	4b0c      	ldr	r3, [pc, #48]	; (1609c <nrf91_socket_is_supported+0x38>)
   1606c:	781b      	ldrb	r3, [r3, #0]
   1606e:	b18b      	cbz	r3, 16094 <nrf91_socket_is_supported+0x30>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   16070:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   16074:	2902      	cmp	r1, #2
   16076:	d907      	bls.n	16088 <nrf91_socket_is_supported+0x24>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   16078:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1607c:	2a01      	cmp	r2, #1
   1607e:	d901      	bls.n	16084 <nrf91_socket_is_supported+0x20>
   16080:	2200      	movs	r2, #0
   16082:	e002      	b.n	1608a <nrf91_socket_is_supported+0x26>
   16084:	2201      	movs	r2, #1
   16086:	e000      	b.n	1608a <nrf91_socket_is_supported+0x26>
   16088:	2201      	movs	r2, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1608a:	b922      	cbnz	r2, 16096 <nrf91_socket_is_supported+0x32>
		return false;
	}

	return true;
   1608c:	4618      	mov	r0, r3
   1608e:	4770      	bx	lr
		return false;
   16090:	2000      	movs	r0, #0
   16092:	4770      	bx	lr
	return true;
   16094:	2001      	movs	r0, #1
}
   16096:	4770      	bx	lr
   16098:	2000d570 	.word	0x2000d570
   1609c:	2000d571 	.word	0x2000d571

000160a0 <nrf91_nrf_modem_lib_socket_offload_init>:

static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   160a0:	2300      	movs	r3, #0
   160a2:	e005      	b.n	160b0 <nrf91_nrf_modem_lib_socket_offload_init+0x10>
		offload_ctx[i].nrf_fd = -1;
   160a4:	4a04      	ldr	r2, [pc, #16]	; (160b8 <nrf91_nrf_modem_lib_socket_offload_init+0x18>)
   160a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   160aa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   160ae:	3301      	adds	r3, #1
   160b0:	2b07      	cmp	r3, #7
   160b2:	ddf7      	ble.n	160a4 <nrf91_nrf_modem_lib_socket_offload_init+0x4>
	}

	return 0;
}
   160b4:	2000      	movs	r0, #0
   160b6:	4770      	bx	lr
   160b8:	2000d148 	.word	0x2000d148

000160bc <release_ctx>:
{
   160bc:	b538      	push	{r3, r4, r5, lr}
   160be:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   160c0:	4d08      	ldr	r5, [pc, #32]	; (160e4 <release_ctx+0x28>)
   160c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160ca:	4628      	mov	r0, r5
   160cc:	f006 ffca 	bl	1d064 <z_impl_k_mutex_lock>
	ctx->nrf_fd = -1;
   160d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160d4:	6023      	str	r3, [r4, #0]
	ctx->lock = NULL;
   160d6:	2300      	movs	r3, #0
   160d8:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   160da:	4628      	mov	r0, r5
   160dc:	f007 f84c 	bl	1d178 <z_impl_k_mutex_unlock>
}
   160e0:	bd38      	pop	{r3, r4, r5, pc}
   160e2:	bf00      	nop
   160e4:	2000c6f0 	.word	0x2000c6f0

000160e8 <allocate_ctx>:
{
   160e8:	b538      	push	{r3, r4, r5, lr}
   160ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   160ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160f4:	480c      	ldr	r0, [pc, #48]	; (16128 <allocate_ctx+0x40>)
   160f6:	f006 ffb5 	bl	1d064 <z_impl_k_mutex_lock>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   160fa:	2300      	movs	r3, #0
   160fc:	2b07      	cmp	r3, #7
   160fe:	dc0d      	bgt.n	1611c <allocate_ctx+0x34>
		if (offload_ctx[i].nrf_fd == -1) {
   16100:	4a0a      	ldr	r2, [pc, #40]	; (1612c <allocate_ctx+0x44>)
   16102:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   16106:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1610a:	d001      	beq.n	16110 <allocate_ctx+0x28>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1610c:	3301      	adds	r3, #1
   1610e:	e7f5      	b.n	160fc <allocate_ctx+0x14>
			ctx = &offload_ctx[i];
   16110:	4a06      	ldr	r2, [pc, #24]	; (1612c <allocate_ctx+0x44>)
   16112:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   16116:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
			break;
   1611a:	e000      	b.n	1611e <allocate_ctx+0x36>
	struct nrf_sock_ctx *ctx = NULL;
   1611c:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   1611e:	4802      	ldr	r0, [pc, #8]	; (16128 <allocate_ctx+0x40>)
   16120:	f007 f82a 	bl	1d178 <z_impl_k_mutex_unlock>
}
   16124:	4628      	mov	r0, r5
   16126:	bd38      	pop	{r3, r4, r5, pc}
   16128:	2000c6f0 	.word	0x2000c6f0
   1612c:	2000d148 	.word	0x2000d148

00016130 <nrf91_socket_offload_sendmsg>:
{
   16130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16134:	b083      	sub	sp, #12
	if (msg == NULL) {
   16136:	b129      	cbz	r1, 16144 <nrf91_socket_offload_sendmsg+0x14>
   16138:	4681      	mov	r9, r0
   1613a:	4692      	mov	sl, r2
   1613c:	460d      	mov	r5, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1613e:	2100      	movs	r1, #0
	ssize_t len = 0;
   16140:	460a      	mov	r2, r1
   16142:	e00c      	b.n	1615e <nrf91_socket_offload_sendmsg+0x2e>
		errno = EINVAL;
   16144:	f00a fc0b 	bl	2095e <__errno>
   16148:	2316      	movs	r3, #22
   1614a:	6003      	str	r3, [r0, #0]
		return -1;
   1614c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16150:	e043      	b.n	161da <nrf91_socket_offload_sendmsg+0xaa>
		len += msg->msg_iov[i].iov_len;
   16152:	68ab      	ldr	r3, [r5, #8]
   16154:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   16158:	685b      	ldr	r3, [r3, #4]
   1615a:	441a      	add	r2, r3
	for (i = 0; i < msg->msg_iovlen; i++) {
   1615c:	3101      	adds	r1, #1
   1615e:	68eb      	ldr	r3, [r5, #12]
   16160:	428b      	cmp	r3, r1
   16162:	d8f6      	bhi.n	16152 <nrf91_socket_offload_sendmsg+0x22>
	if (len <= sizeof(buf)) {
   16164:	2a80      	cmp	r2, #128	; 0x80
   16166:	d903      	bls.n	16170 <nrf91_socket_offload_sendmsg+0x40>
	for (i = 0; i < msg->msg_iovlen; i++) {
   16168:	f04f 0b00 	mov.w	fp, #0
	len = 0;
   1616c:	46d8      	mov	r8, fp
   1616e:	e03a      	b.n	161e6 <nrf91_socket_offload_sendmsg+0xb6>
	return z_impl_k_mutex_lock(mutex, timeout);
   16170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16178:	482c      	ldr	r0, [pc, #176]	; (1622c <nrf91_socket_offload_sendmsg+0xfc>)
   1617a:	f006 ff73 	bl	1d064 <z_impl_k_mutex_lock>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1617e:	2400      	movs	r4, #0
		len = 0;
   16180:	4627      	mov	r7, r4
		for (i = 0; i < msg->msg_iovlen; i++) {
   16182:	e00f      	b.n	161a4 <nrf91_socket_offload_sendmsg+0x74>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   16184:	68ab      	ldr	r3, [r5, #8]
   16186:	00e6      	lsls	r6, r4, #3
   16188:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1618c:	6852      	ldr	r2, [r2, #4]
   1618e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   16192:	4827      	ldr	r0, [pc, #156]	; (16230 <nrf91_socket_offload_sendmsg+0x100>)
   16194:	4438      	add	r0, r7
   16196:	f00e fc99 	bl	24acc <memcpy>
			len += msg->msg_iov[i].iov_len;
   1619a:	68ab      	ldr	r3, [r5, #8]
   1619c:	4433      	add	r3, r6
   1619e:	685b      	ldr	r3, [r3, #4]
   161a0:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   161a2:	3401      	adds	r4, #1
   161a4:	68eb      	ldr	r3, [r5, #12]
   161a6:	42a3      	cmp	r3, r4
   161a8:	d8ec      	bhi.n	16184 <nrf91_socket_offload_sendmsg+0x54>
		offset = 0;
   161aa:	2600      	movs	r6, #0
		ret = 0;
   161ac:	4634      	mov	r4, r6
		while ((offset < len) && (ret >= 0)) {
   161ae:	42b7      	cmp	r7, r6
   161b0:	dd10      	ble.n	161d4 <nrf91_socket_offload_sendmsg+0xa4>
   161b2:	2c00      	cmp	r4, #0
   161b4:	db0e      	blt.n	161d4 <nrf91_socket_offload_sendmsg+0xa4>
				msg->msg_name, msg->msg_namelen);
   161b6:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   161b8:	686a      	ldr	r2, [r5, #4]
   161ba:	9201      	str	r2, [sp, #4]
   161bc:	9300      	str	r3, [sp, #0]
   161be:	4653      	mov	r3, sl
   161c0:	1bba      	subs	r2, r7, r6
   161c2:	491b      	ldr	r1, [pc, #108]	; (16230 <nrf91_socket_offload_sendmsg+0x100>)
   161c4:	4431      	add	r1, r6
   161c6:	4648      	mov	r0, r9
   161c8:	f00c fb06 	bl	227d8 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   161cc:	1e04      	subs	r4, r0, #0
   161ce:	ddee      	ble.n	161ae <nrf91_socket_offload_sendmsg+0x7e>
				offset += ret;
   161d0:	4426      	add	r6, r4
   161d2:	e7ec      	b.n	161ae <nrf91_socket_offload_sendmsg+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   161d4:	4815      	ldr	r0, [pc, #84]	; (1622c <nrf91_socket_offload_sendmsg+0xfc>)
   161d6:	f006 ffcf 	bl	1d178 <z_impl_k_mutex_unlock>
}
   161da:	4620      	mov	r0, r4
   161dc:	b003      	add	sp, #12
   161de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < msg->msg_iovlen; i++) {
   161e2:	f10b 0b01 	add.w	fp, fp, #1
   161e6:	68eb      	ldr	r3, [r5, #12]
   161e8:	455b      	cmp	r3, fp
   161ea:	d91d      	bls.n	16228 <nrf91_socket_offload_sendmsg+0xf8>
		if (msg->msg_iov[i].iov_len == 0) {
   161ec:	68ab      	ldr	r3, [r5, #8]
   161ee:	ea4f 07cb 	mov.w	r7, fp, lsl #3
   161f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   161f6:	685b      	ldr	r3, [r3, #4]
   161f8:	2b00      	cmp	r3, #0
   161fa:	d0f2      	beq.n	161e2 <nrf91_socket_offload_sendmsg+0xb2>
		offset = 0;
   161fc:	2600      	movs	r6, #0
		while (offset < msg->msg_iov[i].iov_len) {
   161fe:	68ab      	ldr	r3, [r5, #8]
   16200:	19da      	adds	r2, r3, r7
   16202:	6852      	ldr	r2, [r2, #4]
   16204:	42b2      	cmp	r2, r6
   16206:	d9ec      	bls.n	161e2 <nrf91_socket_offload_sendmsg+0xb2>
				(((uint8_t *) msg->msg_iov[i].iov_base) + offset),
   16208:	59d9      	ldr	r1, [r3, r7]
				msg->msg_name, msg->msg_namelen);
   1620a:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   1620c:	6868      	ldr	r0, [r5, #4]
   1620e:	9001      	str	r0, [sp, #4]
   16210:	9300      	str	r3, [sp, #0]
   16212:	4653      	mov	r3, sl
   16214:	1b92      	subs	r2, r2, r6
   16216:	4431      	add	r1, r6
   16218:	4648      	mov	r0, r9
   1621a:	f00c fadd 	bl	227d8 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1621e:	1e04      	subs	r4, r0, #0
   16220:	dbdb      	blt.n	161da <nrf91_socket_offload_sendmsg+0xaa>
			offset += ret;
   16222:	4426      	add	r6, r4
			len += ret;
   16224:	44a0      	add	r8, r4
   16226:	e7ea      	b.n	161fe <nrf91_socket_offload_sendmsg+0xce>
	return len;
   16228:	4644      	mov	r4, r8
   1622a:	e7d6      	b.n	161da <nrf91_socket_offload_sendmsg+0xaa>
   1622c:	2000c754 	.word	0x2000c754
   16230:	2000d0c4 	.word	0x2000d0c4

00016234 <nrf91_socket_offload_accept>:
{
   16234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16238:	b08b      	sub	sp, #44	; 0x2c
   1623a:	4606      	mov	r6, r0
   1623c:	460c      	mov	r4, r1
   1623e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   16240:	f7fb fd88 	bl	11d54 <z_reserve_fd>
   16244:	4605      	mov	r5, r0
	int sd = OBJ_TO_SD(obj);
   16246:	6830      	ldr	r0, [r6, #0]
	if (fd < 0) {
   16248:	2d00      	cmp	r5, #0
   1624a:	db57      	blt.n	162fc <nrf91_socket_offload_accept+0xc8>
	if ((addr != NULL) && (addrlen != NULL)) {
   1624c:	b37c      	cbz	r4, 162ae <nrf91_socket_offload_accept+0x7a>
   1624e:	b38f      	cbz	r7, 162b4 <nrf91_socket_offload_accept+0x80>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   16250:	683b      	ldr	r3, [r7, #0]
   16252:	2b08      	cmp	r3, #8
   16254:	d025      	beq.n	162a2 <nrf91_socket_offload_accept+0x6e>
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   16256:	2324      	movs	r3, #36	; 0x24
   16258:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1625a:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1625c:	f10d 0804 	add.w	r8, sp, #4
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   16260:	4641      	mov	r1, r8
   16262:	f00d fdc8 	bl	23df6 <nrf_accept>
	if (new_sd < 0) {
   16266:	1e06      	subs	r6, r0, #0
   16268:	db33      	blt.n	162d2 <nrf91_socket_offload_accept+0x9e>
	ctx = allocate_ctx(new_sd);
   1626a:	4630      	mov	r0, r6
   1626c:	f7ff ff3c 	bl	160e8 <allocate_ctx>
	if (ctx == NULL) {
   16270:	4681      	mov	r9, r0
   16272:	b310      	cbz	r0, 162ba <nrf91_socket_offload_accept+0x86>
	if ((addr != NULL) && (addrlen != NULL)) {
   16274:	b164      	cbz	r4, 16290 <nrf91_socket_offload_accept+0x5c>
   16276:	b15f      	cbz	r7, 16290 <nrf91_socket_offload_accept+0x5c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   16278:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1627c:	2b02      	cmp	r3, #2
   1627e:	d021      	beq.n	162c4 <nrf91_socket_offload_accept+0x90>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   16280:	2b0a      	cmp	r3, #10
   16282:	d128      	bne.n	162d6 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in6);
   16284:	2318      	movs	r3, #24
   16286:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv6(
   16288:	a901      	add	r1, sp, #4
   1628a:	4620      	mov	r0, r4
   1628c:	f00c f978 	bl	22580 <nrf_to_z_ipv6>
	z_finalize_fd(fd, ctx,
   16290:	4a1c      	ldr	r2, [pc, #112]	; (16304 <nrf91_socket_offload_accept+0xd0>)
   16292:	4649      	mov	r1, r9
   16294:	4628      	mov	r0, r5
   16296:	f7fb fd83 	bl	11da0 <z_finalize_fd>
}
   1629a:	4628      	mov	r0, r5
   1629c:	b00b      	add	sp, #44	; 0x2c
   1629e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   162a2:	2310      	movs	r3, #16
   162a4:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   162a6:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   162a8:	f10d 0804 	add.w	r8, sp, #4
   162ac:	e7d8      	b.n	16260 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   162ae:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   162b0:	46a0      	mov	r8, r4
   162b2:	e7d5      	b.n	16260 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   162b4:	463a      	mov	r2, r7
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   162b6:	46b8      	mov	r8, r7
   162b8:	e7d2      	b.n	16260 <nrf91_socket_offload_accept+0x2c>
		errno = ENOMEM;
   162ba:	f00a fb50 	bl	2095e <__errno>
   162be:	230c      	movs	r3, #12
   162c0:	6003      	str	r3, [r0, #0]
		goto error;
   162c2:	e008      	b.n	162d6 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   162c4:	2308      	movs	r3, #8
   162c6:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv4(
   162c8:	a901      	add	r1, sp, #4
   162ca:	4620      	mov	r0, r4
   162cc:	f00b fff0 	bl	222b0 <nrf_to_z_ipv4>
   162d0:	e7de      	b.n	16290 <nrf91_socket_offload_accept+0x5c>
	struct nrf_sock_ctx *ctx = NULL;
   162d2:	f04f 0900 	mov.w	r9, #0
	if (new_sd != -1) {
   162d6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   162da:	d10b      	bne.n	162f4 <nrf91_socket_offload_accept+0xc0>
	if (ctx != NULL) {
   162dc:	f1b9 0f00 	cmp.w	r9, #0
   162e0:	d002      	beq.n	162e8 <nrf91_socket_offload_accept+0xb4>
		release_ctx(ctx);
   162e2:	4648      	mov	r0, r9
   162e4:	f7ff feea 	bl	160bc <release_ctx>
	z_free_fd(fd);
   162e8:	4628      	mov	r0, r5
   162ea:	f009 fabb 	bl	1f864 <z_free_fd>
	return -1;
   162ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   162f2:	e7d2      	b.n	1629a <nrf91_socket_offload_accept+0x66>
		nrf_close(new_sd);
   162f4:	4630      	mov	r0, r6
   162f6:	f00d fd1b 	bl	23d30 <nrf_close>
   162fa:	e7ef      	b.n	162dc <nrf91_socket_offload_accept+0xa8>
		return -1;
   162fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16300:	e7cb      	b.n	1629a <nrf91_socket_offload_accept+0x66>
   16302:	bf00      	nop
   16304:	00026138 	.word	0x00026138

00016308 <nrf91_socket_offload_poll>:
{
   16308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1630c:	b091      	sub	sp, #68	; 0x44
   1630e:	4606      	mov	r6, r0
   16310:	460f      	mov	r7, r1
   16312:	4691      	mov	r9, r2
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   16314:	2240      	movs	r2, #64	; 0x40
   16316:	2100      	movs	r1, #0
   16318:	4668      	mov	r0, sp
   1631a:	f00e fbe4 	bl	24ae6 <memset>
	for (int i = 0; i < nfds; i++) {
   1631e:	2400      	movs	r4, #0
	int retval = 0;
   16320:	46a0      	mov	r8, r4
	for (int i = 0; i < nfds; i++) {
   16322:	e005      	b.n	16330 <nrf91_socket_offload_poll+0x28>
			tmp[i].fd = fds[i].fd;
   16324:	ab10      	add	r3, sp, #64	; 0x40
   16326:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1632a:	f843 0c40 	str.w	r0, [r3, #-64]
	for (int i = 0; i < nfds; i++) {
   1632e:	3401      	adds	r4, #1
   16330:	42bc      	cmp	r4, r7
   16332:	da3b      	bge.n	163ac <nrf91_socket_offload_poll+0xa4>
		tmp[i].events = 0;
   16334:	f04f 0c00 	mov.w	ip, #0
   16338:	ab10      	add	r3, sp, #64	; 0x40
   1633a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1633e:	f823 cc3c 	strh.w	ip, [r3, #-60]
		fds[i].revents = 0;
   16342:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
   16346:	f8a5 c006 	strh.w	ip, [r5, #6]
		if (fds[i].fd < 0) {
   1634a:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   1634e:	4560      	cmp	r0, ip
   16350:	dbe8      	blt.n	16324 <nrf91_socket_offload_poll+0x1c>
			obj = z_get_fd_obj(fds[i].fd,
   16352:	2286      	movs	r2, #134	; 0x86
   16354:	4940      	ldr	r1, [pc, #256]	; (16458 <nrf91_socket_offload_poll+0x150>)
   16356:	f7fb fcc3 	bl	11ce0 <z_get_fd_obj>
			if (obj != NULL) {
   1635a:	b310      	cbz	r0, 163a2 <nrf91_socket_offload_poll+0x9a>
				tmp[i].fd = OBJ_TO_SD(obj);
   1635c:	6802      	ldr	r2, [r0, #0]
   1635e:	ab10      	add	r3, sp, #64	; 0x40
   16360:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16364:	f843 2c40 	str.w	r2, [r3, #-64]
		if (fds[i].events & POLLIN) {
   16368:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   1636c:	f013 0f01 	tst.w	r3, #1
   16370:	d008      	beq.n	16384 <nrf91_socket_offload_poll+0x7c>
			tmp[i].events |= NRF_POLLIN;
   16372:	ab10      	add	r3, sp, #64	; 0x40
   16374:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16378:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   1637c:	f043 0301 	orr.w	r3, r3, #1
   16380:	f822 3c3c 	strh.w	r3, [r2, #-60]
		if (fds[i].events & POLLOUT) {
   16384:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   16388:	f013 0f04 	tst.w	r3, #4
   1638c:	d0cf      	beq.n	1632e <nrf91_socket_offload_poll+0x26>
			tmp[i].events |= NRF_POLLOUT;
   1638e:	ab10      	add	r3, sp, #64	; 0x40
   16390:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   16394:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   16398:	f043 0302 	orr.w	r3, r3, #2
   1639c:	f822 3c3c 	strh.w	r3, [r2, #-60]
   163a0:	e7c5      	b.n	1632e <nrf91_socket_offload_poll+0x26>
				fds[i].revents = POLLNVAL;
   163a2:	2320      	movs	r3, #32
   163a4:	80eb      	strh	r3, [r5, #6]
				retval++;
   163a6:	f108 0801 	add.w	r8, r8, #1
   163aa:	e7dd      	b.n	16368 <nrf91_socket_offload_poll+0x60>
	if (retval > 0) {
   163ac:	f1b8 0f00 	cmp.w	r8, #0
   163b0:	dd03      	ble.n	163ba <nrf91_socket_offload_poll+0xb2>
}
   163b2:	4640      	mov	r0, r8
   163b4:	b011      	add	sp, #68	; 0x44
   163b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   163ba:	464a      	mov	r2, r9
   163bc:	4639      	mov	r1, r7
   163be:	4668      	mov	r0, sp
   163c0:	f00d fd79 	bl	23eb6 <nrf_poll>
   163c4:	4680      	mov	r8, r0
	for (int i = 0; i < nfds; i++) {
   163c6:	2300      	movs	r3, #0
   163c8:	e000      	b.n	163cc <nrf91_socket_offload_poll+0xc4>
   163ca:	3301      	adds	r3, #1
   163cc:	42bb      	cmp	r3, r7
   163ce:	daf0      	bge.n	163b2 <nrf91_socket_offload_poll+0xaa>
		if (fds[i].fd < 0) {
   163d0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   163d4:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   163d8:	2900      	cmp	r1, #0
   163da:	dbf6      	blt.n	163ca <nrf91_socket_offload_poll+0xc2>
		if (tmp[i].revents & NRF_POLLIN) {
   163dc:	a910      	add	r1, sp, #64	; 0x40
   163de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   163e2:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   163e6:	f011 0f01 	tst.w	r1, #1
   163ea:	d003      	beq.n	163f4 <nrf91_socket_offload_poll+0xec>
			fds[i].revents |= POLLIN;
   163ec:	88d1      	ldrh	r1, [r2, #6]
   163ee:	f041 0101 	orr.w	r1, r1, #1
   163f2:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   163f4:	a910      	add	r1, sp, #64	; 0x40
   163f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   163fa:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   163fe:	f011 0f02 	tst.w	r1, #2
   16402:	d003      	beq.n	1640c <nrf91_socket_offload_poll+0x104>
			fds[i].revents |= POLLOUT;
   16404:	88d1      	ldrh	r1, [r2, #6]
   16406:	f041 0104 	orr.w	r1, r1, #4
   1640a:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1640c:	a910      	add	r1, sp, #64	; 0x40
   1640e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16412:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16416:	f011 0f04 	tst.w	r1, #4
   1641a:	d003      	beq.n	16424 <nrf91_socket_offload_poll+0x11c>
			fds[i].revents |= POLLERR;
   1641c:	88d1      	ldrh	r1, [r2, #6]
   1641e:	f041 0108 	orr.w	r1, r1, #8
   16422:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   16424:	a910      	add	r1, sp, #64	; 0x40
   16426:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1642a:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   1642e:	f011 0f10 	tst.w	r1, #16
   16432:	d003      	beq.n	1643c <nrf91_socket_offload_poll+0x134>
			fds[i].revents |= POLLNVAL;
   16434:	88d1      	ldrh	r1, [r2, #6]
   16436:	f041 0120 	orr.w	r1, r1, #32
   1643a:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1643c:	a910      	add	r1, sp, #64	; 0x40
   1643e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16442:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   16446:	f011 0f08 	tst.w	r1, #8
   1644a:	d0be      	beq.n	163ca <nrf91_socket_offload_poll+0xc2>
			fds[i].revents |= POLLHUP;
   1644c:	88d1      	ldrh	r1, [r2, #6]
   1644e:	f041 0110 	orr.w	r1, r1, #16
   16452:	80d1      	strh	r1, [r2, #6]
   16454:	e7b9      	b.n	163ca <nrf91_socket_offload_poll+0xc2>
   16456:	bf00      	nop
   16458:	00026138 	.word	0x00026138

0001645c <nrf91_socket_create>:
{
   1645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1645e:	4606      	mov	r6, r0
   16460:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   16462:	1e0c      	subs	r4, r1, #0
   16464:	db18      	blt.n	16498 <nrf91_socket_create+0x3c>
	} else if (type & SOCK_NATIVE_TLS) {
   16466:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
   1646a:	d11b      	bne.n	164a4 <nrf91_socket_create+0x48>
	fd = z_reserve_fd();
   1646c:	f7fb fc72 	bl	11d54 <z_reserve_fd>
	if (fd < 0) {
   16470:	1e05      	subs	r5, r0, #0
   16472:	db30      	blt.n	164d6 <nrf91_socket_create+0x7a>
	sd = nrf91_socket_offload_socket(family, type, proto);
   16474:	463a      	mov	r2, r7
   16476:	4621      	mov	r1, r4
   16478:	4630      	mov	r0, r6
   1647a:	f00c fac6 	bl	22a0a <nrf91_socket_offload_socket>
	if (sd < 0) {
   1647e:	1e04      	subs	r4, r0, #0
   16480:	db16      	blt.n	164b0 <nrf91_socket_create+0x54>
	ctx = allocate_ctx(sd);
   16482:	4620      	mov	r0, r4
   16484:	f7ff fe30 	bl	160e8 <allocate_ctx>
	if (ctx == NULL) {
   16488:	4601      	mov	r1, r0
   1648a:	b1b8      	cbz	r0, 164bc <nrf91_socket_create+0x60>
	z_finalize_fd(fd, ctx,
   1648c:	4a13      	ldr	r2, [pc, #76]	; (164dc <nrf91_socket_create+0x80>)
   1648e:	4628      	mov	r0, r5
   16490:	f7fb fc86 	bl	11da0 <z_finalize_fd>
}
   16494:	4628      	mov	r0, r5
   16496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return native_socket(family, type, proto, &offload_disabled);
   16498:	4b11      	ldr	r3, [pc, #68]	; (164e0 <nrf91_socket_create+0x84>)
   1649a:	4621      	mov	r1, r4
   1649c:	f00c fa9f 	bl	229de <native_socket>
   164a0:	4605      	mov	r5, r0
   164a2:	e7f7      	b.n	16494 <nrf91_socket_create+0x38>
		return native_socket(family, type, proto, &tls_offload_disabled);
   164a4:	4b0f      	ldr	r3, [pc, #60]	; (164e4 <nrf91_socket_create+0x88>)
   164a6:	4621      	mov	r1, r4
   164a8:	f00c fa99 	bl	229de <native_socket>
   164ac:	4605      	mov	r5, r0
   164ae:	e7f1      	b.n	16494 <nrf91_socket_create+0x38>
		z_free_fd(fd);
   164b0:	4628      	mov	r0, r5
   164b2:	f009 f9d7 	bl	1f864 <z_free_fd>
		return -1;
   164b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   164ba:	e7eb      	b.n	16494 <nrf91_socket_create+0x38>
		errno = ENOMEM;
   164bc:	f00a fa4f 	bl	2095e <__errno>
   164c0:	230c      	movs	r3, #12
   164c2:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   164c4:	4620      	mov	r0, r4
   164c6:	f00d fc33 	bl	23d30 <nrf_close>
		z_free_fd(fd);
   164ca:	4628      	mov	r0, r5
   164cc:	f009 f9ca 	bl	1f864 <z_free_fd>
		return -1;
   164d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   164d4:	e7de      	b.n	16494 <nrf91_socket_create+0x38>
		return -1;
   164d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   164da:	e7db      	b.n	16494 <nrf91_socket_create+0x38>
   164dc:	00026138 	.word	0x00026138
   164e0:	2000d570 	.word	0x2000d570
   164e4:	2000d571 	.word	0x2000d571

000164e8 <nrf91_socket_iface_init>:
static struct nrf91_socket_iface_data {
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
   164e8:	b508      	push	{r3, lr}
	nrf91_socket_iface_data.iface = iface;
   164ea:	4b04      	ldr	r3, [pc, #16]	; (164fc <nrf91_socket_iface_init+0x14>)
   164ec:	6018      	str	r0, [r3, #0]

	iface->if_dev->offloaded = true;
   164ee:	6803      	ldr	r3, [r0, #0]
   164f0:	2201      	movs	r2, #1
   164f2:	769a      	strb	r2, [r3, #26]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   164f4:	4802      	ldr	r0, [pc, #8]	; (16500 <nrf91_socket_iface_init+0x18>)
   164f6:	f7fd fa4f 	bl	13998 <socket_offload_dns_register>
}
   164fa:	bd08      	pop	{r3, pc}
   164fc:	2000d144 	.word	0x2000d144
   16500:	00026130 	.word	0x00026130

00016504 <nrf91_socket_offload_getaddrinfo>:
{
   16504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16508:	b08a      	sub	sp, #40	; 0x28
   1650a:	4605      	mov	r5, r0
   1650c:	460e      	mov	r6, r1
   1650e:	4614      	mov	r4, r2
   16510:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   16512:	2100      	movs	r1, #0
   16514:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   16516:	2220      	movs	r2, #32
   16518:	a802      	add	r0, sp, #8
   1651a:	f00e fae4 	bl	24ae6 <memset>
	if (hints != NULL) {
   1651e:	b154      	cbz	r4, 16536 <nrf91_socket_offload_getaddrinfo+0x32>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   16520:	a902      	add	r1, sp, #8
   16522:	4620      	mov	r0, r4
   16524:	f00c faea 	bl	22afc <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   16528:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   1652c:	d059      	beq.n	165e2 <nrf91_socket_offload_getaddrinfo+0xde>
		} else if (error == -EAFNOSUPPORT) {
   1652e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   16532:	d059      	beq.n	165e8 <nrf91_socket_offload_getaddrinfo+0xe4>
		nrf_hints_ptr = &nrf_hints;
   16534:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   16536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1653a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1653e:	482c      	ldr	r0, [pc, #176]	; (165f0 <nrf91_socket_offload_getaddrinfo+0xec>)
   16540:	f006 fd90 	bl	1d064 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   16544:	ab01      	add	r3, sp, #4
   16546:	4622      	mov	r2, r4
   16548:	4631      	mov	r1, r6
   1654a:	4628      	mov	r0, r5
   1654c:	f00d fcaf 	bl	23eae <nrf_getaddrinfo>
	if (retval != 0) {
   16550:	4680      	mov	r8, r0
   16552:	b918      	cbnz	r0, 1655c <nrf91_socket_offload_getaddrinfo+0x58>
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   16554:	9c01      	ldr	r4, [sp, #4]
	*res = NULL;
   16556:	2600      	movs	r6, #0
   16558:	603e      	str	r6, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1655a:	e018      	b.n	1658e <nrf91_socket_offload_getaddrinfo+0x8a>
		error = nrf_to_z_dns_error_code(retval);
   1655c:	f00b ffd8 	bl	22510 <nrf_to_z_dns_error_code>
   16560:	4680      	mov	r8, r0
		goto error;
   16562:	e037      	b.n	165d4 <nrf91_socket_offload_getaddrinfo+0xd0>
			k_free(next_z_res);
   16564:	4628      	mov	r0, r5
   16566:	f00e fa6e 	bl	24a46 <k_free>
			retval = DNS_EAI_MEMORY;
   1656a:	f06f 0809 	mvn.w	r8, #9
   1656e:	e029      	b.n	165c4 <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   16570:	4628      	mov	r0, r5
   16572:	f00e fa68 	bl	24a46 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   16576:	f06f 0806 	mvn.w	r8, #6
   1657a:	e023      	b.n	165c4 <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   1657c:	4628      	mov	r0, r5
   1657e:	f00e fa62 	bl	24a46 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   16582:	f06f 0808 	mvn.w	r8, #8
   16586:	e01d      	b.n	165c4 <nrf91_socket_offload_getaddrinfo+0xc0>
			*res = next_z_res;
   16588:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1658a:	69e4      	ldr	r4, [r4, #28]
		latest_z_res = next_z_res;
   1658c:	462e      	mov	r6, r5
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1658e:	b1b4      	cbz	r4, 165be <nrf91_socket_offload_getaddrinfo+0xba>
					k_malloc(sizeof(struct zsock_addrinfo));
   16590:	2050      	movs	r0, #80	; 0x50
   16592:	f00e fa61 	bl	24a58 <k_malloc>
		if (next_z_res == NULL) {
   16596:	4605      	mov	r5, r0
   16598:	b178      	cbz	r0, 165ba <nrf91_socket_offload_getaddrinfo+0xb6>
		error = nrf_to_z_addrinfo(next_z_res, next_nrf_res);
   1659a:	4621      	mov	r1, r4
   1659c:	f00c fa6b 	bl	22a76 <nrf_to_z_addrinfo>
		if (error == -ENOMEM) {
   165a0:	f110 0f0c 	cmn.w	r0, #12
   165a4:	d0de      	beq.n	16564 <nrf91_socket_offload_getaddrinfo+0x60>
		} else if (error == -EPROTONOSUPPORT) {
   165a6:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   165aa:	d0e1      	beq.n	16570 <nrf91_socket_offload_getaddrinfo+0x6c>
		} else if (error == -EAFNOSUPPORT) {
   165ac:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   165b0:	d0e4      	beq.n	1657c <nrf91_socket_offload_getaddrinfo+0x78>
		if (latest_z_res == NULL) {
   165b2:	2e00      	cmp	r6, #0
   165b4:	d0e8      	beq.n	16588 <nrf91_socket_offload_getaddrinfo+0x84>
			latest_z_res->ai_next = next_z_res;
   165b6:	6035      	str	r5, [r6, #0]
   165b8:	e7e7      	b.n	1658a <nrf91_socket_offload_getaddrinfo+0x86>
			retval = DNS_EAI_MEMORY;
   165ba:	f06f 0809 	mvn.w	r8, #9
	if (retval != 0) {
   165be:	f1b8 0f00 	cmp.w	r8, #0
   165c2:	d004      	beq.n	165ce <nrf91_socket_offload_getaddrinfo+0xca>
		nrf91_socket_offload_freeaddrinfo(*res);
   165c4:	6838      	ldr	r0, [r7, #0]
   165c6:	f00c fa48 	bl	22a5a <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   165ca:	2300      	movs	r3, #0
   165cc:	603b      	str	r3, [r7, #0]
	nrf_freeaddrinfo(nrf_res);
   165ce:	9801      	ldr	r0, [sp, #4]
   165d0:	f00d fc6f 	bl	23eb2 <nrf_freeaddrinfo>
	return z_impl_k_mutex_unlock(mutex);
   165d4:	4806      	ldr	r0, [pc, #24]	; (165f0 <nrf91_socket_offload_getaddrinfo+0xec>)
   165d6:	f006 fdcf 	bl	1d178 <z_impl_k_mutex_unlock>
}
   165da:	4640      	mov	r0, r8
   165dc:	b00a      	add	sp, #40	; 0x28
   165de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return DNS_EAI_SOCKTYPE;
   165e2:	f06f 0806 	mvn.w	r8, #6
   165e6:	e7f8      	b.n	165da <nrf91_socket_offload_getaddrinfo+0xd6>
			return DNS_EAI_ADDRFAMILY;
   165e8:	f06f 0808 	mvn.w	r8, #8
   165ec:	e7f5      	b.n	165da <nrf91_socket_offload_getaddrinfo+0xd6>
   165ee:	bf00      	nop
   165f0:	2000c718 	.word	0x2000c718

000165f4 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   165f4:	b570      	push	{r4, r5, r6, lr}
   165f6:	b082      	sub	sp, #8
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165f8:	2400      	movs	r4, #0
	uint32_t ret = 0;
   165fa:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165fc:	e014      	b.n	16628 <get_buttons+0x34>
   165fe:	4b19      	ldr	r3, [pc, #100]	; (16664 <get_buttons+0x70>)
   16600:	4a19      	ldr	r2, [pc, #100]	; (16668 <get_buttons+0x74>)
   16602:	1a9b      	subs	r3, r3, r2
   16604:	08db      	lsrs	r3, r3, #3
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   16606:	f04f 0100 	mov.w	r1, #0
   1660a:	2201      	movs	r2, #1
   1660c:	f362 0102 	bfi	r1, r2, #0, #3
   16610:	f36f 01c5 	bfc	r1, #3, #3
   16614:	f363 118f 	bfi	r1, r3, #6, #10
   16618:	4814      	ldr	r0, [pc, #80]	; (1666c <get_buttons+0x78>)
   1661a:	f7fc fca1 	bl	12f60 <log_0>
			return 0;
   1661e:	2500      	movs	r5, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   16620:	4628      	mov	r0, r5
   16622:	b002      	add	sp, #8
   16624:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16626:	3401      	adds	r4, #1
   16628:	2c03      	cmp	r4, #3
   1662a:	d8f9      	bhi.n	16620 <get_buttons+0x2c>
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1662c:	4b10      	ldr	r3, [pc, #64]	; (16670 <get_buttons+0x7c>)
   1662e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16632:	4b10      	ldr	r3, [pc, #64]	; (16674 <get_buttons+0x80>)
   16634:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16638:	791e      	ldrb	r6, [r3, #4]
				gpio_port_value_t *value);

static inline int z_impl_gpio_port_get_raw(const struct device *port,
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
   1663a:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
   1663c:	685b      	ldr	r3, [r3, #4]
   1663e:	a901      	add	r1, sp, #4
   16640:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
   16642:	4603      	mov	r3, r0
   16644:	b930      	cbnz	r0, 16654 <get_buttons+0x60>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   16646:	2301      	movs	r3, #1
   16648:	40b3      	lsls	r3, r6
   1664a:	9a01      	ldr	r2, [sp, #4]
   1664c:	4213      	tst	r3, r2
   1664e:	bf14      	ite	ne
   16650:	2301      	movne	r3, #1
   16652:	2300      	moveq	r3, #0
		if (val < 0) {
   16654:	2b00      	cmp	r3, #0
   16656:	dbd2      	blt.n	165fe <get_buttons+0xa>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   16658:	2b00      	cmp	r3, #0
   1665a:	d1e4      	bne.n	16626 <get_buttons+0x32>
			ret |= 1U << i;
   1665c:	2301      	movs	r3, #1
   1665e:	40a3      	lsls	r3, r4
   16660:	431d      	orrs	r5, r3
   16662:	e7e0      	b.n	16626 <get_buttons+0x32>
   16664:	000252fc 	.word	0x000252fc
   16668:	000252ec 	.word	0x000252ec
   1666c:	00026170 	.word	0x00026170
   16670:	2000d188 	.word	0x2000d188
   16674:	00026238 	.word	0x00026238

00016678 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   16678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1667a:	4606      	mov	r6, r0
   1667c:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   1667e:	4b11      	ldr	r3, [pc, #68]	; (166c4 <button_handlers_call+0x4c>)
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	b103      	cbz	r3, 16686 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   16684:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1668a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1668e:	480e      	ldr	r0, [pc, #56]	; (166c8 <button_handlers_call+0x50>)
   16690:	f006 fce8 	bl	1d064 <z_impl_k_mutex_lock>
	return list->head;
   16694:	4b0d      	ldr	r3, [pc, #52]	; (166cc <button_handlers_call+0x54>)
   16696:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16698:	b114      	cbz	r4, 166a0 <button_handlers_call+0x28>
   1669a:	3c04      	subs	r4, #4
   1669c:	e000      	b.n	166a0 <button_handlers_call+0x28>
   1669e:	462c      	mov	r4, r5
   166a0:	b15c      	cbz	r4, 166ba <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
   166a2:	4625      	mov	r5, r4
   166a4:	f855 3b04 	ldr.w	r3, [r5], #4
   166a8:	4639      	mov	r1, r7
   166aa:	4630      	mov	r0, r6
   166ac:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   166ae:	2d00      	cmp	r5, #0
   166b0:	d0f5      	beq.n	1669e <button_handlers_call+0x26>
	return node->next;
   166b2:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   166b4:	b10c      	cbz	r4, 166ba <button_handlers_call+0x42>
   166b6:	3c04      	subs	r4, #4
   166b8:	e7f2      	b.n	166a0 <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   166ba:	4803      	ldr	r0, [pc, #12]	; (166c8 <button_handlers_call+0x50>)
   166bc:	f006 fd5c 	bl	1d178 <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   166c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166c2:	bf00      	nop
   166c4:	2000d198 	.word	0x2000d198
   166c8:	2000d19c 	.word	0x2000d19c
   166cc:	2000d1b0 	.word	0x2000d1b0

000166d0 <callback_ctrl>:
{
   166d0:	b570      	push	{r4, r5, r6, lr}
   166d2:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   166d4:	2400      	movs	r4, #0
	int err = 0;
   166d6:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   166d8:	e00d      	b.n	166f6 <callback_ctrl+0x26>
			err = gpio_pin_interrupt_configure(button_devs[i],
   166da:	4b11      	ldr	r3, [pc, #68]	; (16720 <callback_ctrl+0x50>)
   166dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   166e0:	4b10      	ldr	r3, [pc, #64]	; (16724 <callback_ctrl+0x54>)
   166e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   166e6:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   166e8:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   166ea:	699e      	ldr	r6, [r3, #24]
   166ec:	2300      	movs	r3, #0
   166ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   166f2:	47b0      	blx	r6
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   166f4:	3401      	adds	r4, #1
   166f6:	2c03      	cmp	r4, #3
   166f8:	d811      	bhi.n	1671e <callback_ctrl+0x4e>
   166fa:	b980      	cbnz	r0, 1671e <callback_ctrl+0x4e>
		if (enable) {
   166fc:	2d00      	cmp	r5, #0
   166fe:	d0ec      	beq.n	166da <callback_ctrl+0xa>
			err = gpio_pin_interrupt_configure(button_devs[i],
   16700:	4b07      	ldr	r3, [pc, #28]	; (16720 <callback_ctrl+0x50>)
   16702:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16706:	4b07      	ldr	r3, [pc, #28]	; (16724 <callback_ctrl+0x54>)
   16708:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1670c:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1670e:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   16710:	699e      	ldr	r6, [r3, #24]
   16712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   16716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1671a:	47b0      	blx	r6
   1671c:	e7ea      	b.n	166f4 <callback_ctrl+0x24>
}
   1671e:	bd70      	pop	{r4, r5, r6, pc}
   16720:	2000d188 	.word	0x2000d188
   16724:	00026238 	.word	0x00026238

00016728 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   16728:	b510      	push	{r4, lr}
	__asm__ volatile(
   1672a:	f04f 0320 	mov.w	r3, #32
   1672e:	f3ef 8411 	mrs	r4, BASEPRI
   16732:	f383 8812 	msr	BASEPRI_MAX, r3
   16736:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1673a:	2000      	movs	r0, #0
   1673c:	f7ff ffc8 	bl	166d0 <callback_ctrl>

	if (err) {
   16740:	b938      	cbnz	r0, 16752 <button_pressed+0x2a>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   16742:	4b11      	ldr	r3, [pc, #68]	; (16788 <button_pressed+0x60>)
   16744:	781b      	ldrb	r3, [r3, #0]
   16746:	b1ab      	cbz	r3, 16774 <button_pressed+0x4c>
	__asm__ volatile(
   16748:	f384 8811 	msr	BASEPRI, r4
   1674c:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   16750:	bd10      	pop	{r4, pc}
   16752:	4b0e      	ldr	r3, [pc, #56]	; (1678c <button_pressed+0x64>)
   16754:	4a0e      	ldr	r2, [pc, #56]	; (16790 <button_pressed+0x68>)
   16756:	1a9b      	subs	r3, r3, r2
   16758:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot disable callbacks");
   1675a:	f04f 0100 	mov.w	r1, #0
   1675e:	2201      	movs	r2, #1
   16760:	f362 0102 	bfi	r1, r2, #0, #3
   16764:	f36f 01c5 	bfc	r1, #3, #3
   16768:	f363 118f 	bfi	r1, r3, #6, #10
   1676c:	4809      	ldr	r0, [pc, #36]	; (16794 <button_pressed+0x6c>)
   1676e:	f7fc fbf7 	bl	12f60 <log_0>
   16772:	e7e6      	b.n	16742 <button_pressed+0x1a>
		state = STATE_SCANNING;
   16774:	4b04      	ldr	r3, [pc, #16]	; (16788 <button_pressed+0x60>)
   16776:	2201      	movs	r2, #1
   16778:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1677a:	2221      	movs	r2, #33	; 0x21
   1677c:	2300      	movs	r3, #0
   1677e:	4806      	ldr	r0, [pc, #24]	; (16798 <button_pressed+0x70>)
   16780:	f006 ff52 	bl	1d628 <k_work_reschedule>
		break;
   16784:	e7e0      	b.n	16748 <button_pressed+0x20>
   16786:	bf00      	nop
   16788:	2000d572 	.word	0x2000d572
   1678c:	000252fc 	.word	0x000252fc
   16790:	000252ec 	.word	0x000252ec
   16794:	00026188 	.word	0x00026188
   16798:	2000c8c8 	.word	0x2000c8c8

0001679c <buttons_scan_fn>:
{
   1679c:	b510      	push	{r4, lr}
	button_scan = get_buttons();
   1679e:	f7ff ff29 	bl	165f4 <get_buttons>
   167a2:	4604      	mov	r4, r0
   167a4:	4b25      	ldr	r3, [pc, #148]	; (1683c <buttons_scan_fn+0xa0>)
   167a6:	e8d3 2fef 	ldaex	r2, [r3]
   167aa:	e8c3 4fe1 	stlex	r1, r4, [r3]
   167ae:	2900      	cmp	r1, #0
   167b0:	d1f9      	bne.n	167a6 <buttons_scan_fn+0xa>
	if (!initial_run) {
   167b2:	4b23      	ldr	r3, [pc, #140]	; (16840 <buttons_scan_fn+0xa4>)
   167b4:	781b      	ldrb	r3, [r3, #0]
   167b6:	b943      	cbnz	r3, 167ca <buttons_scan_fn+0x2e>
		if (button_scan != last_button_scan) {
   167b8:	4b22      	ldr	r3, [pc, #136]	; (16844 <buttons_scan_fn+0xa8>)
   167ba:	6819      	ldr	r1, [r3, #0]
   167bc:	42a1      	cmp	r1, r4
   167be:	d007      	beq.n	167d0 <buttons_scan_fn+0x34>
			button_handlers_call(button_scan, has_changed);
   167c0:	4061      	eors	r1, r4
   167c2:	4620      	mov	r0, r4
   167c4:	f7ff ff58 	bl	16678 <button_handlers_call>
   167c8:	e002      	b.n	167d0 <buttons_scan_fn+0x34>
		initial_run = false;
   167ca:	4b1d      	ldr	r3, [pc, #116]	; (16840 <buttons_scan_fn+0xa4>)
   167cc:	2200      	movs	r2, #0
   167ce:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   167d0:	4b1c      	ldr	r3, [pc, #112]	; (16844 <buttons_scan_fn+0xa8>)
   167d2:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   167d4:	b994      	cbnz	r4, 167fc <buttons_scan_fn+0x60>
	__asm__ volatile(
   167d6:	f04f 0320 	mov.w	r3, #32
   167da:	f3ef 8411 	mrs	r4, BASEPRI
   167de:	f383 8812 	msr	BASEPRI_MAX, r3
   167e2:	f3bf 8f6f 	isb	sy
		switch (state) {
   167e6:	4b18      	ldr	r3, [pc, #96]	; (16848 <buttons_scan_fn+0xac>)
   167e8:	781b      	ldrb	r3, [r3, #0]
   167ea:	2b01      	cmp	r3, #1
   167ec:	d00d      	beq.n	1680a <buttons_scan_fn+0x6e>
		int err = 0;
   167ee:	2000      	movs	r0, #0
	__asm__ volatile(
   167f0:	f384 8811 	msr	BASEPRI, r4
   167f4:	f3bf 8f6f 	isb	sy
		if (err) {
   167f8:	b970      	cbnz	r0, 16818 <buttons_scan_fn+0x7c>
}
   167fa:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
   167fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16800:	2300      	movs	r3, #0
   16802:	4812      	ldr	r0, [pc, #72]	; (1684c <buttons_scan_fn+0xb0>)
   16804:	f006 ff10 	bl	1d628 <k_work_reschedule>
   16808:	e7f7      	b.n	167fa <buttons_scan_fn+0x5e>
			state = STATE_WAITING;
   1680a:	4b0f      	ldr	r3, [pc, #60]	; (16848 <buttons_scan_fn+0xac>)
   1680c:	2200      	movs	r2, #0
   1680e:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   16810:	2001      	movs	r0, #1
   16812:	f7ff ff5d 	bl	166d0 <callback_ctrl>
			break;
   16816:	e7eb      	b.n	167f0 <buttons_scan_fn+0x54>
   16818:	4b0d      	ldr	r3, [pc, #52]	; (16850 <buttons_scan_fn+0xb4>)
   1681a:	4a0e      	ldr	r2, [pc, #56]	; (16854 <buttons_scan_fn+0xb8>)
   1681c:	1a9b      	subs	r3, r3, r2
   1681e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot enable callbacks");
   16820:	f04f 0100 	mov.w	r1, #0
   16824:	2201      	movs	r2, #1
   16826:	f362 0102 	bfi	r1, r2, #0, #3
   1682a:	f36f 01c5 	bfc	r1, #3, #3
   1682e:	f363 118f 	bfi	r1, r3, #6, #10
   16832:	4809      	ldr	r0, [pc, #36]	; (16858 <buttons_scan_fn+0xbc>)
   16834:	f7fc fb94 	bl	12f60 <log_0>
}
   16838:	e7df      	b.n	167fa <buttons_scan_fn+0x5e>
   1683a:	bf00      	nop
   1683c:	2000d1cc 	.word	0x2000d1cc
   16840:	2000c634 	.word	0x2000c634
   16844:	2000d1c4 	.word	0x2000d1c4
   16848:	2000d572 	.word	0x2000d572
   1684c:	2000c8c8 	.word	0x2000c8c8
   16850:	000252fc 	.word	0x000252fc
   16854:	000252ec 	.word	0x000252ec
   16858:	000261a4 	.word	0x000261a4

0001685c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1685c:	4b06      	ldr	r3, [pc, #24]	; (16878 <dk_read_buttons+0x1c>)
   1685e:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   16862:	b100      	cbz	r0, 16866 <dk_read_buttons+0xa>
		*button_state = current_state;
   16864:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   16866:	b119      	cbz	r1, 16870 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   16868:	4a04      	ldr	r2, [pc, #16]	; (1687c <dk_read_buttons+0x20>)
   1686a:	6812      	ldr	r2, [r2, #0]
   1686c:	405a      	eors	r2, r3
   1686e:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   16870:	4a02      	ldr	r2, [pc, #8]	; (1687c <dk_read_buttons+0x20>)
   16872:	6013      	str	r3, [r2, #0]
}
   16874:	4770      	bx	lr
   16876:	bf00      	nop
   16878:	2000d1cc 	.word	0x2000d1cc
   1687c:	2000d1c8 	.word	0x2000d1c8

00016880 <dk_buttons_init>:
{
   16880:	b570      	push	{r4, r5, r6, lr}
	button_handler_cb = button_handler;
   16882:	4b5e      	ldr	r3, [pc, #376]	; (169fc <dk_buttons_init+0x17c>)
   16884:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16886:	485e      	ldr	r0, [pc, #376]	; (16a00 <dk_buttons_init+0x180>)
   16888:	f00d fc80 	bl	2418c <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1688c:	2400      	movs	r4, #0
   1688e:	2c03      	cmp	r4, #3
   16890:	d841      	bhi.n	16916 <dk_buttons_init+0x96>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16892:	4b5c      	ldr	r3, [pc, #368]	; (16a04 <dk_buttons_init+0x184>)
   16894:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   16898:	f006 f8be 	bl	1ca18 <z_impl_device_get_binding>
   1689c:	4b5a      	ldr	r3, [pc, #360]	; (16a08 <dk_buttons_init+0x188>)
   1689e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (!button_devs[i]) {
   168a2:	b1a0      	cbz	r0, 168ce <dk_buttons_init+0x4e>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   168a4:	4b57      	ldr	r3, [pc, #348]	; (16a04 <dk_buttons_init+0x184>)
   168a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   168aa:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   168ac:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   168ae:	6905      	ldr	r5, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   168b0:	2301      	movs	r3, #1
   168b2:	fa03 f201 	lsl.w	r2, r3, r1
   168b6:	682b      	ldr	r3, [r5, #0]
   168b8:	ea23 0302 	bic.w	r3, r3, r2
   168bc:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   168be:	6833      	ldr	r3, [r6, #0]
   168c0:	f44f 7288 	mov.w	r2, #272	; 0x110
   168c4:	4798      	blx	r3
		if (err) {
   168c6:	4605      	mov	r5, r0
   168c8:	b9a0      	cbnz	r0, 168f4 <dk_buttons_init+0x74>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   168ca:	3401      	adds	r4, #1
   168cc:	e7df      	b.n	1688e <dk_buttons_init+0xe>
   168ce:	4b4f      	ldr	r3, [pc, #316]	; (16a0c <dk_buttons_init+0x18c>)
   168d0:	4a4f      	ldr	r2, [pc, #316]	; (16a10 <dk_buttons_init+0x190>)
   168d2:	1a9b      	subs	r3, r3, r2
   168d4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   168d6:	f04f 0100 	mov.w	r1, #0
   168da:	2201      	movs	r2, #1
   168dc:	f362 0102 	bfi	r1, r2, #0, #3
   168e0:	f36f 01c5 	bfc	r1, #3, #3
   168e4:	f363 118f 	bfi	r1, r3, #6, #10
   168e8:	484a      	ldr	r0, [pc, #296]	; (16a14 <dk_buttons_init+0x194>)
   168ea:	f7fc fb39 	bl	12f60 <log_0>
			return -ENODEV;
   168ee:	f06f 0512 	mvn.w	r5, #18
   168f2:	e080      	b.n	169f6 <dk_buttons_init+0x176>
   168f4:	4b45      	ldr	r3, [pc, #276]	; (16a0c <dk_buttons_init+0x18c>)
   168f6:	4a46      	ldr	r2, [pc, #280]	; (16a10 <dk_buttons_init+0x190>)
   168f8:	1a9b      	subs	r3, r3, r2
   168fa:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure button gpio");
   168fc:	f04f 0100 	mov.w	r1, #0
   16900:	2201      	movs	r2, #1
   16902:	f362 0102 	bfi	r1, r2, #0, #3
   16906:	f36f 01c5 	bfc	r1, #3, #3
   1690a:	f363 118f 	bfi	r1, r3, #6, #10
   1690e:	4842      	ldr	r0, [pc, #264]	; (16a18 <dk_buttons_init+0x198>)
   16910:	f7fc fb26 	bl	12f60 <log_0>
			return err;
   16914:	e06f      	b.n	169f6 <dk_buttons_init+0x176>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16916:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   16918:	4626      	mov	r6, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1691a:	2c03      	cmp	r4, #3
   1691c:	d828      	bhi.n	16970 <dk_buttons_init+0xf0>
		err = gpio_pin_interrupt_configure(button_devs[i],
   1691e:	4b3a      	ldr	r3, [pc, #232]	; (16a08 <dk_buttons_init+0x188>)
   16920:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16924:	4b37      	ldr	r3, [pc, #220]	; (16a04 <dk_buttons_init+0x184>)
   16926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1692a:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1692c:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1692e:	699d      	ldr	r5, [r3, #24]
   16930:	2300      	movs	r3, #0
   16932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16936:	47a8      	blx	r5
		if (err) {
   16938:	4605      	mov	r5, r0
   1693a:	b940      	cbnz	r0, 1694e <dk_buttons_init+0xce>
		pin_mask |= BIT(button_pins[i].number);
   1693c:	4b31      	ldr	r3, [pc, #196]	; (16a04 <dk_buttons_init+0x184>)
   1693e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   16942:	791a      	ldrb	r2, [r3, #4]
   16944:	2301      	movs	r3, #1
   16946:	4093      	lsls	r3, r2
   16948:	431e      	orrs	r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1694a:	3401      	adds	r4, #1
   1694c:	e7e5      	b.n	1691a <dk_buttons_init+0x9a>
   1694e:	4b2f      	ldr	r3, [pc, #188]	; (16a0c <dk_buttons_init+0x18c>)
   16950:	4a2f      	ldr	r2, [pc, #188]	; (16a10 <dk_buttons_init+0x190>)
   16952:	1a9b      	subs	r3, r3, r2
   16954:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot disable callbacks()");
   16956:	f04f 0100 	mov.w	r1, #0
   1695a:	2201      	movs	r2, #1
   1695c:	f362 0102 	bfi	r1, r2, #0, #3
   16960:	f36f 01c5 	bfc	r1, #3, #3
   16964:	f363 118f 	bfi	r1, r3, #6, #10
   16968:	482c      	ldr	r0, [pc, #176]	; (16a1c <dk_buttons_init+0x19c>)
   1696a:	f7fc faf9 	bl	12f60 <log_0>
			return err;
   1696e:	e042      	b.n	169f6 <dk_buttons_init+0x176>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16970:	4b2b      	ldr	r3, [pc, #172]	; (16a20 <dk_buttons_init+0x1a0>)
   16972:	4a2c      	ldr	r2, [pc, #176]	; (16a24 <dk_buttons_init+0x1a4>)
   16974:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   16976:	609e      	str	r6, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16978:	2400      	movs	r4, #0
   1697a:	2c03      	cmp	r4, #3
   1697c:	d820      	bhi.n	169c0 <dk_buttons_init+0x140>
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1697e:	4b22      	ldr	r3, [pc, #136]	; (16a08 <dk_buttons_init+0x188>)
   16980:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   16984:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16986:	69db      	ldr	r3, [r3, #28]
   16988:	b133      	cbz	r3, 16998 <dk_buttons_init+0x118>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1698a:	2201      	movs	r2, #1
   1698c:	4924      	ldr	r1, [pc, #144]	; (16a20 <dk_buttons_init+0x1a0>)
   1698e:	4798      	blx	r3
   16990:	4605      	mov	r5, r0
		if (err) {
   16992:	b925      	cbnz	r5, 1699e <dk_buttons_init+0x11e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16994:	3401      	adds	r4, #1
   16996:	e7f0      	b.n	1697a <dk_buttons_init+0xfa>
		return -ENOTSUP;
   16998:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1699c:	e7f9      	b.n	16992 <dk_buttons_init+0x112>
   1699e:	4b1b      	ldr	r3, [pc, #108]	; (16a0c <dk_buttons_init+0x18c>)
   169a0:	4a1b      	ldr	r2, [pc, #108]	; (16a10 <dk_buttons_init+0x190>)
   169a2:	1a9b      	subs	r3, r3, r2
   169a4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot add callback");
   169a6:	f04f 0100 	mov.w	r1, #0
   169aa:	2201      	movs	r2, #1
   169ac:	f362 0102 	bfi	r1, r2, #0, #3
   169b0:	f36f 01c5 	bfc	r1, #3, #3
   169b4:	f363 118f 	bfi	r1, r3, #6, #10
   169b8:	481b      	ldr	r0, [pc, #108]	; (16a28 <dk_buttons_init+0x1a8>)
   169ba:	f7fc fad1 	bl	12f60 <log_0>
			return err;
   169be:	e01a      	b.n	169f6 <dk_buttons_init+0x176>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   169c0:	4c1a      	ldr	r4, [pc, #104]	; (16a2c <dk_buttons_init+0x1ac>)
   169c2:	491b      	ldr	r1, [pc, #108]	; (16a30 <dk_buttons_init+0x1b0>)
   169c4:	4620      	mov	r0, r4
   169c6:	f00d fccf 	bl	24368 <k_work_init_delayable>
	state = STATE_SCANNING;
   169ca:	4b1a      	ldr	r3, [pc, #104]	; (16a34 <dk_buttons_init+0x1b4>)
   169cc:	2201      	movs	r2, #1
   169ce:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   169d0:	2200      	movs	r2, #0
   169d2:	2300      	movs	r3, #0
   169d4:	4620      	mov	r0, r4
   169d6:	f006 fe1f 	bl	1d618 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   169da:	2100      	movs	r1, #0
   169dc:	4608      	mov	r0, r1
   169de:	f7ff ff3d 	bl	1685c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   169e2:	f7ff fe07 	bl	165f4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   169e6:	4b14      	ldr	r3, [pc, #80]	; (16a38 <dk_buttons_init+0x1b8>)
   169e8:	e8d3 2fef 	ldaex	r2, [r3]
   169ec:	e8c3 0fe1 	stlex	r1, r0, [r3]
   169f0:	2900      	cmp	r1, #0
   169f2:	d1f9      	bne.n	169e8 <dk_buttons_init+0x168>
	return 0;
   169f4:	2500      	movs	r5, #0
}
   169f6:	4628      	mov	r0, r5
   169f8:	bd70      	pop	{r4, r5, r6, pc}
   169fa:	bf00      	nop
   169fc:	2000d198 	.word	0x2000d198
   16a00:	2000d19c 	.word	0x2000d19c
   16a04:	00026238 	.word	0x00026238
   16a08:	2000d188 	.word	0x2000d188
   16a0c:	000252fc 	.word	0x000252fc
   16a10:	000252ec 	.word	0x000252ec
   16a14:	000261bc 	.word	0x000261bc
   16a18:	000261d4 	.word	0x000261d4
   16a1c:	000261f4 	.word	0x000261f4
   16a20:	2000d1b8 	.word	0x2000d1b8
   16a24:	00016729 	.word	0x00016729
   16a28:	00026210 	.word	0x00026210
   16a2c:	2000c8c8 	.word	0x2000c8c8
   16a30:	0001679d 	.word	0x0001679d
   16a34:	2000d572 	.word	0x2000d572
   16a38:	2000d1cc 	.word	0x2000d1cc

00016a3c <at_monitor_task>:
	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}

static void at_monitor_task(struct k_work *work)
{
   16a3c:	b538      	push	{r3, r4, r5, lr}
	struct at_notif_fifo *at_notif;

	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   16a3e:	e016      	b.n	16a6e <at_monitor_task+0x32>
		LOG_DBG("AT notif: %s", log_strdup(at_notif->data));
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
			if (!e->paused &&
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
				LOG_DBG("Dispatching to %p", e->handler);
				e->handler(at_notif->data);
   16a40:	6863      	ldr	r3, [r4, #4]
   16a42:	1d28      	adds	r0, r5, #4
   16a44:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16a46:	340c      	adds	r4, #12
   16a48:	4b0e      	ldr	r3, [pc, #56]	; (16a84 <at_monitor_task+0x48>)
   16a4a:	429c      	cmp	r4, r3
   16a4c:	d20b      	bcs.n	16a66 <at_monitor_task+0x2a>
			if (!e->paused &&
   16a4e:	7a23      	ldrb	r3, [r4, #8]
   16a50:	2b00      	cmp	r3, #0
   16a52:	d1f8      	bne.n	16a46 <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   16a54:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   16a56:	2900      	cmp	r1, #0
   16a58:	d0f2      	beq.n	16a40 <at_monitor_task+0x4>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   16a5a:	1d28      	adds	r0, r5, #4
   16a5c:	f00e f895 	bl	24b8a <strstr>
   16a60:	2800      	cmp	r0, #0
   16a62:	d1ed      	bne.n	16a40 <at_monitor_task+0x4>
   16a64:	e7ef      	b.n	16a46 <at_monitor_task+0xa>
			}
		}
		k_heap_free(&at_monitor_heap, at_notif);
   16a66:	4629      	mov	r1, r5
   16a68:	4807      	ldr	r0, [pc, #28]	; (16a88 <at_monitor_task+0x4c>)
   16a6a:	f00d fac0 	bl	23fee <k_heap_free>
	return z_impl_k_queue_get(queue, timeout);
   16a6e:	2200      	movs	r2, #0
   16a70:	2300      	movs	r3, #0
   16a72:	4806      	ldr	r0, [pc, #24]	; (16a8c <at_monitor_task+0x50>)
   16a74:	f006 fbc4 	bl	1d200 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   16a78:	4605      	mov	r5, r0
   16a7a:	b108      	cbz	r0, 16a80 <at_monitor_task+0x44>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16a7c:	4c04      	ldr	r4, [pc, #16]	; (16a90 <at_monitor_task+0x54>)
   16a7e:	e7e3      	b.n	16a48 <at_monitor_task+0xc>
	}
}
   16a80:	bd38      	pop	{r3, r4, r5, pc}
   16a82:	bf00      	nop
   16a84:	2000c68c 	.word	0x2000c68c
   16a88:	2000c6b4 	.word	0x2000c6b4
   16a8c:	2000c780 	.word	0x2000c780
   16a90:	2000c638 	.word	0x2000c638

00016a94 <at_monitor_dispatch>:
{
   16a94:	b538      	push	{r3, r4, r5, lr}
   16a96:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   16a98:	4c28      	ldr	r4, [pc, #160]	; (16b3c <at_monitor_dispatch+0xa8>)
   16a9a:	e003      	b.n	16aa4 <at_monitor_dispatch+0x10>
			e->handler(notif);
   16a9c:	6863      	ldr	r3, [r4, #4]
   16a9e:	4628      	mov	r0, r5
   16aa0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   16aa2:	340c      	adds	r4, #12
   16aa4:	4b26      	ldr	r3, [pc, #152]	; (16b40 <at_monitor_dispatch+0xac>)
   16aa6:	429c      	cmp	r4, r3
   16aa8:	d20b      	bcs.n	16ac2 <at_monitor_dispatch+0x2e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   16aaa:	7a23      	ldrb	r3, [r4, #8]
   16aac:	2b00      	cmp	r3, #0
   16aae:	d1f8      	bne.n	16aa2 <at_monitor_dispatch+0xe>
   16ab0:	6821      	ldr	r1, [r4, #0]
   16ab2:	2900      	cmp	r1, #0
   16ab4:	d0f2      	beq.n	16a9c <at_monitor_dispatch+0x8>
   16ab6:	4628      	mov	r0, r5
   16ab8:	f00e f867 	bl	24b8a <strstr>
   16abc:	2800      	cmp	r0, #0
   16abe:	d1ed      	bne.n	16a9c <at_monitor_dispatch+0x8>
   16ac0:	e7ef      	b.n	16aa2 <at_monitor_dispatch+0xe>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   16ac2:	4c20      	ldr	r4, [pc, #128]	; (16b44 <at_monitor_dispatch+0xb0>)
   16ac4:	e000      	b.n	16ac8 <at_monitor_dispatch+0x34>
   16ac6:	340c      	adds	r4, #12
   16ac8:	4b1f      	ldr	r3, [pc, #124]	; (16b48 <at_monitor_dispatch+0xb4>)
   16aca:	429c      	cmp	r4, r3
   16acc:	d21f      	bcs.n	16b0e <at_monitor_dispatch+0x7a>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   16ace:	7a23      	ldrb	r3, [r4, #8]
   16ad0:	2b00      	cmp	r3, #0
   16ad2:	d1f8      	bne.n	16ac6 <at_monitor_dispatch+0x32>
   16ad4:	6821      	ldr	r1, [r4, #0]
   16ad6:	b121      	cbz	r1, 16ae2 <at_monitor_dispatch+0x4e>
   16ad8:	4628      	mov	r0, r5
   16ada:	f00e f856 	bl	24b8a <strstr>
   16ade:	2800      	cmp	r0, #0
   16ae0:	d0f1      	beq.n	16ac6 <at_monitor_dispatch+0x32>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   16ae2:	4628      	mov	r0, r5
   16ae4:	f7fa fb01 	bl	110ea <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   16ae8:	2200      	movs	r2, #0
   16aea:	2300      	movs	r3, #0
   16aec:	1d41      	adds	r1, r0, #5
   16aee:	4817      	ldr	r0, [pc, #92]	; (16b4c <at_monitor_dispatch+0xb8>)
   16af0:	f00d fa72 	bl	23fd8 <k_heap_alloc>
	if (!at_notif) {
   16af4:	4604      	mov	r4, r0
   16af6:	b158      	cbz	r0, 16b10 <at_monitor_dispatch+0x7c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16af8:	4629      	mov	r1, r5
   16afa:	3004      	adds	r0, #4
   16afc:	f00e f80a 	bl	24b14 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   16b00:	4621      	mov	r1, r4
   16b02:	4813      	ldr	r0, [pc, #76]	; (16b50 <at_monitor_dispatch+0xbc>)
   16b04:	f00d fbce 	bl	242a4 <k_queue_append>
	k_work_submit(&at_monitor_work);
   16b08:	4812      	ldr	r0, [pc, #72]	; (16b54 <at_monitor_dispatch+0xc0>)
   16b0a:	f006 fd3f 	bl	1d58c <k_work_submit>
}
   16b0e:	bd38      	pop	{r3, r4, r5, pc}
   16b10:	4b11      	ldr	r3, [pc, #68]	; (16b58 <at_monitor_dispatch+0xc4>)
   16b12:	4a12      	ldr	r2, [pc, #72]	; (16b5c <at_monitor_dispatch+0xc8>)
   16b14:	1a9b      	subs	r3, r3, r2
   16b16:	08db      	lsrs	r3, r3, #3
		LOG_WRN("No heap space for incoming notification: %s",
   16b18:	f04f 0400 	mov.w	r4, #0
   16b1c:	2202      	movs	r2, #2
   16b1e:	f362 0402 	bfi	r4, r2, #0, #3
   16b22:	f36f 04c5 	bfc	r4, #3, #3
   16b26:	f363 148f 	bfi	r4, r3, #6, #10
   16b2a:	4628      	mov	r0, r5
   16b2c:	f7fc f8b0 	bl	12c90 <z_log_strdup>
   16b30:	4601      	mov	r1, r0
   16b32:	4622      	mov	r2, r4
   16b34:	480a      	ldr	r0, [pc, #40]	; (16b60 <at_monitor_dispatch+0xcc>)
   16b36:	f7fc fa3d 	bl	12fb4 <log_1>
		return;
   16b3a:	e7e8      	b.n	16b0e <at_monitor_dispatch+0x7a>
   16b3c:	2000c68c 	.word	0x2000c68c
   16b40:	2000c68c 	.word	0x2000c68c
   16b44:	2000c638 	.word	0x2000c638
   16b48:	2000c68c 	.word	0x2000c68c
   16b4c:	2000c6b4 	.word	0x2000c6b4
   16b50:	2000c780 	.word	0x2000c780
   16b54:	2000c524 	.word	0x2000c524
   16b58:	000252ec 	.word	0x000252ec
   16b5c:	000252ec 	.word	0x000252ec
   16b60:	00026258 	.word	0x00026258

00016b64 <at_monitor_sys_init>:

static int at_monitor_sys_init(const struct device *unused)
{
   16b64:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   16b66:	480c      	ldr	r0, [pc, #48]	; (16b98 <at_monitor_sys_init+0x34>)
   16b68:	f005 fbec 	bl	1c344 <nrf_modem_at_notif_handler_set>
	if (err) {
   16b6c:	b908      	cbnz	r0, 16b72 <at_monitor_sys_init+0xe>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
   16b6e:	2000      	movs	r0, #0
   16b70:	bd08      	pop	{r3, pc}
   16b72:	4601      	mov	r1, r0
   16b74:	4b09      	ldr	r3, [pc, #36]	; (16b9c <at_monitor_sys_init+0x38>)
   16b76:	4a0a      	ldr	r2, [pc, #40]	; (16ba0 <at_monitor_sys_init+0x3c>)
   16b78:	1a9b      	subs	r3, r3, r2
   16b7a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   16b7c:	f04f 0200 	mov.w	r2, #0
   16b80:	2001      	movs	r0, #1
   16b82:	f360 0202 	bfi	r2, r0, #0, #3
   16b86:	f36f 02c5 	bfc	r2, #3, #3
   16b8a:	f363 128f 	bfi	r2, r3, #6, #10
   16b8e:	4805      	ldr	r0, [pc, #20]	; (16ba4 <at_monitor_sys_init+0x40>)
   16b90:	f7fc fa10 	bl	12fb4 <log_1>
   16b94:	e7eb      	b.n	16b6e <at_monitor_sys_init+0xa>
   16b96:	bf00      	nop
   16b98:	00016a95 	.word	0x00016a95
   16b9c:	000252ec 	.word	0x000252ec
   16ba0:	000252ec 	.word	0x000252ec
   16ba4:	00026284 	.word	0x00026284

00016ba8 <is_clac>:
 *
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
   16ba8:	b510      	push	{r4, lr}
   16baa:	4604      	mov	r4, r0
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   16bac:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   16bae:	2b0d      	cmp	r3, #13
   16bb0:	d027      	beq.n	16c02 <is_clac+0x5a>
   16bb2:	2b0a      	cmp	r3, #10
   16bb4:	d025      	beq.n	16c02 <is_clac+0x5a>
		str++;
	}

	if (strlen(str) < 4) {
   16bb6:	4620      	mov	r0, r4
   16bb8:	f7fa fa97 	bl	110ea <strlen>
   16bbc:	2803      	cmp	r0, #3
   16bbe:	d935      	bls.n	16c2c <is_clac+0x84>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   16bc0:	7823      	ldrb	r3, [r4, #0]
   16bc2:	4a1f      	ldr	r2, [pc, #124]	; (16c40 <is_clac+0x98>)
   16bc4:	5c9a      	ldrb	r2, [r3, r2]
   16bc6:	f002 0203 	and.w	r2, r2, #3
   16bca:	2a02      	cmp	r2, #2
   16bcc:	d01b      	beq.n	16c06 <is_clac+0x5e>
   16bce:	2b41      	cmp	r3, #65	; 0x41
   16bd0:	d12e      	bne.n	16c30 <is_clac+0x88>
   16bd2:	7863      	ldrb	r3, [r4, #1]
   16bd4:	4a1a      	ldr	r2, [pc, #104]	; (16c40 <is_clac+0x98>)
   16bd6:	5c9a      	ldrb	r2, [r3, r2]
   16bd8:	f002 0203 	and.w	r2, r2, #3
   16bdc:	2a02      	cmp	r2, #2
   16bde:	d014      	beq.n	16c0a <is_clac+0x62>
   16be0:	2b54      	cmp	r3, #84	; 0x54
   16be2:	d127      	bne.n	16c34 <is_clac+0x8c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   16be4:	78a3      	ldrb	r3, [r4, #2]
   16be6:	4a16      	ldr	r2, [pc, #88]	; (16c40 <is_clac+0x98>)
   16be8:	5c9a      	ldrb	r2, [r3, r2]
   16bea:	f002 0203 	and.w	r2, r2, #3
   16bee:	2a02      	cmp	r2, #2
   16bf0:	d00d      	beq.n	16c0e <is_clac+0x66>
   16bf2:	2b2b      	cmp	r3, #43	; 0x2b
   16bf4:	d001      	beq.n	16bfa <is_clac+0x52>
   16bf6:	2b25      	cmp	r3, #37	; 0x25
   16bf8:	d11e      	bne.n	16c38 <is_clac+0x90>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16bfa:	2b25      	cmp	r3, #37	; 0x25
   16bfc:	d009      	beq.n	16c12 <is_clac+0x6a>
		/* Ignore AT%X to avoid false detect (read resp XCOEX0 etc.) */
		return false;
	}

	return true;
   16bfe:	2001      	movs	r0, #1
   16c00:	e015      	b.n	16c2e <is_clac+0x86>
		str++;
   16c02:	3401      	adds	r4, #1
   16c04:	e7d2      	b.n	16bac <is_clac+0x4>
	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   16c06:	3b20      	subs	r3, #32
   16c08:	e7e1      	b.n	16bce <is_clac+0x26>
   16c0a:	3b20      	subs	r3, #32
   16c0c:	e7e8      	b.n	16be0 <is_clac+0x38>
	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   16c0e:	3b20      	subs	r3, #32
   16c10:	e7ef      	b.n	16bf2 <is_clac+0x4a>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16c12:	78e3      	ldrb	r3, [r4, #3]
   16c14:	4a0a      	ldr	r2, [pc, #40]	; (16c40 <is_clac+0x98>)
   16c16:	5c9a      	ldrb	r2, [r3, r2]
   16c18:	f002 0203 	and.w	r2, r2, #3
   16c1c:	2a02      	cmp	r2, #2
   16c1e:	d003      	beq.n	16c28 <is_clac+0x80>
   16c20:	2b58      	cmp	r3, #88	; 0x58
   16c22:	d00b      	beq.n	16c3c <is_clac+0x94>
	return true;
   16c24:	2001      	movs	r0, #1
   16c26:	e002      	b.n	16c2e <is_clac+0x86>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   16c28:	3b20      	subs	r3, #32
   16c2a:	e7f9      	b.n	16c20 <is_clac+0x78>
		return false;
   16c2c:	2000      	movs	r0, #0
}
   16c2e:	bd10      	pop	{r4, pc}
		return false;
   16c30:	2000      	movs	r0, #0
   16c32:	e7fc      	b.n	16c2e <is_clac+0x86>
   16c34:	2000      	movs	r0, #0
   16c36:	e7fa      	b.n	16c2e <is_clac+0x86>
		return false;
   16c38:	2000      	movs	r0, #0
   16c3a:	e7f8      	b.n	16c2e <is_clac+0x86>
		return false;
   16c3c:	2000      	movs	r0, #0
   16c3e:	e7f6      	b.n	16c2e <is_clac+0x86>
   16c40:	000275b3 	.word	0x000275b3

00016c44 <at_parse_detect_type>:

	return false;
}

static int at_parse_detect_type(const char **str, int index)
{
   16c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c46:	4604      	mov	r4, r0
	const char *tmpstr = *str;
   16c48:	6806      	ldr	r6, [r0, #0]

	if ((index == 0) && is_notification(*tmpstr)) {
   16c4a:	460d      	mov	r5, r1
   16c4c:	b921      	cbnz	r1, 16c58 <at_parse_detect_type+0x14>
   16c4e:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16c50:	2b2b      	cmp	r3, #43	; 0x2b
   16c52:	d00b      	beq.n	16c6c <at_parse_detect_type+0x28>
   16c54:	2b25      	cmp	r3, #37	; 0x25
   16c56:	d009      	beq.n	16c6c <at_parse_detect_type+0x28>
		set_new_state(NOTIFICATION);

		/* Check for responses we know need to be strings */
		set_type_string = check_response_for_forced_string(tmpstr);

	} else if (set_type_string) {
   16c58:	4b77      	ldr	r3, [pc, #476]	; (16e38 <at_parse_detect_type+0x1f4>)
   16c5a:	781f      	ldrb	r7, [r3, #0]
   16c5c:	2f00      	cmp	r7, #0
   16c5e:	d03c      	beq.n	16cda <at_parse_detect_type+0x96>
	state = new_state;
   16c60:	4b76      	ldr	r3, [pc, #472]	; (16e3c <at_parse_detect_type+0x1f8>)
   16c62:	2202      	movs	r2, #2
   16c64:	701a      	strb	r2, [r3, #0]
		 */
		*str = tmpstr;
		return -1;
	}

	*str = tmpstr;
   16c66:	6026      	str	r6, [r4, #0]
	return 0;
   16c68:	2000      	movs	r0, #0
}
   16c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = new_state;
   16c6c:	4b73      	ldr	r3, [pc, #460]	; (16e3c <at_parse_detect_type+0x1f8>)
   16c6e:	2206      	movs	r2, #6
   16c70:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16c72:	2205      	movs	r2, #5
   16c74:	4972      	ldr	r1, [pc, #456]	; (16e40 <at_parse_detect_type+0x1fc>)
   16c76:	4630      	mov	r0, r6
   16c78:	f00d ff54 	bl	24b24 <strncmp>
   16c7c:	b918      	cbnz	r0, 16c86 <at_parse_detect_type+0x42>
			retval = true;
   16c7e:	2201      	movs	r2, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   16c80:	4b6d      	ldr	r3, [pc, #436]	; (16e38 <at_parse_detect_type+0x1f4>)
   16c82:	701a      	strb	r2, [r3, #0]
   16c84:	e7ef      	b.n	16c66 <at_parse_detect_type+0x22>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16c86:	2205      	movs	r2, #5
   16c88:	496e      	ldr	r1, [pc, #440]	; (16e44 <at_parse_detect_type+0x200>)
   16c8a:	4630      	mov	r0, r6
   16c8c:	f00d ff4a 	bl	24b24 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   16c90:	b908      	cbnz	r0, 16c96 <at_parse_detect_type+0x52>
			retval = true;
   16c92:	2201      	movs	r2, #1
   16c94:	e7f4      	b.n	16c80 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16c96:	220b      	movs	r2, #11
   16c98:	496b      	ldr	r1, [pc, #428]	; (16e48 <at_parse_detect_type+0x204>)
   16c9a:	4630      	mov	r0, r6
   16c9c:	f00d ff42 	bl	24b24 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   16ca0:	b908      	cbnz	r0, 16ca6 <at_parse_detect_type+0x62>
			retval = true;
   16ca2:	2201      	movs	r2, #1
   16ca4:	e7ec      	b.n	16c80 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16ca6:	220a      	movs	r2, #10
   16ca8:	4968      	ldr	r1, [pc, #416]	; (16e4c <at_parse_detect_type+0x208>)
   16caa:	4630      	mov	r0, r6
   16cac:	f00d ff3a 	bl	24b24 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   16cb0:	b908      	cbnz	r0, 16cb6 <at_parse_detect_type+0x72>
			retval = true;
   16cb2:	2201      	movs	r2, #1
   16cb4:	e7e4      	b.n	16c80 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16cb6:	220b      	movs	r2, #11
   16cb8:	4965      	ldr	r1, [pc, #404]	; (16e50 <at_parse_detect_type+0x20c>)
   16cba:	4630      	mov	r0, r6
   16cbc:	f00d ff32 	bl	24b24 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   16cc0:	b908      	cbnz	r0, 16cc6 <at_parse_detect_type+0x82>
			retval = true;
   16cc2:	2201      	movs	r2, #1
   16cc4:	e7dc      	b.n	16c80 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   16cc6:	2207      	movs	r2, #7
   16cc8:	4962      	ldr	r1, [pc, #392]	; (16e54 <at_parse_detect_type+0x210>)
   16cca:	4630      	mov	r0, r6
   16ccc:	f00d ff2a 	bl	24b24 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   16cd0:	b108      	cbz	r0, 16cd6 <at_parse_detect_type+0x92>
	bool retval = false;
   16cd2:	2200      	movs	r2, #0
   16cd4:	e7d4      	b.n	16c80 <at_parse_detect_type+0x3c>
			retval = true;
   16cd6:	2201      	movs	r2, #1
   16cd8:	e7d2      	b.n	16c80 <at_parse_detect_type+0x3c>
	} else if ((index > 0) && is_clac(tmpstr)) {
   16cda:	2d00      	cmp	r5, #0
   16cdc:	dc06      	bgt.n	16cec <at_parse_detect_type+0xa8>
	} else if ((index == 0) && is_command(tmpstr)) {
   16cde:	b185      	cbz	r5, 16d02 <at_parse_detect_type+0xbe>
	} else if (index == 0) {
   16ce0:	2d00      	cmp	r5, #0
   16ce2:	d14e      	bne.n	16d82 <at_parse_detect_type+0x13e>
	state = new_state;
   16ce4:	4b55      	ldr	r3, [pc, #340]	; (16e3c <at_parse_detect_type+0x1f8>)
   16ce6:	2202      	movs	r2, #2
   16ce8:	701a      	strb	r2, [r3, #0]
}
   16cea:	e7bc      	b.n	16c66 <at_parse_detect_type+0x22>
	} else if ((index > 0) && is_clac(tmpstr)) {
   16cec:	4630      	mov	r0, r6
   16cee:	f7ff ff5b 	bl	16ba8 <is_clac>
   16cf2:	2800      	cmp	r0, #0
   16cf4:	d0f3      	beq.n	16cde <at_parse_detect_type+0x9a>
	state = new_state;
   16cf6:	4b51      	ldr	r3, [pc, #324]	; (16e3c <at_parse_detect_type+0x1f8>)
   16cf8:	2209      	movs	r2, #9
   16cfa:	701a      	strb	r2, [r3, #0]
		return -2;
   16cfc:	f06f 0001 	mvn.w	r0, #1
   16d00:	e7b3      	b.n	16c6a <at_parse_detect_type+0x26>
	if (strlen(str) < 2) {
   16d02:	4630      	mov	r0, r6
   16d04:	f7fa f9f1 	bl	110ea <strlen>
   16d08:	2801      	cmp	r0, #1
   16d0a:	d923      	bls.n	16d54 <at_parse_detect_type+0x110>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   16d0c:	7832      	ldrb	r2, [r6, #0]
   16d0e:	4b52      	ldr	r3, [pc, #328]	; (16e58 <at_parse_detect_type+0x214>)
   16d10:	5cd3      	ldrb	r3, [r2, r3]
   16d12:	f003 0303 	and.w	r3, r3, #3
   16d16:	2b02      	cmp	r3, #2
   16d18:	d018      	beq.n	16d4c <at_parse_detect_type+0x108>
   16d1a:	2a41      	cmp	r2, #65	; 0x41
   16d1c:	d11c      	bne.n	16d58 <at_parse_detect_type+0x114>
   16d1e:	7872      	ldrb	r2, [r6, #1]
   16d20:	4b4d      	ldr	r3, [pc, #308]	; (16e58 <at_parse_detect_type+0x214>)
   16d22:	5cd3      	ldrb	r3, [r2, r3]
   16d24:	f003 0303 	and.w	r3, r3, #3
   16d28:	2b02      	cmp	r3, #2
   16d2a:	d011      	beq.n	16d50 <at_parse_detect_type+0x10c>
   16d2c:	2a54      	cmp	r2, #84	; 0x54
   16d2e:	d11a      	bne.n	16d66 <at_parse_detect_type+0x122>
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16d30:	78b3      	ldrb	r3, [r6, #2]
   16d32:	2b2b      	cmp	r3, #43	; 0x2b
   16d34:	d019      	beq.n	16d6a <at_parse_detect_type+0x126>
   16d36:	2b25      	cmp	r3, #37	; 0x25
   16d38:	d019      	beq.n	16d6e <at_parse_detect_type+0x12a>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   16d3a:	2b23      	cmp	r3, #35	; 0x23
   16d3c:	d019      	beq.n	16d72 <at_parse_detect_type+0x12e>
	if ((chr == '\r') || (chr == '\n')) {
   16d3e:	2b0d      	cmp	r3, #13
   16d40:	d019      	beq.n	16d76 <at_parse_detect_type+0x132>
   16d42:	2b0a      	cmp	r3, #10
   16d44:	d019      	beq.n	16d7a <at_parse_detect_type+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16d46:	b1d3      	cbz	r3, 16d7e <at_parse_detect_type+0x13a>
	return false;
   16d48:	463b      	mov	r3, r7
   16d4a:	e006      	b.n	16d5a <at_parse_detect_type+0x116>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   16d4c:	3a20      	subs	r2, #32
   16d4e:	e7e4      	b.n	16d1a <at_parse_detect_type+0xd6>
   16d50:	3a20      	subs	r2, #32
   16d52:	e7eb      	b.n	16d2c <at_parse_detect_type+0xe8>
		return false;
   16d54:	463b      	mov	r3, r7
   16d56:	e000      	b.n	16d5a <at_parse_detect_type+0x116>
		return false;
   16d58:	463b      	mov	r3, r7
	} else if ((index == 0) && is_command(tmpstr)) {
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	d0c0      	beq.n	16ce0 <at_parse_detect_type+0x9c>
	state = new_state;
   16d5e:	4b37      	ldr	r3, [pc, #220]	; (16e3c <at_parse_detect_type+0x1f8>)
   16d60:	2207      	movs	r2, #7
   16d62:	701a      	strb	r2, [r3, #0]
}
   16d64:	e77f      	b.n	16c66 <at_parse_detect_type+0x22>
   16d66:	463b      	mov	r3, r7
   16d68:	e7f7      	b.n	16d5a <at_parse_detect_type+0x116>
		return true;
   16d6a:	2301      	movs	r3, #1
   16d6c:	e7f5      	b.n	16d5a <at_parse_detect_type+0x116>
   16d6e:	2301      	movs	r3, #1
   16d70:	e7f3      	b.n	16d5a <at_parse_detect_type+0x116>
   16d72:	2301      	movs	r3, #1
   16d74:	e7f1      	b.n	16d5a <at_parse_detect_type+0x116>
   16d76:	2301      	movs	r3, #1
   16d78:	e7ef      	b.n	16d5a <at_parse_detect_type+0x116>
   16d7a:	2301      	movs	r3, #1
   16d7c:	e7ed      	b.n	16d5a <at_parse_detect_type+0x116>
   16d7e:	2301      	movs	r3, #1
   16d80:	e7eb      	b.n	16d5a <at_parse_detect_type+0x116>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   16d82:	2d00      	cmp	r5, #0
   16d84:	dd04      	ble.n	16d90 <at_parse_detect_type+0x14c>
   16d86:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   16d88:	2b2b      	cmp	r3, #43	; 0x2b
   16d8a:	d010      	beq.n	16dae <at_parse_detect_type+0x16a>
   16d8c:	2b25      	cmp	r3, #37	; 0x25
   16d8e:	d00e      	beq.n	16dae <at_parse_detect_type+0x16a>
	} else if (is_number(*tmpstr)) {
   16d90:	7833      	ldrb	r3, [r6, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   16d92:	4a31      	ldr	r2, [pc, #196]	; (16e58 <at_parse_detect_type+0x214>)
   16d94:	5c9a      	ldrb	r2, [r3, r2]
   16d96:	f012 0f04 	tst.w	r2, #4
   16d9a:	d10c      	bne.n	16db6 <at_parse_detect_type+0x172>
   16d9c:	2b2d      	cmp	r3, #45	; 0x2d
   16d9e:	d00c      	beq.n	16dba <at_parse_detect_type+0x176>
   16da0:	2b2b      	cmp	r3, #43	; 0x2b
   16da2:	d00c      	beq.n	16dbe <at_parse_detect_type+0x17a>
   16da4:	b16f      	cbz	r7, 16dc2 <at_parse_detect_type+0x17e>
	state = new_state;
   16da6:	4b25      	ldr	r3, [pc, #148]	; (16e3c <at_parse_detect_type+0x1f8>)
   16da8:	2204      	movs	r2, #4
   16daa:	701a      	strb	r2, [r3, #0]
}
   16dac:	e75b      	b.n	16c66 <at_parse_detect_type+0x22>
		*str = tmpstr;
   16dae:	6026      	str	r6, [r4, #0]
		return -1;
   16db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16db4:	e759      	b.n	16c6a <at_parse_detect_type+0x26>
		return true;
   16db6:	2701      	movs	r7, #1
   16db8:	e7f4      	b.n	16da4 <at_parse_detect_type+0x160>
   16dba:	2701      	movs	r7, #1
   16dbc:	e7f2      	b.n	16da4 <at_parse_detect_type+0x160>
   16dbe:	2701      	movs	r7, #1
   16dc0:	e7f0      	b.n	16da4 <at_parse_detect_type+0x160>
	if (chr == '"') {
   16dc2:	2b22      	cmp	r3, #34	; 0x22
   16dc4:	d013      	beq.n	16dee <at_parse_detect_type+0x1aa>
	if (chr == '(') {
   16dc6:	2b28      	cmp	r3, #40	; 0x28
   16dc8:	d016      	beq.n	16df8 <at_parse_detect_type+0x1b4>
	if ((chr == '\r') || (chr == '\n')) {
   16dca:	2b0d      	cmp	r3, #13
   16dcc:	d019      	beq.n	16e02 <at_parse_detect_type+0x1be>
   16dce:	2b0a      	cmp	r3, #10
   16dd0:	d017      	beq.n	16e02 <at_parse_detect_type+0x1be>
   16dd2:	2b0d      	cmp	r3, #13
   16dd4:	d024      	beq.n	16e20 <at_parse_detect_type+0x1dc>
   16dd6:	2b0a      	cmp	r3, #10
   16dd8:	d022      	beq.n	16e20 <at_parse_detect_type+0x1dc>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16dda:	2b2c      	cmp	r3, #44	; 0x2c
   16ddc:	d027      	beq.n	16e2e <at_parse_detect_type+0x1ea>
   16dde:	2b3a      	cmp	r3, #58	; 0x3a
   16de0:	d025      	beq.n	16e2e <at_parse_detect_type+0x1ea>
   16de2:	2b3d      	cmp	r3, #61	; 0x3d
   16de4:	d023      	beq.n	16e2e <at_parse_detect_type+0x1ea>
		*str = tmpstr;
   16de6:	6026      	str	r6, [r4, #0]
		return -1;
   16de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dec:	e73d      	b.n	16c6a <at_parse_detect_type+0x26>
	state = new_state;
   16dee:	4b13      	ldr	r3, [pc, #76]	; (16e3c <at_parse_detect_type+0x1f8>)
   16df0:	2203      	movs	r2, #3
   16df2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16df4:	3601      	adds	r6, #1
   16df6:	e736      	b.n	16c66 <at_parse_detect_type+0x22>
	state = new_state;
   16df8:	4b10      	ldr	r3, [pc, #64]	; (16e3c <at_parse_detect_type+0x1f8>)
   16dfa:	2201      	movs	r2, #1
   16dfc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   16dfe:	4416      	add	r6, r2
   16e00:	e731      	b.n	16c66 <at_parse_detect_type+0x22>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   16e02:	4a0e      	ldr	r2, [pc, #56]	; (16e3c <at_parse_detect_type+0x1f8>)
   16e04:	7812      	ldrb	r2, [r2, #0]
   16e06:	2a04      	cmp	r2, #4
   16e08:	d1e3      	bne.n	16dd2 <at_parse_detect_type+0x18e>
		while (is_lfcr(*tmpstr)) {
   16e0a:	7833      	ldrb	r3, [r6, #0]
	if ((chr == '\r') || (chr == '\n')) {
   16e0c:	2b0d      	cmp	r3, #13
   16e0e:	d005      	beq.n	16e1c <at_parse_detect_type+0x1d8>
   16e10:	2b0a      	cmp	r3, #10
   16e12:	d003      	beq.n	16e1c <at_parse_detect_type+0x1d8>
	state = new_state;
   16e14:	4b09      	ldr	r3, [pc, #36]	; (16e3c <at_parse_detect_type+0x1f8>)
   16e16:	2205      	movs	r2, #5
   16e18:	701a      	strb	r2, [r3, #0]
}
   16e1a:	e724      	b.n	16c66 <at_parse_detect_type+0x22>
			tmpstr++;
   16e1c:	3601      	adds	r6, #1
   16e1e:	e7f4      	b.n	16e0a <at_parse_detect_type+0x1c6>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   16e20:	4a06      	ldr	r2, [pc, #24]	; (16e3c <at_parse_detect_type+0x1f8>)
   16e22:	7812      	ldrb	r2, [r2, #0]
   16e24:	2a08      	cmp	r2, #8
   16e26:	d1d8      	bne.n	16dda <at_parse_detect_type+0x196>
	state = new_state;
   16e28:	4b04      	ldr	r3, [pc, #16]	; (16e3c <at_parse_detect_type+0x1f8>)
   16e2a:	701a      	strb	r2, [r3, #0]
}
   16e2c:	e71b      	b.n	16c66 <at_parse_detect_type+0x22>
	state = new_state;
   16e2e:	4b03      	ldr	r3, [pc, #12]	; (16e3c <at_parse_detect_type+0x1f8>)
   16e30:	2208      	movs	r2, #8
   16e32:	701a      	strb	r2, [r3, #0]
}
   16e34:	e717      	b.n	16c66 <at_parse_detect_type+0x22>
   16e36:	bf00      	nop
   16e38:	2000d573 	.word	0x2000d573
   16e3c:	2000d574 	.word	0x2000d574
   16e40:	000262c0 	.word	0x000262c0
   16e44:	000262c8 	.word	0x000262c8
   16e48:	000262d0 	.word	0x000262d0
   16e4c:	000262dc 	.word	0x000262dc
   16e50:	000262e8 	.word	0x000262e8
   16e54:	000262f4 	.word	0x000262f4
   16e58:	000275b3 	.word	0x000275b3

00016e5c <is_result>:
{
   16e5c:	b570      	push	{r4, r5, r6, lr}
   16e5e:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   16e60:	2400      	movs	r4, #0
   16e62:	2c03      	cmp	r4, #3
   16e64:	d80d      	bhi.n	16e82 <is_result+0x26>
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   16e66:	4b09      	ldr	r3, [pc, #36]	; (16e8c <is_result+0x30>)
   16e68:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   16e6c:	4628      	mov	r0, r5
   16e6e:	f7fa f93c 	bl	110ea <strlen>
   16e72:	4602      	mov	r2, r0
   16e74:	4629      	mov	r1, r5
   16e76:	4630      	mov	r0, r6
   16e78:	f00d fe54 	bl	24b24 <strncmp>
		if (!diff) {
   16e7c:	b118      	cbz	r0, 16e86 <is_result+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   16e7e:	3401      	adds	r4, #1
   16e80:	e7ef      	b.n	16e62 <is_result+0x6>
	return false;
   16e82:	2000      	movs	r0, #0
}
   16e84:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   16e86:	2001      	movs	r0, #1
   16e88:	e7fc      	b.n	16e84 <is_result+0x28>
   16e8a:	bf00      	nop
   16e8c:	00026324 	.word	0x00026324

00016e90 <at_parse_process_element>:

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   16e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e94:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   16e96:	6806      	ldr	r6, [r0, #0]

	if (is_terminated(*tmpstr)) {
   16e98:	7833      	ldrb	r3, [r6, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	f000 80e4 	beq.w	17068 <at_parse_process_element+0x1d8>
   16ea0:	4605      	mov	r5, r0
   16ea2:	4688      	mov	r8, r1
   16ea4:	4617      	mov	r7, r2
		return -1;
	}

	if (state == NOTIFICATION) {
   16ea6:	4b72      	ldr	r3, [pc, #456]	; (17070 <at_parse_process_element+0x1e0>)
   16ea8:	781b      	ldrb	r3, [r3, #0]
   16eaa:	2b06      	cmp	r3, #6
   16eac:	d014      	beq.n	16ed8 <at_parse_process_element+0x48>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == COMMAND) {
   16eae:	2b07      	cmp	r3, #7
   16eb0:	d032      	beq.n	16f18 <at_parse_process_element+0x88>
			tmpstr += 2;
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
			tmpstr++;
		}

	} else if (state == OPTIONAL) {
   16eb2:	2b08      	cmp	r3, #8
   16eb4:	d052      	beq.n	16f5c <at_parse_process_element+0xcc>
		at_params_empty_put(list, index);

	} else if (state == STRING) {
   16eb6:	2b02      	cmp	r3, #2
   16eb8:	d055      	beq.n	16f66 <at_parse_process_element+0xd6>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == QUOTED_STRING) {
   16eba:	2b03      	cmp	r3, #3
   16ebc:	d064      	beq.n	16f88 <at_parse_process_element+0xf8>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == ARRAY) {
   16ebe:	2b01      	cmp	r3, #1
   16ec0:	d071      	beq.n	16fa6 <at_parse_process_element+0x116>
		}

		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));

		tmpstr++;
	} else if (state == NUMBER) {
   16ec2:	2b04      	cmp	r3, #4
   16ec4:	f000 80a7 	beq.w	17016 <at_parse_process_element+0x186>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);

		tmpstr = next;

		at_params_int_put(list, index, value);
	} else if (state == SMS_PDU) {
   16ec8:	2b05      	cmp	r3, #5
   16eca:	f000 80b1 	beq.w	17030 <at_parse_process_element+0x1a0>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == CLAC) {
   16ece:	2b09      	cmp	r3, #9
   16ed0:	f000 80be 	beq.w	17050 <at_parse_process_element+0x1c0>
	const char *tmpstr = *str;
   16ed4:	4634      	mov	r4, r6
   16ed6:	e01a      	b.n	16f0e <at_parse_process_element+0x7e>
		const char *start_ptr = tmpstr++;
   16ed8:	1c74      	adds	r4, r6, #1
		while (is_valid_notification_char(*tmpstr)) {
   16eda:	e004      	b.n	16ee6 <at_parse_process_element+0x56>
	chr = toupper((int)chr);
   16edc:	3b20      	subs	r3, #32
   16ede:	e009      	b.n	16ef4 <at_parse_process_element+0x64>
		return true;
   16ee0:	2301      	movs	r3, #1
   16ee2:	b173      	cbz	r3, 16f02 <at_parse_process_element+0x72>
			tmpstr++;
   16ee4:	3401      	adds	r4, #1
		while (is_valid_notification_char(*tmpstr)) {
   16ee6:	7823      	ldrb	r3, [r4, #0]
	chr = toupper((int)chr);
   16ee8:	4a62      	ldr	r2, [pc, #392]	; (17074 <at_parse_process_element+0x1e4>)
   16eea:	5c9a      	ldrb	r2, [r3, r2]
   16eec:	f002 0203 	and.w	r2, r2, #3
   16ef0:	2a02      	cmp	r2, #2
   16ef2:	d0f3      	beq.n	16edc <at_parse_process_element+0x4c>
   16ef4:	b2db      	uxtb	r3, r3
	if ((chr >= 'A') && (chr <= 'Z')) {
   16ef6:	3b41      	subs	r3, #65	; 0x41
   16ef8:	b2db      	uxtb	r3, r3
   16efa:	2b19      	cmp	r3, #25
   16efc:	d9f0      	bls.n	16ee0 <at_parse_process_element+0x50>
	return false;
   16efe:	2300      	movs	r3, #0
   16f00:	e7ef      	b.n	16ee2 <at_parse_process_element+0x52>
		at_params_string_put(list, index, start_ptr,
   16f02:	1ba3      	subs	r3, r4, r6
   16f04:	4632      	mov	r2, r6
   16f06:	4641      	mov	r1, r8
   16f08:	4638      	mov	r0, r7
   16f0a:	f00b fede 	bl	22cca <at_params_string_put>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
   16f0e:	602c      	str	r4, [r5, #0]
	return 0;
   16f10:	2000      	movs	r0, #0
}
   16f12:	b023      	add	sp, #140	; 0x8c
   16f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*cmd += sizeof("AT") - 1;
   16f18:	1cb4      	adds	r4, r6, #2
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   16f1a:	78b3      	ldrb	r3, [r6, #2]
	if ((chr == '\r') || (chr == '\n')) {
   16f1c:	2b0d      	cmp	r3, #13
   16f1e:	d005      	beq.n	16f2c <at_parse_process_element+0x9c>
   16f20:	2b0a      	cmp	r3, #10
   16f22:	d003      	beq.n	16f2c <at_parse_process_element+0x9c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16f24:	b113      	cbz	r3, 16f2c <at_parse_process_element+0x9c>
	(*cmd)++;
   16f26:	3401      	adds	r4, #1
   16f28:	e000      	b.n	16f2c <at_parse_process_element+0x9c>
			tmpstr++;
   16f2a:	3401      	adds	r4, #1
		while (is_valid_command_char(*tmpstr)) {
   16f2c:	7822      	ldrb	r2, [r4, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   16f2e:	4b51      	ldr	r3, [pc, #324]	; (17074 <at_parse_process_element+0x1e4>)
   16f30:	5cd3      	ldrb	r3, [r2, r3]
   16f32:	f013 0f07 	tst.w	r3, #7
   16f36:	d1f8      	bne.n	16f2a <at_parse_process_element+0x9a>
		at_params_string_put(list, index, start_ptr,
   16f38:	1ba3      	subs	r3, r4, r6
   16f3a:	4632      	mov	r2, r6
   16f3c:	4641      	mov	r1, r8
   16f3e:	4638      	mov	r0, r7
   16f40:	f00b fec3 	bl	22cca <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   16f44:	7823      	ldrb	r3, [r4, #0]
   16f46:	2b3d      	cmp	r3, #61	; 0x3d
   16f48:	d003      	beq.n	16f52 <at_parse_process_element+0xc2>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   16f4a:	2b3f      	cmp	r3, #63	; 0x3f
   16f4c:	d1df      	bne.n	16f0e <at_parse_process_element+0x7e>
			tmpstr++;
   16f4e:	3401      	adds	r4, #1
   16f50:	e7dd      	b.n	16f0e <at_parse_process_element+0x7e>
		    (*(tmpstr + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
   16f52:	7862      	ldrb	r2, [r4, #1]
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   16f54:	2a3f      	cmp	r2, #63	; 0x3f
   16f56:	d1f8      	bne.n	16f4a <at_parse_process_element+0xba>
			tmpstr += 2;
   16f58:	3402      	adds	r4, #2
   16f5a:	e7d8      	b.n	16f0e <at_parse_process_element+0x7e>
		at_params_empty_put(list, index);
   16f5c:	4610      	mov	r0, r2
   16f5e:	f00b fe7e 	bl	22c5e <at_params_empty_put>
	const char *tmpstr = *str;
   16f62:	4634      	mov	r4, r6
   16f64:	e7d3      	b.n	16f0e <at_parse_process_element+0x7e>
   16f66:	4634      	mov	r4, r6
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   16f68:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   16f6a:	2b0d      	cmp	r3, #13
   16f6c:	d004      	beq.n	16f78 <at_parse_process_element+0xe8>
   16f6e:	2b0a      	cmp	r3, #10
   16f70:	d002      	beq.n	16f78 <at_parse_process_element+0xe8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16f72:	b10b      	cbz	r3, 16f78 <at_parse_process_element+0xe8>
			tmpstr++;
   16f74:	3401      	adds	r4, #1
   16f76:	e7f7      	b.n	16f68 <at_parse_process_element+0xd8>
		at_params_string_put(list, index, start_ptr,
   16f78:	1ba3      	subs	r3, r4, r6
   16f7a:	4632      	mov	r2, r6
   16f7c:	4641      	mov	r1, r8
   16f7e:	4638      	mov	r0, r7
   16f80:	f00b fea3 	bl	22cca <at_params_string_put>
		tmpstr++;
   16f84:	3401      	adds	r4, #1
   16f86:	e7c2      	b.n	16f0e <at_parse_process_element+0x7e>
	const char *tmpstr = *str;
   16f88:	4634      	mov	r4, r6
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   16f8a:	7823      	ldrb	r3, [r4, #0]
	if (chr == '"') {
   16f8c:	2b22      	cmp	r3, #34	; 0x22
   16f8e:	d002      	beq.n	16f96 <at_parse_process_element+0x106>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16f90:	b10b      	cbz	r3, 16f96 <at_parse_process_element+0x106>
			tmpstr++;
   16f92:	3401      	adds	r4, #1
   16f94:	e7f9      	b.n	16f8a <at_parse_process_element+0xfa>
		at_params_string_put(list, index, start_ptr,
   16f96:	1ba3      	subs	r3, r4, r6
   16f98:	4632      	mov	r2, r6
   16f9a:	4641      	mov	r1, r8
   16f9c:	4638      	mov	r0, r7
   16f9e:	f00b fe94 	bl	22cca <at_params_string_put>
		tmpstr++;
   16fa2:	3401      	adds	r4, #1
   16fa4:	e7b3      	b.n	16f0e <at_parse_process_element+0x7e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16fa6:	220a      	movs	r2, #10
   16fa8:	a901      	add	r1, sp, #4
   16faa:	4630      	mov	r0, r6
   16fac:	f007 ff04 	bl	1edb8 <strtoul>
   16fb0:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   16fb2:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16fb4:	2601      	movs	r6, #1
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16fb6:	e019      	b.n	16fec <at_parse_process_element+0x15c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   16fb8:	3401      	adds	r4, #1
				tmparray[i++] =
   16fba:	f106 0901 	add.w	r9, r6, #1
					(uint32_t)strtoul(++tmpstr, &next, 10);
   16fbe:	220a      	movs	r2, #10
   16fc0:	a901      	add	r1, sp, #4
   16fc2:	4620      	mov	r0, r4
   16fc4:	f007 fef8 	bl	1edb8 <strtoul>
				tmparray[i++] =
   16fc8:	ab22      	add	r3, sp, #136	; 0x88
   16fca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   16fce:	f846 0c80 	str.w	r0, [r6, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   16fd2:	4620      	mov	r0, r4
   16fd4:	f7fa f889 	bl	110ea <strlen>
   16fd8:	4606      	mov	r6, r0
   16fda:	9801      	ldr	r0, [sp, #4]
   16fdc:	f7fa f885 	bl	110ea <strlen>
   16fe0:	4286      	cmp	r6, r0
   16fe2:	d00f      	beq.n	17004 <at_parse_process_element+0x174>
					tmpstr = next;
   16fe4:	9c01      	ldr	r4, [sp, #4]
				tmparray[i++] =
   16fe6:	464e      	mov	r6, r9
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16fe8:	2e20      	cmp	r6, #32
   16fea:	d00c      	beq.n	17006 <at_parse_process_element+0x176>
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16fec:	7823      	ldrb	r3, [r4, #0]
	if (chr == ')') {
   16fee:	2b29      	cmp	r3, #41	; 0x29
   16ff0:	d009      	beq.n	17006 <at_parse_process_element+0x176>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16ff2:	b143      	cbz	r3, 17006 <at_parse_process_element+0x176>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16ff4:	2b2c      	cmp	r3, #44	; 0x2c
   16ff6:	d0df      	beq.n	16fb8 <at_parse_process_element+0x128>
   16ff8:	2b3a      	cmp	r3, #58	; 0x3a
   16ffa:	d0dd      	beq.n	16fb8 <at_parse_process_element+0x128>
   16ffc:	2b3d      	cmp	r3, #61	; 0x3d
   16ffe:	d0db      	beq.n	16fb8 <at_parse_process_element+0x128>
				tmpstr++;
   17000:	3401      	adds	r4, #1
   17002:	e7f1      	b.n	16fe8 <at_parse_process_element+0x158>
				tmparray[i++] =
   17004:	464e      	mov	r6, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   17006:	00b3      	lsls	r3, r6, #2
   17008:	aa02      	add	r2, sp, #8
   1700a:	4641      	mov	r1, r8
   1700c:	4638      	mov	r0, r7
   1700e:	f00b fe88 	bl	22d22 <at_params_array_put>
		tmpstr++;
   17012:	3401      	adds	r4, #1
   17014:	e77b      	b.n	16f0e <at_parse_process_element+0x7e>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   17016:	220a      	movs	r2, #10
   17018:	a902      	add	r1, sp, #8
   1701a:	4630      	mov	r0, r6
   1701c:	f007 fe50 	bl	1ecc0 <strtoll>
   17020:	4602      	mov	r2, r0
   17022:	460b      	mov	r3, r1
		tmpstr = next;
   17024:	9c02      	ldr	r4, [sp, #8]
		at_params_int_put(list, index, value);
   17026:	4641      	mov	r1, r8
   17028:	4638      	mov	r0, r7
   1702a:	f00b fe33 	bl	22c94 <at_params_int_put>
   1702e:	e76e      	b.n	16f0e <at_parse_process_element+0x7e>
	const char *tmpstr = *str;
   17030:	4634      	mov	r4, r6
		while (isxdigit((int)*tmpstr)) {
   17032:	7822      	ldrb	r2, [r4, #0]
   17034:	4b0f      	ldr	r3, [pc, #60]	; (17074 <at_parse_process_element+0x1e4>)
   17036:	5cd3      	ldrb	r3, [r2, r3]
   17038:	f013 0f44 	tst.w	r3, #68	; 0x44
   1703c:	d001      	beq.n	17042 <at_parse_process_element+0x1b2>
			tmpstr++;
   1703e:	3401      	adds	r4, #1
   17040:	e7f7      	b.n	17032 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   17042:	1ba3      	subs	r3, r4, r6
   17044:	4632      	mov	r2, r6
   17046:	4641      	mov	r1, r8
   17048:	4638      	mov	r0, r7
   1704a:	f00b fe3e 	bl	22cca <at_params_string_put>
   1704e:	e75e      	b.n	16f0e <at_parse_process_element+0x7e>
	const char *tmpstr = *str;
   17050:	4634      	mov	r4, r6
		while (!is_terminated(*tmpstr)) {
   17052:	7823      	ldrb	r3, [r4, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17054:	b10b      	cbz	r3, 1705a <at_parse_process_element+0x1ca>
			tmpstr++;
   17056:	3401      	adds	r4, #1
   17058:	e7fb      	b.n	17052 <at_parse_process_element+0x1c2>
		at_params_string_put(list, index, start_ptr,
   1705a:	1ba3      	subs	r3, r4, r6
   1705c:	4632      	mov	r2, r6
   1705e:	4641      	mov	r1, r8
   17060:	4638      	mov	r0, r7
   17062:	f00b fe32 	bl	22cca <at_params_string_put>
   17066:	e752      	b.n	16f0e <at_parse_process_element+0x7e>
		return -1;
   17068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1706c:	e751      	b.n	16f12 <at_parse_process_element+0x82>
   1706e:	bf00      	nop
   17070:	2000d574 	.word	0x2000d574
   17074:	000275b3 	.word	0x000275b3

00017078 <at_parse_param>:
 * Parameters cannot be null. String must be null terminated.
 */
static int at_parse_param(const char **at_params_str,
			  struct at_param_list *const list,
			  const size_t max_params)
{
   17078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1707c:	b083      	sub	sp, #12
   1707e:	4605      	mov	r5, r0
   17080:	460f      	mov	r7, r1
   17082:	4616      	mov	r6, r2
	int index = 0;
	const char *str = *at_params_str;
   17084:	6803      	ldr	r3, [r0, #0]
   17086:	9301      	str	r3, [sp, #4]
	state = IDLE;
   17088:	2400      	movs	r4, #0
   1708a:	4b43      	ldr	r3, [pc, #268]	; (17198 <at_parse_param+0x120>)
   1708c:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   1708e:	4b43      	ldr	r3, [pc, #268]	; (1719c <at_parse_param+0x124>)
   17090:	701c      	strb	r4, [r3, #0]
	bool oversized = false;
   17092:	46a0      	mov	r8, r4
	int ret;

	reset_state();

	while ((!is_terminated(*str)) && (index < max_params)) {
   17094:	9b01      	ldr	r3, [sp, #4]
   17096:	781a      	ldrb	r2, [r3, #0]
   17098:	2a00      	cmp	r2, #0
   1709a:	d064      	beq.n	17166 <at_parse_param+0xee>
   1709c:	42b4      	cmp	r4, r6
   1709e:	d262      	bcs.n	17166 <at_parse_param+0xee>
		if (isspace((int)*str)) {
   170a0:	493f      	ldr	r1, [pc, #252]	; (171a0 <at_parse_param+0x128>)
   170a2:	5c52      	ldrb	r2, [r2, r1]
   170a4:	f012 0f08 	tst.w	r2, #8
   170a8:	d001      	beq.n	170ae <at_parse_param+0x36>
			str++;
   170aa:	3301      	adds	r3, #1
   170ac:	9301      	str	r3, [sp, #4]
		}

		ret = at_parse_detect_type(&str, index);
   170ae:	4621      	mov	r1, r4
   170b0:	a801      	add	r0, sp, #4
   170b2:	f7ff fdc7 	bl	16c44 <at_parse_detect_type>
		if (ret == -1) {
   170b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   170ba:	d054      	beq.n	17166 <at_parse_param+0xee>
			break;
		}
		if (ret == -2) {
   170bc:	f110 0f02 	cmn.w	r0, #2
   170c0:	d023      	beq.n	1710a <at_parse_param+0x92>
			/* CLAC response */
			str = *at_params_str;
			index = 0;
		}

		if (at_parse_process_element(&str, index, list) == -1) {
   170c2:	463a      	mov	r2, r7
   170c4:	4621      	mov	r1, r4
   170c6:	a801      	add	r0, sp, #4
   170c8:	f7ff fee2 	bl	16e90 <at_parse_process_element>
   170cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   170d0:	d049      	beq.n	17166 <at_parse_param+0xee>
			break;
		}

		if (is_separator(*str)) {
   170d2:	9a01      	ldr	r2, [sp, #4]
   170d4:	7813      	ldrb	r3, [r2, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   170d6:	2b2c      	cmp	r3, #44	; 0x2c
   170d8:	d003      	beq.n	170e2 <at_parse_param+0x6a>
   170da:	2b3a      	cmp	r3, #58	; 0x3a
   170dc:	d001      	beq.n	170e2 <at_parse_param+0x6a>
   170de:	2b3d      	cmp	r3, #61	; 0x3d
   170e0:	d107      	bne.n	170f2 <at_parse_param+0x7a>
			if (is_lfcr(*(str + 1))) {
   170e2:	7853      	ldrb	r3, [r2, #1]
	if ((chr == '\r') || (chr == '\n')) {
   170e4:	2b0d      	cmp	r3, #13
   170e6:	d014      	beq.n	17112 <at_parse_param+0x9a>
   170e8:	2b0a      	cmp	r3, #10
   170ea:	d012      	beq.n	17112 <at_parse_param+0x9a>
							     list) == -1) {
					break;
				}
			}

			str++;
   170ec:	9b01      	ldr	r3, [sp, #4]
   170ee:	3301      	adds	r3, #1
   170f0:	9301      	str	r3, [sp, #4]
		}

		/* Peek forward to see if we will be terminated */
		if (is_lfcr(*str)) {
   170f2:	9a01      	ldr	r2, [sp, #4]
   170f4:	7813      	ldrb	r3, [r2, #0]
   170f6:	2b0d      	cmp	r3, #13
   170f8:	d020      	beq.n	1713c <at_parse_param+0xc4>
   170fa:	2b0a      	cmp	r3, #10
   170fc:	d01c      	beq.n	17138 <at_parse_param+0xc0>
				str += i;
				break;
			}
		}

		index++;
   170fe:	3401      	adds	r4, #1

		if (index == max_params) {
   17100:	42a6      	cmp	r6, r4
   17102:	d1c7      	bne.n	17094 <at_parse_param+0x1c>
			oversized = true;
   17104:	f04f 0801 	mov.w	r8, #1
   17108:	e7c4      	b.n	17094 <at_parse_param+0x1c>
			str = *at_params_str;
   1710a:	682b      	ldr	r3, [r5, #0]
   1710c:	9301      	str	r3, [sp, #4]
			index = 0;
   1710e:	2400      	movs	r4, #0
   17110:	e7d7      	b.n	170c2 <at_parse_param+0x4a>
				index++;
   17112:	3401      	adds	r4, #1
				if (index == max_params) {
   17114:	42a6      	cmp	r6, r4
   17116:	d034      	beq.n	17182 <at_parse_param+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   17118:	4621      	mov	r1, r4
   1711a:	a801      	add	r0, sp, #4
   1711c:	f7ff fd92 	bl	16c44 <at_parse_detect_type>
   17120:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17124:	d01f      	beq.n	17166 <at_parse_param+0xee>
				if (at_parse_process_element(&str, index,
   17126:	463a      	mov	r2, r7
   17128:	4621      	mov	r1, r4
   1712a:	a801      	add	r0, sp, #4
   1712c:	f7ff feb0 	bl	16e90 <at_parse_process_element>
   17130:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17134:	d1da      	bne.n	170ec <at_parse_param+0x74>
   17136:	e016      	b.n	17166 <at_parse_param+0xee>
   17138:	2300      	movs	r3, #0
   1713a:	e000      	b.n	1713e <at_parse_param+0xc6>
   1713c:	2300      	movs	r3, #0
			while (is_lfcr(str[++i])) {
   1713e:	3301      	adds	r3, #1
   17140:	4699      	mov	r9, r3
   17142:	18d0      	adds	r0, r2, r3
   17144:	5cd1      	ldrb	r1, [r2, r3]
   17146:	290d      	cmp	r1, #13
   17148:	d0f9      	beq.n	1713e <at_parse_param+0xc6>
   1714a:	290a      	cmp	r1, #10
   1714c:	d0f7      	beq.n	1713e <at_parse_param+0xc6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1714e:	b139      	cbz	r1, 17160 <at_parse_param+0xe8>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   17150:	292b      	cmp	r1, #43	; 0x2b
   17152:	d005      	beq.n	17160 <at_parse_param+0xe8>
   17154:	2925      	cmp	r1, #37	; 0x25
   17156:	d003      	beq.n	17160 <at_parse_param+0xe8>
			    is_result(str + i)) {
   17158:	f7ff fe80 	bl	16e5c <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1715c:	2800      	cmp	r0, #0
   1715e:	d0ce      	beq.n	170fe <at_parse_param+0x86>
				str += i;
   17160:	9b01      	ldr	r3, [sp, #4]
   17162:	444b      	add	r3, r9
   17164:	9301      	str	r3, [sp, #4]
		}
	}

	*at_params_str = str;
   17166:	9801      	ldr	r0, [sp, #4]
   17168:	6028      	str	r0, [r5, #0]

	if (oversized) {
   1716a:	f1b8 0f00 	cmp.w	r8, #0
   1716e:	d10b      	bne.n	17188 <at_parse_param+0x110>
		return -E2BIG;
	}

	if (!is_terminated(*str) && !is_result(str)) {
   17170:	7803      	ldrb	r3, [r0, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17172:	b163      	cbz	r3, 1718e <at_parse_param+0x116>
   17174:	f7ff fe72 	bl	16e5c <is_result>
   17178:	b158      	cbz	r0, 17192 <at_parse_param+0x11a>
		return -EAGAIN;
	}

	return 0;
   1717a:	2000      	movs	r0, #0
}
   1717c:	b003      	add	sp, #12
   1717e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					oversized = true;
   17182:	f04f 0801 	mov.w	r8, #1
   17186:	e7ee      	b.n	17166 <at_parse_param+0xee>
		return -E2BIG;
   17188:	f06f 0006 	mvn.w	r0, #6
   1718c:	e7f6      	b.n	1717c <at_parse_param+0x104>
	return 0;
   1718e:	2000      	movs	r0, #0
   17190:	e7f4      	b.n	1717c <at_parse_param+0x104>
		return -EAGAIN;
   17192:	f06f 000a 	mvn.w	r0, #10
   17196:	e7f1      	b.n	1717c <at_parse_param+0x104>
   17198:	2000d574 	.word	0x2000d574
   1719c:	2000d573 	.word	0x2000d573
   171a0:	000275b3 	.word	0x000275b3

000171a4 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   171a4:	b510      	push	{r4, lr}
   171a6:	b090      	sub	sp, #64	; 0x40
   171a8:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   171aa:	2240      	movs	r2, #64	; 0x40
   171ac:	2100      	movs	r1, #0
   171ae:	4668      	mov	r0, sp
   171b0:	f00d fc99 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   171b4:	2201      	movs	r2, #1
   171b6:	a902      	add	r1, sp, #8
   171b8:	4620      	mov	r0, r4
   171ba:	f001 fa7f 	bl	186bc <parse_rrc_mode>
	if (err) {
   171be:	b938      	cbnz	r0, 171d0 <at_handler_cscon+0x2c>
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_IDLE);
	} else if (evt.rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_CONNECTED);
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;
   171c0:	2303      	movs	r3, #3
   171c2:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   171c6:	4668      	mov	r0, sp
   171c8:	f001 f832 	bl	18230 <event_handler_list_dispatch>
}
   171cc:	b010      	add	sp, #64	; 0x40
   171ce:	bd10      	pop	{r4, pc}
   171d0:	4601      	mov	r1, r0
   171d2:	4b08      	ldr	r3, [pc, #32]	; (171f4 <at_handler_cscon+0x50>)
   171d4:	4a08      	ldr	r2, [pc, #32]	; (171f8 <at_handler_cscon+0x54>)
   171d6:	1a9b      	subs	r3, r3, r2
   171d8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   171da:	f04f 0200 	mov.w	r2, #0
   171de:	2001      	movs	r0, #1
   171e0:	f360 0202 	bfi	r2, r0, #0, #3
   171e4:	f36f 02c5 	bfc	r2, #3, #3
   171e8:	f363 128f 	bfi	r2, r3, #6, #10
   171ec:	4803      	ldr	r0, [pc, #12]	; (171fc <at_handler_cscon+0x58>)
   171ee:	f7fb fee1 	bl	12fb4 <log_1>
		return;
   171f2:	e7eb      	b.n	171cc <at_handler_cscon+0x28>
   171f4:	0002531c 	.word	0x0002531c
   171f8:	000252ec 	.word	0x000252ec
   171fc:	00026334 	.word	0x00026334

00017200 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   17200:	b510      	push	{r4, lr}
   17202:	b090      	sub	sp, #64	; 0x40
   17204:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17206:	2240      	movs	r2, #64	; 0x40
   17208:	2100      	movs	r1, #0
   1720a:	4668      	mov	r0, sp
   1720c:	f00d fc6b 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   17210:	a902      	add	r1, sp, #8
   17212:	4620      	mov	r0, r4
   17214:	f001 f866 	bl	182e4 <parse_edrx>
	if (err) {
   17218:	b938      	cbnz	r0, 1722a <at_handler_cedrxp+0x2a>
		LOG_ERR("Can't parse eDRX, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1721a:	2302      	movs	r3, #2
   1721c:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   17220:	4668      	mov	r0, sp
   17222:	f001 f805 	bl	18230 <event_handler_list_dispatch>
}
   17226:	b010      	add	sp, #64	; 0x40
   17228:	bd10      	pop	{r4, pc}
   1722a:	4601      	mov	r1, r0
   1722c:	4b08      	ldr	r3, [pc, #32]	; (17250 <at_handler_cedrxp+0x50>)
   1722e:	4a09      	ldr	r2, [pc, #36]	; (17254 <at_handler_cedrxp+0x54>)
   17230:	1a9b      	subs	r3, r3, r2
   17232:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse eDRX, error: %d", err);
   17234:	f04f 0200 	mov.w	r2, #0
   17238:	2001      	movs	r0, #1
   1723a:	f360 0202 	bfi	r2, r0, #0, #3
   1723e:	f36f 02c5 	bfc	r2, #3, #3
   17242:	f363 128f 	bfi	r2, r3, #6, #10
   17246:	4804      	ldr	r0, [pc, #16]	; (17258 <at_handler_cedrxp+0x58>)
   17248:	f7fb feb4 	bl	12fb4 <log_1>
		return;
   1724c:	e7eb      	b.n	17226 <at_handler_cedrxp+0x26>
   1724e:	bf00      	nop
   17250:	0002531c 	.word	0x0002531c
   17254:	000252ec 	.word	0x000252ec
   17258:	0002635c 	.word	0x0002635c

0001725c <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   1725c:	b510      	push	{r4, lr}
   1725e:	b090      	sub	sp, #64	; 0x40
   17260:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17262:	2240      	movs	r2, #64	; 0x40
   17264:	2100      	movs	r1, #0
   17266:	4668      	mov	r0, sp
   17268:	f00d fc3d 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   1726c:	a902      	add	r1, sp, #8
   1726e:	4620      	mov	r0, r4
   17270:	f001 fbc6 	bl	18a00 <parse_xt3412>
	if (err) {
   17274:	b940      	cbnz	r0, 17288 <at_handler_xt3412+0x2c>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
		return;
	}

	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   17276:	9b02      	ldr	r3, [sp, #8]
   17278:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1727c:	3b08      	subs	r3, #8
   1727e:	9a03      	ldr	r2, [sp, #12]
   17280:	4313      	orrs	r3, r2
   17282:	d013      	beq.n	172ac <at_handler_xt3412+0x50>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   17284:	b010      	add	sp, #64	; 0x40
   17286:	bd10      	pop	{r4, pc}
   17288:	4601      	mov	r1, r0
   1728a:	4b0c      	ldr	r3, [pc, #48]	; (172bc <at_handler_xt3412+0x60>)
   1728c:	4a0c      	ldr	r2, [pc, #48]	; (172c0 <at_handler_xt3412+0x64>)
   1728e:	1a9b      	subs	r3, r3, r2
   17290:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   17292:	f04f 0200 	mov.w	r2, #0
   17296:	2001      	movs	r0, #1
   17298:	f360 0202 	bfi	r2, r0, #0, #3
   1729c:	f36f 02c5 	bfc	r2, #3, #3
   172a0:	f363 128f 	bfi	r2, r3, #6, #10
   172a4:	4807      	ldr	r0, [pc, #28]	; (172c4 <at_handler_xt3412+0x68>)
   172a6:	f7fb fe85 	bl	12fb4 <log_1>
		return;
   172aa:	e7eb      	b.n	17284 <at_handler_xt3412+0x28>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   172ac:	2306      	movs	r3, #6
   172ae:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   172b2:	4668      	mov	r0, sp
   172b4:	f000 ffbc 	bl	18230 <event_handler_list_dispatch>
   172b8:	e7e4      	b.n	17284 <at_handler_xt3412+0x28>
   172ba:	bf00      	nop
   172bc:	0002531c 	.word	0x0002531c
   172c0:	000252ec 	.word	0x000252ec
   172c4:	00026378 	.word	0x00026378

000172c8 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   172c8:	b570      	push	{r4, r5, r6, lr}
   172ca:	b090      	sub	sp, #64	; 0x40
   172cc:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   172ce:	2240      	movs	r2, #64	; 0x40
   172d0:	2100      	movs	r1, #0
   172d2:	4668      	mov	r0, sp
   172d4:	f00d fc07 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	int ncell_count = neighborcell_count_get(response);
   172d8:	4620      	mov	r0, r4
   172da:	f001 fc1d 	bl	18b18 <neighborcell_count_get>
   172de:	4605      	mov	r5, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   172e0:	f000 ff9e 	bl	18220 <event_handler_list_is_empty>
   172e4:	bb70      	cbnz	r0, 17344 <at_handler_ncellmeas+0x7c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   172e6:	b1b5      	cbz	r5, 17316 <at_handler_ncellmeas+0x4e>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   172e8:	2110      	movs	r1, #16
   172ea:	4628      	mov	r0, r5
   172ec:	f00d fbba 	bl	24a64 <k_calloc>
		if (neighbor_cells == NULL) {
   172f0:	4605      	mov	r5, r0
   172f2:	b988      	cbnz	r0, 17318 <at_handler_ncellmeas+0x50>
   172f4:	4b2b      	ldr	r3, [pc, #172]	; (173a4 <at_handler_ncellmeas+0xdc>)
   172f6:	4a2c      	ldr	r2, [pc, #176]	; (173a8 <at_handler_ncellmeas+0xe0>)
   172f8:	1a9b      	subs	r3, r3, r2
   172fa:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to allocate memory for neighbor cells");
   172fc:	f04f 0100 	mov.w	r1, #0
   17300:	2201      	movs	r2, #1
   17302:	f362 0102 	bfi	r1, r2, #0, #3
   17306:	f36f 01c5 	bfc	r1, #3, #3
   1730a:	f363 118f 	bfi	r1, r3, #6, #10
   1730e:	4827      	ldr	r0, [pc, #156]	; (173ac <at_handler_ncellmeas+0xe4>)
   17310:	f7fb fe26 	bl	12f60 <log_0>
			return;
   17314:	e016      	b.n	17344 <at_handler_ncellmeas+0x7c>
	struct lte_lc_ncell *neighbor_cells = NULL;
   17316:	2500      	movs	r5, #0
		}
	}

	evt.cells_info.neighbor_cells = neighbor_cells;
   17318:	950f      	str	r5, [sp, #60]	; 0x3c

	err = parse_ncellmeas(response, &evt.cells_info);
   1731a:	a902      	add	r1, sp, #8
   1731c:	4620      	mov	r0, r4
   1731e:	f001 fc25 	bl	18b6c <parse_ncellmeas>
   17322:	4601      	mov	r1, r0

	switch (err) {
   17324:	f110 0f07 	cmn.w	r0, #7
   17328:	d00e      	beq.n	17348 <at_handler_ncellmeas+0x80>
   1732a:	db2a      	blt.n	17382 <at_handler_ncellmeas+0xba>
   1732c:	2801      	cmp	r0, #1
   1732e:	d828      	bhi.n	17382 <at_handler_ncellmeas+0xba>
		LOG_WRN("More cells than the configured max count of %d were found",
			CONFIG_LTE_NEIGHBOR_CELLS_MAX);
		/* Fall through */
	case 0: /* Fall through */
	case 1:
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   17330:	2307      	movs	r3, #7
   17332:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   17336:	4668      	mov	r0, sp
   17338:	f000 ff7a 	bl	18230 <event_handler_list_dispatch>
	default:
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
		break;
	}

	if (neighbor_cells) {
   1733c:	b115      	cbz	r5, 17344 <at_handler_ncellmeas+0x7c>
		k_free(neighbor_cells);
   1733e:	4628      	mov	r0, r5
   17340:	f00d fb81 	bl	24a46 <k_free>
	}
}
   17344:	b010      	add	sp, #64	; 0x40
   17346:	bd70      	pop	{r4, r5, r6, pc}
   17348:	4c16      	ldr	r4, [pc, #88]	; (173a4 <at_handler_ncellmeas+0xdc>)
   1734a:	4b17      	ldr	r3, [pc, #92]	; (173a8 <at_handler_ncellmeas+0xe0>)
   1734c:	1ae4      	subs	r4, r4, r3
   1734e:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("Not all neighbor cells could be parsed");
   17350:	2602      	movs	r6, #2
   17352:	f04f 0100 	mov.w	r1, #0
   17356:	f366 0102 	bfi	r1, r6, #0, #3
   1735a:	f36f 01c5 	bfc	r1, #3, #3
   1735e:	f364 118f 	bfi	r1, r4, #6, #10
   17362:	4813      	ldr	r0, [pc, #76]	; (173b0 <at_handler_ncellmeas+0xe8>)
   17364:	f7fb fdfc 	bl	12f60 <log_0>
		LOG_WRN("More cells than the configured max count of %d were found",
   17368:	f04f 0200 	mov.w	r2, #0
   1736c:	f366 0202 	bfi	r2, r6, #0, #3
   17370:	f36f 02c5 	bfc	r2, #3, #3
   17374:	f364 128f 	bfi	r2, r4, #6, #10
   17378:	210a      	movs	r1, #10
   1737a:	480e      	ldr	r0, [pc, #56]	; (173b4 <at_handler_ncellmeas+0xec>)
   1737c:	f7fb fe1a 	bl	12fb4 <log_1>
   17380:	e7d6      	b.n	17330 <at_handler_ncellmeas+0x68>
   17382:	4b08      	ldr	r3, [pc, #32]	; (173a4 <at_handler_ncellmeas+0xdc>)
   17384:	4a08      	ldr	r2, [pc, #32]	; (173a8 <at_handler_ncellmeas+0xe0>)
   17386:	1a9b      	subs	r3, r3, r2
   17388:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1738a:	f04f 0200 	mov.w	r2, #0
   1738e:	2001      	movs	r0, #1
   17390:	f360 0202 	bfi	r2, r0, #0, #3
   17394:	f36f 02c5 	bfc	r2, #3, #3
   17398:	f363 128f 	bfi	r2, r3, #6, #10
   1739c:	4806      	ldr	r0, [pc, #24]	; (173b8 <at_handler_ncellmeas+0xf0>)
   1739e:	f7fb fe09 	bl	12fb4 <log_1>
   173a2:	e7cb      	b.n	1733c <at_handler_ncellmeas+0x74>
   173a4:	0002531c 	.word	0x0002531c
   173a8:	000252ec 	.word	0x000252ec
   173ac:	000263ac 	.word	0x000263ac
   173b0:	000263dc 	.word	0x000263dc
   173b4:	00026404 	.word	0x00026404
   173b8:	00026440 	.word	0x00026440

000173bc <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   173bc:	b510      	push	{r4, lr}
   173be:	b090      	sub	sp, #64	; 0x40
   173c0:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   173c2:	2240      	movs	r2, #64	; 0x40
   173c4:	2100      	movs	r1, #0
   173c6:	4668      	mov	r0, sp
   173c8:	f00d fb8d 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   173cc:	a902      	add	r1, sp, #8
   173ce:	4620      	mov	r0, r4
   173d0:	f001 fd50 	bl	18e74 <parse_xmodemsleep>
	if (err) {
   173d4:	b9a8      	cbnz	r0, 17402 <at_handler_xmodemsleep+0x46>
	}

	/* Link controller only supports PSM, RF inactivity and flight mode
	 * modem sleep types.
	 */
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   173d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   173da:	1e53      	subs	r3, r2, #1
   173dc:	b2db      	uxtb	r3, r3
   173de:	2b01      	cmp	r3, #1
   173e0:	d901      	bls.n	173e6 <at_handler_xmodemsleep+0x2a>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   173e2:	2a04      	cmp	r2, #4
   173e4:	d125      	bne.n	17432 <at_handler_xmodemsleep+0x76>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE)) {
		return;
	}

	/* Propagate the appropriate event depending on the parsed time parameter. */
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   173e6:	9904      	ldr	r1, [sp, #16]
   173e8:	9a05      	ldr	r2, [sp, #20]
   173ea:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   173ee:	3b08      	subs	r3, #8
   173f0:	4313      	orrs	r3, r2
   173f2:	d018      	beq.n	17426 <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
	} else if (evt.modem_sleep.time == 0) {
   173f4:	ea51 0302 	orrs.w	r3, r1, r2
   173f8:	d11d      	bne.n	17436 <at_handler_xmodemsleep+0x7a>
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_EXIT);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   173fa:	2309      	movs	r3, #9
   173fc:	f88d 3000 	strb.w	r3, [sp]
   17400:	e014      	b.n	1742c <at_handler_xmodemsleep+0x70>
   17402:	4601      	mov	r1, r0
   17404:	4b0e      	ldr	r3, [pc, #56]	; (17440 <at_handler_xmodemsleep+0x84>)
   17406:	4a0f      	ldr	r2, [pc, #60]	; (17444 <at_handler_xmodemsleep+0x88>)
   17408:	1a9b      	subs	r3, r3, r2
   1740a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1740c:	f04f 0200 	mov.w	r2, #0
   17410:	2001      	movs	r0, #1
   17412:	f360 0202 	bfi	r2, r0, #0, #3
   17416:	f36f 02c5 	bfc	r2, #3, #3
   1741a:	f363 128f 	bfi	r2, r3, #6, #10
   1741e:	480a      	ldr	r0, [pc, #40]	; (17448 <at_handler_xmodemsleep+0x8c>)
   17420:	f7fb fdc8 	bl	12fb4 <log_1>
		return;
   17424:	e005      	b.n	17432 <at_handler_xmodemsleep+0x76>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   17426:	2308      	movs	r3, #8
   17428:	f88d 3000 	strb.w	r3, [sp]
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_ENTER);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
   1742c:	4668      	mov	r0, sp
   1742e:	f000 feff 	bl	18230 <event_handler_list_dispatch>
}
   17432:	b010      	add	sp, #64	; 0x40
   17434:	bd10      	pop	{r4, pc}
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   17436:	230a      	movs	r3, #10
   17438:	f88d 3000 	strb.w	r3, [sp]
   1743c:	e7f6      	b.n	1742c <at_handler_xmodemsleep+0x70>
   1743e:	bf00      	nop
   17440:	0002531c 	.word	0x0002531c
   17444:	000252ec 	.word	0x000252ec
   17448:	0002646c 	.word	0x0002646c

0001744c <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   1744c:	b510      	push	{r4, lr}
   1744e:	b090      	sub	sp, #64	; 0x40
   17450:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   17452:	2240      	movs	r2, #64	; 0x40
   17454:	2100      	movs	r1, #0
   17456:	4668      	mov	r0, sp
   17458:	f00d fb45 	bl	24ae6 <memset>

	__ASSERT_NO_MSG(response != NULL);

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   1745c:	a902      	add	r1, sp, #8
   1745e:	4620      	mov	r0, r4
   17460:	f001 fda0 	bl	18fa4 <parse_mdmev>
	if (err) {
   17464:	b938      	cbnz	r0, 17476 <at_handler_mdmev+0x2a>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;
   17466:	230b      	movs	r3, #11
   17468:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   1746c:	4668      	mov	r0, sp
   1746e:	f000 fedf 	bl	18230 <event_handler_list_dispatch>
}
   17472:	b010      	add	sp, #64	; 0x40
   17474:	bd10      	pop	{r4, pc}
   17476:	4601      	mov	r1, r0
   17478:	4b08      	ldr	r3, [pc, #32]	; (1749c <at_handler_mdmev+0x50>)
   1747a:	4a09      	ldr	r2, [pc, #36]	; (174a0 <at_handler_mdmev+0x54>)
   1747c:	1a9b      	subs	r3, r3, r2
   1747e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   17480:	f04f 0200 	mov.w	r2, #0
   17484:	2001      	movs	r0, #1
   17486:	f360 0202 	bfi	r2, r0, #0, #3
   1748a:	f36f 02c5 	bfc	r2, #3, #3
   1748e:	f363 128f 	bfi	r2, r3, #6, #10
   17492:	4804      	ldr	r0, [pc, #16]	; (174a4 <at_handler_mdmev+0x58>)
   17494:	f7fb fd8e 	bl	12fb4 <log_1>
		return;
   17498:	e7eb      	b.n	17472 <at_handler_mdmev+0x26>
   1749a:	bf00      	nop
   1749c:	0002531c 	.word	0x0002531c
   174a0:	000252ec 	.word	0x000252ec
   174a4:	000264a8 	.word	0x000264a8

000174a8 <enable_notifications>:

static int enable_notifications(void)
{
   174a8:	b570      	push	{r4, r5, r6, lr}
   174aa:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   174ac:	482f      	ldr	r0, [pc, #188]	; (1756c <enable_notifications+0xc4>)
   174ae:	f004 ff4f 	bl	1c350 <nrf_modem_at_printf>
	if (err) {
   174b2:	4605      	mov	r5, r0
   174b4:	b928      	cbnz	r0, 174c2 <enable_notifications+0x1a>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
		}
	}

	/* +CSCON notifications */
	err = nrf_modem_at_printf(cscon);
   174b6:	482e      	ldr	r0, [pc, #184]	; (17570 <enable_notifications+0xc8>)
   174b8:	f004 ff4a 	bl	1c350 <nrf_modem_at_printf>
	if (err) {
   174bc:	b9a8      	cbnz	r0, 174ea <enable_notifications+0x42>
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   174be:	b00e      	add	sp, #56	; 0x38
   174c0:	bd70      	pop	{r4, r5, r6, pc}
   174c2:	4b2c      	ldr	r3, [pc, #176]	; (17574 <enable_notifications+0xcc>)
   174c4:	4a2c      	ldr	r2, [pc, #176]	; (17578 <enable_notifications+0xd0>)
   174c6:	1a9b      	subs	r3, r3, r2
   174c8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   174ca:	f04f 0200 	mov.w	r2, #0
   174ce:	2101      	movs	r1, #1
   174d0:	f361 0202 	bfi	r2, r1, #0, #3
   174d4:	f36f 02c5 	bfc	r2, #3, #3
   174d8:	f363 128f 	bfi	r2, r3, #6, #10
   174dc:	4601      	mov	r1, r0
   174de:	4827      	ldr	r0, [pc, #156]	; (1757c <enable_notifications+0xd4>)
   174e0:	f7fb fd68 	bl	12fb4 <log_1>
		return -EFAULT;
   174e4:	f06f 000d 	mvn.w	r0, #13
   174e8:	e7e9      	b.n	174be <enable_notifications+0x16>
   174ea:	4c22      	ldr	r4, [pc, #136]	; (17574 <enable_notifications+0xcc>)
   174ec:	4b22      	ldr	r3, [pc, #136]	; (17578 <enable_notifications+0xd0>)
   174ee:	1ae4      	subs	r4, r4, r3
   174f0:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   174f2:	2602      	movs	r6, #2
   174f4:	f04f 0200 	mov.w	r2, #0
   174f8:	f366 0202 	bfi	r2, r6, #0, #3
   174fc:	f36f 02c5 	bfc	r2, #3, #3
   17500:	f364 128f 	bfi	r2, r4, #6, #10
   17504:	4601      	mov	r1, r0
   17506:	481e      	ldr	r0, [pc, #120]	; (17580 <enable_notifications+0xd8>)
   17508:	f7fb fd54 	bl	12fb4 <log_1>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1750c:	f04f 0100 	mov.w	r1, #0
   17510:	f366 0102 	bfi	r1, r6, #0, #3
   17514:	f36f 01c5 	bfc	r1, #3, #3
   17518:	f364 118f 	bfi	r1, r4, #6, #10
   1751c:	4819      	ldr	r0, [pc, #100]	; (17584 <enable_notifications+0xdc>)
   1751e:	f7fb fd1f 	bl	12f60 <log_0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   17522:	4a19      	ldr	r2, [pc, #100]	; (17588 <enable_notifications+0xe0>)
   17524:	2132      	movs	r1, #50	; 0x32
   17526:	a801      	add	r0, sp, #4
   17528:	f004 ff3a 	bl	1c3a0 <nrf_modem_at_cmd>
		if (err == 0) {
   1752c:	b108      	cbz	r0, 17532 <enable_notifications+0x8a>
	return 0;
   1752e:	4628      	mov	r0, r5
   17530:	e7c5      	b.n	174be <enable_notifications+0x16>
			char *end = strstr(buf, "\r\nOK");
   17532:	4916      	ldr	r1, [pc, #88]	; (1758c <enable_notifications+0xe4>)
   17534:	a801      	add	r0, sp, #4
   17536:	f00d fb28 	bl	24b8a <strstr>
			if (end) {
   1753a:	b108      	cbz	r0, 17540 <enable_notifications+0x98>
				*end = '\0';
   1753c:	2200      	movs	r2, #0
   1753e:	7002      	strb	r2, [r0, #0]
   17540:	4b0c      	ldr	r3, [pc, #48]	; (17574 <enable_notifications+0xcc>)
   17542:	4a0d      	ldr	r2, [pc, #52]	; (17578 <enable_notifications+0xd0>)
   17544:	1a9b      	subs	r3, r3, r2
   17546:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   17548:	f04f 0400 	mov.w	r4, #0
   1754c:	2202      	movs	r2, #2
   1754e:	f362 0402 	bfi	r4, r2, #0, #3
   17552:	f36f 04c5 	bfc	r4, #3, #3
   17556:	f363 148f 	bfi	r4, r3, #6, #10
   1755a:	a801      	add	r0, sp, #4
   1755c:	f7fb fb98 	bl	12c90 <z_log_strdup>
   17560:	4601      	mov	r1, r0
   17562:	4622      	mov	r2, r4
   17564:	480a      	ldr	r0, [pc, #40]	; (17590 <enable_notifications+0xe8>)
   17566:	f7fb fd25 	bl	12fb4 <log_1>
   1756a:	e7e0      	b.n	1752e <enable_notifications+0x86>
   1756c:	000264d8 	.word	0x000264d8
   17570:	00026b88 	.word	0x00026b88
   17574:	0002531c 	.word	0x0002531c
   17578:	000252ec 	.word	0x000252ec
   1757c:	000264e4 	.word	0x000264e4
   17580:	0002651c 	.word	0x0002651c
   17584:	00026554 	.word	0x00026554
   17588:	00026588 	.word	0x00026588
   1758c:	00026590 	.word	0x00026590
   17590:	00026598 	.word	0x00026598

00017594 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   17594:	b508      	push	{r3, lr}
	int err;

	if (enable) {
   17596:	b338      	cbz	r0, 175e8 <lte_lc_psm_req+0x54>
		if (strlen(psm_param_rptau) == 8 &&
   17598:	4820      	ldr	r0, [pc, #128]	; (1761c <lte_lc_psm_req+0x88>)
   1759a:	f7f9 fda6 	bl	110ea <strlen>
   1759e:	2808      	cmp	r0, #8
   175a0:	d00d      	beq.n	175be <lte_lc_psm_req+0x2a>
		    strlen(psm_param_rat) == 8) {
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
						  psm_param_rptau,
						  psm_param_rat);
		} else if (strlen(psm_param_rptau) == 8) {
   175a2:	481e      	ldr	r0, [pc, #120]	; (1761c <lte_lc_psm_req+0x88>)
   175a4:	f7f9 fda1 	bl	110ea <strlen>
   175a8:	2808      	cmp	r0, #8
   175aa:	d013      	beq.n	175d4 <lte_lc_psm_req+0x40>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
		} else if (strlen(psm_param_rat) == 8) {
   175ac:	481c      	ldr	r0, [pc, #112]	; (17620 <lte_lc_psm_req+0x8c>)
   175ae:	f7f9 fd9c 	bl	110ea <strlen>
   175b2:	2808      	cmp	r0, #8
   175b4:	d013      	beq.n	175de <lte_lc_psm_req+0x4a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
		} else {
			err = nrf_modem_at_printf("AT+CPSMS=1");
   175b6:	481b      	ldr	r0, [pc, #108]	; (17624 <lte_lc_psm_req+0x90>)
   175b8:	f004 feca 	bl	1c350 <nrf_modem_at_printf>
   175bc:	e017      	b.n	175ee <lte_lc_psm_req+0x5a>
		    strlen(psm_param_rat) == 8) {
   175be:	4818      	ldr	r0, [pc, #96]	; (17620 <lte_lc_psm_req+0x8c>)
   175c0:	f7f9 fd93 	bl	110ea <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   175c4:	2808      	cmp	r0, #8
   175c6:	d1ec      	bne.n	175a2 <lte_lc_psm_req+0xe>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   175c8:	4a15      	ldr	r2, [pc, #84]	; (17620 <lte_lc_psm_req+0x8c>)
   175ca:	4914      	ldr	r1, [pc, #80]	; (1761c <lte_lc_psm_req+0x88>)
   175cc:	4816      	ldr	r0, [pc, #88]	; (17628 <lte_lc_psm_req+0x94>)
   175ce:	f004 febf 	bl	1c350 <nrf_modem_at_printf>
   175d2:	e00c      	b.n	175ee <lte_lc_psm_req+0x5a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   175d4:	4911      	ldr	r1, [pc, #68]	; (1761c <lte_lc_psm_req+0x88>)
   175d6:	4815      	ldr	r0, [pc, #84]	; (1762c <lte_lc_psm_req+0x98>)
   175d8:	f004 feba 	bl	1c350 <nrf_modem_at_printf>
   175dc:	e007      	b.n	175ee <lte_lc_psm_req+0x5a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   175de:	4910      	ldr	r1, [pc, #64]	; (17620 <lte_lc_psm_req+0x8c>)
   175e0:	4813      	ldr	r0, [pc, #76]	; (17630 <lte_lc_psm_req+0x9c>)
   175e2:	f004 feb5 	bl	1c350 <nrf_modem_at_printf>
   175e6:	e002      	b.n	175ee <lte_lc_psm_req+0x5a>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
   175e8:	4812      	ldr	r0, [pc, #72]	; (17634 <lte_lc_psm_req+0xa0>)
   175ea:	f004 feb1 	bl	1c350 <nrf_modem_at_printf>
	}

	if (err) {
   175ee:	b900      	cbnz	r0, 175f2 <lte_lc_psm_req+0x5e>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
		return -EFAULT;
	}

	return 0;
}
   175f0:	bd08      	pop	{r3, pc}
   175f2:	4b11      	ldr	r3, [pc, #68]	; (17638 <lte_lc_psm_req+0xa4>)
   175f4:	4a11      	ldr	r2, [pc, #68]	; (1763c <lte_lc_psm_req+0xa8>)
   175f6:	1a9b      	subs	r3, r3, r2
   175f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   175fa:	f04f 0200 	mov.w	r2, #0
   175fe:	2101      	movs	r1, #1
   17600:	f361 0202 	bfi	r2, r1, #0, #3
   17604:	f36f 02c5 	bfc	r2, #3, #3
   17608:	f363 128f 	bfi	r2, r3, #6, #10
   1760c:	4601      	mov	r1, r0
   1760e:	480c      	ldr	r0, [pc, #48]	; (17640 <lte_lc_psm_req+0xac>)
   17610:	f7fb fcd0 	bl	12fb4 <log_1>
		return -EFAULT;
   17614:	f06f 000d 	mvn.w	r0, #13
   17618:	e7ea      	b.n	175f0 <lte_lc_psm_req+0x5c>
   1761a:	bf00      	nop
   1761c:	2000c550 	.word	0x2000c550
   17620:	2000c544 	.word	0x2000c544
   17624:	000265fc 	.word	0x000265fc
   17628:	000265bc 	.word	0x000265bc
   1762c:	000265d4 	.word	0x000265d4
   17630:	000265e8 	.word	0x000265e8
   17634:	00026ba0 	.word	0x00026ba0
   17638:	0002531c 	.word	0x0002531c
   1763c:	000252ec 	.word	0x000252ec
   17640:	00026608 	.word	0x00026608

00017644 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
   17644:	b5f0      	push	{r4, r5, r6, r7, lr}
   17646:	b08d      	sub	sp, #52	; 0x34
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   17648:	2300      	movs	r3, #0
   1764a:	9307      	str	r3, [sp, #28]
   1764c:	9308      	str	r3, [sp, #32]
   1764e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   17652:	9304      	str	r3, [sp, #16]
   17654:	9305      	str	r3, [sp, #20]
   17656:	f88d 3018 	strb.w	r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   1765a:	9301      	str	r3, [sp, #4]
   1765c:	9302      	str	r3, [sp, #8]
   1765e:	f88d 300c 	strb.w	r3, [sp, #12]
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   17662:	2800      	cmp	r0, #0
   17664:	f000 80a7 	beq.w	177b6 <lte_lc_psm_get+0x172>
   17668:	460e      	mov	r6, r1
   1766a:	4607      	mov	r7, r0
   1766c:	2900      	cmp	r1, #0
   1766e:	f000 80a5 	beq.w	177bc <lte_lc_psm_get+0x178>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   17672:	4854      	ldr	r0, [pc, #336]	; (177c4 <lte_lc_psm_get+0x180>)
   17674:	7003      	strb	r3, [r0, #0]

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   17676:	4a54      	ldr	r2, [pc, #336]	; (177c8 <lte_lc_psm_get+0x184>)
   17678:	21a0      	movs	r1, #160	; 0xa0
   1767a:	f004 fe91 	bl	1c3a0 <nrf_modem_at_cmd>
	if (err < 0) {
   1767e:	2800      	cmp	r0, #0
   17680:	db0f      	blt.n	176a2 <lte_lc_psm_get+0x5e>
		LOG_ERR("AT command failed, error: %d", err);
		return -EFAULT;
	}

	/* Skip over first 13 fields in AT cmd response by counting delimiters (commas). */
	comma_ptr = strchr(response, ch);
   17682:	212c      	movs	r1, #44	; 0x2c
   17684:	484f      	ldr	r0, [pc, #316]	; (177c4 <lte_lc_psm_get+0x180>)
   17686:	f00d fa38 	bl	24afa <strchr>
   1768a:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1768c:	2500      	movs	r5, #0
   1768e:	2d0b      	cmp	r5, #11
   17690:	dc2e      	bgt.n	176f0 <lte_lc_psm_get+0xac>
		if (comma_ptr) {
   17692:	b1d4      	cbz	r4, 176ca <lte_lc_psm_get+0x86>
			comma_ptr = strchr(comma_ptr + 1, ch);
   17694:	212c      	movs	r1, #44	; 0x2c
   17696:	1c60      	adds	r0, r4, #1
   17698:	f00d fa2f 	bl	24afa <strchr>
   1769c:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1769e:	3501      	adds	r5, #1
   176a0:	e7f5      	b.n	1768e <lte_lc_psm_get+0x4a>
   176a2:	4b4a      	ldr	r3, [pc, #296]	; (177cc <lte_lc_psm_get+0x188>)
   176a4:	4a4a      	ldr	r2, [pc, #296]	; (177d0 <lte_lc_psm_get+0x18c>)
   176a6:	1a9b      	subs	r3, r3, r2
   176a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, error: %d", err);
   176aa:	f04f 0200 	mov.w	r2, #0
   176ae:	2101      	movs	r1, #1
   176b0:	f361 0202 	bfi	r2, r1, #0, #3
   176b4:	f36f 02c5 	bfc	r2, #3, #3
   176b8:	f363 128f 	bfi	r2, r3, #6, #10
   176bc:	4601      	mov	r1, r0
   176be:	4845      	ldr	r0, [pc, #276]	; (177d4 <lte_lc_psm_get+0x190>)
   176c0:	f7fb fc78 	bl	12fb4 <log_1>
		return -EFAULT;
   176c4:	f06f 040d 	mvn.w	r4, #13
   176c8:	e03a      	b.n	17740 <lte_lc_psm_get+0xfc>
   176ca:	4b40      	ldr	r3, [pc, #256]	; (177cc <lte_lc_psm_get+0x188>)
   176cc:	4a40      	ldr	r2, [pc, #256]	; (177d0 <lte_lc_psm_get+0x18c>)
   176ce:	1a9b      	subs	r3, r3, r2
   176d0:	08db      	lsrs	r3, r3, #3
		} else {
			LOG_ERR("AT command parsing failed");
   176d2:	f04f 0100 	mov.w	r1, #0
   176d6:	2201      	movs	r2, #1
   176d8:	f362 0102 	bfi	r1, r2, #0, #3
   176dc:	f36f 01c5 	bfc	r1, #3, #3
   176e0:	f363 118f 	bfi	r1, r3, #6, #10
   176e4:	483c      	ldr	r0, [pc, #240]	; (177d8 <lte_lc_psm_get+0x194>)
   176e6:	f7fb fc3b 	bl	12f60 <log_0>
			return -EFAULT;
   176ea:	f06f 040d 	mvn.w	r4, #13
   176ee:	e027      	b.n	17740 <lte_lc_psm_get+0xfc>
	 * comma_ptr now points the comma before Active-Time. Discard the comma and the quote mark,
	 * hence + 2, and copy Active-Time into active_time_str. Find the next comma and repeat for
	 * Periodic-TAU-ext and so forth.
	 */

	if (comma_ptr) {
   176f0:	b34c      	cbz	r4, 17746 <lte_lc_psm_get+0x102>
		strncpy(active_time_str, comma_ptr + 2, 8);
   176f2:	2208      	movs	r2, #8
   176f4:	1ca1      	adds	r1, r4, #2
   176f6:	a807      	add	r0, sp, #28
   176f8:	f00d fa28 	bl	24b4c <strncpy>
	} else {
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	comma_ptr = strchr(comma_ptr + 1, ch);
   176fc:	212c      	movs	r1, #44	; 0x2c
   176fe:	1c60      	adds	r0, r4, #1
   17700:	f00d f9fb 	bl	24afa <strchr>
	if (comma_ptr) {
   17704:	4604      	mov	r4, r0
   17706:	b388      	cbz	r0, 1776c <lte_lc_psm_get+0x128>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   17708:	2208      	movs	r2, #8
   1770a:	1c81      	adds	r1, r0, #2
   1770c:	a804      	add	r0, sp, #16
   1770e:	f00d fa1d 	bl	24b4c <strncpy>
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	/* It's ok not to have legacy Periodic-TAU, older FWs don't provide it. */
	comma_ptr = strchr(comma_ptr + 1, ch);
   17712:	212c      	movs	r1, #44	; 0x2c
   17714:	1c60      	adds	r0, r4, #1
   17716:	f00d f9f0 	bl	24afa <strchr>
	if (comma_ptr) {
   1771a:	4601      	mov	r1, r0
   1771c:	b120      	cbz	r0, 17728 <lte_lc_psm_get+0xe4>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1771e:	2208      	movs	r2, #8
   17720:	3102      	adds	r1, #2
   17722:	a801      	add	r0, sp, #4
   17724:	f00d fa12 	bl	24b4c <strncpy>
	}

	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   17728:	ab0a      	add	r3, sp, #40	; 0x28
   1772a:	aa01      	add	r2, sp, #4
   1772c:	a904      	add	r1, sp, #16
   1772e:	a807      	add	r0, sp, #28
   17730:	f000 ff02 	bl	18538 <parse_psm>
	if (err) {
   17734:	4604      	mov	r4, r0
   17736:	bb60      	cbnz	r0, 17792 <lte_lc_psm_get+0x14e>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
		return err;
	}

	*tau = psm_cfg.tau;
   17738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1773a:	603b      	str	r3, [r7, #0]
	*active_time = psm_cfg.active_time;
   1773c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1773e:	6033      	str	r3, [r6, #0]

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   17740:	4620      	mov	r0, r4
   17742:	b00d      	add	sp, #52	; 0x34
   17744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17746:	4b21      	ldr	r3, [pc, #132]	; (177cc <lte_lc_psm_get+0x188>)
   17748:	4a21      	ldr	r2, [pc, #132]	; (177d0 <lte_lc_psm_get+0x18c>)
   1774a:	1a9b      	subs	r3, r3, r2
   1774c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   1774e:	f04f 0100 	mov.w	r1, #0
   17752:	2201      	movs	r2, #1
   17754:	f362 0102 	bfi	r1, r2, #0, #3
   17758:	f36f 01c5 	bfc	r1, #3, #3
   1775c:	f363 118f 	bfi	r1, r3, #6, #10
   17760:	481d      	ldr	r0, [pc, #116]	; (177d8 <lte_lc_psm_get+0x194>)
   17762:	f7fb fbfd 	bl	12f60 <log_0>
		return -EFAULT;
   17766:	f06f 040d 	mvn.w	r4, #13
   1776a:	e7e9      	b.n	17740 <lte_lc_psm_get+0xfc>
   1776c:	4b17      	ldr	r3, [pc, #92]	; (177cc <lte_lc_psm_get+0x188>)
   1776e:	4a18      	ldr	r2, [pc, #96]	; (177d0 <lte_lc_psm_get+0x18c>)
   17770:	1a9b      	subs	r3, r3, r2
   17772:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   17774:	f04f 0100 	mov.w	r1, #0
   17778:	2201      	movs	r2, #1
   1777a:	f362 0102 	bfi	r1, r2, #0, #3
   1777e:	f36f 01c5 	bfc	r1, #3, #3
   17782:	f363 118f 	bfi	r1, r3, #6, #10
   17786:	4814      	ldr	r0, [pc, #80]	; (177d8 <lte_lc_psm_get+0x194>)
   17788:	f7fb fbea 	bl	12f60 <log_0>
		return -EFAULT;
   1778c:	f06f 040d 	mvn.w	r4, #13
   17790:	e7d6      	b.n	17740 <lte_lc_psm_get+0xfc>
   17792:	4b0e      	ldr	r3, [pc, #56]	; (177cc <lte_lc_psm_get+0x188>)
   17794:	4a0e      	ldr	r2, [pc, #56]	; (177d0 <lte_lc_psm_get+0x18c>)
   17796:	1a9b      	subs	r3, r3, r2
   17798:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1779a:	f04f 0200 	mov.w	r2, #0
   1779e:	2101      	movs	r1, #1
   177a0:	f361 0202 	bfi	r2, r1, #0, #3
   177a4:	f36f 02c5 	bfc	r2, #3, #3
   177a8:	f363 128f 	bfi	r2, r3, #6, #10
   177ac:	4601      	mov	r1, r0
   177ae:	480b      	ldr	r0, [pc, #44]	; (177dc <lte_lc_psm_get+0x198>)
   177b0:	f7fb fc00 	bl	12fb4 <log_1>
		return err;
   177b4:	e7c4      	b.n	17740 <lte_lc_psm_get+0xfc>
		return -EINVAL;
   177b6:	f06f 0415 	mvn.w	r4, #21
   177ba:	e7c1      	b.n	17740 <lte_lc_psm_get+0xfc>
   177bc:	f06f 0415 	mvn.w	r4, #21
   177c0:	e7be      	b.n	17740 <lte_lc_psm_get+0xfc>
   177c2:	bf00      	nop
   177c4:	2000d204 	.word	0x2000d204
   177c8:	00026638 	.word	0x00026638
   177cc:	0002531c 	.word	0x0002531c
   177d0:	000252ec 	.word	0x000252ec
   177d4:	00026648 	.word	0x00026648
   177d8:	00026668 	.word	0x00026668
   177dc:	00026684 	.word	0x00026684

000177e0 <at_handler_cereg>:
{
   177e0:	b570      	push	{r4, r5, r6, lr}
   177e2:	b0a4      	sub	sp, #144	; 0x90
   177e4:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   177e6:	2240      	movs	r2, #64	; 0x40
   177e8:	2100      	movs	r1, #0
   177ea:	a814      	add	r0, sp, #80	; 0x50
   177ec:	f00d f97b 	bl	24ae6 <memset>
	enum lte_lc_nw_reg_status reg_status = 0;
   177f0:	2400      	movs	r4, #0
   177f2:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
	struct lte_lc_cell cell = {0};
   177f6:	2230      	movs	r2, #48	; 0x30
   177f8:	4621      	mov	r1, r4
   177fa:	a806      	add	r0, sp, #24
   177fc:	f00d f973 	bl	24ae6 <memset>
	struct lte_lc_psm_cfg psm_cfg = {0};
   17800:	9403      	str	r4, [sp, #12]
   17802:	9404      	str	r4, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   17804:	f10d 0317 	add.w	r3, sp, #23
   17808:	9300      	str	r3, [sp, #0]
   1780a:	ab06      	add	r3, sp, #24
   1780c:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
   17810:	2101      	movs	r1, #1
   17812:	4628      	mov	r0, r5
   17814:	f000 ffd4 	bl	187c0 <parse_cereg>
	if (err) {
   17818:	2800      	cmp	r0, #0
   1781a:	d13e      	bne.n	1789a <at_handler_cereg+0xba>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1781c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   17820:	2b01      	cmp	r3, #1
   17822:	d053      	beq.n	178cc <at_handler_cereg+0xec>
   17824:	2b05      	cmp	r3, #5
   17826:	d051      	beq.n	178cc <at_handler_cereg+0xec>
	if (event_handler_list_is_empty()) {
   17828:	f000 fcfa 	bl	18220 <event_handler_list_is_empty>
   1782c:	2800      	cmp	r0, #0
   1782e:	d14b      	bne.n	178c8 <at_handler_cereg+0xe8>
	if (reg_status != prev_reg_status) {
   17830:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   17834:	4a4c      	ldr	r2, [pc, #304]	; (17968 <at_handler_cereg+0x188>)
   17836:	7812      	ldrb	r2, [r2, #0]
   17838:	4293      	cmp	r3, r2
   1783a:	d153      	bne.n	178e4 <at_handler_cereg+0x104>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1783c:	2230      	movs	r2, #48	; 0x30
   1783e:	494b      	ldr	r1, [pc, #300]	; (1796c <at_handler_cereg+0x18c>)
   17840:	a806      	add	r0, sp, #24
   17842:	f00d f933 	bl	24aac <memcmp>
   17846:	2800      	cmp	r0, #0
   17848:	d157      	bne.n	178fa <at_handler_cereg+0x11a>
	if (lte_mode != prev_lte_mode) {
   1784a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1784e:	4a48      	ldr	r2, [pc, #288]	; (17970 <at_handler_cereg+0x190>)
   17850:	7812      	ldrb	r2, [r2, #0]
   17852:	4293      	cmp	r3, r2
   17854:	d16c      	bne.n	17930 <at_handler_cereg+0x150>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   17856:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   1785a:	2b01      	cmp	r3, #1
   1785c:	d001      	beq.n	17862 <at_handler_cereg+0x82>
   1785e:	2b05      	cmp	r3, #5
   17860:	d132      	bne.n	178c8 <at_handler_cereg+0xe8>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   17862:	a904      	add	r1, sp, #16
   17864:	a803      	add	r0, sp, #12
   17866:	f7ff feed 	bl	17644 <lte_lc_psm_get>
	if (err) {
   1786a:	2800      	cmp	r0, #0
   1786c:	d16b      	bne.n	17946 <at_handler_cereg+0x166>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   1786e:	2208      	movs	r2, #8
   17870:	4940      	ldr	r1, [pc, #256]	; (17974 <at_handler_cereg+0x194>)
   17872:	a803      	add	r0, sp, #12
   17874:	f00d f91a 	bl	24aac <memcmp>
   17878:	b330      	cbz	r0, 178c8 <at_handler_cereg+0xe8>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1787a:	2301      	movs	r3, #1
   1787c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   17880:	4a3c      	ldr	r2, [pc, #240]	; (17974 <at_handler_cereg+0x194>)
   17882:	ab03      	add	r3, sp, #12
   17884:	e893 0003 	ldmia.w	r3, {r0, r1}
   17888:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   1788c:	aa16      	add	r2, sp, #88	; 0x58
   1788e:	e882 0003 	stmia.w	r2, {r0, r1}
		event_handler_list_dispatch(&evt);
   17892:	a814      	add	r0, sp, #80	; 0x50
   17894:	f000 fccc 	bl	18230 <event_handler_list_dispatch>
   17898:	e016      	b.n	178c8 <at_handler_cereg+0xe8>
   1789a:	4604      	mov	r4, r0
   1789c:	4b36      	ldr	r3, [pc, #216]	; (17978 <at_handler_cereg+0x198>)
   1789e:	4a37      	ldr	r2, [pc, #220]	; (1797c <at_handler_cereg+0x19c>)
   178a0:	1a9b      	subs	r3, r3, r2
   178a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse notification (error %d): %s",
   178a4:	f04f 0600 	mov.w	r6, #0
   178a8:	2201      	movs	r2, #1
   178aa:	f362 0602 	bfi	r6, r2, #0, #3
   178ae:	f36f 06c5 	bfc	r6, #3, #3
   178b2:	f363 168f 	bfi	r6, r3, #6, #10
   178b6:	4628      	mov	r0, r5
   178b8:	f7fb f9ea 	bl	12c90 <z_log_strdup>
   178bc:	4602      	mov	r2, r0
   178be:	4633      	mov	r3, r6
   178c0:	4621      	mov	r1, r4
   178c2:	482f      	ldr	r0, [pc, #188]	; (17980 <at_handler_cereg+0x1a0>)
   178c4:	f7fb fba8 	bl	13018 <log_2>
}
   178c8:	b024      	add	sp, #144	; 0x90
   178ca:	bd70      	pop	{r4, r5, r6, pc}
		if (!is_cellid_valid(cell.id)) {
   178cc:	9808      	ldr	r0, [sp, #32]
   178ce:	f00b fb45 	bl	22f5c <is_cellid_valid>
   178d2:	b918      	cbnz	r0, 178dc <at_handler_cereg+0xfc>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   178d4:	2304      	movs	r3, #4
   178d6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   178da:	e7a5      	b.n	17828 <at_handler_cereg+0x48>
	z_impl_k_sem_give(sem);
   178dc:	4829      	ldr	r0, [pc, #164]	; (17984 <at_handler_cereg+0x1a4>)
   178de:	f005 fcc9 	bl	1d274 <z_impl_k_sem_give>
}
   178e2:	e7a1      	b.n	17828 <at_handler_cereg+0x48>
		prev_reg_status = reg_status;
   178e4:	4a20      	ldr	r2, [pc, #128]	; (17968 <at_handler_cereg+0x188>)
   178e6:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   178e8:	2200      	movs	r2, #0
   178ea:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.nw_reg_status = reg_status;
   178ee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   178f2:	a814      	add	r0, sp, #80	; 0x50
   178f4:	f000 fc9c 	bl	18230 <event_handler_list_dispatch>
   178f8:	e7a0      	b.n	1783c <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   178fa:	2304      	movs	r3, #4
   178fc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   17900:	4c1a      	ldr	r4, [pc, #104]	; (1796c <at_handler_cereg+0x18c>)
   17902:	ad06      	add	r5, sp, #24
   17904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1790a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1790c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   17914:	ac16      	add	r4, sp, #88	; 0x58
   17916:	ad06      	add	r5, sp, #24
   17918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1791a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1791c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1791e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17920:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   17928:	a814      	add	r0, sp, #80	; 0x50
   1792a:	f000 fc81 	bl	18230 <event_handler_list_dispatch>
   1792e:	e78c      	b.n	1784a <at_handler_cereg+0x6a>
		prev_lte_mode = lte_mode;
   17930:	4a0f      	ldr	r2, [pc, #60]	; (17970 <at_handler_cereg+0x190>)
   17932:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   17934:	2205      	movs	r2, #5
   17936:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.lte_mode = lte_mode;
   1793a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   1793e:	a814      	add	r0, sp, #80	; 0x50
   17940:	f000 fc76 	bl	18230 <event_handler_list_dispatch>
   17944:	e787      	b.n	17856 <at_handler_cereg+0x76>
   17946:	4b0c      	ldr	r3, [pc, #48]	; (17978 <at_handler_cereg+0x198>)
   17948:	4a0c      	ldr	r2, [pc, #48]	; (1797c <at_handler_cereg+0x19c>)
   1794a:	1a9b      	subs	r3, r3, r2
   1794c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PSM information");
   1794e:	f04f 0100 	mov.w	r1, #0
   17952:	2201      	movs	r2, #1
   17954:	f362 0102 	bfi	r1, r2, #0, #3
   17958:	f36f 01c5 	bfc	r1, #3, #3
   1795c:	f363 118f 	bfi	r1, r3, #6, #10
   17960:	4809      	ldr	r0, [pc, #36]	; (17988 <at_handler_cereg+0x1a8>)
   17962:	f7fb fafd 	bl	12f60 <log_0>
		return;
   17966:	e7af      	b.n	178c8 <at_handler_cereg+0xe8>
   17968:	2000d579 	.word	0x2000d579
   1796c:	2000c8f8 	.word	0x2000c8f8
   17970:	2000d578 	.word	0x2000d578
   17974:	2000d1ec 	.word	0x2000d1ec
   17978:	0002531c 	.word	0x0002531c
   1797c:	000252ec 	.word	0x000252ec
   17980:	000266b4 	.word	0x000266b4
   17984:	2000d1d4 	.word	0x2000d1d4
   17988:	000266e0 	.word	0x000266e0

0001798c <lte_lc_edrx_req>:

	return 0;
}

int lte_lc_edrx_req(bool enable)
{
   1798c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1798e:	b083      	sub	sp, #12
   17990:	4602      	mov	r2, r0
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   17992:	4b3e      	ldr	r3, [pc, #248]	; (17a8c <_flash_used+0xb4>)
   17994:	e893 0003 	ldmia.w	r3, {r0, r1}
   17998:	ab02      	add	r3, sp, #8
   1799a:	e903 0003 	stmdb	r3, {r0, r1}

	if (!enable) {
   1799e:	b10a      	cbz	r2, 179a4 <lte_lc_edrx_req+0x18>

		return 0;
	}

	/* Apply the configurations for both LTE-M and NB-IoT. */
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   179a0:	2400      	movs	r4, #0
   179a2:	e037      	b.n	17a14 <_flash_used+0x3c>
		err = nrf_modem_at_printf(edrx_disable);
   179a4:	483a      	ldr	r0, [pc, #232]	; (17a90 <_flash_used+0xb8>)
   179a6:	f004 fcd3 	bl	1c350 <nrf_modem_at_printf>
		if (err) {
   179aa:	2800      	cmp	r0, #0
   179ac:	d06b      	beq.n	17a86 <_flash_used+0xae>
   179ae:	4b39      	ldr	r3, [pc, #228]	; (17a94 <_flash_used+0xbc>)
   179b0:	4a39      	ldr	r2, [pc, #228]	; (17a98 <_flash_used+0xc0>)
   179b2:	1a9b      	subs	r3, r3, r2
   179b4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   179b6:	f04f 0200 	mov.w	r2, #0
   179ba:	2101      	movs	r1, #1
   179bc:	f361 0202 	bfi	r2, r1, #0, #3
   179c0:	f36f 02c5 	bfc	r2, #3, #3
   179c4:	f363 128f 	bfi	r2, r3, #6, #10
   179c8:	4601      	mov	r1, r0
   179ca:	4834      	ldr	r0, [pc, #208]	; (17a9c <_flash_used+0xc4>)
   179cc:	f7fb faf2 	bl	12fb4 <log_1>
			return -EFAULT;
   179d0:	f06f 000d 	mvn.w	r0, #13
   179d4:	e057      	b.n	17a86 <_flash_used+0xae>
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
					edrx_param_ltem : edrx_param_nbiot;
   179d6:	4e32      	ldr	r6, [pc, #200]	; (17aa0 <_flash_used+0xc8>)
   179d8:	e026      	b.n	17a28 <_flash_used+0x50>
		char *ptw_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
					ptw_param_ltem : ptw_param_nbiot;
   179da:	4f32      	ldr	r7, [pc, #200]	; (17aa4 <_flash_used+0xcc>)
   179dc:	e027      	b.n	17a2e <_flash_used+0x56>

		if (strlen(edrx_param) == 4) {
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   179de:	4632      	mov	r2, r6
   179e0:	4629      	mov	r1, r5
   179e2:	4831      	ldr	r0, [pc, #196]	; (17aa8 <_flash_used+0xd0>)
   179e4:	f004 fcb4 	bl	1c350 <nrf_modem_at_printf>
   179e8:	e02a      	b.n	17a40 <_flash_used+0x68>
   179ea:	4b2a      	ldr	r3, [pc, #168]	; (17a94 <_flash_used+0xbc>)
   179ec:	4a2a      	ldr	r2, [pc, #168]	; (17a98 <_flash_used+0xc0>)
   179ee:	1a9b      	subs	r3, r3, r2
   179f0:	08db      	lsrs	r3, r3, #3
		} else {
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
		}

		if (err) {
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   179f2:	f04f 0200 	mov.w	r2, #0
   179f6:	2101      	movs	r1, #1
   179f8:	f361 0202 	bfi	r2, r1, #0, #3
   179fc:	f36f 02c5 	bfc	r2, #3, #3
   17a00:	f363 128f 	bfi	r2, r3, #6, #10
   17a04:	4601      	mov	r1, r0
   17a06:	4829      	ldr	r0, [pc, #164]	; (17aac <_flash_used+0xd4>)
   17a08:	f7fb fad4 	bl	12fb4 <log_1>
			return -EFAULT;
   17a0c:	f06f 000d 	mvn.w	r0, #13
   17a10:	e039      	b.n	17a86 <_flash_used+0xae>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   17a12:	3401      	adds	r4, #1
   17a14:	2c01      	cmp	r4, #1
   17a16:	d835      	bhi.n	17a84 <_flash_used+0xac>
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   17a18:	ab02      	add	r3, sp, #8
   17a1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   17a1e:	f853 5c08 	ldr.w	r5, [r3, #-8]
					edrx_param_ltem : edrx_param_nbiot;
   17a22:	2d04      	cmp	r5, #4
   17a24:	d0d7      	beq.n	179d6 <lte_lc_edrx_req+0x4a>
   17a26:	4e22      	ldr	r6, [pc, #136]	; (17ab0 <_flash_used+0xd8>)
					ptw_param_ltem : ptw_param_nbiot;
   17a28:	2d04      	cmp	r5, #4
   17a2a:	d0d6      	beq.n	179da <_flash_used+0x2>
   17a2c:	4f21      	ldr	r7, [pc, #132]	; (17ab4 <_flash_used+0xdc>)
		if (strlen(edrx_param) == 4) {
   17a2e:	4630      	mov	r0, r6
   17a30:	f7f9 fb5b 	bl	110ea <strlen>
   17a34:	2804      	cmp	r0, #4
   17a36:	d0d2      	beq.n	179de <_flash_used+0x6>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   17a38:	4629      	mov	r1, r5
   17a3a:	481f      	ldr	r0, [pc, #124]	; (17ab8 <_flash_used+0xe0>)
   17a3c:	f004 fc88 	bl	1c350 <nrf_modem_at_printf>
		if (err) {
   17a40:	2800      	cmp	r0, #0
   17a42:	d1d2      	bne.n	179ea <_flash_used+0x12>
		}

		/* PTW must be requested after eDRX is enabled */
		if (strlen(ptw_param) != 4) {
   17a44:	4638      	mov	r0, r7
   17a46:	f7f9 fb50 	bl	110ea <strlen>
   17a4a:	2804      	cmp	r0, #4
   17a4c:	d1e1      	bne.n	17a12 <_flash_used+0x3a>
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   17a4e:	463a      	mov	r2, r7
   17a50:	4629      	mov	r1, r5
   17a52:	481a      	ldr	r0, [pc, #104]	; (17abc <_flash_used+0xe4>)
   17a54:	f004 fc7c 	bl	1c350 <nrf_modem_at_printf>
		if (err) {
   17a58:	4601      	mov	r1, r0
   17a5a:	2800      	cmp	r0, #0
   17a5c:	d0d9      	beq.n	17a12 <_flash_used+0x3a>
   17a5e:	4b0d      	ldr	r3, [pc, #52]	; (17a94 <_flash_used+0xbc>)
   17a60:	4a0d      	ldr	r2, [pc, #52]	; (17a98 <_flash_used+0xc0>)
   17a62:	1a9b      	subs	r3, r3, r2
   17a64:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   17a66:	f04f 0200 	mov.w	r2, #0
   17a6a:	2001      	movs	r0, #1
   17a6c:	f360 0202 	bfi	r2, r0, #0, #3
   17a70:	f36f 02c5 	bfc	r2, #3, #3
   17a74:	f363 128f 	bfi	r2, r3, #6, #10
   17a78:	4811      	ldr	r0, [pc, #68]	; (17ac0 <_flash_used+0xe8>)
   17a7a:	f7fb fa9b 	bl	12fb4 <log_1>
			return -EFAULT;
   17a7e:	f06f 000d 	mvn.w	r0, #13
   17a82:	e000      	b.n	17a86 <_flash_used+0xae>
		}
	}

	return 0;
   17a84:	2000      	movs	r0, #0
}
   17a86:	b003      	add	sp, #12
   17a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a8a:	bf00      	nop
   17a8c:	000253e0 	.word	0x000253e0
   17a90:	00026b94 	.word	0x00026b94
   17a94:	0002531c 	.word	0x0002531c
   17a98:	000252ec 	.word	0x000252ec
   17a9c:	00026700 	.word	0x00026700
   17aa0:	2000c534 	.word	0x2000c534
   17aa4:	2000d1f4 	.word	0x2000d1f4
   17aa8:	0002672c 	.word	0x0002672c
   17aac:	00026750 	.word	0x00026750
   17ab0:	2000c53c 	.word	0x2000c53c
   17ab4:	2000d1fc 	.word	0x2000d1fc
   17ab8:	00026740 	.word	0x00026740
   17abc:	0002677c 	.word	0x0002677c
   17ac0:	00026790 	.word	0x00026790

00017ac4 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   17ac4:	b510      	push	{r4, lr}
   17ac6:	b082      	sub	sp, #8
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   17ac8:	2300      	movs	r3, #0
   17aca:	9300      	str	r3, [sp, #0]

	if (status == NULL) {
   17acc:	b348      	cbz	r0, 17b22 <lte_lc_nw_reg_status_get+0x5e>
   17ace:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   17ad0:	466b      	mov	r3, sp
   17ad2:	f10d 0206 	add.w	r2, sp, #6
   17ad6:	4914      	ldr	r1, [pc, #80]	; (17b28 <lte_lc_nw_reg_status_get+0x64>)
   17ad8:	4814      	ldr	r0, [pc, #80]	; (17b2c <lte_lc_nw_reg_status_get+0x68>)
   17ada:	f004 fcc7 	bl	1c46c <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   17ade:	2800      	cmp	r0, #0
   17ae0:	dd0b      	ble.n	17afa <lte_lc_nw_reg_status_get+0x36>
		LOG_ERR("Could not get registration status, error: %d", err);
		return -EFAULT;
	}

	if (!is_cellid_valid(cell_id)) {
   17ae2:	9800      	ldr	r0, [sp, #0]
   17ae4:	f00b fa3a 	bl	22f5c <is_cellid_valid>
   17ae8:	b908      	cbnz	r0, 17aee <lte_lc_nw_reg_status_get+0x2a>
		*status = LTE_LC_NW_REG_UNKNOWN;
   17aea:	2304      	movs	r3, #4
   17aec:	7023      	strb	r3, [r4, #0]
	}

	*status = status_tmp;
   17aee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17af2:	7023      	strb	r3, [r4, #0]

	return 0;
   17af4:	2000      	movs	r0, #0
}
   17af6:	b002      	add	sp, #8
   17af8:	bd10      	pop	{r4, pc}
   17afa:	4b0d      	ldr	r3, [pc, #52]	; (17b30 <lte_lc_nw_reg_status_get+0x6c>)
   17afc:	4a0d      	ldr	r2, [pc, #52]	; (17b34 <lte_lc_nw_reg_status_get+0x70>)
   17afe:	1a9b      	subs	r3, r3, r2
   17b00:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", err);
   17b02:	f04f 0200 	mov.w	r2, #0
   17b06:	2101      	movs	r1, #1
   17b08:	f361 0202 	bfi	r2, r1, #0, #3
   17b0c:	f36f 02c5 	bfc	r2, #3, #3
   17b10:	f363 128f 	bfi	r2, r3, #6, #10
   17b14:	4601      	mov	r1, r0
   17b16:	4808      	ldr	r0, [pc, #32]	; (17b38 <lte_lc_nw_reg_status_get+0x74>)
   17b18:	f7fb fa4c 	bl	12fb4 <log_1>
		return -EFAULT;
   17b1c:	f06f 000d 	mvn.w	r0, #13
   17b20:	e7e9      	b.n	17af6 <lte_lc_nw_reg_status_get+0x32>
		return -EINVAL;
   17b22:	f06f 0015 	mvn.w	r0, #21
   17b26:	e7e6      	b.n	17af6 <lte_lc_nw_reg_status_get+0x32>
   17b28:	000267bc 	.word	0x000267bc
   17b2c:	000267d8 	.word	0x000267d8
   17b30:	0002531c 	.word	0x0002531c
   17b34:	000252ec 	.word	0x000252ec
   17b38:	000267e4 	.word	0x000267e4

00017b3c <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   17b3c:	b538      	push	{r3, r4, r5, lr}
   17b3e:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   17b40:	2807      	cmp	r0, #7
   17b42:	d814      	bhi.n	17b6e <lte_lc_system_mode_set+0x32>
   17b44:	460d      	mov	r5, r1
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
		return -EINVAL;
	}

	switch (preference) {
   17b46:	2904      	cmp	r1, #4
   17b48:	d825      	bhi.n	17b96 <lte_lc_system_mode_set+0x5a>
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   17b4a:	4b27      	ldr	r3, [pc, #156]	; (17be8 <lte_lc_system_mode_set+0xac>)
   17b4c:	5c5a      	ldrb	r2, [r3, r1]
   17b4e:	4b27      	ldr	r3, [pc, #156]	; (17bec <lte_lc_system_mode_set+0xb0>)
   17b50:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17b54:	4826      	ldr	r0, [pc, #152]	; (17bf0 <lte_lc_system_mode_set+0xb4>)
   17b56:	f004 fbfb 	bl	1c350 <nrf_modem_at_printf>
				  system_mode_params[mode],
				  system_mode_preference[preference]);
	if (err) {
   17b5a:	bb80      	cbnz	r0, 17bbe <lte_lc_system_mode_set+0x82>
		LOG_ERR("Could not send AT command, error: %d", err);
		return -EFAULT;
	}

	sys_mode_current = mode;
   17b5c:	4b25      	ldr	r3, [pc, #148]	; (17bf4 <lte_lc_system_mode_set+0xb8>)
   17b5e:	701c      	strb	r4, [r3, #0]
	sys_mode_target = mode;
   17b60:	4b25      	ldr	r3, [pc, #148]	; (17bf8 <lte_lc_system_mode_set+0xbc>)
   17b62:	701c      	strb	r4, [r3, #0]
	mode_pref_current = preference;
   17b64:	4b25      	ldr	r3, [pc, #148]	; (17bfc <lte_lc_system_mode_set+0xc0>)
   17b66:	701d      	strb	r5, [r3, #0]
	mode_pref_target = preference;
   17b68:	4b25      	ldr	r3, [pc, #148]	; (17c00 <lte_lc_system_mode_set+0xc4>)
   17b6a:	701d      	strb	r5, [r3, #0]

	return 0;
}
   17b6c:	bd38      	pop	{r3, r4, r5, pc}
   17b6e:	4b25      	ldr	r3, [pc, #148]	; (17c04 <lte_lc_system_mode_set+0xc8>)
   17b70:	4a25      	ldr	r2, [pc, #148]	; (17c08 <lte_lc_system_mode_set+0xcc>)
   17b72:	1a9b      	subs	r3, r3, r2
   17b74:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode requested: %d", mode);
   17b76:	f04f 0200 	mov.w	r2, #0
   17b7a:	2101      	movs	r1, #1
   17b7c:	f361 0202 	bfi	r2, r1, #0, #3
   17b80:	f36f 02c5 	bfc	r2, #3, #3
   17b84:	f363 128f 	bfi	r2, r3, #6, #10
   17b88:	4601      	mov	r1, r0
   17b8a:	4820      	ldr	r0, [pc, #128]	; (17c0c <lte_lc_system_mode_set+0xd0>)
   17b8c:	f7fb fa12 	bl	12fb4 <log_1>
		return -EINVAL;
   17b90:	f06f 0015 	mvn.w	r0, #21
   17b94:	e7ea      	b.n	17b6c <lte_lc_system_mode_set+0x30>
   17b96:	4b1b      	ldr	r3, [pc, #108]	; (17c04 <lte_lc_system_mode_set+0xc8>)
   17b98:	4a1b      	ldr	r2, [pc, #108]	; (17c08 <lte_lc_system_mode_set+0xcc>)
   17b9a:	1a9b      	subs	r3, r3, r2
   17b9c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   17b9e:	f04f 0200 	mov.w	r2, #0
   17ba2:	2101      	movs	r1, #1
   17ba4:	f361 0202 	bfi	r2, r1, #0, #3
   17ba8:	f36f 02c5 	bfc	r2, #3, #3
   17bac:	f363 128f 	bfi	r2, r3, #6, #10
   17bb0:	4629      	mov	r1, r5
   17bb2:	4817      	ldr	r0, [pc, #92]	; (17c10 <lte_lc_system_mode_set+0xd4>)
   17bb4:	f7fb f9fe 	bl	12fb4 <log_1>
		return -EINVAL;
   17bb8:	f06f 0015 	mvn.w	r0, #21
   17bbc:	e7d6      	b.n	17b6c <lte_lc_system_mode_set+0x30>
   17bbe:	4b11      	ldr	r3, [pc, #68]	; (17c04 <lte_lc_system_mode_set+0xc8>)
   17bc0:	4a11      	ldr	r2, [pc, #68]	; (17c08 <lte_lc_system_mode_set+0xcc>)
   17bc2:	1a9b      	subs	r3, r3, r2
   17bc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not send AT command, error: %d", err);
   17bc6:	f04f 0200 	mov.w	r2, #0
   17bca:	2101      	movs	r1, #1
   17bcc:	f361 0202 	bfi	r2, r1, #0, #3
   17bd0:	f36f 02c5 	bfc	r2, #3, #3
   17bd4:	f363 128f 	bfi	r2, r3, #6, #10
   17bd8:	4601      	mov	r1, r0
   17bda:	480e      	ldr	r0, [pc, #56]	; (17c14 <lte_lc_system_mode_set+0xd8>)
   17bdc:	f7fb f9ea 	bl	12fb4 <log_1>
		return -EFAULT;
   17be0:	f06f 000d 	mvn.w	r0, #13
   17be4:	e7c2      	b.n	17b6c <lte_lc_system_mode_set+0x30>
   17be6:	bf00      	nop
   17be8:	00026bcc 	.word	0x00026bcc
   17bec:	00026bac 	.word	0x00026bac
   17bf0:	00026860 	.word	0x00026860
   17bf4:	2000d57a 	.word	0x2000d57a
   17bf8:	2000c635 	.word	0x2000c635
   17bfc:	2000d576 	.word	0x2000d576
   17c00:	2000d577 	.word	0x2000d577
   17c04:	0002531c 	.word	0x0002531c
   17c08:	000252ec 	.word	0x000252ec
   17c0c:	00026814 	.word	0x00026814
   17c10:	00026838 	.word	0x00026838
   17c14:	00026878 	.word	0x00026878

00017c18 <lte_lc_system_mode_get>:
			   enum lte_lc_system_mode_preference *preference)
{
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   17c18:	2800      	cmp	r0, #0
   17c1a:	f000 80a7 	beq.w	17d6c <lte_lc_system_mode_get+0x154>
{
   17c1e:	b530      	push	{r4, r5, lr}
   17c20:	b087      	sub	sp, #28
   17c22:	460c      	mov	r4, r1
   17c24:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   17c26:	ab02      	add	r3, sp, #8
   17c28:	9301      	str	r3, [sp, #4]
   17c2a:	ab03      	add	r3, sp, #12
   17c2c:	9300      	str	r3, [sp, #0]
   17c2e:	ab04      	add	r3, sp, #16
   17c30:	aa05      	add	r2, sp, #20
   17c32:	4952      	ldr	r1, [pc, #328]	; (17d7c <lte_lc_system_mode_get+0x164>)
   17c34:	4852      	ldr	r0, [pc, #328]	; (17d80 <lte_lc_system_mode_get+0x168>)
   17c36:	f004 fc19 	bl	1c46c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   17c3a:	2804      	cmp	r0, #4
   17c3c:	d116      	bne.n	17c6c <lte_lc_system_mode_get+0x54>
		LOG_ERR("Failed to get system mode, error: %d", err);
		return -EFAULT;
	}

	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17c3e:	9b05      	ldr	r3, [sp, #20]
   17c40:	b343      	cbz	r3, 17c94 <lte_lc_system_mode_get+0x7c>
   17c42:	2302      	movs	r3, #2
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17c44:	9a04      	ldr	r2, [sp, #16]
   17c46:	b33a      	cbz	r2, 17c98 <lte_lc_system_mode_get+0x80>
   17c48:	2204      	movs	r2, #4
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17c4a:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   17c4c:	9a03      	ldr	r2, [sp, #12]
   17c4e:	b32a      	cbz	r2, 17c9c <lte_lc_system_mode_get+0x84>
   17c50:	2208      	movs	r2, #8
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17c52:	4313      	orrs	r3, r2

	switch (mode_bitmask) {
   17c54:	2b0e      	cmp	r3, #14
   17c56:	d843      	bhi.n	17ce0 <lte_lc_system_mode_get+0xc8>
   17c58:	e8df f003 	tbb	[pc, r3]
   17c5c:	422d4222 	.word	0x422d4222
   17c60:	423c4230 	.word	0x423c4230
   17c64:	42364233 	.word	0x42364233
   17c68:	4239      	.short	0x4239
   17c6a:	3f          	.byte	0x3f
   17c6b:	00          	.byte	0x00
   17c6c:	4b45      	ldr	r3, [pc, #276]	; (17d84 <lte_lc_system_mode_get+0x16c>)
   17c6e:	4a46      	ldr	r2, [pc, #280]	; (17d88 <lte_lc_system_mode_get+0x170>)
   17c70:	1a9b      	subs	r3, r3, r2
   17c72:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get system mode, error: %d", err);
   17c74:	f04f 0200 	mov.w	r2, #0
   17c78:	2101      	movs	r1, #1
   17c7a:	f361 0202 	bfi	r2, r1, #0, #3
   17c7e:	f36f 02c5 	bfc	r2, #3, #3
   17c82:	f363 128f 	bfi	r2, r3, #6, #10
   17c86:	4601      	mov	r1, r0
   17c88:	4840      	ldr	r0, [pc, #256]	; (17d8c <lte_lc_system_mode_get+0x174>)
   17c8a:	f7fb f993 	bl	12fb4 <log_1>
		return -EFAULT;
   17c8e:	f06f 000d 	mvn.w	r0, #13
   17c92:	e04a      	b.n	17d2a <lte_lc_system_mode_get+0x112>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   17c94:	2300      	movs	r3, #0
   17c96:	e7d5      	b.n	17c44 <lte_lc_system_mode_get+0x2c>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   17c98:	2200      	movs	r2, #0
   17c9a:	e7d6      	b.n	17c4a <lte_lc_system_mode_get+0x32>
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   17c9c:	2200      	movs	r2, #0
   17c9e:	e7d8      	b.n	17c52 <lte_lc_system_mode_get+0x3a>
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   17ca0:	2300      	movs	r3, #0
   17ca2:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid system mode, assuming parsing error");
		return -EFAULT;
	}

	/* Get LTE preference. */
	if (preference != NULL) {
   17ca4:	b38c      	cbz	r4, 17d0a <lte_lc_system_mode_get+0xf2>
		switch (mode_preference) {
   17ca6:	9902      	ldr	r1, [sp, #8]
   17ca8:	2904      	cmp	r1, #4
   17caa:	d84c      	bhi.n	17d46 <lte_lc_system_mode_get+0x12e>
   17cac:	e8df f001 	tbb	[pc, r1]
   17cb0:	45423f2b 	.word	0x45423f2b
   17cb4:	48          	.byte	0x48
   17cb5:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   17cb6:	2301      	movs	r3, #1
   17cb8:	702b      	strb	r3, [r5, #0]
		break;
   17cba:	e7f3      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   17cbc:	2302      	movs	r3, #2
   17cbe:	702b      	strb	r3, [r5, #0]
		break;
   17cc0:	e7f0      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   17cc2:	2303      	movs	r3, #3
   17cc4:	702b      	strb	r3, [r5, #0]
		break;
   17cc6:	e7ed      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   17cc8:	2304      	movs	r3, #4
   17cca:	702b      	strb	r3, [r5, #0]
		break;
   17ccc:	e7ea      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   17cce:	2305      	movs	r3, #5
   17cd0:	702b      	strb	r3, [r5, #0]
		break;
   17cd2:	e7e7      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   17cd4:	2306      	movs	r3, #6
   17cd6:	702b      	strb	r3, [r5, #0]
		break;
   17cd8:	e7e4      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   17cda:	2307      	movs	r3, #7
   17cdc:	702b      	strb	r3, [r5, #0]
		break;
   17cde:	e7e1      	b.n	17ca4 <lte_lc_system_mode_get+0x8c>
   17ce0:	4b28      	ldr	r3, [pc, #160]	; (17d84 <lte_lc_system_mode_get+0x16c>)
   17ce2:	4a29      	ldr	r2, [pc, #164]	; (17d88 <lte_lc_system_mode_get+0x170>)
   17ce4:	1a9b      	subs	r3, r3, r2
   17ce6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode, assuming parsing error");
   17ce8:	f04f 0100 	mov.w	r1, #0
   17cec:	2201      	movs	r2, #1
   17cee:	f362 0102 	bfi	r1, r2, #0, #3
   17cf2:	f36f 01c5 	bfc	r1, #3, #3
   17cf6:	f363 118f 	bfi	r1, r3, #6, #10
   17cfa:	4825      	ldr	r0, [pc, #148]	; (17d90 <lte_lc_system_mode_get+0x178>)
   17cfc:	f7fb f930 	bl	12f60 <log_0>
		return -EFAULT;
   17d00:	f06f 000d 	mvn.w	r0, #13
   17d04:	e011      	b.n	17d2a <lte_lc_system_mode_get+0x112>
		case 0:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   17d06:	2300      	movs	r3, #0
   17d08:	7023      	strb	r3, [r4, #0]
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
			return -EFAULT;
		}
	}

	if (sys_mode_current != *mode) {
   17d0a:	782b      	ldrb	r3, [r5, #0]
   17d0c:	4a21      	ldr	r2, [pc, #132]	; (17d94 <lte_lc_system_mode_get+0x17c>)
   17d0e:	7812      	ldrb	r2, [r2, #0]
   17d10:	4293      	cmp	r3, r2
   17d12:	d001      	beq.n	17d18 <lte_lc_system_mode_get+0x100>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
   17d14:	4a1f      	ldr	r2, [pc, #124]	; (17d94 <lte_lc_system_mode_get+0x17c>)
   17d16:	7013      	strb	r3, [r2, #0]
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   17d18:	b35c      	cbz	r4, 17d72 <lte_lc_system_mode_get+0x15a>
   17d1a:	7823      	ldrb	r3, [r4, #0]
   17d1c:	4a1e      	ldr	r2, [pc, #120]	; (17d98 <lte_lc_system_mode_get+0x180>)
   17d1e:	7812      	ldrb	r2, [r2, #0]
   17d20:	4293      	cmp	r3, r2
   17d22:	d028      	beq.n	17d76 <lte_lc_system_mode_get+0x15e>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   17d24:	4a1c      	ldr	r2, [pc, #112]	; (17d98 <lte_lc_system_mode_get+0x180>)
   17d26:	7013      	strb	r3, [r2, #0]
	}

	return 0;
   17d28:	2000      	movs	r0, #0
}
   17d2a:	b007      	add	sp, #28
   17d2c:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   17d2e:	2301      	movs	r3, #1
   17d30:	7023      	strb	r3, [r4, #0]
			break;
   17d32:	e7ea      	b.n	17d0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   17d34:	2302      	movs	r3, #2
   17d36:	7023      	strb	r3, [r4, #0]
			break;
   17d38:	e7e7      	b.n	17d0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   17d3a:	2303      	movs	r3, #3
   17d3c:	7023      	strb	r3, [r4, #0]
			break;
   17d3e:	e7e4      	b.n	17d0a <lte_lc_system_mode_get+0xf2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   17d40:	2304      	movs	r3, #4
   17d42:	7023      	strb	r3, [r4, #0]
			break;
   17d44:	e7e1      	b.n	17d0a <lte_lc_system_mode_get+0xf2>
   17d46:	4b0f      	ldr	r3, [pc, #60]	; (17d84 <lte_lc_system_mode_get+0x16c>)
   17d48:	4a0f      	ldr	r2, [pc, #60]	; (17d88 <lte_lc_system_mode_get+0x170>)
   17d4a:	1a9b      	subs	r3, r3, r2
   17d4c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   17d4e:	f04f 0200 	mov.w	r2, #0
   17d52:	2001      	movs	r0, #1
   17d54:	f360 0202 	bfi	r2, r0, #0, #3
   17d58:	f36f 02c5 	bfc	r2, #3, #3
   17d5c:	f363 128f 	bfi	r2, r3, #6, #10
   17d60:	480e      	ldr	r0, [pc, #56]	; (17d9c <lte_lc_system_mode_get+0x184>)
   17d62:	f7fb f927 	bl	12fb4 <log_1>
			return -EFAULT;
   17d66:	f06f 000d 	mvn.w	r0, #13
   17d6a:	e7de      	b.n	17d2a <lte_lc_system_mode_get+0x112>
		return -EINVAL;
   17d6c:	f06f 0015 	mvn.w	r0, #21
}
   17d70:	4770      	bx	lr
	return 0;
   17d72:	2000      	movs	r0, #0
   17d74:	e7d9      	b.n	17d2a <lte_lc_system_mode_get+0x112>
   17d76:	2000      	movs	r0, #0
   17d78:	e7d7      	b.n	17d2a <lte_lc_system_mode_get+0x112>
   17d7a:	bf00      	nop
   17d7c:	000268a0 	.word	0x000268a0
   17d80:	000268bc 	.word	0x000268bc
   17d84:	0002531c 	.word	0x0002531c
   17d88:	000252ec 	.word	0x000252ec
   17d8c:	000268cc 	.word	0x000268cc
   17d90:	000268f4 	.word	0x000268f4
   17d94:	2000d57a 	.word	0x2000d57a
   17d98:	2000d576 	.word	0x2000d576
   17d9c:	00026920 	.word	0x00026920

00017da0 <init_and_config>:
{
   17da0:	b510      	push	{r4, lr}
	if (is_initialized) {
   17da2:	4b30      	ldr	r3, [pc, #192]	; (17e64 <init_and_config+0xc4>)
   17da4:	781b      	ldrb	r3, [r3, #0]
   17da6:	b113      	cbz	r3, 17dae <init_and_config+0xe>
		return 0;
   17da8:	2400      	movs	r4, #0
}
   17daa:	4620      	mov	r0, r4
   17dac:	bd10      	pop	{r4, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17dae:	2201      	movs	r2, #1
   17db0:	2100      	movs	r1, #0
   17db2:	482d      	ldr	r0, [pc, #180]	; (17e68 <init_and_config+0xc8>)
   17db4:	f00c fa82 	bl	242bc <z_impl_k_sem_init>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   17db8:	492c      	ldr	r1, [pc, #176]	; (17e6c <init_and_config+0xcc>)
   17dba:	482d      	ldr	r0, [pc, #180]	; (17e70 <init_and_config+0xd0>)
   17dbc:	f7ff ff2c 	bl	17c18 <lte_lc_system_mode_get>
	if (err) {
   17dc0:	4604      	mov	r4, r0
   17dc2:	b9c8      	cbnz	r0, 17df8 <init_and_config+0x58>
	if ((sys_mode_current != sys_mode_target) ||
   17dc4:	4b2a      	ldr	r3, [pc, #168]	; (17e70 <init_and_config+0xd0>)
   17dc6:	781b      	ldrb	r3, [r3, #0]
   17dc8:	4a2a      	ldr	r2, [pc, #168]	; (17e74 <init_and_config+0xd4>)
   17dca:	7810      	ldrb	r0, [r2, #0]
   17dcc:	4283      	cmp	r3, r0
   17dce:	d105      	bne.n	17ddc <init_and_config+0x3c>
	    (mode_pref_current != mode_pref_target)) {
   17dd0:	4b26      	ldr	r3, [pc, #152]	; (17e6c <init_and_config+0xcc>)
   17dd2:	781a      	ldrb	r2, [r3, #0]
   17dd4:	4b28      	ldr	r3, [pc, #160]	; (17e78 <init_and_config+0xd8>)
   17dd6:	781b      	ldrb	r3, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   17dd8:	429a      	cmp	r2, r3
   17dda:	d005      	beq.n	17de8 <init_and_config+0x48>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   17ddc:	4b26      	ldr	r3, [pc, #152]	; (17e78 <init_and_config+0xd8>)
   17dde:	7819      	ldrb	r1, [r3, #0]
   17de0:	f7ff feac 	bl	17b3c <lte_lc_system_mode_set>
		if (err) {
   17de4:	4604      	mov	r4, r0
   17de6:	b9c8      	cbnz	r0, 17e1c <init_and_config+0x7c>
	err = enable_notifications();
   17de8:	f7ff fb5e 	bl	174a8 <enable_notifications>
	if (err) {
   17dec:	4604      	mov	r4, r0
   17dee:	bb38      	cbnz	r0, 17e40 <init_and_config+0xa0>
	is_initialized = true;
   17df0:	4b1c      	ldr	r3, [pc, #112]	; (17e64 <init_and_config+0xc4>)
   17df2:	2201      	movs	r2, #1
   17df4:	701a      	strb	r2, [r3, #0]
	return 0;
   17df6:	e7d8      	b.n	17daa <init_and_config+0xa>
   17df8:	4b20      	ldr	r3, [pc, #128]	; (17e7c <init_and_config+0xdc>)
   17dfa:	4a21      	ldr	r2, [pc, #132]	; (17e80 <init_and_config+0xe0>)
   17dfc:	1a9b      	subs	r3, r3, r2
   17dfe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get current system mode, error: %d", err);
   17e00:	f04f 0200 	mov.w	r2, #0
   17e04:	2101      	movs	r1, #1
   17e06:	f361 0202 	bfi	r2, r1, #0, #3
   17e0a:	f36f 02c5 	bfc	r2, #3, #3
   17e0e:	f363 128f 	bfi	r2, r3, #6, #10
   17e12:	4601      	mov	r1, r0
   17e14:	481b      	ldr	r0, [pc, #108]	; (17e84 <init_and_config+0xe4>)
   17e16:	f7fb f8cd 	bl	12fb4 <log_1>
		return err;
   17e1a:	e7c6      	b.n	17daa <init_and_config+0xa>
   17e1c:	4b17      	ldr	r3, [pc, #92]	; (17e7c <init_and_config+0xdc>)
   17e1e:	4a18      	ldr	r2, [pc, #96]	; (17e80 <init_and_config+0xe0>)
   17e20:	1a9b      	subs	r3, r3, r2
   17e22:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set system mode, error: %d", err);
   17e24:	f04f 0200 	mov.w	r2, #0
   17e28:	2101      	movs	r1, #1
   17e2a:	f361 0202 	bfi	r2, r1, #0, #3
   17e2e:	f36f 02c5 	bfc	r2, #3, #3
   17e32:	f363 128f 	bfi	r2, r3, #6, #10
   17e36:	4601      	mov	r1, r0
   17e38:	4813      	ldr	r0, [pc, #76]	; (17e88 <init_and_config+0xe8>)
   17e3a:	f7fb f8bb 	bl	12fb4 <log_1>
			return err;
   17e3e:	e7b4      	b.n	17daa <init_and_config+0xa>
   17e40:	4b0e      	ldr	r3, [pc, #56]	; (17e7c <init_and_config+0xdc>)
   17e42:	4a0f      	ldr	r2, [pc, #60]	; (17e80 <init_and_config+0xe0>)
   17e44:	1a9b      	subs	r3, r3, r2
   17e46:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable notifications");
   17e48:	f04f 0100 	mov.w	r1, #0
   17e4c:	2201      	movs	r2, #1
   17e4e:	f362 0102 	bfi	r1, r2, #0, #3
   17e52:	f36f 01c5 	bfc	r1, #3, #3
   17e56:	f363 118f 	bfi	r1, r3, #6, #10
   17e5a:	480c      	ldr	r0, [pc, #48]	; (17e8c <init_and_config+0xec>)
   17e5c:	f7fb f880 	bl	12f60 <log_0>
		return err;
   17e60:	e7a3      	b.n	17daa <init_and_config+0xa>
   17e62:	bf00      	nop
   17e64:	2000d575 	.word	0x2000d575
   17e68:	2000d1d4 	.word	0x2000d1d4
   17e6c:	2000d576 	.word	0x2000d576
   17e70:	2000d57a 	.word	0x2000d57a
   17e74:	2000c635 	.word	0x2000c635
   17e78:	2000d577 	.word	0x2000d577
   17e7c:	0002531c 	.word	0x0002531c
   17e80:	000252ec 	.word	0x000252ec
   17e84:	00026940 	.word	0x00026940
   17e88:	00026970 	.word	0x00026970
   17e8c:	00026998 	.word	0x00026998

00017e90 <lte_lc_func_mode_get>:
int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   17e90:	b320      	cbz	r0, 17edc <lte_lc_func_mode_get+0x4c>
{
   17e92:	b510      	push	{r4, lr}
   17e94:	b082      	sub	sp, #8
   17e96:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   17e98:	f10d 0206 	add.w	r2, sp, #6
   17e9c:	4911      	ldr	r1, [pc, #68]	; (17ee4 <lte_lc_func_mode_get+0x54>)
   17e9e:	4812      	ldr	r0, [pc, #72]	; (17ee8 <lte_lc_func_mode_get+0x58>)
   17ea0:	f004 fae4 	bl	1c46c <nrf_modem_at_scanf>
	if (err != 1) {
   17ea4:	2801      	cmp	r0, #1
   17ea6:	d105      	bne.n	17eb4 <lte_lc_func_mode_get+0x24>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
		return -EFAULT;
	}

	*mode = mode_tmp;
   17ea8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17eac:	7023      	strb	r3, [r4, #0]

	return 0;
   17eae:	2000      	movs	r0, #0
}
   17eb0:	b002      	add	sp, #8
   17eb2:	bd10      	pop	{r4, pc}
   17eb4:	4b0d      	ldr	r3, [pc, #52]	; (17eec <lte_lc_func_mode_get+0x5c>)
   17eb6:	4a0e      	ldr	r2, [pc, #56]	; (17ef0 <lte_lc_func_mode_get+0x60>)
   17eb8:	1a9b      	subs	r3, r3, r2
   17eba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   17ebc:	f04f 0200 	mov.w	r2, #0
   17ec0:	2101      	movs	r1, #1
   17ec2:	f361 0202 	bfi	r2, r1, #0, #3
   17ec6:	f36f 02c5 	bfc	r2, #3, #3
   17eca:	f363 128f 	bfi	r2, r3, #6, #10
   17ece:	4601      	mov	r1, r0
   17ed0:	4808      	ldr	r0, [pc, #32]	; (17ef4 <lte_lc_func_mode_get+0x64>)
   17ed2:	f7fb f86f 	bl	12fb4 <log_1>
		return -EFAULT;
   17ed6:	f06f 000d 	mvn.w	r0, #13
   17eda:	e7e9      	b.n	17eb0 <lte_lc_func_mode_get+0x20>
		return -EINVAL;
   17edc:	f06f 0015 	mvn.w	r0, #21
}
   17ee0:	4770      	bx	lr
   17ee2:	bf00      	nop
   17ee4:	000269b8 	.word	0x000269b8
   17ee8:	000269c4 	.word	0x000269c4
   17eec:	0002531c 	.word	0x0002531c
   17ef0:	000252ec 	.word	0x000252ec
   17ef4:	000269d0 	.word	0x000269d0

00017ef8 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   17ef8:	b510      	push	{r4, lr}
   17efa:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   17efc:	282c      	cmp	r0, #44	; 0x2c
   17efe:	d84e      	bhi.n	17f9e <lte_lc_func_mode_set+0xa6>
   17f00:	e8df f000 	tbb	[pc, r0]
   17f04:	4d1b351b 	.word	0x4d1b351b
   17f08:	4d4d4d1b 	.word	0x4d4d4d1b
   17f0c:	4d4d4d4d 	.word	0x4d4d4d4d
   17f10:	4d4d4d4d 	.word	0x4d4d4d4d
   17f14:	4d4d4d4d 	.word	0x4d4d4d4d
   17f18:	4d4d171b 	.word	0x4d4d171b
   17f1c:	4d4d4d4d 	.word	0x4d4d4d4d
   17f20:	1b1b4d4d 	.word	0x1b1b4d4d
   17f24:	4d4d4d4d 	.word	0x4d4d4d4d
   17f28:	4d4d4d4d 	.word	0x4d4d4d4d
   17f2c:	4d4d1b1b 	.word	0x4d4d1b1b
   17f30:	1b          	.byte	0x1b
   17f31:	00          	.byte	0x00
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   17f32:	f7ff fab9 	bl	174a8 <enable_notifications>
		if (err) {
   17f36:	4601      	mov	r1, r0
   17f38:	b930      	cbnz	r0, 17f48 <lte_lc_func_mode_set+0x50>
	default:
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   17f3a:	4621      	mov	r1, r4
   17f3c:	4823      	ldr	r0, [pc, #140]	; (17fcc <lte_lc_func_mode_set+0xd4>)
   17f3e:	f004 fa07 	bl	1c350 <nrf_modem_at_printf>
   17f42:	2800      	cmp	r0, #0
   17f44:	d13f      	bne.n	17fc6 <lte_lc_func_mode_set+0xce>
}
   17f46:	bd10      	pop	{r4, pc}
   17f48:	4b21      	ldr	r3, [pc, #132]	; (17fd0 <lte_lc_func_mode_set+0xd8>)
   17f4a:	4a22      	ldr	r2, [pc, #136]	; (17fd4 <lte_lc_func_mode_set+0xdc>)
   17f4c:	1a9b      	subs	r3, r3, r2
   17f4e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   17f50:	f04f 0200 	mov.w	r2, #0
   17f54:	2001      	movs	r0, #1
   17f56:	f360 0202 	bfi	r2, r0, #0, #3
   17f5a:	f36f 02c5 	bfc	r2, #3, #3
   17f5e:	f363 128f 	bfi	r2, r3, #6, #10
   17f62:	481d      	ldr	r0, [pc, #116]	; (17fd8 <lte_lc_func_mode_set+0xe0>)
   17f64:	f7fb f826 	bl	12fb4 <log_1>
			return -EFAULT;
   17f68:	f06f 000d 	mvn.w	r0, #13
   17f6c:	e7eb      	b.n	17f46 <lte_lc_func_mode_set+0x4e>
		err = enable_notifications();
   17f6e:	f7ff fa9b 	bl	174a8 <enable_notifications>
		if (err) {
   17f72:	4601      	mov	r1, r0
   17f74:	2800      	cmp	r0, #0
   17f76:	d0e0      	beq.n	17f3a <lte_lc_func_mode_set+0x42>
   17f78:	4b15      	ldr	r3, [pc, #84]	; (17fd0 <lte_lc_func_mode_set+0xd8>)
   17f7a:	4a16      	ldr	r2, [pc, #88]	; (17fd4 <lte_lc_func_mode_set+0xdc>)
   17f7c:	1a9b      	subs	r3, r3, r2
   17f7e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   17f80:	f04f 0200 	mov.w	r2, #0
   17f84:	2001      	movs	r0, #1
   17f86:	f360 0202 	bfi	r2, r0, #0, #3
   17f8a:	f36f 02c5 	bfc	r2, #3, #3
   17f8e:	f363 128f 	bfi	r2, r3, #6, #10
   17f92:	4811      	ldr	r0, [pc, #68]	; (17fd8 <lte_lc_func_mode_set+0xe0>)
   17f94:	f7fb f80e 	bl	12fb4 <log_1>
			return -EFAULT;
   17f98:	f06f 000d 	mvn.w	r0, #13
   17f9c:	e7d3      	b.n	17f46 <lte_lc_func_mode_set+0x4e>
   17f9e:	4b0c      	ldr	r3, [pc, #48]	; (17fd0 <lte_lc_func_mode_set+0xd8>)
   17fa0:	4a0c      	ldr	r2, [pc, #48]	; (17fd4 <lte_lc_func_mode_set+0xdc>)
   17fa2:	1a9b      	subs	r3, r3, r2
   17fa4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid functional mode: %d", mode);
   17fa6:	f04f 0200 	mov.w	r2, #0
   17faa:	2101      	movs	r1, #1
   17fac:	f361 0202 	bfi	r2, r1, #0, #3
   17fb0:	f36f 02c5 	bfc	r2, #3, #3
   17fb4:	f363 128f 	bfi	r2, r3, #6, #10
   17fb8:	4601      	mov	r1, r0
   17fba:	4808      	ldr	r0, [pc, #32]	; (17fdc <lte_lc_func_mode_set+0xe4>)
   17fbc:	f7fa fffa 	bl	12fb4 <log_1>
		return -EINVAL;
   17fc0:	f06f 0015 	mvn.w	r0, #21
   17fc4:	e7bf      	b.n	17f46 <lte_lc_func_mode_set+0x4e>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   17fc6:	f06f 000d 	mvn.w	r0, #13
   17fca:	e7bc      	b.n	17f46 <lte_lc_func_mode_set+0x4e>
   17fcc:	00026a54 	.word	0x00026a54
   17fd0:	0002531c 	.word	0x0002531c
   17fd4:	000252ec 	.word	0x000252ec
   17fd8:	00026a0c 	.word	0x00026a0c
   17fdc:	00026a38 	.word	0x00026a38

00017fe0 <connect_lte>:
{
   17fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fe4:	b082      	sub	sp, #8
	if (!is_initialized) {
   17fe6:	4b61      	ldr	r3, [pc, #388]	; (1816c <connect_lte+0x18c>)
   17fe8:	781b      	ldrb	r3, [r3, #0]
   17fea:	2b00      	cmp	r3, #0
   17fec:	d07f      	beq.n	180ee <connect_lte+0x10e>
   17fee:	4606      	mov	r6, r0
   17ff0:	4b5f      	ldr	r3, [pc, #380]	; (18170 <connect_lte+0x190>)
   17ff2:	2101      	movs	r1, #1
   17ff4:	e8d3 2fef 	ldaex	r2, [r3]
   17ff8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   17ffc:	2800      	cmp	r0, #0
   17ffe:	d1f9      	bne.n	17ff4 <connect_lte+0x14>
	if (atomic_set(&in_progress, 1)) {
   18000:	2a00      	cmp	r2, #0
   18002:	f040 80b0 	bne.w	18166 <connect_lte+0x186>
	err = lte_lc_nw_reg_status_get(&reg_status);
   18006:	f10d 0006 	add.w	r0, sp, #6
   1800a:	f7ff fd5b 	bl	17ac4 <lte_lc_nw_reg_status_get>
	if (err) {
   1800e:	4604      	mov	r4, r0
   18010:	2800      	cmp	r0, #0
   18012:	d17f      	bne.n	18114 <connect_lte+0x134>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   18014:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18018:	2b01      	cmp	r3, #1
   1801a:	d064      	beq.n	180e6 <connect_lte+0x106>
   1801c:	2b05      	cmp	r3, #5
   1801e:	d062      	beq.n	180e6 <connect_lte+0x106>
	if (blocking) {
   18020:	2e00      	cmp	r6, #0
   18022:	f040 808a 	bne.w	1813a <connect_lte+0x15a>
{
   18026:	2502      	movs	r5, #2
		tries--;
   18028:	3d01      	subs	r5, #1
		err = lte_lc_func_mode_get(&current_func_mode);
   1802a:	f10d 0007 	add.w	r0, sp, #7
   1802e:	f7ff ff2f 	bl	17e90 <lte_lc_func_mode_get>
		if (err) {
   18032:	2800      	cmp	r0, #0
   18034:	f040 808e 	bne.w	18154 <connect_lte+0x174>
		    ((current_func_mode == LTE_LC_FUNC_MODE_POWER_OFF) ||
   18038:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   1803c:	b10b      	cbz	r3, 18042 <connect_lte+0x62>
   1803e:	2b04      	cmp	r3, #4
   18040:	d108      	bne.n	18054 <connect_lte+0x74>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   18042:	4b4c      	ldr	r3, [pc, #304]	; (18174 <connect_lte+0x194>)
   18044:	7819      	ldrb	r1, [r3, #0]
   18046:	4b4c      	ldr	r3, [pc, #304]	; (18178 <connect_lte+0x198>)
   18048:	7818      	ldrb	r0, [r3, #0]
   1804a:	f7ff fd77 	bl	17b3c <lte_lc_system_mode_set>
			if (err) {
   1804e:	2800      	cmp	r0, #0
   18050:	f040 8083 	bne.w	1815a <connect_lte+0x17a>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   18054:	2001      	movs	r0, #1
   18056:	f7ff ff4f 	bl	17ef8 <lte_lc_func_mode_set>
		if (err || !blocking) {
   1805a:	4604      	mov	r4, r0
   1805c:	2800      	cmp	r0, #0
   1805e:	d13a      	bne.n	180d6 <connect_lte+0xf6>
   18060:	2e00      	cmp	r6, #0
   18062:	d038      	beq.n	180d6 <connect_lte+0xf6>
	return z_impl_k_sem_take(sem, timeout);
   18064:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18068:	2300      	movs	r3, #0
   1806a:	4844      	ldr	r0, [pc, #272]	; (1817c <connect_lte+0x19c>)
   1806c:	f005 f92a 	bl	1d2c4 <z_impl_k_sem_take>
   18070:	4604      	mov	r4, r0
		if (err == -EAGAIN) {
   18072:	f110 0f0b 	cmn.w	r0, #11
   18076:	d12e      	bne.n	180d6 <connect_lte+0xf6>
   18078:	4b41      	ldr	r3, [pc, #260]	; (18180 <connect_lte+0x1a0>)
   1807a:	4a42      	ldr	r2, [pc, #264]	; (18184 <connect_lte+0x1a4>)
   1807c:	1a9b      	subs	r3, r3, r2
   1807e:	08db      	lsrs	r3, r3, #3
			LOG_INF("Network connection attempt timed out");
   18080:	2203      	movs	r2, #3
   18082:	f362 0702 	bfi	r7, r2, #0, #3
   18086:	f36f 07c5 	bfc	r7, #3, #3
   1808a:	f363 178f 	bfi	r7, r3, #6, #10
   1808e:	4639      	mov	r1, r7
   18090:	483d      	ldr	r0, [pc, #244]	; (18188 <connect_lte+0x1a8>)
   18092:	f7fa ff65 	bl	12f60 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18096:	2d00      	cmp	r5, #0
   18098:	dd59      	ble.n	1814e <connect_lte+0x16e>
				if (sys_mode_target == sys_mode_preferred) {
   1809a:	4b37      	ldr	r3, [pc, #220]	; (18178 <connect_lte+0x198>)
   1809c:	781b      	ldrb	r3, [r3, #0]
   1809e:	2b01      	cmp	r3, #1
   180a0:	d051      	beq.n	18146 <connect_lte+0x166>
					sys_mode_target = sys_mode_preferred;
   180a2:	4b35      	ldr	r3, [pc, #212]	; (18178 <connect_lte+0x198>)
   180a4:	2201      	movs	r2, #1
   180a6:	701a      	strb	r2, [r3, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   180a8:	2004      	movs	r0, #4
   180aa:	f7ff ff25 	bl	17ef8 <lte_lc_func_mode_set>
				if (err) {
   180ae:	4604      	mov	r4, r0
   180b0:	2800      	cmp	r0, #0
   180b2:	d155      	bne.n	18160 <connect_lte+0x180>
   180b4:	4b32      	ldr	r3, [pc, #200]	; (18180 <connect_lte+0x1a0>)
   180b6:	4a33      	ldr	r2, [pc, #204]	; (18184 <connect_lte+0x1a4>)
   180b8:	1a9b      	subs	r3, r3, r2
   180ba:	08db      	lsrs	r3, r3, #3
				LOG_INF("Using fallback network mode");
   180bc:	2203      	movs	r2, #3
   180be:	f362 0802 	bfi	r8, r2, #0, #3
   180c2:	f36f 08c5 	bfc	r8, #3, #3
   180c6:	f363 188f 	bfi	r8, r3, #6, #10
   180ca:	4641      	mov	r1, r8
   180cc:	482f      	ldr	r0, [pc, #188]	; (1818c <connect_lte+0x1ac>)
   180ce:	f7fa ff47 	bl	12f60 <log_0>
	} while (tries > 0);
   180d2:	2d00      	cmp	r5, #0
   180d4:	dca8      	bgt.n	18028 <connect_lte+0x48>
   180d6:	4b26      	ldr	r3, [pc, #152]	; (18170 <connect_lte+0x190>)
   180d8:	2200      	movs	r2, #0
   180da:	e8d3 1fef 	ldaex	r1, [r3]
   180de:	e8c3 2fe0 	stlex	r0, r2, [r3]
   180e2:	2800      	cmp	r0, #0
   180e4:	d1f9      	bne.n	180da <connect_lte+0xfa>
}
   180e6:	4620      	mov	r0, r4
   180e8:	b002      	add	sp, #8
   180ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180ee:	4b24      	ldr	r3, [pc, #144]	; (18180 <connect_lte+0x1a0>)
   180f0:	4a24      	ldr	r2, [pc, #144]	; (18184 <connect_lte+0x1a4>)
   180f2:	1a9b      	subs	r3, r3, r2
   180f4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("The LTE link controller is not initialized");
   180f6:	f04f 0100 	mov.w	r1, #0
   180fa:	2201      	movs	r2, #1
   180fc:	f362 0102 	bfi	r1, r2, #0, #3
   18100:	f36f 01c5 	bfc	r1, #3, #3
   18104:	f363 118f 	bfi	r1, r3, #6, #10
   18108:	4821      	ldr	r0, [pc, #132]	; (18190 <connect_lte+0x1b0>)
   1810a:	f7fa ff29 	bl	12f60 <log_0>
		return -EPERM;
   1810e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18112:	e7e8      	b.n	180e6 <connect_lte+0x106>
   18114:	4b1a      	ldr	r3, [pc, #104]	; (18180 <connect_lte+0x1a0>)
   18116:	4a1b      	ldr	r2, [pc, #108]	; (18184 <connect_lte+0x1a4>)
   18118:	1a9b      	subs	r3, r3, r2
   1811a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get current registration status");
   1811c:	f04f 0100 	mov.w	r1, #0
   18120:	2201      	movs	r2, #1
   18122:	f362 0102 	bfi	r1, r2, #0, #3
   18126:	f36f 01c5 	bfc	r1, #3, #3
   1812a:	f363 118f 	bfi	r1, r3, #6, #10
   1812e:	4819      	ldr	r0, [pc, #100]	; (18194 <connect_lte+0x1b4>)
   18130:	f7fa ff16 	bl	12f60 <log_0>
		return -EFAULT;
   18134:	f06f 040d 	mvn.w	r4, #13
   18138:	e7d5      	b.n	180e6 <connect_lte+0x106>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1813a:	2201      	movs	r2, #1
   1813c:	2100      	movs	r1, #0
   1813e:	480f      	ldr	r0, [pc, #60]	; (1817c <connect_lte+0x19c>)
   18140:	f00c f8bc 	bl	242bc <z_impl_k_sem_init>
   18144:	e76f      	b.n	18026 <connect_lte+0x46>
					sys_mode_target = sys_mode_fallback;
   18146:	4b0c      	ldr	r3, [pc, #48]	; (18178 <connect_lte+0x198>)
   18148:	2202      	movs	r2, #2
   1814a:	701a      	strb	r2, [r3, #0]
   1814c:	e7ac      	b.n	180a8 <connect_lte+0xc8>
				err = -ETIMEDOUT;
   1814e:	f06f 0473 	mvn.w	r4, #115	; 0x73
   18152:	e7be      	b.n	180d2 <connect_lte+0xf2>
			err = -EFAULT;
   18154:	f06f 040d 	mvn.w	r4, #13
   18158:	e7bd      	b.n	180d6 <connect_lte+0xf6>
				err = -EFAULT;
   1815a:	f06f 040d 	mvn.w	r4, #13
   1815e:	e7ba      	b.n	180d6 <connect_lte+0xf6>
					err = -EFAULT;
   18160:	f06f 040d 	mvn.w	r4, #13
   18164:	e7b7      	b.n	180d6 <connect_lte+0xf6>
		return -EINPROGRESS;
   18166:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1816a:	e7bc      	b.n	180e6 <connect_lte+0x106>
   1816c:	2000d575 	.word	0x2000d575
   18170:	2000d1d0 	.word	0x2000d1d0
   18174:	2000d576 	.word	0x2000d576
   18178:	2000c635 	.word	0x2000c635
   1817c:	2000d1d4 	.word	0x2000d1d4
   18180:	0002531c 	.word	0x0002531c
   18184:	000252ec 	.word	0x000252ec
   18188:	00026ab8 	.word	0x00026ab8
   1818c:	00026ae0 	.word	0x00026ae0
   18190:	00026a60 	.word	0x00026a60
   18194:	00026a8c 	.word	0x00026a8c

00018198 <get_ptw_multiplier>:
	switch (lte_mode) {
   18198:	2807      	cmp	r0, #7
   1819a:	d004      	beq.n	181a6 <get_ptw_multiplier+0xe>
   1819c:	2809      	cmp	r0, #9
   1819e:	d006      	beq.n	181ae <get_ptw_multiplier+0x16>
   181a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   181a4:	4770      	bx	lr
		*ptw_multiplier = 1.28;
   181a6:	4b04      	ldr	r3, [pc, #16]	; (181b8 <get_ptw_multiplier+0x20>)
   181a8:	600b      	str	r3, [r1, #0]
	return 0;
   181aa:	2000      	movs	r0, #0
		break;
   181ac:	4770      	bx	lr
		*ptw_multiplier = 2.56;
   181ae:	4b03      	ldr	r3, [pc, #12]	; (181bc <get_ptw_multiplier+0x24>)
   181b0:	600b      	str	r3, [r1, #0]
	return 0;
   181b2:	2000      	movs	r0, #0
}
   181b4:	4770      	bx	lr
   181b6:	bf00      	nop
   181b8:	3fa3d70a 	.word	0x3fa3d70a
   181bc:	4023d70a 	.word	0x4023d70a

000181c0 <get_nw_reg_status>:
/* Get network registration status from CEREG response list.
 * Returns the (positive) registration value if it's found, otherwise a negative
 * error code.
 */
static int get_nw_reg_status(struct at_param_list *list, bool is_notif)
{
   181c0:	b500      	push	{lr}
   181c2:	b083      	sub	sp, #12
	int err, reg_status;
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   181c4:	b1f1      	cbz	r1, 18204 <get_nw_reg_status+0x44>
   181c6:	2101      	movs	r1, #1
					     AT_CEREG_READ_REG_STATUS_INDEX;

	err = at_params_int_get(list, reg_status_index, &reg_status);
   181c8:	aa01      	add	r2, sp, #4
   181ca:	f00a fe2a 	bl	22e22 <at_params_int_get>
	if (err) {
   181ce:	4601      	mov	r1, r0
   181d0:	b9e0      	cbnz	r0, 1820c <get_nw_reg_status+0x4c>
		return err;
	}

	/* Check if the parsed value maps to a valid registration status */
	switch (reg_status) {
   181d2:	9901      	ldr	r1, [sp, #4]
   181d4:	2908      	cmp	r1, #8
   181d6:	d019      	beq.n	1820c <get_nw_reg_status+0x4c>
   181d8:	dd16      	ble.n	18208 <get_nw_reg_status+0x48>
   181da:	295a      	cmp	r1, #90	; 0x5a
   181dc:	d016      	beq.n	1820c <get_nw_reg_status+0x4c>
   181de:	4b0d      	ldr	r3, [pc, #52]	; (18214 <get_nw_reg_status+0x54>)
   181e0:	4a0d      	ldr	r2, [pc, #52]	; (18218 <get_nw_reg_status+0x58>)
   181e2:	1a9b      	subs	r3, r3, r2
   181e4:	08db      	lsrs	r3, r3, #3
	case LTE_LC_NW_REG_REGISTERED_ROAMING:
	case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
	case LTE_LC_NW_REG_UICC_FAIL:
		break;
	default:
		LOG_ERR("Invalid network registration status: %d", reg_status);
   181e6:	f04f 0200 	mov.w	r2, #0
   181ea:	2001      	movs	r0, #1
   181ec:	f360 0202 	bfi	r2, r0, #0, #3
   181f0:	f36f 02c5 	bfc	r2, #3, #3
   181f4:	f363 128f 	bfi	r2, r3, #6, #10
   181f8:	4808      	ldr	r0, [pc, #32]	; (1821c <get_nw_reg_status+0x5c>)
   181fa:	f7fa fedb 	bl	12fb4 <log_1>
		return -EINVAL;
   181fe:	f06f 0115 	mvn.w	r1, #21
   18202:	e003      	b.n	1820c <get_nw_reg_status+0x4c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   18204:	2102      	movs	r1, #2
   18206:	e7df      	b.n	181c8 <get_nw_reg_status+0x8>
	switch (reg_status) {
   18208:	2905      	cmp	r1, #5
   1820a:	d8e8      	bhi.n	181de <get_nw_reg_status+0x1e>
	}

	return reg_status;
}
   1820c:	4608      	mov	r0, r1
   1820e:	b003      	add	sp, #12
   18210:	f85d fb04 	ldr.w	pc, [sp], #4
   18214:	00025324 	.word	0x00025324
   18218:	000252ec 	.word	0x000252ec
   1821c:	00026bd4 	.word	0x00026bd4

00018220 <event_handler_list_is_empty>:
	return list->head;
   18220:	4b02      	ldr	r3, [pc, #8]	; (1822c <event_handler_list_is_empty+0xc>)
   18222:	6818      	ldr	r0, [r3, #0]
}
   18224:	fab0 f080 	clz	r0, r0
   18228:	0940      	lsrs	r0, r0, #5
   1822a:	4770      	bx	lr
   1822c:	2000d2a4 	.word	0x2000d2a4

00018230 <event_handler_list_dispatch>:
{
   18230:	b538      	push	{r3, r4, r5, lr}
   18232:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   18234:	f7ff fff4 	bl	18220 <event_handler_list_is_empty>
   18238:	b100      	cbz	r0, 1823c <event_handler_list_dispatch+0xc>
}
   1823a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1823c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18244:	480e      	ldr	r0, [pc, #56]	; (18280 <event_handler_list_dispatch+0x50>)
   18246:	f004 ff0d 	bl	1d064 <z_impl_k_mutex_lock>
   1824a:	4b0e      	ldr	r3, [pc, #56]	; (18284 <event_handler_list_dispatch+0x54>)
   1824c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1824e:	b17b      	cbz	r3, 18270 <event_handler_list_dispatch+0x40>
   18250:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   18252:	b123      	cbz	r3, 1825e <event_handler_list_dispatch+0x2e>
	return node->next;
   18254:	681c      	ldr	r4, [r3, #0]
   18256:	e002      	b.n	1825e <event_handler_list_dispatch+0x2e>
   18258:	6822      	ldr	r2, [r4, #0]
   1825a:	4623      	mov	r3, r4
   1825c:	4614      	mov	r4, r2
   1825e:	b15b      	cbz	r3, 18278 <event_handler_list_dispatch+0x48>
		curr->handler(evt);
   18260:	685b      	ldr	r3, [r3, #4]
   18262:	4628      	mov	r0, r5
   18264:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18266:	b12c      	cbz	r4, 18274 <event_handler_list_dispatch+0x44>
   18268:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1826a:	2c00      	cmp	r4, #0
   1826c:	d1f4      	bne.n	18258 <event_handler_list_dispatch+0x28>
   1826e:	e7f4      	b.n	1825a <event_handler_list_dispatch+0x2a>
   18270:	461c      	mov	r4, r3
   18272:	e7f4      	b.n	1825e <event_handler_list_dispatch+0x2e>
   18274:	4622      	mov	r2, r4
   18276:	e7f0      	b.n	1825a <event_handler_list_dispatch+0x2a>
	return z_impl_k_mutex_unlock(mutex);
   18278:	4801      	ldr	r0, [pc, #4]	; (18280 <event_handler_list_dispatch+0x50>)
   1827a:	f004 ff7d 	bl	1d178 <z_impl_k_mutex_unlock>
   1827e:	e7dc      	b.n	1823a <event_handler_list_dispatch+0xa>
   18280:	2000c72c 	.word	0x2000c72c
   18284:	2000d2a4 	.word	0x2000d2a4

00018288 <response_is_valid>:
{
   18288:	b570      	push	{r4, r5, r6, lr}
	if ((response == NULL) || (check == NULL)) {
   1828a:	b150      	cbz	r0, 182a2 <response_is_valid+0x1a>
   1828c:	460d      	mov	r5, r1
   1828e:	4614      	mov	r4, r2
   18290:	4606      	mov	r6, r0
   18292:	b132      	cbz	r2, 182a2 <response_is_valid+0x1a>
	if ((response_len < strlen(check)) ||
   18294:	4610      	mov	r0, r2
   18296:	f7f8 ff28 	bl	110ea <strlen>
   1829a:	4285      	cmp	r5, r0
   1829c:	d213      	bcs.n	182c6 <response_is_valid+0x3e>
		return false;
   1829e:	2000      	movs	r0, #0
}
   182a0:	bd70      	pop	{r4, r5, r6, pc}
   182a2:	4b0d      	ldr	r3, [pc, #52]	; (182d8 <response_is_valid+0x50>)
   182a4:	4a0d      	ldr	r2, [pc, #52]	; (182dc <response_is_valid+0x54>)
   182a6:	1a9b      	subs	r3, r3, r2
   182a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid pointer provided");
   182aa:	f04f 0100 	mov.w	r1, #0
   182ae:	2201      	movs	r2, #1
   182b0:	f362 0102 	bfi	r1, r2, #0, #3
   182b4:	f36f 01c5 	bfc	r1, #3, #3
   182b8:	f363 118f 	bfi	r1, r3, #6, #10
   182bc:	4808      	ldr	r0, [pc, #32]	; (182e0 <response_is_valid+0x58>)
   182be:	f7fa fe4f 	bl	12f60 <log_0>
		return false;
   182c2:	2000      	movs	r0, #0
   182c4:	e7ec      	b.n	182a0 <response_is_valid+0x18>
	    (memcmp(response, check, response_len) != 0)) {
   182c6:	462a      	mov	r2, r5
   182c8:	4621      	mov	r1, r4
   182ca:	4630      	mov	r0, r6
   182cc:	f00c fbee 	bl	24aac <memcmp>
	if ((response_len < strlen(check)) ||
   182d0:	2800      	cmp	r0, #0
   182d2:	d1e4      	bne.n	1829e <response_is_valid+0x16>
	return true;
   182d4:	2001      	movs	r0, #1
   182d6:	e7e3      	b.n	182a0 <response_is_valid+0x18>
   182d8:	00025324 	.word	0x00025324
   182dc:	000252ec 	.word	0x000252ec
   182e0:	00026bfc 	.word	0x00026bfc

000182e4 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   182e4:	b570      	push	{r4, r5, r6, lr}
   182e6:	b088      	sub	sp, #32
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   182e8:	2300      	movs	r3, #0
   182ea:	9305      	str	r3, [sp, #20]
   182ec:	9306      	str	r3, [sp, #24]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   182ee:	2304      	movs	r3, #4
   182f0:	9302      	str	r3, [sp, #8]
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   182f2:	2800      	cmp	r0, #0
   182f4:	f000 8105 	beq.w	18502 <parse_edrx+0x21e>
   182f8:	460d      	mov	r5, r1
   182fa:	4606      	mov	r6, r0
   182fc:	2900      	cmp	r1, #0
   182fe:	f000 8103 	beq.w	18508 <parse_edrx+0x224>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   18302:	2106      	movs	r1, #6
   18304:	a805      	add	r0, sp, #20
   18306:	f00a fc72 	bl	22bee <at_params_list_init>
	if (err) {
   1830a:	4604      	mov	r4, r0
   1830c:	2800      	cmp	r0, #0
   1830e:	d15e      	bne.n	183ce <parse_edrx+0xea>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   18310:	aa05      	add	r2, sp, #20
   18312:	2100      	movs	r1, #0
   18314:	4630      	mov	r0, r6
   18316:	f00a fc39 	bl	22b8c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1831a:	4604      	mov	r4, r0
   1831c:	2800      	cmp	r0, #0
   1831e:	d168      	bne.n	183f2 <parse_edrx+0x10e>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   18320:	ab02      	add	r3, sp, #8
   18322:	aa03      	add	r2, sp, #12
   18324:	2103      	movs	r1, #3
   18326:	a805      	add	r0, sp, #20
   18328:	f00a fdcb 	bl	22ec2 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   1832c:	4604      	mov	r4, r0
   1832e:	2800      	cmp	r0, #0
   18330:	d176      	bne.n	18420 <parse_edrx+0x13c>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   18332:	9b02      	ldr	r3, [sp, #8]
   18334:	aa08      	add	r2, sp, #32
   18336:	4413      	add	r3, r2
   18338:	2100      	movs	r1, #0
   1833a:	f803 1c14 	strb.w	r1, [r3, #-20]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   1833e:	2202      	movs	r2, #2
   18340:	a803      	add	r0, sp, #12
   18342:	f006 fd39 	bl	1edb8 <strtoul>
   18346:	b2c6      	uxtb	r6, r0

	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   18348:	aa07      	add	r2, sp, #28
   1834a:	2101      	movs	r1, #1
   1834c:	a805      	add	r0, sp, #20
   1834e:	f00a fd68 	bl	22e22 <at_params_int_get>
	if (err) {
   18352:	4604      	mov	r4, r0
   18354:	2800      	cmp	r0, #0
   18356:	d175      	bne.n	18444 <parse_edrx+0x160>
	}

	/* The acces technology indicators 4 for LTE-M and 5 for NB-IoT are
	 * specified in 3GPP 27.007 Ch. 7.41.
	 */
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   18358:	9b07      	ldr	r3, [sp, #28]
   1835a:	2b04      	cmp	r3, #4
   1835c:	f000 8086 	beq.w	1846c <parse_edrx+0x188>
   18360:	2b05      	cmp	r3, #5
   18362:	f000 8081 	beq.w	18468 <parse_edrx+0x184>
   18366:	2000      	movs	r0, #0
   18368:	7028      	strb	r0, [r5, #0]

	/* Confirm valid system mode and set Paging Time Window multiplier.
	 * Multiplier is 1.28 s for LTE-M, and 2.56 s for NB-IoT, derived from
	 * figure 10.5.5.32/3GPP TS 24.008.
	 */
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
   1836a:	a901      	add	r1, sp, #4
   1836c:	f7ff ff14 	bl	18198 <get_ptw_multiplier>
	if (err) {
   18370:	4604      	mov	r4, r0
   18372:	2800      	cmp	r0, #0
   18374:	d17c      	bne.n	18470 <parse_edrx+0x18c>
		LOG_WRN("Active LTE mode could not be determined");
		goto clean_exit;
	}

	err = get_edrx_value(cfg->mode, idx, &cfg->edrx);
   18376:	462a      	mov	r2, r5
   18378:	f812 0b04 	ldrb.w	r0, [r2], #4
   1837c:	4631      	mov	r1, r6
   1837e:	f7f8 febf 	bl	11100 <get_edrx_value>
	if (err) {
   18382:	4604      	mov	r4, r0
   18384:	2800      	cmp	r0, #0
   18386:	f040 8084 	bne.w	18492 <parse_edrx+0x1ae>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
		goto clean_exit;
	}

	len = sizeof(tmp_buf) - 1;
   1838a:	2104      	movs	r1, #4
   1838c:	9102      	str	r1, [sp, #8]

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1838e:	ab02      	add	r3, sp, #8
   18390:	aa03      	add	r2, sp, #12
   18392:	a805      	add	r0, sp, #20
   18394:	f00a fd95 	bl	22ec2 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   18398:	4604      	mov	r4, r0
   1839a:	2800      	cmp	r0, #0
   1839c:	f040 808b 	bne.w	184b6 <parse_edrx+0x1d2>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   183a0:	9b02      	ldr	r3, [sp, #8]
   183a2:	aa08      	add	r2, sp, #32
   183a4:	4413      	add	r3, r2
   183a6:	2100      	movs	r1, #0
   183a8:	f803 1c14 	strb.w	r1, [r3, #-20]

	/* Value can be a maximum of 15, as there are 16 entries in the table
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   183ac:	2202      	movs	r2, #2
   183ae:	a803      	add	r0, sp, #12
   183b0:	f006 fd02 	bl	1edb8 <strtoul>
   183b4:	b2c3      	uxtb	r3, r0
	if (idx > 15) {
   183b6:	2b0f      	cmp	r3, #15
   183b8:	f200 808f 	bhi.w	184da <parse_edrx+0x1f6>

	/* The Paging Time Window is different for LTE-M and NB-IoT:
	 *	- LTE-M: (idx + 1) * 1.28 s
	 *	- NB-IoT (idx + 1) * 2.56 s
	 */
	idx += 1;
   183bc:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   183be:	b2c0      	uxtb	r0, r0
   183c0:	f7f8 fcca 	bl	10d58 <__aeabi_i2f>
   183c4:	9901      	ldr	r1, [sp, #4]
   183c6:	f7f7 ff3b 	bl	10240 <__aeabi_fmul>
   183ca:	60a8      	str	r0, [r5, #8]

	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   183cc:	e022      	b.n	18414 <parse_edrx+0x130>
   183ce:	4b50      	ldr	r3, [pc, #320]	; (18510 <parse_edrx+0x22c>)
   183d0:	4a50      	ldr	r2, [pc, #320]	; (18514 <parse_edrx+0x230>)
   183d2:	1a9b      	subs	r3, r3, r2
   183d4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   183d6:	f04f 0200 	mov.w	r2, #0
   183da:	2101      	movs	r1, #1
   183dc:	f361 0202 	bfi	r2, r1, #0, #3
   183e0:	f36f 02c5 	bfc	r2, #3, #3
   183e4:	f363 128f 	bfi	r2, r3, #6, #10
   183e8:	4601      	mov	r1, r0
   183ea:	484b      	ldr	r0, [pc, #300]	; (18518 <parse_edrx+0x234>)
   183ec:	f7fa fde2 	bl	12fb4 <log_1>
		return err;
   183f0:	e013      	b.n	1841a <parse_edrx+0x136>
   183f2:	4b47      	ldr	r3, [pc, #284]	; (18510 <parse_edrx+0x22c>)
   183f4:	4a47      	ldr	r2, [pc, #284]	; (18514 <parse_edrx+0x230>)
   183f6:	1a9b      	subs	r3, r3, r2
   183f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   183fa:	f04f 0200 	mov.w	r2, #0
   183fe:	2101      	movs	r1, #1
   18400:	f361 0202 	bfi	r2, r1, #0, #3
   18404:	f36f 02c5 	bfc	r2, #3, #3
   18408:	f363 128f 	bfi	r2, r3, #6, #10
   1840c:	4601      	mov	r1, r0
   1840e:	4843      	ldr	r0, [pc, #268]	; (1851c <parse_edrx+0x238>)
   18410:	f7fa fdd0 	bl	12fb4 <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   18414:	a805      	add	r0, sp, #20
   18416:	f00a fc13 	bl	22c40 <at_params_list_free>

	return err;
}
   1841a:	4620      	mov	r0, r4
   1841c:	b008      	add	sp, #32
   1841e:	bd70      	pop	{r4, r5, r6, pc}
   18420:	4b3b      	ldr	r3, [pc, #236]	; (18510 <parse_edrx+0x22c>)
   18422:	4a3c      	ldr	r2, [pc, #240]	; (18514 <parse_edrx+0x230>)
   18424:	1a9b      	subs	r3, r3, r2
   18426:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   18428:	f04f 0200 	mov.w	r2, #0
   1842c:	2101      	movs	r1, #1
   1842e:	f361 0202 	bfi	r2, r1, #0, #3
   18432:	f36f 02c5 	bfc	r2, #3, #3
   18436:	f363 128f 	bfi	r2, r3, #6, #10
   1843a:	4601      	mov	r1, r0
   1843c:	4838      	ldr	r0, [pc, #224]	; (18520 <parse_edrx+0x23c>)
   1843e:	f7fa fdb9 	bl	12fb4 <log_1>
		goto clean_exit;
   18442:	e7e7      	b.n	18414 <parse_edrx+0x130>
   18444:	4b32      	ldr	r3, [pc, #200]	; (18510 <parse_edrx+0x22c>)
   18446:	4a33      	ldr	r2, [pc, #204]	; (18514 <parse_edrx+0x230>)
   18448:	1a9b      	subs	r3, r3, r2
   1844a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1844c:	f04f 0200 	mov.w	r2, #0
   18450:	2101      	movs	r1, #1
   18452:	f361 0202 	bfi	r2, r1, #0, #3
   18456:	f36f 02c5 	bfc	r2, #3, #3
   1845a:	f363 128f 	bfi	r2, r3, #6, #10
   1845e:	4601      	mov	r1, r0
   18460:	4830      	ldr	r0, [pc, #192]	; (18524 <parse_edrx+0x240>)
   18462:	f7fa fda7 	bl	12fb4 <log_1>
		goto clean_exit;
   18466:	e7d5      	b.n	18414 <parse_edrx+0x130>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   18468:	2009      	movs	r0, #9
   1846a:	e77d      	b.n	18368 <parse_edrx+0x84>
   1846c:	2007      	movs	r0, #7
   1846e:	e77b      	b.n	18368 <parse_edrx+0x84>
   18470:	4b27      	ldr	r3, [pc, #156]	; (18510 <parse_edrx+0x22c>)
   18472:	4a28      	ldr	r2, [pc, #160]	; (18514 <parse_edrx+0x230>)
   18474:	1a9b      	subs	r3, r3, r2
   18476:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Active LTE mode could not be determined");
   18478:	f04f 0100 	mov.w	r1, #0
   1847c:	2202      	movs	r2, #2
   1847e:	f362 0102 	bfi	r1, r2, #0, #3
   18482:	f36f 01c5 	bfc	r1, #3, #3
   18486:	f363 118f 	bfi	r1, r3, #6, #10
   1848a:	4827      	ldr	r0, [pc, #156]	; (18528 <parse_edrx+0x244>)
   1848c:	f7fa fd68 	bl	12f60 <log_0>
		goto clean_exit;
   18490:	e7c0      	b.n	18414 <parse_edrx+0x130>
   18492:	4b1f      	ldr	r3, [pc, #124]	; (18510 <parse_edrx+0x22c>)
   18494:	4a1f      	ldr	r2, [pc, #124]	; (18514 <parse_edrx+0x230>)
   18496:	1a9b      	subs	r3, r3, r2
   18498:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1849a:	f04f 0200 	mov.w	r2, #0
   1849e:	2101      	movs	r1, #1
   184a0:	f361 0202 	bfi	r2, r1, #0, #3
   184a4:	f36f 02c5 	bfc	r2, #3, #3
   184a8:	f363 128f 	bfi	r2, r3, #6, #10
   184ac:	4601      	mov	r1, r0
   184ae:	481f      	ldr	r0, [pc, #124]	; (1852c <parse_edrx+0x248>)
   184b0:	f7fa fd80 	bl	12fb4 <log_1>
		goto clean_exit;
   184b4:	e7ae      	b.n	18414 <parse_edrx+0x130>
   184b6:	4b16      	ldr	r3, [pc, #88]	; (18510 <parse_edrx+0x22c>)
   184b8:	4a16      	ldr	r2, [pc, #88]	; (18514 <parse_edrx+0x230>)
   184ba:	1a9b      	subs	r3, r3, r2
   184bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   184be:	f04f 0200 	mov.w	r2, #0
   184c2:	2101      	movs	r1, #1
   184c4:	f361 0202 	bfi	r2, r1, #0, #3
   184c8:	f36f 02c5 	bfc	r2, #3, #3
   184cc:	f363 128f 	bfi	r2, r3, #6, #10
   184d0:	4601      	mov	r1, r0
   184d2:	4817      	ldr	r0, [pc, #92]	; (18530 <parse_edrx+0x24c>)
   184d4:	f7fa fd6e 	bl	12fb4 <log_1>
		goto clean_exit;
   184d8:	e79c      	b.n	18414 <parse_edrx+0x130>
   184da:	4b0d      	ldr	r3, [pc, #52]	; (18510 <parse_edrx+0x22c>)
   184dc:	4a0d      	ldr	r2, [pc, #52]	; (18514 <parse_edrx+0x230>)
   184de:	1a9b      	subs	r3, r3, r2
   184e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   184e2:	f04f 0200 	mov.w	r2, #0
   184e6:	2101      	movs	r1, #1
   184e8:	f361 0202 	bfi	r2, r1, #0, #3
   184ec:	f36f 02c5 	bfc	r2, #3, #3
   184f0:	f363 128f 	bfi	r2, r3, #6, #10
   184f4:	b2c1      	uxtb	r1, r0
   184f6:	480f      	ldr	r0, [pc, #60]	; (18534 <parse_edrx+0x250>)
   184f8:	f7fa fd5c 	bl	12fb4 <log_1>
		err = -EINVAL;
   184fc:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   18500:	e788      	b.n	18414 <parse_edrx+0x130>
		return -EINVAL;
   18502:	f06f 0415 	mvn.w	r4, #21
   18506:	e788      	b.n	1841a <parse_edrx+0x136>
   18508:	f06f 0415 	mvn.w	r4, #21
   1850c:	e785      	b.n	1841a <parse_edrx+0x136>
   1850e:	bf00      	nop
   18510:	00025324 	.word	0x00025324
   18514:	000252ec 	.word	0x000252ec
   18518:	00026c18 	.word	0x00026c18
   1851c:	00026c44 	.word	0x00026c44
   18520:	00026c70 	.word	0x00026c70
   18524:	00026c9c 	.word	0x00026c9c
   18528:	00026cc0 	.word	0x00026cc0
   1852c:	00026ce8 	.word	0x00026ce8
   18530:	00026d0c 	.word	0x00026d0c
   18534:	00026d38 	.word	0x00026d38

00018538 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   18538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1853c:	b082      	sub	sp, #8
   1853e:	4605      	mov	r5, r0
   18540:	460c      	mov	r4, r1
   18542:	4617      	mov	r7, r2
   18544:	461e      	mov	r6, r3
	char unit_str[4] = {0};
   18546:	2300      	movs	r3, #0
   18548:	9301      	str	r3, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   1854a:	f7f8 fdce 	bl	110ea <strlen>
   1854e:	2808      	cmp	r0, #8
   18550:	d142      	bne.n	185d8 <parse_psm+0xa0>
   18552:	4620      	mov	r0, r4
   18554:	f7f8 fdc9 	bl	110ea <strlen>
   18558:	2808      	cmp	r0, #8
   1855a:	d13d      	bne.n	185d8 <parse_psm+0xa0>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   1855c:	8822      	ldrh	r2, [r4, #0]
   1855e:	78a3      	ldrb	r3, [r4, #2]
   18560:	f8ad 2004 	strh.w	r2, [sp, #4]
   18564:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   18568:	2202      	movs	r2, #2
   1856a:	2100      	movs	r1, #0
   1856c:	a801      	add	r0, sp, #4
   1856e:	f006 fc23 	bl	1edb8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   18572:	2807      	cmp	r0, #7
   18574:	d833      	bhi.n	185de <parse_psm+0xa6>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
		return -EINVAL;
	}

	timer_unit = t3412_ext_lookup[lut_idx];
   18576:	4b49      	ldr	r3, [pc, #292]	; (1869c <parse_psm+0x164>)
   18578:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   1857c:	2202      	movs	r2, #2
   1857e:	2100      	movs	r1, #0
   18580:	1ce0      	adds	r0, r4, #3
   18582:	f006 fc19 	bl	1edb8 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18586:	f1b8 0f00 	cmp.w	r8, #0
   1858a:	d03b      	beq.n	18604 <parse_psm+0xcc>
   1858c:	fb00 f408 	mul.w	r4, r0, r8
   18590:	6034      	str	r4, [r6, #0]

	/* If T3412-extended is disabled, there's a chance that the network
	 * only reports the T3412 (legacy) timer. We therefore needs to check
	 * that as well. The legacy timer is only reported by modem fe >= 1.2.0.
	 */
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   18592:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18596:	d105      	bne.n	185a4 <parse_psm+0x6c>
   18598:	b127      	cbz	r7, 185a4 <parse_psm+0x6c>
   1859a:	4638      	mov	r0, r7
   1859c:	f7f8 fda5 	bl	110ea <strlen>
   185a0:	2808      	cmp	r0, #8
   185a2:	d032      	beq.n	1860a <parse_psm+0xd2>
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
	}

	/* Parse active time */
	memcpy(unit_str, active_time_str, unit_str_len);
   185a4:	882a      	ldrh	r2, [r5, #0]
   185a6:	78ab      	ldrb	r3, [r5, #2]
   185a8:	f8ad 2004 	strh.w	r2, [sp, #4]
   185ac:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   185b0:	2202      	movs	r2, #2
   185b2:	2100      	movs	r1, #0
   185b4:	a801      	add	r0, sp, #4
   185b6:	f006 fbff 	bl	1edb8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   185ba:	2807      	cmp	r0, #7
   185bc:	d854      	bhi.n	18668 <parse_psm+0x130>
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
	}

	timer_unit = t3324_lookup[lut_idx];
   185be:	4b38      	ldr	r3, [pc, #224]	; (186a0 <parse_psm+0x168>)
   185c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   185c4:	2202      	movs	r2, #2
   185c6:	2100      	movs	r1, #0
   185c8:	1ce8      	adds	r0, r5, #3
   185ca:	f006 fbf5 	bl	1edb8 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   185ce:	2c00      	cmp	r4, #0
   185d0:	d05d      	beq.n	1868e <parse_psm+0x156>
   185d2:	fb04 f000 	mul.w	r0, r4, r0
   185d6:	e05c      	b.n	18692 <parse_psm+0x15a>
		return -EINVAL;
   185d8:	f06f 0015 	mvn.w	r0, #21
   185dc:	e05b      	b.n	18696 <parse_psm+0x15e>
   185de:	4b31      	ldr	r3, [pc, #196]	; (186a4 <parse_psm+0x16c>)
   185e0:	4a31      	ldr	r2, [pc, #196]	; (186a8 <parse_psm+0x170>)
   185e2:	1a9b      	subs	r3, r3, r2
   185e4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   185e6:	f04f 0100 	mov.w	r1, #0
   185ea:	2201      	movs	r2, #1
   185ec:	f362 0102 	bfi	r1, r2, #0, #3
   185f0:	f36f 01c5 	bfc	r1, #3, #3
   185f4:	f363 118f 	bfi	r1, r3, #6, #10
   185f8:	482c      	ldr	r0, [pc, #176]	; (186ac <parse_psm+0x174>)
   185fa:	f7fa fcb1 	bl	12f60 <log_0>
		return -EINVAL;
   185fe:	f06f 0015 	mvn.w	r0, #21
   18602:	e048      	b.n	18696 <parse_psm+0x15e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18608:	e7c2      	b.n	18590 <parse_psm+0x58>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   1860a:	883a      	ldrh	r2, [r7, #0]
   1860c:	78bb      	ldrb	r3, [r7, #2]
   1860e:	f8ad 2004 	strh.w	r2, [sp, #4]
   18612:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   18616:	2202      	movs	r2, #2
   18618:	2100      	movs	r1, #0
   1861a:	a801      	add	r0, sp, #4
   1861c:	f006 fbcc 	bl	1edb8 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   18620:	2807      	cmp	r0, #7
   18622:	d80e      	bhi.n	18642 <parse_psm+0x10a>
		timer_unit = t3412_lookup[lut_idx];
   18624:	4b22      	ldr	r3, [pc, #136]	; (186b0 <parse_psm+0x178>)
   18626:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   1862a:	2202      	movs	r2, #2
   1862c:	2100      	movs	r1, #0
   1862e:	1cf8      	adds	r0, r7, #3
   18630:	f006 fbc2 	bl	1edb8 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18634:	f1b8 0f00 	cmp.w	r8, #0
   18638:	d001      	beq.n	1863e <parse_psm+0x106>
   1863a:	fb00 f408 	mul.w	r4, r0, r8
   1863e:	6034      	str	r4, [r6, #0]
   18640:	e7b0      	b.n	185a4 <parse_psm+0x6c>
   18642:	4b18      	ldr	r3, [pc, #96]	; (186a4 <parse_psm+0x16c>)
   18644:	4a18      	ldr	r2, [pc, #96]	; (186a8 <parse_psm+0x170>)
   18646:	1a9b      	subs	r3, r3, r2
   18648:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   1864a:	f04f 0100 	mov.w	r1, #0
   1864e:	2201      	movs	r2, #1
   18650:	f362 0102 	bfi	r1, r2, #0, #3
   18654:	f36f 01c5 	bfc	r1, #3, #3
   18658:	f363 118f 	bfi	r1, r3, #6, #10
   1865c:	4815      	ldr	r0, [pc, #84]	; (186b4 <parse_psm+0x17c>)
   1865e:	f7fa fc7f 	bl	12f60 <log_0>
			return -EINVAL;
   18662:	f06f 0015 	mvn.w	r0, #21
   18666:	e016      	b.n	18696 <parse_psm+0x15e>
   18668:	4b0e      	ldr	r3, [pc, #56]	; (186a4 <parse_psm+0x16c>)
   1866a:	4a0f      	ldr	r2, [pc, #60]	; (186a8 <parse_psm+0x170>)
   1866c:	1a9b      	subs	r3, r3, r2
   1866e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse active time string");
   18670:	f04f 0100 	mov.w	r1, #0
   18674:	2201      	movs	r2, #1
   18676:	f362 0102 	bfi	r1, r2, #0, #3
   1867a:	f36f 01c5 	bfc	r1, #3, #3
   1867e:	f363 118f 	bfi	r1, r3, #6, #10
   18682:	480d      	ldr	r0, [pc, #52]	; (186b8 <parse_psm+0x180>)
   18684:	f7fa fc6c 	bl	12f60 <log_0>
		return -EINVAL;
   18688:	f06f 0015 	mvn.w	r0, #21
   1868c:	e003      	b.n	18696 <parse_psm+0x15e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1868e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18692:	6070      	str	r0, [r6, #4]

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
   18694:	2000      	movs	r0, #0
}
   18696:	b002      	add	sp, #8
   18698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1869c:	0002718c 	.word	0x0002718c
   186a0:	0002716c 	.word	0x0002716c
   186a4:	00025324 	.word	0x00025324
   186a8:	000252ec 	.word	0x000252ec
   186ac:	00026d58 	.word	0x00026d58
   186b0:	000271ac 	.word	0x000271ac
   186b4:	00026d90 	.word	0x00026d90
   186b8:	00026dbc 	.word	0x00026dbc

000186bc <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   186bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   186be:	b085      	sub	sp, #20
   186c0:	4605      	mov	r5, r0
   186c2:	460f      	mov	r7, r1
   186c4:	4616      	mov	r6, r2
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   186c6:	2300      	movs	r3, #0
   186c8:	9301      	str	r3, [sp, #4]
   186ca:	9302      	str	r3, [sp, #8]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   186cc:	2104      	movs	r1, #4
   186ce:	eb0d 0001 	add.w	r0, sp, r1
   186d2:	f00a fa8c 	bl	22bee <at_params_list_init>
	if (err) {
   186d6:	b998      	cbnz	r0, 18700 <parse_rrc_mode+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   186d8:	aa01      	add	r2, sp, #4
   186da:	2100      	movs	r1, #0
   186dc:	4628      	mov	r0, r5
   186de:	f00a fa55 	bl	22b8c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   186e2:	4604      	mov	r4, r0
   186e4:	b9f8      	cbnz	r0, 18726 <parse_rrc_mode+0x6a>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   186e6:	aa03      	add	r2, sp, #12
   186e8:	4631      	mov	r1, r6
   186ea:	a801      	add	r0, sp, #4
   186ec:	f00a fb99 	bl	22e22 <at_params_int_get>
	if (err) {
   186f0:	4604      	mov	r4, r0
   186f2:	bb78      	cbnz	r0, 18754 <parse_rrc_mode+0x98>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
   186f4:	9903      	ldr	r1, [sp, #12]
   186f6:	2900      	cmp	r1, #0
   186f8:	d13e      	bne.n	18778 <parse_rrc_mode+0xbc>
		*mode = LTE_LC_RRC_MODE_IDLE;
   186fa:	2300      	movs	r3, #0
   186fc:	703b      	strb	r3, [r7, #0]
   186fe:	e023      	b.n	18748 <parse_rrc_mode+0x8c>
   18700:	4604      	mov	r4, r0
   18702:	4b29      	ldr	r3, [pc, #164]	; (187a8 <parse_rrc_mode+0xec>)
   18704:	4a29      	ldr	r2, [pc, #164]	; (187ac <parse_rrc_mode+0xf0>)
   18706:	1a9b      	subs	r3, r3, r2
   18708:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   1870a:	f04f 0200 	mov.w	r2, #0
   1870e:	2101      	movs	r1, #1
   18710:	f361 0202 	bfi	r2, r1, #0, #3
   18714:	f36f 02c5 	bfc	r2, #3, #3
   18718:	f363 128f 	bfi	r2, r3, #6, #10
   1871c:	4601      	mov	r1, r0
   1871e:	4824      	ldr	r0, [pc, #144]	; (187b0 <parse_rrc_mode+0xf4>)
   18720:	f7fa fc48 	bl	12fb4 <log_1>
		return err;
   18724:	e013      	b.n	1874e <parse_rrc_mode+0x92>
   18726:	4b20      	ldr	r3, [pc, #128]	; (187a8 <parse_rrc_mode+0xec>)
   18728:	4a20      	ldr	r2, [pc, #128]	; (187ac <parse_rrc_mode+0xf0>)
   1872a:	1a9b      	subs	r3, r3, r2
   1872c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1872e:	f04f 0200 	mov.w	r2, #0
   18732:	2101      	movs	r1, #1
   18734:	f361 0202 	bfi	r2, r1, #0, #3
   18738:	f36f 02c5 	bfc	r2, #3, #3
   1873c:	f363 128f 	bfi	r2, r3, #6, #10
   18740:	4601      	mov	r1, r0
   18742:	481c      	ldr	r0, [pc, #112]	; (187b4 <parse_rrc_mode+0xf8>)
   18744:	f7fa fc36 	bl	12fb4 <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18748:	a801      	add	r0, sp, #4
   1874a:	f00a fa79 	bl	22c40 <at_params_list_free>

	return err;
}
   1874e:	4620      	mov	r0, r4
   18750:	b005      	add	sp, #20
   18752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18754:	4b14      	ldr	r3, [pc, #80]	; (187a8 <parse_rrc_mode+0xec>)
   18756:	4a15      	ldr	r2, [pc, #84]	; (187ac <parse_rrc_mode+0xf0>)
   18758:	1a9b      	subs	r3, r3, r2
   1875a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1875c:	f04f 0200 	mov.w	r2, #0
   18760:	2101      	movs	r1, #1
   18762:	f361 0202 	bfi	r2, r1, #0, #3
   18766:	f36f 02c5 	bfc	r2, #3, #3
   1876a:	f363 128f 	bfi	r2, r3, #6, #10
   1876e:	4601      	mov	r1, r0
   18770:	4811      	ldr	r0, [pc, #68]	; (187b8 <parse_rrc_mode+0xfc>)
   18772:	f7fa fc1f 	bl	12fb4 <log_1>
		goto clean_exit;
   18776:	e7e7      	b.n	18748 <parse_rrc_mode+0x8c>
	} else if (temp_mode == 1) {
   18778:	2901      	cmp	r1, #1
   1877a:	d102      	bne.n	18782 <parse_rrc_mode+0xc6>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1877c:	2301      	movs	r3, #1
   1877e:	703b      	strb	r3, [r7, #0]
   18780:	e7e2      	b.n	18748 <parse_rrc_mode+0x8c>
   18782:	4b09      	ldr	r3, [pc, #36]	; (187a8 <parse_rrc_mode+0xec>)
   18784:	4a09      	ldr	r2, [pc, #36]	; (187ac <parse_rrc_mode+0xf0>)
   18786:	1a9b      	subs	r3, r3, r2
   18788:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1878a:	f04f 0200 	mov.w	r2, #0
   1878e:	2001      	movs	r0, #1
   18790:	f360 0202 	bfi	r2, r0, #0, #3
   18794:	f36f 02c5 	bfc	r2, #3, #3
   18798:	f363 128f 	bfi	r2, r3, #6, #10
   1879c:	4807      	ldr	r0, [pc, #28]	; (187bc <parse_rrc_mode+0x100>)
   1879e:	f7fa fc09 	bl	12fb4 <log_1>
		err = -EINVAL;
   187a2:	f06f 0415 	mvn.w	r4, #21
   187a6:	e7cf      	b.n	18748 <parse_rrc_mode+0x8c>
   187a8:	00025324 	.word	0x00025324
   187ac:	000252ec 	.word	0x000252ec
   187b0:	00026c18 	.word	0x00026c18
   187b4:	00026de0 	.word	0x00026de0
   187b8:	00026e0c 	.word	0x00026e0c
   187bc:	00026e38 	.word	0x00026e38

000187c0 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   187c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187c4:	b08a      	sub	sp, #40	; 0x28
   187c6:	4605      	mov	r5, r0
   187c8:	460f      	mov	r7, r1
   187ca:	4690      	mov	r8, r2
   187cc:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   187ce:	2400      	movs	r4, #0
   187d0:	9403      	str	r4, [sp, #12]
   187d2:	f8ad 4010 	strh.w	r4, [sp, #16]
   187d6:	f88d 4012 	strb.w	r4, [sp, #18]
	size_t response_prefix_len = sizeof(response_prefix);
   187da:	2307      	movs	r3, #7
   187dc:	9302      	str	r3, [sp, #8]
	size_t len = sizeof(str_buf) - 1;
   187de:	2309      	movs	r3, #9
   187e0:	9301      	str	r3, [sp, #4]

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   187e2:	210b      	movs	r1, #11
   187e4:	a808      	add	r0, sp, #32
   187e6:	f00a fa02 	bl	22bee <at_params_list_init>
	if (err) {
   187ea:	2800      	cmp	r0, #0
   187ec:	d140      	bne.n	18870 <parse_cereg+0xb0>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   187ee:	aa08      	add	r2, sp, #32
   187f0:	2100      	movs	r1, #0
   187f2:	4628      	mov	r0, r5
   187f4:	f00a f9ca 	bl	22b8c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   187f8:	4604      	mov	r4, r0
   187fa:	2800      	cmp	r0, #0
   187fc:	d14b      	bne.n	18896 <parse_cereg+0xd6>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
   187fe:	ab02      	add	r3, sp, #8
   18800:	aa03      	add	r2, sp, #12
   18802:	2100      	movs	r1, #0
   18804:	a808      	add	r0, sp, #32
   18806:	f00a fb5c 	bl	22ec2 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   1880a:	4604      	mov	r4, r0
   1880c:	2800      	cmp	r0, #0
   1880e:	d15a      	bne.n	188c6 <parse_cereg+0x106>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   18810:	4a72      	ldr	r2, [pc, #456]	; (189dc <parse_cereg+0x21c>)
   18812:	9902      	ldr	r1, [sp, #8]
   18814:	a803      	add	r0, sp, #12
   18816:	f7ff fd37 	bl	18288 <response_is_valid>
   1881a:	2800      	cmp	r0, #0
   1881c:	d04c      	beq.n	188b8 <parse_cereg+0xf8>
		LOG_DBG("Not a valid CEREG response");
		goto clean_exit;
	}

	/* Get network registration status */
	status = get_nw_reg_status(&resp_list, is_notif);
   1881e:	4639      	mov	r1, r7
   18820:	a808      	add	r0, sp, #32
   18822:	f7ff fccd 	bl	181c0 <get_nw_reg_status>
	if (status < 0) {
   18826:	1e05      	subs	r5, r0, #0
   18828:	db5f      	blt.n	188ea <parse_cereg+0x12a>
		LOG_ERR("Could not get registration status, error: %d", status);
		err = status;
		goto clean_exit;
	}

	if (reg_status) {
   1882a:	f1b8 0f00 	cmp.w	r8, #0
   1882e:	d001      	beq.n	18834 <parse_cereg+0x74>
		*reg_status = status;
   18830:	f888 5000 	strb.w	r5, [r8]

		LOG_DBG("Network registration status: %d", *reg_status);
	}


	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   18834:	b10e      	cbz	r6, 1883a <parse_cereg+0x7a>
   18836:	2d5a      	cmp	r5, #90	; 0x5a
   18838:	d16a      	bne.n	18910 <parse_cereg+0x150>
			goto clean_exit;
		}

		str_buf[len] = '\0';
		cell->id = strtoul(str_buf, NULL, 16);
	} else if (cell) {
   1883a:	2e00      	cmp	r6, #0
   1883c:	f000 80c2 	beq.w	189c4 <parse_cereg+0x204>
		cell->tac = UINT32_MAX;
   18840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18844:	60f3      	str	r3, [r6, #12]
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   18846:	60b3      	str	r3, [r6, #8]
	err = at_params_string_get(&resp_list,
   18848:	4625      	mov	r5, r4
	}

	if (lte_mode) {
   1884a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1884c:	2b00      	cmp	r3, #0
   1884e:	f000 80c2 	beq.w	189d6 <parse_cereg+0x216>
		int mode;

		/* Get currently active LTE mode. */
		err = at_params_int_get(&resp_list,
   18852:	2f00      	cmp	r7, #0
   18854:	f000 80b8 	beq.w	189c8 <parse_cereg+0x208>
   18858:	2104      	movs	r1, #4
   1885a:	466a      	mov	r2, sp
   1885c:	a808      	add	r0, sp, #32
   1885e:	f00a fae0 	bl	22e22 <at_params_int_get>
				is_notif ? AT_CEREG_ACT_INDEX :
					   AT_CEREG_READ_ACT_INDEX,
				&mode);
		if (err) {
   18862:	2800      	cmp	r0, #0
   18864:	f000 80b2 	beq.w	189cc <parse_cereg+0x20c>
			LOG_DBG("LTE mode not found, error code: %d", err);
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   18868:	2300      	movs	r3, #0
   1886a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1886c:	7013      	strb	r3, [r2, #0]

			/* This is not an error that should be returned, as it's
			 * expected in some situations that LTE mode is not
			 * available.
			 */
			err = 0;
   1886e:	e023      	b.n	188b8 <parse_cereg+0xf8>
   18870:	4604      	mov	r4, r0
   18872:	4b5b      	ldr	r3, [pc, #364]	; (189e0 <parse_cereg+0x220>)
   18874:	4a5b      	ldr	r2, [pc, #364]	; (189e4 <parse_cereg+0x224>)
   18876:	1a9b      	subs	r3, r3, r2
   18878:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   1887a:	f04f 0200 	mov.w	r2, #0
   1887e:	2101      	movs	r1, #1
   18880:	f361 0202 	bfi	r2, r1, #0, #3
   18884:	f36f 02c5 	bfc	r2, #3, #3
   18888:	f363 128f 	bfi	r2, r3, #6, #10
   1888c:	4601      	mov	r1, r0
   1888e:	4856      	ldr	r0, [pc, #344]	; (189e8 <parse_cereg+0x228>)
   18890:	f7fa fb90 	bl	12fb4 <log_1>
		return err;
   18894:	e013      	b.n	188be <parse_cereg+0xfe>
   18896:	4b52      	ldr	r3, [pc, #328]	; (189e0 <parse_cereg+0x220>)
   18898:	4a52      	ldr	r2, [pc, #328]	; (189e4 <parse_cereg+0x224>)
   1889a:	1a9b      	subs	r3, r3, r2
   1889c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1889e:	f04f 0200 	mov.w	r2, #0
   188a2:	2101      	movs	r1, #1
   188a4:	f361 0202 	bfi	r2, r1, #0, #3
   188a8:	f36f 02c5 	bfc	r2, #3, #3
   188ac:	f363 128f 	bfi	r2, r3, #6, #10
   188b0:	4601      	mov	r1, r0
   188b2:	484e      	ldr	r0, [pc, #312]	; (189ec <parse_cereg+0x22c>)
   188b4:	f7fa fb7e 	bl	12fb4 <log_1>
			LOG_DBG("LTE mode: %d", *lte_mode);
		}
	}

clean_exit:
	at_params_list_free(&resp_list);
   188b8:	a808      	add	r0, sp, #32
   188ba:	f00a f9c1 	bl	22c40 <at_params_list_free>

	return err;
}
   188be:	4620      	mov	r0, r4
   188c0:	b00a      	add	sp, #40	; 0x28
   188c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   188c6:	4b46      	ldr	r3, [pc, #280]	; (189e0 <parse_cereg+0x220>)
   188c8:	4a46      	ldr	r2, [pc, #280]	; (189e4 <parse_cereg+0x224>)
   188ca:	1a9b      	subs	r3, r3, r2
   188cc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   188ce:	f04f 0200 	mov.w	r2, #0
   188d2:	2101      	movs	r1, #1
   188d4:	f361 0202 	bfi	r2, r1, #0, #3
   188d8:	f36f 02c5 	bfc	r2, #3, #3
   188dc:	f363 128f 	bfi	r2, r3, #6, #10
   188e0:	4601      	mov	r1, r0
   188e2:	4843      	ldr	r0, [pc, #268]	; (189f0 <parse_cereg+0x230>)
   188e4:	f7fa fb66 	bl	12fb4 <log_1>
		goto clean_exit;
   188e8:	e7e6      	b.n	188b8 <parse_cereg+0xf8>
   188ea:	4b3d      	ldr	r3, [pc, #244]	; (189e0 <parse_cereg+0x220>)
   188ec:	4a3d      	ldr	r2, [pc, #244]	; (189e4 <parse_cereg+0x224>)
   188ee:	1a9b      	subs	r3, r3, r2
   188f0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", status);
   188f2:	f04f 0200 	mov.w	r2, #0
   188f6:	2101      	movs	r1, #1
   188f8:	f361 0202 	bfi	r2, r1, #0, #3
   188fc:	f36f 02c5 	bfc	r2, #3, #3
   18900:	f363 128f 	bfi	r2, r3, #6, #10
   18904:	4629      	mov	r1, r5
   18906:	483b      	ldr	r0, [pc, #236]	; (189f4 <parse_cereg+0x234>)
   18908:	f7fa fb54 	bl	12fb4 <log_1>
		err = status;
   1890c:	462c      	mov	r4, r5
		goto clean_exit;
   1890e:	e7d3      	b.n	188b8 <parse_cereg+0xf8>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   18910:	a808      	add	r0, sp, #32
   18912:	f00a fb08 	bl	22f26 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   18916:	2803      	cmp	r0, #3
   18918:	d98f      	bls.n	1883a <parse_cereg+0x7a>
		err = at_params_string_get(
   1891a:	b34f      	cbz	r7, 18970 <parse_cereg+0x1b0>
   1891c:	2102      	movs	r1, #2
   1891e:	ab01      	add	r3, sp, #4
   18920:	aa05      	add	r2, sp, #20
   18922:	a808      	add	r0, sp, #32
   18924:	f00a facd 	bl	22ec2 <at_params_string_get>
		if (err) {
   18928:	4605      	mov	r5, r0
   1892a:	bb18      	cbnz	r0, 18974 <parse_cereg+0x1b4>
		str_buf[len] = '\0';
   1892c:	9b01      	ldr	r3, [sp, #4]
   1892e:	aa0a      	add	r2, sp, #40	; 0x28
   18930:	4413      	add	r3, r2
   18932:	2100      	movs	r1, #0
   18934:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->tac = strtoul(str_buf, NULL, 16);
   18938:	2210      	movs	r2, #16
   1893a:	a805      	add	r0, sp, #20
   1893c:	f006 fa3c 	bl	1edb8 <strtoul>
   18940:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   18942:	2309      	movs	r3, #9
   18944:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   18946:	b347      	cbz	r7, 1899a <parse_cereg+0x1da>
   18948:	2103      	movs	r1, #3
   1894a:	ab01      	add	r3, sp, #4
   1894c:	aa05      	add	r2, sp, #20
   1894e:	a808      	add	r0, sp, #32
   18950:	f00a fab7 	bl	22ec2 <at_params_string_get>
		if (err) {
   18954:	4605      	mov	r5, r0
   18956:	bb10      	cbnz	r0, 1899e <parse_cereg+0x1de>
		str_buf[len] = '\0';
   18958:	9b01      	ldr	r3, [sp, #4]
   1895a:	aa0a      	add	r2, sp, #40	; 0x28
   1895c:	4413      	add	r3, r2
   1895e:	2100      	movs	r1, #0
   18960:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->id = strtoul(str_buf, NULL, 16);
   18964:	2210      	movs	r2, #16
   18966:	a805      	add	r0, sp, #20
   18968:	f006 fa26 	bl	1edb8 <strtoul>
   1896c:	60b0      	str	r0, [r6, #8]
   1896e:	e76c      	b.n	1884a <parse_cereg+0x8a>
		err = at_params_string_get(
   18970:	2103      	movs	r1, #3
   18972:	e7d4      	b.n	1891e <parse_cereg+0x15e>
   18974:	4b1a      	ldr	r3, [pc, #104]	; (189e0 <parse_cereg+0x220>)
   18976:	4a1b      	ldr	r2, [pc, #108]	; (189e4 <parse_cereg+0x224>)
   18978:	1a9b      	subs	r3, r3, r2
   1897a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1897c:	f04f 0200 	mov.w	r2, #0
   18980:	2101      	movs	r1, #1
   18982:	f361 0202 	bfi	r2, r1, #0, #3
   18986:	f36f 02c5 	bfc	r2, #3, #3
   1898a:	f363 128f 	bfi	r2, r3, #6, #10
   1898e:	4601      	mov	r1, r0
   18990:	4819      	ldr	r0, [pc, #100]	; (189f8 <parse_cereg+0x238>)
   18992:	f7fa fb0f 	bl	12fb4 <log_1>
		err = at_params_string_get(
   18996:	462c      	mov	r4, r5
			goto clean_exit;
   18998:	e78e      	b.n	188b8 <parse_cereg+0xf8>
		err = at_params_string_get(&resp_list,
   1899a:	2104      	movs	r1, #4
   1899c:	e7d5      	b.n	1894a <parse_cereg+0x18a>
   1899e:	4b10      	ldr	r3, [pc, #64]	; (189e0 <parse_cereg+0x220>)
   189a0:	4a10      	ldr	r2, [pc, #64]	; (189e4 <parse_cereg+0x224>)
   189a2:	1a9b      	subs	r3, r3, r2
   189a4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get cell ID, error: %d", err);
   189a6:	f04f 0200 	mov.w	r2, #0
   189aa:	2101      	movs	r1, #1
   189ac:	f361 0202 	bfi	r2, r1, #0, #3
   189b0:	f36f 02c5 	bfc	r2, #3, #3
   189b4:	f363 128f 	bfi	r2, r3, #6, #10
   189b8:	4601      	mov	r1, r0
   189ba:	4810      	ldr	r0, [pc, #64]	; (189fc <parse_cereg+0x23c>)
   189bc:	f7fa fafa 	bl	12fb4 <log_1>
		err = at_params_string_get(&resp_list,
   189c0:	462c      	mov	r4, r5
			goto clean_exit;
   189c2:	e779      	b.n	188b8 <parse_cereg+0xf8>
	err = at_params_string_get(&resp_list,
   189c4:	4625      	mov	r5, r4
   189c6:	e740      	b.n	1884a <parse_cereg+0x8a>
		err = at_params_int_get(&resp_list,
   189c8:	2105      	movs	r1, #5
   189ca:	e746      	b.n	1885a <parse_cereg+0x9a>
			*lte_mode = mode;
   189cc:	9a00      	ldr	r2, [sp, #0]
   189ce:	9910      	ldr	r1, [sp, #64]	; 0x40
   189d0:	700a      	strb	r2, [r1, #0]
		err = at_params_int_get(&resp_list,
   189d2:	4604      	mov	r4, r0
			LOG_DBG("LTE mode: %d", *lte_mode);
   189d4:	e770      	b.n	188b8 <parse_cereg+0xf8>
clean_exit:
   189d6:	462c      	mov	r4, r5
   189d8:	e76e      	b.n	188b8 <parse_cereg+0xf8>
   189da:	bf00      	nop
   189dc:	00026b38 	.word	0x00026b38
   189e0:	00025324 	.word	0x00025324
   189e4:	000252ec 	.word	0x000252ec
   189e8:	00026c18 	.word	0x00026c18
   189ec:	00026e54 	.word	0x00026e54
   189f0:	00026e84 	.word	0x00026e84
   189f4:	000267e4 	.word	0x000267e4
   189f8:	00026eb0 	.word	0x00026eb0
   189fc:	00026edc 	.word	0x00026edc

00018a00 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   18a00:	b570      	push	{r4, r5, r6, lr}
   18a02:	b082      	sub	sp, #8
	int err;
	struct at_param_list resp_list = {0};
   18a04:	2300      	movs	r3, #0
   18a06:	9300      	str	r3, [sp, #0]
   18a08:	9301      	str	r3, [sp, #4]

	if (time == NULL || at_response == NULL) {
   18a0a:	2900      	cmp	r1, #0
   18a0c:	d06f      	beq.n	18aee <parse_xt3412+0xee>
   18a0e:	4604      	mov	r4, r0
   18a10:	460e      	mov	r6, r1
   18a12:	2800      	cmp	r0, #0
   18a14:	d06e      	beq.n	18af4 <parse_xt3412+0xf4>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   18a16:	2104      	movs	r1, #4
   18a18:	4668      	mov	r0, sp
   18a1a:	f00a f8e8 	bl	22bee <at_params_list_init>
	if (err) {
   18a1e:	4605      	mov	r5, r0
   18a20:	b9e0      	cbnz	r0, 18a5c <parse_xt3412+0x5c>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XT3412 response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   18a22:	466a      	mov	r2, sp
   18a24:	2100      	movs	r1, #0
   18a26:	4620      	mov	r0, r4
   18a28:	f00a f8b0 	bl	22b8c <at_parser_params_from_str>
	if (err) {
   18a2c:	4605      	mov	r5, r0
   18a2e:	bb38      	cbnz	r0, 18a80 <parse_xt3412+0x80>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
		goto clean_exit;
	}

	/* Get the remaining time of T3412 from the response */
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   18a30:	4632      	mov	r2, r6
   18a32:	2102      	movs	r1, #2
   18a34:	4668      	mov	r0, sp
   18a36:	f00a fa23 	bl	22e80 <at_params_int64_get>
	if (err) {
   18a3a:	4605      	mov	r5, r0
   18a3c:	bb90      	cbnz	r0, 18aa4 <parse_xt3412+0xa4>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
		goto clean_exit;
	}

	if ((*time > T3412_MAX) || *time < 0) {
   18a3e:	6832      	ldr	r2, [r6, #0]
   18a40:	6873      	ldr	r3, [r6, #4]
   18a42:	492e      	ldr	r1, [pc, #184]	; (18afc <parse_xt3412+0xfc>)
   18a44:	4291      	cmp	r1, r2
   18a46:	f04f 0208 	mov.w	r2, #8
   18a4a:	eb72 0303 	sbcs.w	r3, r2, r3
   18a4e:	d33b      	bcc.n	18ac8 <parse_xt3412+0xc8>
		LOG_WRN("Parsed time parameter not within valid range");
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18a50:	4668      	mov	r0, sp
   18a52:	f00a f8f5 	bl	22c40 <at_params_list_free>
	return err;
}
   18a56:	4628      	mov	r0, r5
   18a58:	b002      	add	sp, #8
   18a5a:	bd70      	pop	{r4, r5, r6, pc}
   18a5c:	4b28      	ldr	r3, [pc, #160]	; (18b00 <parse_xt3412+0x100>)
   18a5e:	4a29      	ldr	r2, [pc, #164]	; (18b04 <parse_xt3412+0x104>)
   18a60:	1a9b      	subs	r3, r3, r2
   18a62:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18a64:	f04f 0200 	mov.w	r2, #0
   18a68:	2101      	movs	r1, #1
   18a6a:	f361 0202 	bfi	r2, r1, #0, #3
   18a6e:	f36f 02c5 	bfc	r2, #3, #3
   18a72:	f363 128f 	bfi	r2, r3, #6, #10
   18a76:	4601      	mov	r1, r0
   18a78:	4823      	ldr	r0, [pc, #140]	; (18b08 <parse_xt3412+0x108>)
   18a7a:	f7fa fa9b 	bl	12fb4 <log_1>
		return err;
   18a7e:	e7ea      	b.n	18a56 <parse_xt3412+0x56>
   18a80:	4b1f      	ldr	r3, [pc, #124]	; (18b00 <parse_xt3412+0x100>)
   18a82:	4a20      	ldr	r2, [pc, #128]	; (18b04 <parse_xt3412+0x104>)
   18a84:	1a9b      	subs	r3, r3, r2
   18a86:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   18a88:	f04f 0200 	mov.w	r2, #0
   18a8c:	2101      	movs	r1, #1
   18a8e:	f361 0202 	bfi	r2, r1, #0, #3
   18a92:	f36f 02c5 	bfc	r2, #3, #3
   18a96:	f363 128f 	bfi	r2, r3, #6, #10
   18a9a:	4601      	mov	r1, r0
   18a9c:	481b      	ldr	r0, [pc, #108]	; (18b0c <parse_xt3412+0x10c>)
   18a9e:	f7fa fa89 	bl	12fb4 <log_1>
		goto clean_exit;
   18aa2:	e7d5      	b.n	18a50 <parse_xt3412+0x50>
   18aa4:	4b16      	ldr	r3, [pc, #88]	; (18b00 <parse_xt3412+0x100>)
   18aa6:	4a17      	ldr	r2, [pc, #92]	; (18b04 <parse_xt3412+0x104>)
   18aa8:	1a9b      	subs	r3, r3, r2
   18aaa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   18aac:	f04f 0200 	mov.w	r2, #0
   18ab0:	2101      	movs	r1, #1
   18ab2:	f361 0202 	bfi	r2, r1, #0, #3
   18ab6:	f36f 02c5 	bfc	r2, #3, #3
   18aba:	f363 128f 	bfi	r2, r3, #6, #10
   18abe:	4601      	mov	r1, r0
   18ac0:	4813      	ldr	r0, [pc, #76]	; (18b10 <parse_xt3412+0x110>)
   18ac2:	f7fa fa77 	bl	12fb4 <log_1>
		goto clean_exit;
   18ac6:	e7c3      	b.n	18a50 <parse_xt3412+0x50>
   18ac8:	4b0d      	ldr	r3, [pc, #52]	; (18b00 <parse_xt3412+0x100>)
   18aca:	4a0e      	ldr	r2, [pc, #56]	; (18b04 <parse_xt3412+0x104>)
   18acc:	1a9b      	subs	r3, r3, r2
   18ace:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Parsed time parameter not within valid range");
   18ad0:	f04f 0100 	mov.w	r1, #0
   18ad4:	2202      	movs	r2, #2
   18ad6:	f362 0102 	bfi	r1, r2, #0, #3
   18ada:	f36f 01c5 	bfc	r1, #3, #3
   18ade:	f363 118f 	bfi	r1, r3, #6, #10
   18ae2:	480c      	ldr	r0, [pc, #48]	; (18b14 <parse_xt3412+0x114>)
   18ae4:	f7fa fa3c 	bl	12f60 <log_0>
		err = -EINVAL;
   18ae8:	f06f 0515 	mvn.w	r5, #21
   18aec:	e7b0      	b.n	18a50 <parse_xt3412+0x50>
		return -EINVAL;
   18aee:	f06f 0515 	mvn.w	r5, #21
   18af2:	e7b0      	b.n	18a56 <parse_xt3412+0x56>
   18af4:	f06f 0515 	mvn.w	r5, #21
   18af8:	e7ad      	b.n	18a56 <parse_xt3412+0x56>
   18afa:	bf00      	nop
   18afc:	5099e000 	.word	0x5099e000
   18b00:	00025324 	.word	0x00025324
   18b04:	000252ec 	.word	0x000252ec
   18b08:	00026c18 	.word	0x00026c18
   18b0c:	00026f00 	.word	0x00026f00
   18b10:	00026f30 	.word	0x00026f30
   18b14:	00026f60 	.word	0x00026f60

00018b18 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   18b18:	b508      	push	{r3, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   18b1a:	b150      	cbz	r0, 18b32 <neighborcell_count_get+0x1a>
		LOG_ERR("at_response is NULL, can't get cell count");
		return 0;
	}

	comma_count = get_char_frequency(at_response, ',');
   18b1c:	212c      	movs	r1, #44	; 0x2c
   18b1e:	f00a fa3a 	bl	22f96 <get_char_frequency>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   18b22:	280a      	cmp	r0, #10
   18b24:	d917      	bls.n	18b56 <neighborcell_count_get+0x3e>
		return 0;
	}

	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   18b26:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   18b28:	4b0c      	ldr	r3, [pc, #48]	; (18b5c <neighborcell_count_get+0x44>)
   18b2a:	fba3 3000 	umull	r3, r0, r3, r0
   18b2e:	0880      	lsrs	r0, r0, #2

	return ncell_count;
}
   18b30:	bd08      	pop	{r3, pc}
   18b32:	4b0b      	ldr	r3, [pc, #44]	; (18b60 <neighborcell_count_get+0x48>)
   18b34:	4a0b      	ldr	r2, [pc, #44]	; (18b64 <neighborcell_count_get+0x4c>)
   18b36:	1a9b      	subs	r3, r3, r2
   18b38:	08db      	lsrs	r3, r3, #3
		LOG_ERR("at_response is NULL, can't get cell count");
   18b3a:	f04f 0100 	mov.w	r1, #0
   18b3e:	2201      	movs	r2, #1
   18b40:	f362 0102 	bfi	r1, r2, #0, #3
   18b44:	f36f 01c5 	bfc	r1, #3, #3
   18b48:	f363 118f 	bfi	r1, r3, #6, #10
   18b4c:	4806      	ldr	r0, [pc, #24]	; (18b68 <neighborcell_count_get+0x50>)
   18b4e:	f7fa fa07 	bl	12f60 <log_0>
		return 0;
   18b52:	2000      	movs	r0, #0
   18b54:	e7ec      	b.n	18b30 <neighborcell_count_get+0x18>
		return 0;
   18b56:	2000      	movs	r0, #0
   18b58:	e7ea      	b.n	18b30 <neighborcell_count_get+0x18>
   18b5a:	bf00      	nop
   18b5c:	cccccccd 	.word	0xcccccccd
   18b60:	00025324 	.word	0x00025324
   18b64:	000252ec 	.word	0x000252ec
   18b68:	00026f90 	.word	0x00026f90

00018b6c <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   18b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b70:	b08d      	sub	sp, #52	; 0x34
   18b72:	4606      	mov	r6, r0
   18b74:	460d      	mov	r5, r1
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   18b76:	2400      	movs	r4, #0
   18b78:	9404      	str	r4, [sp, #16]
   18b7a:	9405      	str	r4, [sp, #20]
   18b7c:	f8cd 4017 	str.w	r4, [sp, #23]
	size_t response_prefix_len = sizeof(response_prefix);
   18b80:	230b      	movs	r3, #11
   18b82:	9303      	str	r3, [sp, #12]
	 * allocating heap for it. This may save quite a bit of heap as the
	 * worst case scenario is 96 elements.
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   18b84:	212c      	movs	r1, #44	; 0x2c
   18b86:	f00a fa06 	bl	22f96 <get_char_frequency>

	cells->ncells_count = 0;
   18b8a:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   18b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b92:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   18b94:	1cc1      	adds	r1, r0, #3
   18b96:	a807      	add	r0, sp, #28
   18b98:	f00a f829 	bl	22bee <at_params_list_init>
	if (err) {
   18b9c:	bb50      	cbnz	r0, 18bf4 <parse_ncellmeas+0x88>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_params_from_str(at_response,
   18b9e:	aa07      	add	r2, sp, #28
   18ba0:	2100      	movs	r1, #0
   18ba2:	4630      	mov	r0, r6
   18ba4:	f009 fff2 	bl	22b8c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err && err != -E2BIG) {
   18ba8:	4604      	mov	r4, r0
   18baa:	b110      	cbz	r0, 18bb2 <parse_ncellmeas+0x46>
   18bac:	f110 0f07 	cmn.w	r0, #7
   18bb0:	d133      	bne.n	18c1a <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
		goto clean_exit;
	} else if (err == -E2BIG) {
   18bb2:	f114 0f07 	cmn.w	r4, #7
   18bb6:	d042      	beq.n	18c3e <parse_ncellmeas+0xd2>
	bool incomplete = false;
   18bb8:	2700      	movs	r7, #0
		incomplete = true;
	}

	err = at_params_string_get(&resp_list,
   18bba:	ab03      	add	r3, sp, #12
   18bbc:	aa04      	add	r2, sp, #16
   18bbe:	2100      	movs	r1, #0
   18bc0:	a807      	add	r0, sp, #28
   18bc2:	f00a f97e 	bl	22ec2 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   18bc6:	4604      	mov	r4, r0
   18bc8:	2800      	cmp	r0, #0
   18bca:	d13a      	bne.n	18c42 <parse_ncellmeas+0xd6>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   18bcc:	4aa3      	ldr	r2, [pc, #652]	; (18e5c <parse_ncellmeas+0x2f0>)
   18bce:	9903      	ldr	r1, [sp, #12]
   18bd0:	a804      	add	r0, sp, #16
   18bd2:	f7ff fb59 	bl	18288 <response_is_valid>
   18bd6:	2800      	cmp	r0, #0
   18bd8:	d044      	beq.n	18c64 <parse_ncellmeas+0xf8>
		LOG_DBG("Not a valid NCELLMEAS response");
		goto clean_exit;
	}

	/* Status code. */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   18bda:	aa0b      	add	r2, sp, #44	; 0x2c
   18bdc:	2101      	movs	r1, #1
   18bde:	a807      	add	r0, sp, #28
   18be0:	f00a f91f 	bl	22e22 <at_params_int_get>
	if (err) {
   18be4:	4604      	mov	r4, r0
   18be6:	2800      	cmp	r0, #0
   18be8:	d13c      	bne.n	18c64 <parse_ncellmeas+0xf8>
		goto clean_exit;
	}

	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   18bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18bec:	2b00      	cmp	r3, #0
   18bee:	d040      	beq.n	18c72 <parse_ncellmeas+0x106>
		err = 1;
   18bf0:	2401      	movs	r4, #1
   18bf2:	e037      	b.n	18c64 <parse_ncellmeas+0xf8>
   18bf4:	4604      	mov	r4, r0
   18bf6:	4b9a      	ldr	r3, [pc, #616]	; (18e60 <parse_ncellmeas+0x2f4>)
   18bf8:	4a9a      	ldr	r2, [pc, #616]	; (18e64 <parse_ncellmeas+0x2f8>)
   18bfa:	1a9b      	subs	r3, r3, r2
   18bfc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18bfe:	f04f 0200 	mov.w	r2, #0
   18c02:	2101      	movs	r1, #1
   18c04:	f361 0202 	bfi	r2, r1, #0, #3
   18c08:	f36f 02c5 	bfc	r2, #3, #3
   18c0c:	f363 128f 	bfi	r2, r3, #6, #10
   18c10:	4601      	mov	r1, r0
   18c12:	4895      	ldr	r0, [pc, #596]	; (18e68 <parse_ncellmeas+0x2fc>)
   18c14:	f7fa f9ce 	bl	12fb4 <log_1>
		return err;
   18c18:	e027      	b.n	18c6a <parse_ncellmeas+0xfe>
   18c1a:	4b91      	ldr	r3, [pc, #580]	; (18e60 <parse_ncellmeas+0x2f4>)
   18c1c:	4a91      	ldr	r2, [pc, #580]	; (18e64 <parse_ncellmeas+0x2f8>)
   18c1e:	1a9b      	subs	r3, r3, r2
   18c20:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   18c22:	f04f 0200 	mov.w	r2, #0
   18c26:	2101      	movs	r1, #1
   18c28:	f361 0202 	bfi	r2, r1, #0, #3
   18c2c:	f36f 02c5 	bfc	r2, #3, #3
   18c30:	f363 128f 	bfi	r2, r3, #6, #10
   18c34:	4601      	mov	r1, r0
   18c36:	488d      	ldr	r0, [pc, #564]	; (18e6c <parse_ncellmeas+0x300>)
   18c38:	f7fa f9bc 	bl	12fb4 <log_1>
		goto clean_exit;
   18c3c:	e012      	b.n	18c64 <parse_ncellmeas+0xf8>
		incomplete = true;
   18c3e:	2701      	movs	r7, #1
   18c40:	e7bb      	b.n	18bba <parse_ncellmeas+0x4e>
   18c42:	4b87      	ldr	r3, [pc, #540]	; (18e60 <parse_ncellmeas+0x2f4>)
   18c44:	4a87      	ldr	r2, [pc, #540]	; (18e64 <parse_ncellmeas+0x2f8>)
   18c46:	1a9b      	subs	r3, r3, r2
   18c48:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   18c4a:	f04f 0200 	mov.w	r2, #0
   18c4e:	2101      	movs	r1, #1
   18c50:	f361 0202 	bfi	r2, r1, #0, #3
   18c54:	f36f 02c5 	bfc	r2, #3, #3
   18c58:	f363 128f 	bfi	r2, r3, #6, #10
   18c5c:	4601      	mov	r1, r0
   18c5e:	4884      	ldr	r0, [pc, #528]	; (18e70 <parse_ncellmeas+0x304>)
   18c60:	f7fa f9a8 	bl	12fb4 <log_1>
	if (incomplete) {
		err = -E2BIG;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18c64:	a807      	add	r0, sp, #28
   18c66:	f009 ffeb 	bl	22c40 <at_params_list_free>

	return err;
}
   18c6a:	4620      	mov	r0, r4
   18c6c:	b00d      	add	sp, #52	; 0x34
   18c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   18c72:	2310      	movs	r3, #16
   18c74:	aa0a      	add	r2, sp, #40	; 0x28
   18c76:	2102      	movs	r1, #2
   18c78:	a807      	add	r0, sp, #28
   18c7a:	f00a f9bd 	bl	22ff8 <string_param_to_int>
	if (err) {
   18c7e:	4604      	mov	r4, r0
   18c80:	2800      	cmp	r0, #0
   18c82:	d1ef      	bne.n	18c64 <parse_ncellmeas+0xf8>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   18c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   18c8a:	db02      	blt.n	18c92 <parse_ncellmeas+0x126>
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   18c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c90:	930a      	str	r3, [sp, #40]	; 0x28
	cells->current_cell.id = tmp;
   18c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18c94:	60ab      	str	r3, [r5, #8]
	len = sizeof(tmp_str);
   18c96:	2307      	movs	r3, #7
   18c98:	9309      	str	r3, [sp, #36]	; 0x24
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   18c9a:	ab09      	add	r3, sp, #36	; 0x24
   18c9c:	aa01      	add	r2, sp, #4
   18c9e:	2103      	movs	r1, #3
   18ca0:	a807      	add	r0, sp, #28
   18ca2:	f00a f90e 	bl	22ec2 <at_params_string_get>
	if (err) {
   18ca6:	4604      	mov	r4, r0
   18ca8:	2800      	cmp	r0, #0
   18caa:	d1db      	bne.n	18c64 <parse_ncellmeas+0xf8>
	tmp_str[len] = '\0';
   18cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18cae:	aa0c      	add	r2, sp, #48	; 0x30
   18cb0:	4413      	add	r3, r2
   18cb2:	2200      	movs	r2, #0
   18cb4:	f803 2c2c 	strb.w	r2, [r3, #-44]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   18cb8:	1d2a      	adds	r2, r5, #4
   18cba:	210a      	movs	r1, #10
   18cbc:	f10d 0007 	add.w	r0, sp, #7
   18cc0:	f00a f974 	bl	22fac <string_to_int>
	if (err) {
   18cc4:	4604      	mov	r4, r0
   18cc6:	2800      	cmp	r0, #0
   18cc8:	d1cc      	bne.n	18c64 <parse_ncellmeas+0xf8>
	tmp_str[3] = '\0';
   18cca:	2300      	movs	r3, #0
   18ccc:	f88d 3007 	strb.w	r3, [sp, #7]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   18cd0:	462a      	mov	r2, r5
   18cd2:	210a      	movs	r1, #10
   18cd4:	a801      	add	r0, sp, #4
   18cd6:	f00a f969 	bl	22fac <string_to_int>
	if (err) {
   18cda:	4604      	mov	r4, r0
   18cdc:	2800      	cmp	r0, #0
   18cde:	d1c1      	bne.n	18c64 <parse_ncellmeas+0xf8>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   18ce0:	2310      	movs	r3, #16
   18ce2:	aa0a      	add	r2, sp, #40	; 0x28
   18ce4:	2104      	movs	r1, #4
   18ce6:	a807      	add	r0, sp, #28
   18ce8:	f00a f986 	bl	22ff8 <string_param_to_int>
	if (err) {
   18cec:	4604      	mov	r4, r0
   18cee:	2800      	cmp	r0, #0
   18cf0:	d1b8      	bne.n	18c64 <parse_ncellmeas+0xf8>
	cells->current_cell.tac = tmp;
   18cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18cf4:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   18cf6:	aa0a      	add	r2, sp, #40	; 0x28
   18cf8:	2105      	movs	r1, #5
   18cfa:	a807      	add	r0, sp, #28
   18cfc:	f00a f891 	bl	22e22 <at_params_int_get>
	if (err) {
   18d00:	4604      	mov	r4, r0
   18d02:	2800      	cmp	r0, #0
   18d04:	d1ae      	bne.n	18c64 <parse_ncellmeas+0xf8>
	cells->current_cell.timing_advance = tmp;
   18d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18d08:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   18d0a:	f105 0210 	add.w	r2, r5, #16
   18d0e:	2106      	movs	r1, #6
   18d10:	a807      	add	r0, sp, #28
   18d12:	f00a f886 	bl	22e22 <at_params_int_get>
	if (err) {
   18d16:	4604      	mov	r4, r0
   18d18:	2800      	cmp	r0, #0
   18d1a:	d1a3      	bne.n	18c64 <parse_ncellmeas+0xf8>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   18d1c:	f105 0228 	add.w	r2, r5, #40	; 0x28
   18d20:	2107      	movs	r1, #7
   18d22:	a807      	add	r0, sp, #28
   18d24:	f00a f829 	bl	22d7a <at_params_short_get>
	if (err) {
   18d28:	4604      	mov	r4, r0
   18d2a:	2800      	cmp	r0, #0
   18d2c:	d19a      	bne.n	18c64 <parse_ncellmeas+0xf8>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   18d2e:	aa0a      	add	r2, sp, #40	; 0x28
   18d30:	2108      	movs	r1, #8
   18d32:	a807      	add	r0, sp, #28
   18d34:	f00a f875 	bl	22e22 <at_params_int_get>
	if (err) {
   18d38:	4604      	mov	r4, r0
   18d3a:	2800      	cmp	r0, #0
   18d3c:	d192      	bne.n	18c64 <parse_ncellmeas+0xf8>
	cells->current_cell.rsrp = tmp;
   18d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18d40:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   18d42:	aa0a      	add	r2, sp, #40	; 0x28
   18d44:	2109      	movs	r1, #9
   18d46:	a807      	add	r0, sp, #28
   18d48:	f00a f86b 	bl	22e22 <at_params_int_get>
	if (err) {
   18d4c:	4604      	mov	r4, r0
   18d4e:	2800      	cmp	r0, #0
   18d50:	d188      	bne.n	18c64 <parse_ncellmeas+0xf8>
	cells->current_cell.rsrq = tmp;
   18d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18d54:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   18d56:	f105 0220 	add.w	r2, r5, #32
   18d5a:	210a      	movs	r1, #10
   18d5c:	a807      	add	r0, sp, #28
   18d5e:	f00a f88f 	bl	22e80 <at_params_int64_get>
	if (err) {
   18d62:	4604      	mov	r4, r0
   18d64:	2800      	cmp	r0, #0
   18d66:	f47f af7d 	bne.w	18c64 <parse_ncellmeas+0xf8>
	cells->ncells_count = neighborcell_count_get(at_response);
   18d6a:	4630      	mov	r0, r6
   18d6c:	f7ff fed4 	bl	18b18 <neighborcell_count_get>
   18d70:	b2c3      	uxtb	r3, r0
   18d72:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   18d76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   18d7a:	f103 060b 	add.w	r6, r3, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   18d7e:	a807      	add	r0, sp, #28
   18d80:	f00a f8d1 	bl	22f26 <at_params_valid_count_get>
   18d84:	4286      	cmp	r6, r0
   18d86:	d358      	bcc.n	18e3a <parse_ncellmeas+0x2ce>
		cells->current_cell.timing_advance_meas_time = 0;
   18d88:	2200      	movs	r2, #0
   18d8a:	2300      	movs	r3, #0
   18d8c:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   18d90:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18d94:	2b00      	cmp	r3, #0
   18d96:	f43f af65 	beq.w	18c64 <parse_ncellmeas+0xf8>
   18d9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18d9c:	2b00      	cmp	r3, #0
   18d9e:	f43f af61 	beq.w	18c64 <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   18da2:	2600      	movs	r6, #0
   18da4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18da8:	429e      	cmp	r6, r3
   18daa:	d250      	bcs.n	18e4e <parse_ncellmeas+0x2e2>
				   i * AT_NCELLMEAS_N_PARAMS_COUNT;
   18dac:	eb06 0886 	add.w	r8, r6, r6, lsl #2
					&cells->neighbor_cells[i].earfcn);
   18db0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18db2:	ea4f 1906 	mov.w	r9, r6, lsl #4
		err = at_params_int_get(&resp_list,
   18db6:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   18dba:	f108 010b 	add.w	r1, r8, #11
   18dbe:	a807      	add	r0, sp, #28
   18dc0:	f00a f82f 	bl	22e22 <at_params_int_get>
		if (err) {
   18dc4:	4604      	mov	r4, r0
   18dc6:	2800      	cmp	r0, #0
   18dc8:	f47f af4c 	bne.w	18c64 <parse_ncellmeas+0xf8>
					  &cells->neighbor_cells[i].phys_cell_id);
   18dcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18dce:	444b      	add	r3, r9
		err = at_params_short_get(&resp_list,
   18dd0:	f103 0208 	add.w	r2, r3, #8
   18dd4:	f108 010c 	add.w	r1, r8, #12
   18dd8:	a807      	add	r0, sp, #28
   18dda:	f009 ffce 	bl	22d7a <at_params_short_get>
		if (err) {
   18dde:	4604      	mov	r4, r0
   18de0:	2800      	cmp	r0, #0
   18de2:	f47f af3f 	bne.w	18c64 <parse_ncellmeas+0xf8>
		err = at_params_int_get(&resp_list,
   18de6:	aa0a      	add	r2, sp, #40	; 0x28
   18de8:	f108 010d 	add.w	r1, r8, #13
   18dec:	a807      	add	r0, sp, #28
   18dee:	f00a f818 	bl	22e22 <at_params_int_get>
		if (err) {
   18df2:	4604      	mov	r4, r0
   18df4:	2800      	cmp	r0, #0
   18df6:	f47f af35 	bne.w	18c64 <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrp = tmp;
   18dfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18dfc:	444b      	add	r3, r9
   18dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18e00:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   18e02:	aa0a      	add	r2, sp, #40	; 0x28
   18e04:	f108 010e 	add.w	r1, r8, #14
   18e08:	a807      	add	r0, sp, #28
   18e0a:	f00a f80a 	bl	22e22 <at_params_int_get>
		if (err) {
   18e0e:	4604      	mov	r4, r0
   18e10:	2800      	cmp	r0, #0
   18e12:	f47f af27 	bne.w	18c64 <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrq = tmp;
   18e16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18e18:	444b      	add	r3, r9
   18e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18e1c:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   18e1e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18e20:	444b      	add	r3, r9
		err = at_params_int_get(&resp_list,
   18e22:	1d1a      	adds	r2, r3, #4
   18e24:	f108 010f 	add.w	r1, r8, #15
   18e28:	a807      	add	r0, sp, #28
   18e2a:	f009 fffa 	bl	22e22 <at_params_int_get>
		if (err) {
   18e2e:	4604      	mov	r4, r0
   18e30:	2800      	cmp	r0, #0
   18e32:	f47f af17 	bne.w	18c64 <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   18e36:	3601      	adds	r6, #1
   18e38:	e7b4      	b.n	18da4 <parse_ncellmeas+0x238>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   18e3a:	f105 0218 	add.w	r2, r5, #24
   18e3e:	4631      	mov	r1, r6
   18e40:	a807      	add	r0, sp, #28
   18e42:	f00a f81d 	bl	22e80 <at_params_int64_get>
		if (err) {
   18e46:	4604      	mov	r4, r0
   18e48:	2800      	cmp	r0, #0
   18e4a:	d0a1      	beq.n	18d90 <parse_ncellmeas+0x224>
   18e4c:	e70a      	b.n	18c64 <parse_ncellmeas+0xf8>
	if (incomplete) {
   18e4e:	2f00      	cmp	r7, #0
   18e50:	f43f af08 	beq.w	18c64 <parse_ncellmeas+0xf8>
		err = -E2BIG;
   18e54:	f06f 0406 	mvn.w	r4, #6
   18e58:	e704      	b.n	18c64 <parse_ncellmeas+0xf8>
   18e5a:	bf00      	nop
   18e5c:	00026b14 	.word	0x00026b14
   18e60:	00025324 	.word	0x00025324
   18e64:	000252ec 	.word	0x000252ec
   18e68:	00026c18 	.word	0x00026c18
   18e6c:	00026fbc 	.word	0x00026fbc
   18e70:	00026e84 	.word	0x00026e84

00018e74 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   18e74:	b570      	push	{r4, r5, r6, lr}
   18e76:	b084      	sub	sp, #16
	int err;
	struct at_param_list resp_list = {0};
   18e78:	2300      	movs	r3, #0
   18e7a:	9302      	str	r3, [sp, #8]
   18e7c:	9303      	str	r3, [sp, #12]
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   18e7e:	2900      	cmp	r1, #0
   18e80:	d07e      	beq.n	18f80 <parse_xmodemsleep+0x10c>
   18e82:	4604      	mov	r4, r0
   18e84:	460e      	mov	r6, r1
   18e86:	2800      	cmp	r0, #0
   18e88:	d07d      	beq.n	18f86 <parse_xmodemsleep+0x112>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   18e8a:	2104      	movs	r1, #4
   18e8c:	a802      	add	r0, sp, #8
   18e8e:	f009 feae 	bl	22bee <at_params_list_init>
	if (err) {
   18e92:	4605      	mov	r5, r0
   18e94:	b9f0      	cbnz	r0, 18ed4 <parse_xmodemsleep+0x60>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XMODEMSLEEP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   18e96:	aa02      	add	r2, sp, #8
   18e98:	2100      	movs	r1, #0
   18e9a:	4620      	mov	r0, r4
   18e9c:	f009 fe76 	bl	22b8c <at_parser_params_from_str>
	if (err) {
   18ea0:	4605      	mov	r5, r0
   18ea2:	bb48      	cbnz	r0, 18ef8 <parse_xmodemsleep+0x84>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   18ea4:	f10d 0206 	add.w	r2, sp, #6
   18ea8:	2101      	movs	r1, #1
   18eaa:	a802      	add	r0, sp, #8
   18eac:	f009 ff91 	bl	22dd2 <at_params_unsigned_short_get>
	if (err) {
   18eb0:	4605      	mov	r5, r0
   18eb2:	2800      	cmp	r0, #0
   18eb4:	d137      	bne.n	18f26 <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
		goto clean_exit;
	}
	modem_sleep->type = type;
   18eb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18eba:	7033      	strb	r3, [r6, #0]

	/* If the time parameter is not present sleep time is considered infinite. */
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   18ebc:	a802      	add	r0, sp, #8
   18ebe:	f00a f832 	bl	22f26 <at_params_valid_count_get>
   18ec2:	2802      	cmp	r0, #2
   18ec4:	d841      	bhi.n	18f4a <parse_xmodemsleep+0xd6>
		modem_sleep->time = -1;
   18ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18ece:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   18ed2:	e022      	b.n	18f1a <parse_xmodemsleep+0xa6>
   18ed4:	4b2d      	ldr	r3, [pc, #180]	; (18f8c <parse_xmodemsleep+0x118>)
   18ed6:	4a2e      	ldr	r2, [pc, #184]	; (18f90 <parse_xmodemsleep+0x11c>)
   18ed8:	1a9b      	subs	r3, r3, r2
   18eda:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   18edc:	f04f 0200 	mov.w	r2, #0
   18ee0:	2101      	movs	r1, #1
   18ee2:	f361 0202 	bfi	r2, r1, #0, #3
   18ee6:	f36f 02c5 	bfc	r2, #3, #3
   18eea:	f363 128f 	bfi	r2, r3, #6, #10
   18eee:	4601      	mov	r1, r0
   18ef0:	4828      	ldr	r0, [pc, #160]	; (18f94 <parse_xmodemsleep+0x120>)
   18ef2:	f7fa f85f 	bl	12fb4 <log_1>
		return err;
   18ef6:	e013      	b.n	18f20 <parse_xmodemsleep+0xac>
   18ef8:	4b24      	ldr	r3, [pc, #144]	; (18f8c <parse_xmodemsleep+0x118>)
   18efa:	4a25      	ldr	r2, [pc, #148]	; (18f90 <parse_xmodemsleep+0x11c>)
   18efc:	1a9b      	subs	r3, r3, r2
   18efe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   18f00:	f04f 0200 	mov.w	r2, #0
   18f04:	2101      	movs	r1, #1
   18f06:	f361 0202 	bfi	r2, r1, #0, #3
   18f0a:	f36f 02c5 	bfc	r2, #3, #3
   18f0e:	f363 128f 	bfi	r2, r3, #6, #10
   18f12:	4601      	mov	r1, r0
   18f14:	4820      	ldr	r0, [pc, #128]	; (18f98 <parse_xmodemsleep+0x124>)
   18f16:	f7fa f84d 	bl	12fb4 <log_1>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
		goto clean_exit;
	}

clean_exit:
	at_params_list_free(&resp_list);
   18f1a:	a802      	add	r0, sp, #8
   18f1c:	f009 fe90 	bl	22c40 <at_params_list_free>
	return err;
}
   18f20:	4628      	mov	r0, r5
   18f22:	b004      	add	sp, #16
   18f24:	bd70      	pop	{r4, r5, r6, pc}
   18f26:	4b19      	ldr	r3, [pc, #100]	; (18f8c <parse_xmodemsleep+0x118>)
   18f28:	4a19      	ldr	r2, [pc, #100]	; (18f90 <parse_xmodemsleep+0x11c>)
   18f2a:	1a9b      	subs	r3, r3, r2
   18f2c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   18f2e:	f04f 0200 	mov.w	r2, #0
   18f32:	2101      	movs	r1, #1
   18f34:	f361 0202 	bfi	r2, r1, #0, #3
   18f38:	f36f 02c5 	bfc	r2, #3, #3
   18f3c:	f363 128f 	bfi	r2, r3, #6, #10
   18f40:	4601      	mov	r1, r0
   18f42:	4816      	ldr	r0, [pc, #88]	; (18f9c <parse_xmodemsleep+0x128>)
   18f44:	f7fa f836 	bl	12fb4 <log_1>
		goto clean_exit;
   18f48:	e7e7      	b.n	18f1a <parse_xmodemsleep+0xa6>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   18f4a:	f106 0208 	add.w	r2, r6, #8
   18f4e:	2102      	movs	r1, #2
   18f50:	a802      	add	r0, sp, #8
   18f52:	f009 ff95 	bl	22e80 <at_params_int64_get>
	if (err) {
   18f56:	4605      	mov	r5, r0
   18f58:	2800      	cmp	r0, #0
   18f5a:	d0de      	beq.n	18f1a <parse_xmodemsleep+0xa6>
   18f5c:	4b0b      	ldr	r3, [pc, #44]	; (18f8c <parse_xmodemsleep+0x118>)
   18f5e:	4a0c      	ldr	r2, [pc, #48]	; (18f90 <parse_xmodemsleep+0x11c>)
   18f60:	1a9b      	subs	r3, r3, r2
   18f62:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   18f64:	f04f 0200 	mov.w	r2, #0
   18f68:	2101      	movs	r1, #1
   18f6a:	f361 0202 	bfi	r2, r1, #0, #3
   18f6e:	f36f 02c5 	bfc	r2, #3, #3
   18f72:	f363 128f 	bfi	r2, r3, #6, #10
   18f76:	4601      	mov	r1, r0
   18f78:	4809      	ldr	r0, [pc, #36]	; (18fa0 <parse_xmodemsleep+0x12c>)
   18f7a:	f7fa f81b 	bl	12fb4 <log_1>
		goto clean_exit;
   18f7e:	e7cc      	b.n	18f1a <parse_xmodemsleep+0xa6>
		return -EINVAL;
   18f80:	f06f 0515 	mvn.w	r5, #21
   18f84:	e7cc      	b.n	18f20 <parse_xmodemsleep+0xac>
   18f86:	f06f 0515 	mvn.w	r5, #21
   18f8a:	e7c9      	b.n	18f20 <parse_xmodemsleep+0xac>
   18f8c:	00025324 	.word	0x00025324
   18f90:	000252ec 	.word	0x000252ec
   18f94:	00026c18 	.word	0x00026c18
   18f98:	00026ff0 	.word	0x00026ff0
   18f9c:	00027024 	.word	0x00027024
   18fa0:	00027050 	.word	0x00027050

00018fa4 <parse_mdmev>:
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   18fa4:	b378      	cbz	r0, 19006 <parse_mdmev+0x62>
{
   18fa6:	b570      	push	{r4, r5, r6, lr}
   18fa8:	460e      	mov	r6, r1
   18faa:	4605      	mov	r5, r0
	if (at_response == NULL || modem_evt == NULL) {
   18fac:	b379      	cbz	r1, 1900e <parse_mdmev+0x6a>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   18fae:	4a19      	ldr	r2, [pc, #100]	; (19014 <parse_mdmev+0x70>)
   18fb0:	2108      	movs	r1, #8
   18fb2:	f7ff f969 	bl	18288 <response_is_valid>
   18fb6:	b168      	cbz	r0, 18fd4 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
		return -EIO;
	}

	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   18fb8:	3508      	adds	r5, #8

	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   18fba:	2400      	movs	r4, #0
   18fbc:	2c04      	cmp	r4, #4
   18fbe:	d81e      	bhi.n	18ffe <parse_mdmev+0x5a>
		if (strcmp(event_types[i], start_ptr) == 0) {
   18fc0:	4629      	mov	r1, r5
   18fc2:	4b15      	ldr	r3, [pc, #84]	; (19018 <parse_mdmev+0x74>)
   18fc4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   18fc8:	f7f8 f885 	bl	110d6 <strcmp>
   18fcc:	4603      	mov	r3, r0
   18fce:	b1a0      	cbz	r0, 18ffa <parse_mdmev+0x56>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   18fd0:	3401      	adds	r4, #1
   18fd2:	e7f3      	b.n	18fbc <parse_mdmev+0x18>
   18fd4:	4b11      	ldr	r3, [pc, #68]	; (1901c <parse_mdmev+0x78>)
   18fd6:	4a12      	ldr	r2, [pc, #72]	; (19020 <parse_mdmev+0x7c>)
   18fd8:	1a9b      	subs	r3, r3, r2
   18fda:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid MDMEV response");
   18fdc:	f04f 0100 	mov.w	r1, #0
   18fe0:	2201      	movs	r2, #1
   18fe2:	f362 0102 	bfi	r1, r2, #0, #3
   18fe6:	f36f 01c5 	bfc	r1, #3, #3
   18fea:	f363 118f 	bfi	r1, r3, #6, #10
   18fee:	480d      	ldr	r0, [pc, #52]	; (19024 <parse_mdmev+0x80>)
   18ff0:	f7f9 ffb6 	bl	12f60 <log_0>
		return -EIO;
   18ff4:	f06f 0304 	mvn.w	r3, #4
   18ff8:	e003      	b.n	19002 <parse_mdmev+0x5e>
			LOG_DBG("Occurrence found: %s", event_types[i]);
			*modem_evt = i;
   18ffa:	7034      	strb	r4, [r6, #0]

			return 0;
   18ffc:	e001      	b.n	19002 <parse_mdmev+0x5e>
		}
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
   18ffe:	f06f 033c 	mvn.w	r3, #60	; 0x3c
}
   19002:	4618      	mov	r0, r3
   19004:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19006:	f06f 0315 	mvn.w	r3, #21
}
   1900a:	4618      	mov	r0, r3
   1900c:	4770      	bx	lr
		return -EINVAL;
   1900e:	f06f 0315 	mvn.w	r3, #21
   19012:	e7f6      	b.n	19002 <parse_mdmev+0x5e>
   19014:	00027088 	.word	0x00027088
   19018:	00027158 	.word	0x00027158
   1901c:	00025324 	.word	0x00025324
   19020:	000252ec 	.word	0x000252ec
   19024:	00027094 	.word	0x00027094

00019028 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19028:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1902a:	f7fa f82b 	bl	13084 <z_impl_log_panic>
   1902e:	4b09      	ldr	r3, [pc, #36]	; (19054 <k_sys_fatal_error_handler+0x2c>)
   19030:	4a09      	ldr	r2, [pc, #36]	; (19058 <k_sys_fatal_error_handler+0x30>)
   19032:	1a9b      	subs	r3, r3, r2
   19034:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   19036:	f04f 0100 	mov.w	r1, #0
   1903a:	2201      	movs	r2, #1
   1903c:	f362 0102 	bfi	r1, r2, #0, #3
   19040:	f36f 01c5 	bfc	r1, #3, #3
   19044:	f363 118f 	bfi	r1, r3, #6, #10
   19048:	4804      	ldr	r0, [pc, #16]	; (1905c <k_sys_fatal_error_handler+0x34>)
   1904a:	f7f9 ff89 	bl	12f60 <log_0>
		sys_arch_reboot(0);
   1904e:	2000      	movs	r0, #0
   19050:	f7fb fb7e 	bl	14750 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   19054:	00025304 	.word	0x00025304
   19058:	000252ec 	.word	0x000252ec
   1905c:	000271cc 	.word	0x000271cc

00019060 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   19060:	b570      	push	{r4, r5, r6, lr}
   19062:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   19064:	481d      	ldr	r0, [pc, #116]	; (190dc <check_ext_api_requests+0x7c>)
   19066:	f00a f802 	bl	2306e <skip_ext_apis>
   1906a:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1906c:	2600      	movs	r6, #0
   1906e:	e00a      	b.n	19086 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   19070:	2500      	movs	r5, #0
   19072:	e01a      	b.n	190aa <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   19074:	481a      	ldr	r0, [pc, #104]	; (190e0 <check_ext_api_requests+0x80>)
   19076:	f006 fc4b 	bl	1f910 <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   1907a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1907c:	2200      	movs	r2, #0
   1907e:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   19080:	68e3      	ldr	r3, [r4, #12]
   19082:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19084:	3601      	adds	r6, #1
   19086:	4b15      	ldr	r3, [pc, #84]	; (190dc <check_ext_api_requests+0x7c>)
   19088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1908a:	42b3      	cmp	r3, r6
   1908c:	d922      	bls.n	190d4 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1908e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19090:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   19092:	ab01      	add	r3, sp, #4
   19094:	4a13      	ldr	r2, [pc, #76]	; (190e4 <check_ext_api_requests+0x84>)
   19096:	ca07      	ldmia	r2, {r0, r1, r2}
   19098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1909c:	220c      	movs	r2, #12
   1909e:	4619      	mov	r1, r3
   190a0:	4628      	mov	r0, r5
   190a2:	f00b fd03 	bl	24aac <memcmp>
   190a6:	2800      	cmp	r0, #0
   190a8:	d1e2      	bne.n	19070 <check_ext_api_requests+0x10>
   190aa:	b135      	cbz	r5, 190ba <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   190ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   190ae:	4621      	mov	r1, r4
   190b0:	6818      	ldr	r0, [r3, #0]
   190b2:	f009 ffbe 	bl	23032 <ext_api_satisfies_req>
   190b6:	2800      	cmp	r0, #0
   190b8:	d1e2      	bne.n	19080 <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   190ba:	6a23      	ldr	r3, [r4, #32]
   190bc:	2b00      	cmp	r3, #0
   190be:	d0d9      	beq.n	19074 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   190c0:	4809      	ldr	r0, [pc, #36]	; (190e8 <check_ext_api_requests+0x88>)
   190c2:	f006 fc25 	bl	1f910 <printk>
			k_panic();
   190c6:	4040      	eors	r0, r0
   190c8:	f380 8811 	msr	BASEPRI, r0
   190cc:	f04f 0004 	mov.w	r0, #4
   190d0:	df02      	svc	2
   190d2:	e7d5      	b.n	19080 <check_ext_api_requests+0x20>
	}

	return 0;
}
   190d4:	2000      	movs	r0, #0
   190d6:	b004      	add	sp, #16
   190d8:	bd70      	pop	{r4, r5, r6, pc}
   190da:	bf00      	nop
   190dc:	00010200 	.word	0x00010200
   190e0:	00027218 	.word	0x00027218
   190e4:	000253f4 	.word	0x000253f4
   190e8:	000271ec 	.word	0x000271ec

000190ec <SystemCoreClockUpdate>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   190ec:	4b01      	ldr	r3, [pc, #4]	; (190f4 <SystemCoreClockUpdate+0x8>)
   190ee:	4a02      	ldr	r2, [pc, #8]	; (190f8 <SystemCoreClockUpdate+0xc>)
   190f0:	601a      	str	r2, [r3, #0]
}
   190f2:	4770      	bx	lr
   190f4:	2000c55c 	.word	0x2000c55c
   190f8:	03d09000 	.word	0x03d09000

000190fc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   190fc:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   190fe:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   19100:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   19104:	f1d3 031f 	rsbs	r3, r3, #31
   19108:	d410      	bmi.n	1912c <nrfx_flag32_alloc+0x30>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1910a:	2201      	movs	r2, #1
   1910c:	409a      	lsls	r2, r3
   1910e:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19112:	e8d0 cfef 	ldaex	ip, [r0]
   19116:	45a4      	cmp	ip, r4
   19118:	d104      	bne.n	19124 <nrfx_flag32_alloc+0x28>
   1911a:	e8c0 2fee 	stlex	lr, r2, [r0]
   1911e:	f1be 0f00 	cmp.w	lr, #0
   19122:	d1f6      	bne.n	19112 <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19124:	d1eb      	bne.n	190fe <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   19126:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   19128:	4801      	ldr	r0, [pc, #4]	; (19130 <nrfx_flag32_alloc+0x34>)
}
   1912a:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   1912c:	4801      	ldr	r0, [pc, #4]	; (19134 <nrfx_flag32_alloc+0x38>)
   1912e:	e7fc      	b.n	1912a <nrfx_flag32_alloc+0x2e>
   19130:	0bad0000 	.word	0x0bad0000
   19134:	0bad0002 	.word	0x0bad0002

00019138 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   19138:	6803      	ldr	r3, [r0, #0]
   1913a:	40cb      	lsrs	r3, r1
   1913c:	f013 0f01 	tst.w	r3, #1
   19140:	d111      	bne.n	19166 <nrfx_flag32_free+0x2e>
{
   19142:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   19144:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   19146:	2301      	movs	r3, #1
   19148:	408b      	lsls	r3, r1
   1914a:	4313      	orrs	r3, r2
   1914c:	e8d0 cfef 	ldaex	ip, [r0]
   19150:	4594      	cmp	ip, r2
   19152:	d104      	bne.n	1915e <nrfx_flag32_free+0x26>
   19154:	e8c0 3fee 	stlex	lr, r3, [r0]
   19158:	f1be 0f00 	cmp.w	lr, #0
   1915c:	d1f6      	bne.n	1914c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1915e:	d1f1      	bne.n	19144 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   19160:	4802      	ldr	r0, [pc, #8]	; (1916c <nrfx_flag32_free+0x34>)
}
   19162:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   19166:	4802      	ldr	r0, [pc, #8]	; (19170 <nrfx_flag32_free+0x38>)
}
   19168:	4770      	bx	lr
   1916a:	bf00      	nop
   1916c:	0bad0000 	.word	0x0bad0000
   19170:	0bad0004 	.word	0x0bad0004

00019174 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19174:	4b05      	ldr	r3, [pc, #20]	; (1918c <nrfx_clock_init+0x18>)
   19176:	791b      	ldrb	r3, [r3, #4]
   19178:	b92b      	cbnz	r3, 19186 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   1917a:	4b04      	ldr	r3, [pc, #16]	; (1918c <nrfx_clock_init+0x18>)
   1917c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1917e:	2201      	movs	r2, #1
   19180:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19182:	4803      	ldr	r0, [pc, #12]	; (19190 <nrfx_clock_init+0x1c>)
   19184:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19186:	4803      	ldr	r0, [pc, #12]	; (19194 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19188:	4770      	bx	lr
   1918a:	bf00      	nop
   1918c:	2000d2ac 	.word	0x2000d2ac
   19190:	0bad0000 	.word	0x0bad0000
   19194:	0bad000c 	.word	0x0bad000c

00019198 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   19198:	b110      	cbz	r0, 191a0 <nrfx_clock_start+0x8>
   1919a:	2801      	cmp	r0, #1
   1919c:	d021      	beq.n	191e2 <nrfx_clock_start+0x4a>
   1919e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   191a0:	4a15      	ldr	r2, [pc, #84]	; (191f8 <nrfx_clock_start+0x60>)
   191a2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   191a6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   191aa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   191ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   191b2:	d10f      	bne.n	191d4 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   191b4:	4b10      	ldr	r3, [pc, #64]	; (191f8 <nrfx_clock_start+0x60>)
   191b6:	2201      	movs	r2, #1
   191b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   191bc:	4b0e      	ldr	r3, [pc, #56]	; (191f8 <nrfx_clock_start+0x60>)
   191be:	2200      	movs	r2, #0
   191c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   191c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   191c8:	2202      	movs	r2, #2
   191ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   191ce:	2201      	movs	r2, #1
   191d0:	609a      	str	r2, [r3, #8]
}
   191d2:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   191d4:	2b02      	cmp	r3, #2
   191d6:	d1ed      	bne.n	191b4 <nrfx_clock_start+0x1c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   191d8:	4b07      	ldr	r3, [pc, #28]	; (191f8 <nrfx_clock_start+0x60>)
   191da:	2202      	movs	r2, #2
   191dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   191e0:	e7ec      	b.n	191bc <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   191e2:	4b05      	ldr	r3, [pc, #20]	; (191f8 <nrfx_clock_start+0x60>)
   191e4:	2200      	movs	r2, #0
   191e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   191ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   191ee:	2201      	movs	r2, #1
   191f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   191f4:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   191f6:	4770      	bx	lr
   191f8:	40005000 	.word	0x40005000

000191fc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   191fc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   191fe:	4604      	mov	r4, r0
   19200:	b110      	cbz	r0, 19208 <nrfx_clock_stop+0xc>
   19202:	2801      	cmp	r0, #1
   19204:	d010      	beq.n	19228 <nrfx_clock_stop+0x2c>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   19206:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   19208:	4b34      	ldr	r3, [pc, #208]	; (192dc <nrfx_clock_stop+0xe0>)
   1920a:	2202      	movs	r2, #2
   1920c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19210:	2200      	movs	r2, #0
   19212:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19216:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1921a:	2201      	movs	r2, #1
   1921c:	60da      	str	r2, [r3, #12]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   1921e:	2c01      	cmp	r4, #1
   19220:	d00d      	beq.n	1923e <nrfx_clock_stop+0x42>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   19222:	f242 7510 	movw	r5, #10000	; 0x2710
   19226:	e046      	b.n	192b6 <nrfx_clock_stop+0xba>
    p_reg->INTENCLR = mask;
   19228:	4b2c      	ldr	r3, [pc, #176]	; (192dc <nrfx_clock_stop+0xe0>)
   1922a:	2201      	movs	r2, #1
   1922c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19230:	2100      	movs	r1, #0
   19232:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   19236:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1923a:	605a      	str	r2, [r3, #4]
}
   1923c:	e7ef      	b.n	1921e <nrfx_clock_stop+0x22>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1923e:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   19240:	f242 7610 	movw	r6, #10000	; 0x2710
   19244:	e013      	b.n	1926e <nrfx_clock_stop+0x72>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19246:	4b25      	ldr	r3, [pc, #148]	; (192dc <nrfx_clock_stop+0xe0>)
   19248:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   1924c:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19250:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   19254:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19258:	d11b      	bne.n	19292 <nrfx_clock_stop+0x96>
    return false;
   1925a:	2300      	movs	r3, #0
   1925c:	2b00      	cmp	r3, #0
   1925e:	d0d2      	beq.n	19206 <nrfx_clock_stop+0xa>
   19260:	2d01      	cmp	r5, #1
   19262:	d1d0      	bne.n	19206 <nrfx_clock_stop+0xa>
   19264:	2001      	movs	r0, #1
   19266:	f009 ff14 	bl	23092 <nrfx_busy_wait>
   1926a:	3e01      	subs	r6, #1
   1926c:	d0cb      	beq.n	19206 <nrfx_clock_stop+0xa>
    switch (domain)
   1926e:	2c00      	cmp	r4, #0
   19270:	d0e9      	beq.n	19246 <nrfx_clock_stop+0x4a>
   19272:	2c01      	cmp	r4, #1
   19274:	d001      	beq.n	1927a <nrfx_clock_stop+0x7e>
   19276:	2300      	movs	r3, #0
   19278:	e7f0      	b.n	1925c <nrfx_clock_stop+0x60>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1927a:	4b18      	ldr	r3, [pc, #96]	; (192dc <nrfx_clock_stop+0xe0>)
   1927c:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   19280:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19284:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   19288:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1928c:	d103      	bne.n	19296 <nrfx_clock_stop+0x9a>
    return false;
   1928e:	2300      	movs	r3, #0
   19290:	e7e4      	b.n	1925c <nrfx_clock_stop+0x60>
                return true;
   19292:	2301      	movs	r3, #1
   19294:	e7e2      	b.n	1925c <nrfx_clock_stop+0x60>
                return true;
   19296:	2301      	movs	r3, #1
   19298:	e7e0      	b.n	1925c <nrfx_clock_stop+0x60>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1929a:	4b10      	ldr	r3, [pc, #64]	; (192dc <nrfx_clock_stop+0xe0>)
   1929c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   192a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   192a4:	d115      	bne.n	192d2 <nrfx_clock_stop+0xd6>
    return false;
   192a6:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   192a8:	2b00      	cmp	r3, #0
   192aa:	d0ac      	beq.n	19206 <nrfx_clock_stop+0xa>
   192ac:	2001      	movs	r0, #1
   192ae:	f009 fef0 	bl	23092 <nrfx_busy_wait>
   192b2:	3d01      	subs	r5, #1
   192b4:	d0a7      	beq.n	19206 <nrfx_clock_stop+0xa>
    switch (domain)
   192b6:	2c00      	cmp	r4, #0
   192b8:	d0ef      	beq.n	1929a <nrfx_clock_stop+0x9e>
   192ba:	2c01      	cmp	r4, #1
   192bc:	d001      	beq.n	192c2 <nrfx_clock_stop+0xc6>
   192be:	2300      	movs	r3, #0
   192c0:	e7f2      	b.n	192a8 <nrfx_clock_stop+0xac>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   192c2:	4b06      	ldr	r3, [pc, #24]	; (192dc <nrfx_clock_stop+0xe0>)
   192c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   192c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   192cc:	d103      	bne.n	192d6 <nrfx_clock_stop+0xda>
    return false;
   192ce:	2300      	movs	r3, #0
   192d0:	e7ea      	b.n	192a8 <nrfx_clock_stop+0xac>
                return true;
   192d2:	2301      	movs	r3, #1
   192d4:	e7e8      	b.n	192a8 <nrfx_clock_stop+0xac>
                return true;
   192d6:	2301      	movs	r3, #1
   192d8:	e7e6      	b.n	192a8 <nrfx_clock_stop+0xac>
   192da:	bf00      	nop
   192dc:	40005000 	.word	0x40005000

000192e0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   192e0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   192e2:	4b19      	ldr	r3, [pc, #100]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   192e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   192e8:	b15b      	cbz	r3, 19302 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   192ea:	4b17      	ldr	r3, [pc, #92]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   192ec:	2000      	movs	r0, #0
   192ee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   192f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   192f6:	2201      	movs	r2, #1
   192f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   192fc:	4b13      	ldr	r3, [pc, #76]	; (1934c <nrfx_power_clock_irq_handler+0x6c>)
   192fe:	681b      	ldr	r3, [r3, #0]
   19300:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19302:	4b11      	ldr	r3, [pc, #68]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   19304:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   19308:	b1ab      	cbz	r3, 19336 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1930a:	4b0f      	ldr	r3, [pc, #60]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   1930c:	2200      	movs	r2, #0
   1930e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19312:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19316:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   1931a:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1931e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   19322:	2a01      	cmp	r2, #1
   19324:	d008      	beq.n	19338 <nrfx_power_clock_irq_handler+0x58>
    p_reg->INTENCLR = mask;
   19326:	4b08      	ldr	r3, [pc, #32]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   19328:	2202      	movs	r2, #2
   1932a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1932e:	4b07      	ldr	r3, [pc, #28]	; (1934c <nrfx_power_clock_irq_handler+0x6c>)
   19330:	681b      	ldr	r3, [r3, #0]
   19332:	2001      	movs	r0, #1
   19334:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   19336:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   19338:	4b03      	ldr	r3, [pc, #12]	; (19348 <nrfx_power_clock_irq_handler+0x68>)
   1933a:	2202      	movs	r2, #2
   1933c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19340:	2201      	movs	r2, #1
   19342:	609a      	str	r2, [r3, #8]
}
   19344:	e7f7      	b.n	19336 <nrfx_power_clock_irq_handler+0x56>
   19346:	bf00      	nop
   19348:	40005000 	.word	0x40005000
   1934c:	2000d2ac 	.word	0x2000d2ac

00019350 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   19350:	b508      	push	{r3, lr}
   19352:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   19354:	4801      	ldr	r0, [pc, #4]	; (1935c <nrfx_dppi_channel_alloc+0xc>)
   19356:	f7ff fed1 	bl	190fc <nrfx_flag32_alloc>
}
   1935a:	bd08      	pop	{r3, pc}
   1935c:	2000c560 	.word	0x2000c560

00019360 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19360:	3008      	adds	r0, #8
   19362:	4b03      	ldr	r3, [pc, #12]	; (19370 <pin_in_use+0x10>)
   19364:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19368:	f000 0001 	and.w	r0, r0, #1
   1936c:	4770      	bx	lr
   1936e:	bf00      	nop
   19370:	2000c564 	.word	0x2000c564

00019374 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19374:	3008      	adds	r0, #8
   19376:	4b03      	ldr	r3, [pc, #12]	; (19384 <pin_in_use_by_te+0x10>)
   19378:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1937c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19380:	4770      	bx	lr
   19382:	bf00      	nop
   19384:	2000c564 	.word	0x2000c564

00019388 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   19388:	3008      	adds	r0, #8
   1938a:	4b04      	ldr	r3, [pc, #16]	; (1939c <pin_has_trigger+0x14>)
   1938c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19390:	f010 001c 	ands.w	r0, r0, #28
   19394:	bf18      	it	ne
   19396:	2001      	movne	r0, #1
   19398:	4770      	bx	lr
   1939a:	bf00      	nop
   1939c:	2000c564 	.word	0x2000c564

000193a0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   193a0:	3008      	adds	r0, #8
   193a2:	4b03      	ldr	r3, [pc, #12]	; (193b0 <pin_is_output+0x10>)
   193a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   193a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   193ac:	4770      	bx	lr
   193ae:	bf00      	nop
   193b0:	2000c564 	.word	0x2000c564

000193b4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   193b4:	3008      	adds	r0, #8
   193b6:	4b02      	ldr	r3, [pc, #8]	; (193c0 <pin_te_get+0xc>)
   193b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   193bc:	0b40      	lsrs	r0, r0, #13
   193be:	4770      	bx	lr
   193c0:	2000c564 	.word	0x2000c564

000193c4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   193c4:	2200      	movs	r2, #0
   193c6:	e004      	b.n	193d2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   193c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   193cc:	4283      	cmp	r3, r0
   193ce:	d00f      	beq.n	193f0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   193d0:	3201      	adds	r2, #1
   193d2:	2a1f      	cmp	r2, #31
   193d4:	d80a      	bhi.n	193ec <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   193d6:	f102 0308 	add.w	r3, r2, #8
   193da:	4906      	ldr	r1, [pc, #24]	; (193f4 <handler_in_use+0x30>)
   193dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   193e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   193e4:	d0f0      	beq.n	193c8 <handler_in_use+0x4>
   193e6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   193ea:	e7ef      	b.n	193cc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   193ec:	2000      	movs	r0, #0
   193ee:	4770      	bx	lr
            return true;
   193f0:	2001      	movs	r0, #1
}
   193f2:	4770      	bx	lr
   193f4:	2000c564 	.word	0x2000c564

000193f8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   193f8:	2300      	movs	r3, #0
   193fa:	b113      	cbz	r3, 19402 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   193fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19400:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19402:	4a07      	ldr	r2, [pc, #28]	; (19420 <find_handler+0x28>)
   19404:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   19408:	4282      	cmp	r2, r0
   1940a:	d001      	beq.n	19410 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1940c:	3301      	adds	r3, #1
   1940e:	e7f4      	b.n	193fa <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19410:	4a03      	ldr	r2, [pc, #12]	; (19420 <find_handler+0x28>)
   19412:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   19416:	6852      	ldr	r2, [r2, #4]
   19418:	428a      	cmp	r2, r1
   1941a:	d1f7      	bne.n	1940c <find_handler+0x14>
            return i;
   1941c:	4618      	mov	r0, r3
   1941e:	4770      	bx	lr
   19420:	2000c564 	.word	0x2000c564

00019424 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19424:	3008      	adds	r0, #8
   19426:	4b06      	ldr	r3, [pc, #24]	; (19440 <channel_handler_get+0x1c>)
   19428:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1942c:	f410 7f80 	tst.w	r0, #256	; 0x100
   19430:	d004      	beq.n	1943c <channel_handler_get+0x18>
   19432:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   19436:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1943a:	4770      	bx	lr
        return NULL;
   1943c:	2000      	movs	r0, #0
}
   1943e:	4770      	bx	lr
   19440:	2000c564 	.word	0x2000c564

00019444 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19444:	b570      	push	{r4, r5, r6, lr}
   19446:	4604      	mov	r4, r0
   19448:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1944a:	f7ff ffeb 	bl	19424 <channel_handler_get>

    if (handler)
   1944e:	b120      	cbz	r0, 1945a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   19450:	6806      	ldr	r6, [r0, #0]
   19452:	6842      	ldr	r2, [r0, #4]
   19454:	4629      	mov	r1, r5
   19456:	4620      	mov	r0, r4
   19458:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1945a:	4b04      	ldr	r3, [pc, #16]	; (1946c <call_handler+0x28>)
   1945c:	689b      	ldr	r3, [r3, #8]
   1945e:	b123      	cbz	r3, 1946a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19460:	4a02      	ldr	r2, [pc, #8]	; (1946c <call_handler+0x28>)
   19462:	68d2      	ldr	r2, [r2, #12]
   19464:	4629      	mov	r1, r5
   19466:	4620      	mov	r0, r4
   19468:	4798      	blx	r3
    }
}
   1946a:	bd70      	pop	{r4, r5, r6, pc}
   1946c:	2000c564 	.word	0x2000c564

00019470 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   19470:	b570      	push	{r4, r5, r6, lr}
   19472:	4604      	mov	r4, r0
   19474:	460d      	mov	r5, r1
   19476:	4616      	mov	r6, r2
    if (is_level(trigger))
   19478:	4608      	mov	r0, r1
   1947a:	f009 fe30 	bl	230de <is_level>
   1947e:	b9a8      	cbnz	r0, 194ac <next_sense_cond_call_handler+0x3c>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19480:	2e02      	cmp	r6, #2
   19482:	d033      	beq.n	194ec <next_sense_cond_call_handler+0x7c>
   19484:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   19486:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1948a:	491e      	ldr	r1, [pc, #120]	; (19504 <next_sense_cond_call_handler+0x94>)
   1948c:	3380      	adds	r3, #128	; 0x80
   1948e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   19492:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1949a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1949e:	2d03      	cmp	r5, #3
   194a0:	d028      	beq.n	194f4 <next_sense_cond_call_handler+0x84>
   194a2:	2e02      	cmp	r6, #2
   194a4:	d024      	beq.n	194f0 <next_sense_cond_call_handler+0x80>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   194a6:	2e03      	cmp	r6, #3
   194a8:	d029      	beq.n	194fe <next_sense_cond_call_handler+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   194aa:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   194ac:	4629      	mov	r1, r5
   194ae:	4620      	mov	r0, r4
   194b0:	f7ff ffc8 	bl	19444 <call_handler>
    *p_pin = pin_number & 0x1F;
   194b4:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   194b8:	f104 0280 	add.w	r2, r4, #128	; 0x80
   194bc:	4b11      	ldr	r3, [pc, #68]	; (19504 <next_sense_cond_call_handler+0x94>)
   194be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   194c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   194c6:	429e      	cmp	r6, r3
   194c8:	d1ef      	bne.n	194aa <next_sense_cond_call_handler+0x3a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   194ca:	4b0e      	ldr	r3, [pc, #56]	; (19504 <next_sense_cond_call_handler+0x94>)
   194cc:	4614      	mov	r4, r2
   194ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
   194d2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   194d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   194da:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
   194de:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   194e2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   194e6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
   194ea:	e7de      	b.n	194aa <next_sense_cond_call_handler+0x3a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   194ec:	2003      	movs	r0, #3
   194ee:	e7ca      	b.n	19486 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   194f0:	2d01      	cmp	r5, #1
   194f2:	d1d8      	bne.n	194a6 <next_sense_cond_call_handler+0x36>
            call_handler(pin, trigger);
   194f4:	4629      	mov	r1, r5
   194f6:	4620      	mov	r0, r4
   194f8:	f7ff ffa4 	bl	19444 <call_handler>
}
   194fc:	e7d5      	b.n	194aa <next_sense_cond_call_handler+0x3a>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   194fe:	2d02      	cmp	r5, #2
   19500:	d1d3      	bne.n	194aa <next_sense_cond_call_handler+0x3a>
   19502:	e7f7      	b.n	194f4 <next_sense_cond_call_handler+0x84>
   19504:	40842500 	.word	0x40842500

00019508 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
   19508:	4684      	mov	ip, r0
   1950a:	2300      	movs	r3, #0
   1950c:	e005      	b.n	1951a <latch_pending_read_and_check+0x12>
        *p_masks = gpio_regs[i]->LATCH;
   1950e:	4a09      	ldr	r2, [pc, #36]	; (19534 <latch_pending_read_and_check+0x2c>)
   19510:	6a11      	ldr	r1, [r2, #32]
   19512:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
   19516:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   19518:	3301      	adds	r3, #1
   1951a:	2b00      	cmp	r3, #0
   1951c:	d0f7      	beq.n	1950e <latch_pending_read_and_check+0x6>
#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1951e:	2300      	movs	r3, #0
   19520:	b10b      	cbz	r3, 19526 <latch_pending_read_and_check+0x1e>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   19522:	2000      	movs	r0, #0
   19524:	4770      	bx	lr
        if (latch[port_idx])
   19526:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   1952a:	b90a      	cbnz	r2, 19530 <latch_pending_read_and_check+0x28>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1952c:	3301      	adds	r3, #1
   1952e:	e7f7      	b.n	19520 <latch_pending_read_and_check+0x18>
            return true;
   19530:	2001      	movs	r0, #1
}
   19532:	4770      	bx	lr
   19534:	40842500 	.word	0x40842500

00019538 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19538:	f100 0208 	add.w	r2, r0, #8
   1953c:	4b0e      	ldr	r3, [pc, #56]	; (19578 <release_handler+0x40>)
   1953e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19542:	f413 7f80 	tst.w	r3, #256	; 0x100
   19546:	d016      	beq.n	19576 <release_handler+0x3e>
{
   19548:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1954a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1954e:	4610      	mov	r0, r2
   19550:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19554:	4a08      	ldr	r2, [pc, #32]	; (19578 <release_handler+0x40>)
   19556:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1955a:	4620      	mov	r0, r4
   1955c:	f7ff ff32 	bl	193c4 <handler_in_use>
   19560:	b100      	cbz	r0, 19564 <release_handler+0x2c>
}
   19562:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   19564:	4804      	ldr	r0, [pc, #16]	; (19578 <release_handler+0x40>)
   19566:	2300      	movs	r3, #0
   19568:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1956c:	4621      	mov	r1, r4
   1956e:	3054      	adds	r0, #84	; 0x54
   19570:	f7ff fde2 	bl	19138 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   19574:	e7f5      	b.n	19562 <release_handler+0x2a>
   19576:	4770      	bx	lr
   19578:	2000c564 	.word	0x2000c564

0001957c <pin_handler_trigger_uninit>:
{
   1957c:	b510      	push	{r4, lr}
   1957e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   19580:	f7ff fef8 	bl	19374 <pin_in_use_by_te>
   19584:	b150      	cbz	r0, 1959c <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   19586:	4620      	mov	r0, r4
   19588:	f7ff ff14 	bl	193b4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1958c:	4b08      	ldr	r3, [pc, #32]	; (195b0 <pin_handler_trigger_uninit+0x34>)
   1958e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   19592:	2200      	movs	r2, #0
   19594:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   19598:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1959c:	4620      	mov	r0, r4
   1959e:	f7ff ffcb 	bl	19538 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   195a2:	3408      	adds	r4, #8
   195a4:	4b03      	ldr	r3, [pc, #12]	; (195b4 <pin_handler_trigger_uninit+0x38>)
   195a6:	2200      	movs	r2, #0
   195a8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   195ac:	bd10      	pop	{r4, pc}
   195ae:	bf00      	nop
   195b0:	40031000 	.word	0x40031000
   195b4:	2000c564 	.word	0x2000c564

000195b8 <pin_handler_set>:
{
   195b8:	b570      	push	{r4, r5, r6, lr}
   195ba:	b082      	sub	sp, #8
   195bc:	4606      	mov	r6, r0
   195be:	460c      	mov	r4, r1
   195c0:	4615      	mov	r5, r2
    release_handler(pin);
   195c2:	f7ff ffb9 	bl	19538 <release_handler>
    if (!handler)
   195c6:	b324      	cbz	r4, 19612 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   195c8:	4629      	mov	r1, r5
   195ca:	4620      	mov	r0, r4
   195cc:	f7ff ff14 	bl	193f8 <find_handler>
    if (handler_id < 0)
   195d0:	1e03      	subs	r3, r0, #0
   195d2:	db13      	blt.n	195fc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   195d4:	4a10      	ldr	r2, [pc, #64]	; (19618 <pin_handler_set+0x60>)
   195d6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   195da:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   195de:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   195e0:	025b      	lsls	r3, r3, #9
   195e2:	b29b      	uxth	r3, r3
   195e4:	f106 0008 	add.w	r0, r6, #8
   195e8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   195ec:	430b      	orrs	r3, r1
   195ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   195f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   195f6:	4809      	ldr	r0, [pc, #36]	; (1961c <pin_handler_set+0x64>)
}
   195f8:	b002      	add	sp, #8
   195fa:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   195fc:	f10d 0107 	add.w	r1, sp, #7
   19600:	4807      	ldr	r0, [pc, #28]	; (19620 <pin_handler_set+0x68>)
   19602:	f7ff fd7b 	bl	190fc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19606:	4b05      	ldr	r3, [pc, #20]	; (1961c <pin_handler_set+0x64>)
   19608:	4298      	cmp	r0, r3
   1960a:	d1f5      	bne.n	195f8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1960c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19610:	e7e0      	b.n	195d4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   19612:	4802      	ldr	r0, [pc, #8]	; (1961c <pin_handler_set+0x64>)
   19614:	e7f0      	b.n	195f8 <pin_handler_set+0x40>
   19616:	bf00      	nop
   19618:	2000c564 	.word	0x2000c564
   1961c:	0bad0000 	.word	0x0bad0000
   19620:	2000c5b8 	.word	0x2000c5b8

00019624 <port_event_handle>:

static void port_event_handle(void)
{
   19624:	b5f0      	push	{r4, r5, r6, r7, lr}
   19626:	b083      	sub	sp, #12
   19628:	2300      	movs	r3, #0
   1962a:	a801      	add	r0, sp, #4
   1962c:	e005      	b.n	1963a <port_event_handle+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   1962e:	4a22      	ldr	r2, [pc, #136]	; (196b8 <port_event_handle+0x94>)
   19630:	6a11      	ldr	r1, [r2, #32]
   19632:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   19636:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   19638:	3301      	adds	r3, #1
   1963a:	2b00      	cmp	r3, #0
   1963c:	d0f7      	beq.n	1962e <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1963e:	2500      	movs	r5, #0
   19640:	b38d      	cbz	r5, 196a6 <port_event_handle+0x82>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19642:	4b1e      	ldr	r3, [pc, #120]	; (196bc <port_event_handle+0x98>)
   19644:	2200      	movs	r2, #0
   19646:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1964a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1964e:	a801      	add	r0, sp, #4
   19650:	f7ff ff5a 	bl	19508 <latch_pending_read_and_check>
   19654:	2800      	cmp	r0, #0
   19656:	d1f2      	bne.n	1963e <port_event_handle+0x1a>
}
   19658:	b003      	add	sp, #12
   1965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1965c:	fa90 f0a0 	rbit	r0, r0
   19660:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   19664:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19668:	f100 0208 	add.w	r2, r0, #8
   1966c:	4b14      	ldr	r3, [pc, #80]	; (196c0 <port_event_handle+0x9c>)
   1966e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19672:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   19674:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   19678:	af01      	add	r7, sp, #4
   1967a:	2401      	movs	r4, #1
   1967c:	fa04 f203 	lsl.w	r2, r4, r3
   19680:	5dbb      	ldrb	r3, [r7, r6]
   19682:	ea23 0302 	bic.w	r3, r3, r2
   19686:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
   19688:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1968c:	4e0a      	ldr	r6, [pc, #40]	; (196b8 <port_event_handle+0x94>)
   1968e:	f107 0380 	add.w	r3, r7, #128	; 0x80
   19692:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   19696:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1969a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1969e:	f7ff fee7 	bl	19470 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   196a2:	40bc      	lsls	r4, r7
   196a4:	6234      	str	r4, [r6, #32]
            while (latch[i])
   196a6:	ab02      	add	r3, sp, #8
   196a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   196ac:	f853 0c04 	ldr.w	r0, [r3, #-4]
   196b0:	2800      	cmp	r0, #0
   196b2:	d1d3      	bne.n	1965c <port_event_handle+0x38>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   196b4:	3501      	adds	r5, #1
   196b6:	e7c3      	b.n	19640 <port_event_handle+0x1c>
   196b8:	40842500 	.word	0x40842500
   196bc:	40031000 	.word	0x40031000
   196c0:	2000c564 	.word	0x2000c564

000196c4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   196c4:	b538      	push	{r3, r4, r5, lr}
   196c6:	4604      	mov	r4, r0
    while (mask)
   196c8:	e018      	b.n	196fc <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   196ca:	fa94 f3a4 	rbit	r3, r4
   196ce:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   196d2:	2201      	movs	r2, #1
   196d4:	409a      	lsls	r2, r3
   196d6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   196da:	4a0a      	ldr	r2, [pc, #40]	; (19704 <gpiote_evt_handle+0x40>)
   196dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   196e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   196e4:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   196e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   196ec:	f3c0 4001 	ubfx	r0, r0, #16, #2
   196f0:	f009 fcf3 	bl	230da <gpiote_polarity_to_trigger>
   196f4:	4601      	mov	r1, r0
   196f6:	4628      	mov	r0, r5
   196f8:	f7ff fea4 	bl	19444 <call_handler>
    while (mask)
   196fc:	2c00      	cmp	r4, #0
   196fe:	d1e4      	bne.n	196ca <gpiote_evt_handle+0x6>
    }
}
   19700:	bd38      	pop	{r3, r4, r5, pc}
   19702:	bf00      	nop
   19704:	40031000 	.word	0x40031000

00019708 <nrfx_gpiote_input_configure>:
{
   19708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1970c:	4604      	mov	r4, r0
   1970e:	4615      	mov	r5, r2
   19710:	461e      	mov	r6, r3
    if (p_input_config)
   19712:	b351      	cbz	r1, 1976a <nrfx_gpiote_input_configure+0x62>
   19714:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   19716:	f009 fcca 	bl	230ae <pin_is_task_output>
   1971a:	2800      	cmp	r0, #0
   1971c:	f040 8095 	bne.w	1984a <nrfx_gpiote_input_configure+0x142>
    *p_pin = pin_number & 0x1F;
   19720:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19724:	f102 0180 	add.w	r1, r2, #128	; 0x80
   19728:	4b4c      	ldr	r3, [pc, #304]	; (1985c <nrfx_gpiote_input_configure+0x154>)
   1972a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1972e:	2f00      	cmp	r7, #0
   19730:	d03d      	beq.n	197ae <nrfx_gpiote_input_configure+0xa6>
   19732:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19734:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   19738:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1973c:	2f00      	cmp	r7, #0
   1973e:	d038      	beq.n	197b2 <nrfx_gpiote_input_configure+0xaa>
   19740:	7839      	ldrb	r1, [r7, #0]
   19742:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19744:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   19746:	3280      	adds	r2, #128	; 0x80
   19748:	4944      	ldr	r1, [pc, #272]	; (1985c <nrfx_gpiote_input_configure+0x154>)
   1974a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1974e:	4a44      	ldr	r2, [pc, #272]	; (19860 <nrfx_gpiote_input_configure+0x158>)
   19750:	f104 0108 	add.w	r1, r4, #8
   19754:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   19758:	f023 0302 	bic.w	r3, r3, #2
   1975c:	b29b      	uxth	r3, r3
   1975e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   19762:	f043 0301 	orr.w	r3, r3, #1
   19766:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1976a:	b1bd      	cbz	r5, 1979c <nrfx_gpiote_input_configure+0x94>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1976c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1976e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   19772:	4620      	mov	r0, r4
   19774:	f7ff fe14 	bl	193a0 <pin_is_output>
   19778:	b1e8      	cbz	r0, 197b6 <nrfx_gpiote_input_configure+0xae>
            if (use_evt)
   1977a:	f1b8 0f00 	cmp.w	r8, #0
   1977e:	d166      	bne.n	1984e <nrfx_gpiote_input_configure+0x146>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   19780:	4a37      	ldr	r2, [pc, #220]	; (19860 <nrfx_gpiote_input_configure+0x158>)
   19782:	f104 0108 	add.w	r1, r4, #8
   19786:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1978a:	f023 031c 	bic.w	r3, r3, #28
   1978e:	b29b      	uxth	r3, r3
   19790:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19794:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   19798:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1979c:	2e00      	cmp	r6, #0
   1979e:	d05a      	beq.n	19856 <nrfx_gpiote_input_configure+0x14e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   197a0:	6872      	ldr	r2, [r6, #4]
   197a2:	6831      	ldr	r1, [r6, #0]
   197a4:	4620      	mov	r0, r4
   197a6:	f7ff ff07 	bl	195b8 <pin_handler_set>
}
   197aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   197ae:	2100      	movs	r1, #0
   197b0:	e7c0      	b.n	19734 <nrfx_gpiote_input_configure+0x2c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   197b2:	2100      	movs	r1, #0
   197b4:	e7c6      	b.n	19744 <nrfx_gpiote_input_configure+0x3c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   197b6:	4a2a      	ldr	r2, [pc, #168]	; (19860 <nrfx_gpiote_input_configure+0x158>)
   197b8:	f104 0108 	add.w	r1, r4, #8
   197bc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   197c0:	f023 0320 	bic.w	r3, r3, #32
   197c4:	04db      	lsls	r3, r3, #19
   197c6:	0cdb      	lsrs	r3, r3, #19
   197c8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   197cc:	f1b8 0f00 	cmp.w	r8, #0
   197d0:	d0d6      	beq.n	19780 <nrfx_gpiote_input_configure+0x78>
                if (!edge)
   197d2:	2f03      	cmp	r7, #3
   197d4:	d83d      	bhi.n	19852 <nrfx_gpiote_input_configure+0x14a>
                uint8_t ch = *p_trigger_config->p_in_channel;
   197d6:	686b      	ldr	r3, [r5, #4]
   197d8:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   197da:	b947      	cbnz	r7, 197ee <nrfx_gpiote_input_configure+0xe6>
    p_reg->CONFIG[idx] = 0;
   197dc:	4b21      	ldr	r3, [pc, #132]	; (19864 <nrfx_gpiote_input_configure+0x15c>)
   197de:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   197e2:	2200      	movs	r2, #0
   197e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   197e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   197ec:	e7c8      	b.n	19780 <nrfx_gpiote_input_configure+0x78>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   197ee:	4638      	mov	r0, r7
   197f0:	f009 fc74 	bl	230dc <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   197f4:	4b1b      	ldr	r3, [pc, #108]	; (19864 <nrfx_gpiote_input_configure+0x15c>)
   197f6:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   197fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   197fe:	f021 0103 	bic.w	r1, r1, #3
   19802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19806:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1980a:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1980e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   19812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19816:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1981a:	0221      	lsls	r1, r4, #8
   1981c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   19820:	0400      	lsls	r0, r0, #16
   19822:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19826:	4301      	orrs	r1, r0
   19828:	ea4c 0101 	orr.w	r1, ip, r1
   1982c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19830:	036b      	lsls	r3, r5, #13
   19832:	b29b      	uxth	r3, r3
   19834:	4a0a      	ldr	r2, [pc, #40]	; (19860 <nrfx_gpiote_input_configure+0x158>)
   19836:	f104 0108 	add.w	r1, r4, #8
   1983a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   1983e:	4303      	orrs	r3, r0
   19840:	f043 0320 	orr.w	r3, r3, #32
   19844:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   19848:	e79a      	b.n	19780 <nrfx_gpiote_input_configure+0x78>
            return NRFX_ERROR_INVALID_PARAM;
   1984a:	4807      	ldr	r0, [pc, #28]	; (19868 <nrfx_gpiote_input_configure+0x160>)
   1984c:	e7ad      	b.n	197aa <nrfx_gpiote_input_configure+0xa2>
                return NRFX_ERROR_INVALID_PARAM;
   1984e:	4806      	ldr	r0, [pc, #24]	; (19868 <nrfx_gpiote_input_configure+0x160>)
   19850:	e7ab      	b.n	197aa <nrfx_gpiote_input_configure+0xa2>
                    return NRFX_ERROR_INVALID_PARAM;
   19852:	4805      	ldr	r0, [pc, #20]	; (19868 <nrfx_gpiote_input_configure+0x160>)
   19854:	e7a9      	b.n	197aa <nrfx_gpiote_input_configure+0xa2>
        err = NRFX_SUCCESS;
   19856:	4805      	ldr	r0, [pc, #20]	; (1986c <nrfx_gpiote_input_configure+0x164>)
   19858:	e7a7      	b.n	197aa <nrfx_gpiote_input_configure+0xa2>
   1985a:	bf00      	nop
   1985c:	40842500 	.word	0x40842500
   19860:	2000c564 	.word	0x2000c564
   19864:	40031000 	.word	0x40031000
   19868:	0bad0004 	.word	0x0bad0004
   1986c:	0bad0000 	.word	0x0bad0000

00019870 <nrfx_gpiote_output_configure>:
{
   19870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19872:	4604      	mov	r4, r0
   19874:	4616      	mov	r6, r2
    if (p_config)
   19876:	2900      	cmp	r1, #0
   19878:	d04a      	beq.n	19910 <nrfx_gpiote_output_configure+0xa0>
   1987a:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1987c:	f009 fc26 	bl	230cc <pin_is_input>
   19880:	b128      	cbz	r0, 1988e <nrfx_gpiote_output_configure+0x1e>
   19882:	4620      	mov	r0, r4
   19884:	f7ff fd76 	bl	19374 <pin_in_use_by_te>
   19888:	2800      	cmp	r0, #0
   1988a:	f040 8096 	bne.w	199ba <nrfx_gpiote_output_configure+0x14a>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1988e:	4620      	mov	r0, r4
   19890:	f7ff fd7a 	bl	19388 <pin_has_trigger>
   19894:	b118      	cbz	r0, 1989e <nrfx_gpiote_output_configure+0x2e>
   19896:	786b      	ldrb	r3, [r5, #1]
   19898:	2b01      	cmp	r3, #1
   1989a:	f000 8090 	beq.w	199be <nrfx_gpiote_output_configure+0x14e>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1989e:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
   198a0:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   198a4:	f102 0180 	add.w	r1, r2, #128	; 0x80
   198a8:	4b48      	ldr	r3, [pc, #288]	; (199cc <nrfx_gpiote_output_configure+0x15c>)
   198aa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   198ae:	1c6f      	adds	r7, r5, #1
   198b0:	d04c      	beq.n	1994c <nrfx_gpiote_output_configure+0xdc>
   198b2:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   198b4:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   198b8:	2800      	cmp	r0, #0
   198ba:	d049      	beq.n	19950 <nrfx_gpiote_output_configure+0xe0>
   198bc:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   198c0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   198c4:	2d00      	cmp	r5, #0
   198c6:	d046      	beq.n	19956 <nrfx_gpiote_output_configure+0xe6>
   198c8:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   198cc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   198d0:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   198d4:	2f00      	cmp	r7, #0
   198d6:	d041      	beq.n	1995c <nrfx_gpiote_output_configure+0xec>
   198d8:	786b      	ldrb	r3, [r5, #1]
   198da:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   198dc:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   198e0:	2800      	cmp	r0, #0
   198e2:	d03d      	beq.n	19960 <nrfx_gpiote_output_configure+0xf0>
   198e4:	78a8      	ldrb	r0, [r5, #2]
   198e6:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   198e8:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   198ea:	2d00      	cmp	r5, #0
   198ec:	d03a      	beq.n	19964 <nrfx_gpiote_output_configure+0xf4>
   198ee:	7828      	ldrb	r0, [r5, #0]
   198f0:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   198f2:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   198f4:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   198f6:	3280      	adds	r2, #128	; 0x80
   198f8:	4934      	ldr	r1, [pc, #208]	; (199cc <nrfx_gpiote_output_configure+0x15c>)
   198fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   198fe:	4a34      	ldr	r2, [pc, #208]	; (199d0 <nrfx_gpiote_output_configure+0x160>)
   19900:	f104 0108 	add.w	r1, r4, #8
   19904:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   19908:	f043 0303 	orr.w	r3, r3, #3
   1990c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   19910:	2e00      	cmp	r6, #0
   19912:	d056      	beq.n	199c2 <nrfx_gpiote_output_configure+0x152>
        if (pin_is_input(pin))
   19914:	4620      	mov	r0, r4
   19916:	f009 fbd9 	bl	230cc <pin_is_input>
   1991a:	2800      	cmp	r0, #0
   1991c:	d153      	bne.n	199c6 <nrfx_gpiote_output_configure+0x156>
        uint32_t ch = p_task_config->task_ch;
   1991e:	7833      	ldrb	r3, [r6, #0]
    p_reg->CONFIG[idx] = 0;
   19920:	4a2c      	ldr	r2, [pc, #176]	; (199d4 <nrfx_gpiote_output_configure+0x164>)
   19922:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   19926:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
   1992a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1992e:	4928      	ldr	r1, [pc, #160]	; (199d0 <nrfx_gpiote_output_configure+0x160>)
   19930:	f104 0008 	add.w	r0, r4, #8
   19934:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   19938:	f022 0220 	bic.w	r2, r2, #32
   1993c:	04d2      	lsls	r2, r2, #19
   1993e:	0cd2      	lsrs	r2, r2, #19
   19940:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19944:	7872      	ldrb	r2, [r6, #1]
   19946:	b97a      	cbnz	r2, 19968 <nrfx_gpiote_output_configure+0xf8>
    return NRFX_SUCCESS;
   19948:	4823      	ldr	r0, [pc, #140]	; (199d8 <nrfx_gpiote_output_configure+0x168>)
}
   1994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1994c:	2300      	movs	r3, #0
   1994e:	e7b1      	b.n	198b4 <nrfx_gpiote_output_configure+0x44>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19950:	f04f 0c00 	mov.w	ip, #0
   19954:	e7b4      	b.n	198c0 <nrfx_gpiote_output_configure+0x50>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19956:	f04f 0c00 	mov.w	ip, #0
   1995a:	e7b7      	b.n	198cc <nrfx_gpiote_output_configure+0x5c>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1995c:	2300      	movs	r3, #0
   1995e:	e7bd      	b.n	198dc <nrfx_gpiote_output_configure+0x6c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19960:	2000      	movs	r0, #0
   19962:	e7c1      	b.n	198e8 <nrfx_gpiote_output_configure+0x78>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   19964:	2000      	movs	r0, #0
   19966:	e7c4      	b.n	198f2 <nrfx_gpiote_output_configure+0x82>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19968:	78b7      	ldrb	r7, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1996a:	481a      	ldr	r0, [pc, #104]	; (199d4 <nrfx_gpiote_output_configure+0x164>)
   1996c:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   19970:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   19974:	f421 1198 	bic.w	r1, r1, #1245184	; 0x130000
   19978:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   1997c:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19980:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   19984:	0221      	lsls	r1, r4, #8
   19986:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1998a:	0412      	lsls	r2, r2, #16
   1998c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19990:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19992:	0539      	lsls	r1, r7, #20
   19994:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19998:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1999a:	4332      	orrs	r2, r6
   1999c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   199a0:	035b      	lsls	r3, r3, #13
   199a2:	b29b      	uxth	r3, r3
   199a4:	4a0a      	ldr	r2, [pc, #40]	; (199d0 <nrfx_gpiote_output_configure+0x160>)
   199a6:	3408      	adds	r4, #8
   199a8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   199ac:	430b      	orrs	r3, r1
   199ae:	f043 0320 	orr.w	r3, r3, #32
   199b2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   199b6:	4808      	ldr	r0, [pc, #32]	; (199d8 <nrfx_gpiote_output_configure+0x168>)
   199b8:	e7c7      	b.n	1994a <nrfx_gpiote_output_configure+0xda>
   199ba:	4808      	ldr	r0, [pc, #32]	; (199dc <nrfx_gpiote_output_configure+0x16c>)
   199bc:	e7c5      	b.n	1994a <nrfx_gpiote_output_configure+0xda>
   199be:	4807      	ldr	r0, [pc, #28]	; (199dc <nrfx_gpiote_output_configure+0x16c>)
   199c0:	e7c3      	b.n	1994a <nrfx_gpiote_output_configure+0xda>
   199c2:	4805      	ldr	r0, [pc, #20]	; (199d8 <nrfx_gpiote_output_configure+0x168>)
   199c4:	e7c1      	b.n	1994a <nrfx_gpiote_output_configure+0xda>
            return NRFX_ERROR_INVALID_PARAM;
   199c6:	4805      	ldr	r0, [pc, #20]	; (199dc <nrfx_gpiote_output_configure+0x16c>)
   199c8:	e7bf      	b.n	1994a <nrfx_gpiote_output_configure+0xda>
   199ca:	bf00      	nop
   199cc:	40842500 	.word	0x40842500
   199d0:	2000c564 	.word	0x2000c564
   199d4:	40031000 	.word	0x40031000
   199d8:	0bad0000 	.word	0x0bad0000
   199dc:	0bad0004 	.word	0x0bad0004

000199e0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   199e0:	4b01      	ldr	r3, [pc, #4]	; (199e8 <nrfx_gpiote_global_callback_set+0x8>)
   199e2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   199e4:	60d9      	str	r1, [r3, #12]
}
   199e6:	4770      	bx	lr
   199e8:	2000c564 	.word	0x2000c564

000199ec <nrfx_gpiote_channel_get>:
{
   199ec:	b538      	push	{r3, r4, r5, lr}
   199ee:	4604      	mov	r4, r0
   199f0:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   199f2:	f7ff fcbf 	bl	19374 <pin_in_use_by_te>
   199f6:	b140      	cbz	r0, 19a0a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   199f8:	f104 0008 	add.w	r0, r4, #8
   199fc:	4b04      	ldr	r3, [pc, #16]	; (19a10 <nrfx_gpiote_channel_get+0x24>)
   199fe:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   19a02:	0b5b      	lsrs	r3, r3, #13
   19a04:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   19a06:	4803      	ldr	r0, [pc, #12]	; (19a14 <nrfx_gpiote_channel_get+0x28>)
}
   19a08:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19a0a:	4803      	ldr	r0, [pc, #12]	; (19a18 <nrfx_gpiote_channel_get+0x2c>)
   19a0c:	e7fc      	b.n	19a08 <nrfx_gpiote_channel_get+0x1c>
   19a0e:	bf00      	nop
   19a10:	2000c564 	.word	0x2000c564
   19a14:	0bad0000 	.word	0x0bad0000
   19a18:	0bad0004 	.word	0x0bad0004

00019a1c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19a1c:	4b10      	ldr	r3, [pc, #64]	; (19a60 <nrfx_gpiote_init+0x44>)
   19a1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   19a22:	b10b      	cbz	r3, 19a28 <nrfx_gpiote_init+0xc>
        return err_code;
   19a24:	480f      	ldr	r0, [pc, #60]	; (19a64 <nrfx_gpiote_init+0x48>)
}
   19a26:	4770      	bx	lr
{
   19a28:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19a2a:	4c0d      	ldr	r4, [pc, #52]	; (19a60 <nrfx_gpiote_init+0x44>)
   19a2c:	2240      	movs	r2, #64	; 0x40
   19a2e:	2100      	movs	r1, #0
   19a30:	f104 0010 	add.w	r0, r4, #16
   19a34:	f00b f857 	bl	24ae6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19a38:	2031      	movs	r0, #49	; 0x31
   19a3a:	f7fa f951 	bl	13ce0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19a3e:	4b0a      	ldr	r3, [pc, #40]	; (19a68 <nrfx_gpiote_init+0x4c>)
   19a40:	2200      	movs	r2, #0
   19a42:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   19a46:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   19a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19a4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19a52:	2301      	movs	r3, #1
   19a54:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19a58:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   19a5a:	4804      	ldr	r0, [pc, #16]	; (19a6c <nrfx_gpiote_init+0x50>)
}
   19a5c:	bd10      	pop	{r4, pc}
   19a5e:	bf00      	nop
   19a60:	2000c564 	.word	0x2000c564
   19a64:	0bad0005 	.word	0x0bad0005
   19a68:	40031000 	.word	0x40031000
   19a6c:	0bad0000 	.word	0x0bad0000

00019a70 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19a70:	4b03      	ldr	r3, [pc, #12]	; (19a80 <nrfx_gpiote_is_init+0x10>)
   19a72:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   19a76:	3800      	subs	r0, #0
   19a78:	bf18      	it	ne
   19a7a:	2001      	movne	r0, #1
   19a7c:	4770      	bx	lr
   19a7e:	bf00      	nop
   19a80:	2000c564 	.word	0x2000c564

00019a84 <nrfx_gpiote_channel_free>:
{
   19a84:	b508      	push	{r3, lr}
   19a86:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   19a88:	4801      	ldr	r0, [pc, #4]	; (19a90 <nrfx_gpiote_channel_free+0xc>)
   19a8a:	f7ff fb55 	bl	19138 <nrfx_flag32_free>
}
   19a8e:	bd08      	pop	{r3, pc}
   19a90:	2000c5b4 	.word	0x2000c5b4

00019a94 <nrfx_gpiote_channel_alloc>:
{
   19a94:	b508      	push	{r3, lr}
   19a96:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19a98:	4801      	ldr	r0, [pc, #4]	; (19aa0 <nrfx_gpiote_channel_alloc+0xc>)
   19a9a:	f7ff fb2f 	bl	190fc <nrfx_flag32_alloc>
}
   19a9e:	bd08      	pop	{r3, pc}
   19aa0:	2000c5b4 	.word	0x2000c5b4

00019aa4 <nrfx_gpiote_trigger_enable>:
{
   19aa4:	b538      	push	{r3, r4, r5, lr}
   19aa6:	4604      	mov	r4, r0
   19aa8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19aaa:	f7ff fc63 	bl	19374 <pin_in_use_by_te>
   19aae:	b320      	cbz	r0, 19afa <nrfx_gpiote_trigger_enable+0x56>
   19ab0:	4620      	mov	r0, r4
   19ab2:	f009 fb0b 	bl	230cc <pin_is_input>
   19ab6:	b300      	cbz	r0, 19afa <nrfx_gpiote_trigger_enable+0x56>
        uint8_t ch = pin_te_get(pin);
   19ab8:	4620      	mov	r0, r4
   19aba:	f7ff fc7b 	bl	193b4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   19abe:	0083      	lsls	r3, r0, #2
   19ac0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   19ac4:	b29b      	uxth	r3, r3
   19ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19aca:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19ace:	2200      	movs	r2, #0
   19ad0:	601a      	str	r2, [r3, #0]
   19ad2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19ad4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19ad8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   19adc:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   19ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   19ae4:	f043 0301 	orr.w	r3, r3, #1
   19ae8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   19aec:	b345      	cbz	r5, 19b40 <nrfx_gpiote_trigger_enable+0x9c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19aee:	2301      	movs	r3, #1
   19af0:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   19af4:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   19af8:	e022      	b.n	19b40 <nrfx_gpiote_trigger_enable+0x9c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19afa:	f104 0308 	add.w	r3, r4, #8
   19afe:	4a13      	ldr	r2, [pc, #76]	; (19b4c <nrfx_gpiote_trigger_enable+0xa8>)
   19b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   19b04:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19b08:	2b04      	cmp	r3, #4
   19b0a:	d00c      	beq.n	19b26 <nrfx_gpiote_trigger_enable+0x82>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19b0c:	2b05      	cmp	r3, #5
   19b0e:	d018      	beq.n	19b42 <nrfx_gpiote_trigger_enable+0x9e>
    *p_pin = pin_number & 0x1F;
   19b10:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
   19b14:	4a0e      	ldr	r2, [pc, #56]	; (19b50 <nrfx_gpiote_trigger_enable+0xac>)
   19b16:	6912      	ldr	r2, [r2, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19b18:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19b1c:	f013 0f01 	tst.w	r3, #1
   19b20:	d011      	beq.n	19b46 <nrfx_gpiote_trigger_enable+0xa2>
   19b22:	2103      	movs	r1, #3
   19b24:	e000      	b.n	19b28 <nrfx_gpiote_trigger_enable+0x84>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   19b26:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
   19b28:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19b2c:	4a08      	ldr	r2, [pc, #32]	; (19b50 <nrfx_gpiote_trigger_enable+0xac>)
   19b2e:	3480      	adds	r4, #128	; 0x80
   19b30:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   19b34:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19b38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   19b3c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   19b40:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19b42:	2102      	movs	r1, #2
   19b44:	e7f0      	b.n	19b28 <nrfx_gpiote_trigger_enable+0x84>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19b46:	2102      	movs	r1, #2
   19b48:	e7ee      	b.n	19b28 <nrfx_gpiote_trigger_enable+0x84>
   19b4a:	bf00      	nop
   19b4c:	2000c564 	.word	0x2000c564
   19b50:	40842500 	.word	0x40842500

00019b54 <nrfx_gpiote_trigger_disable>:
{
   19b54:	b510      	push	{r4, lr}
   19b56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19b58:	f7ff fc0c 	bl	19374 <pin_in_use_by_te>
   19b5c:	b1a0      	cbz	r0, 19b88 <nrfx_gpiote_trigger_disable+0x34>
   19b5e:	4620      	mov	r0, r4
   19b60:	f009 fab4 	bl	230cc <pin_is_input>
   19b64:	b180      	cbz	r0, 19b88 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   19b66:	4620      	mov	r0, r4
   19b68:	f7ff fc24 	bl	193b4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   19b6c:	2201      	movs	r2, #1
   19b6e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   19b70:	4b0b      	ldr	r3, [pc, #44]	; (19ba0 <nrfx_gpiote_trigger_disable+0x4c>)
   19b72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19b76:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   19b7a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   19b7e:	f022 0203 	bic.w	r2, r2, #3
   19b82:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   19b86:	e009      	b.n	19b9c <nrfx_gpiote_trigger_disable+0x48>
    *p_pin = pin_number & 0x1F;
   19b88:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19b8c:	4a05      	ldr	r2, [pc, #20]	; (19ba4 <nrfx_gpiote_trigger_disable+0x50>)
   19b8e:	3480      	adds	r4, #128	; 0x80
   19b90:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
   19b94:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   19b98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
   19b9c:	bd10      	pop	{r4, pc}
   19b9e:	bf00      	nop
   19ba0:	40031000 	.word	0x40031000
   19ba4:	40842500 	.word	0x40842500

00019ba8 <nrfx_gpiote_pin_uninit>:
{
   19ba8:	b510      	push	{r4, lr}
   19baa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19bac:	f7ff fbd8 	bl	19360 <pin_in_use>
   19bb0:	b908      	cbnz	r0, 19bb6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   19bb2:	4808      	ldr	r0, [pc, #32]	; (19bd4 <nrfx_gpiote_pin_uninit+0x2c>)
}
   19bb4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   19bb6:	4620      	mov	r0, r4
   19bb8:	f7ff ffcc 	bl	19b54 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   19bbc:	4620      	mov	r0, r4
   19bbe:	f7ff fcdd 	bl	1957c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   19bc2:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   19bc6:	3480      	adds	r4, #128	; 0x80
   19bc8:	4b03      	ldr	r3, [pc, #12]	; (19bd8 <nrfx_gpiote_pin_uninit+0x30>)
   19bca:	2202      	movs	r2, #2
   19bcc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
   19bd0:	4802      	ldr	r0, [pc, #8]	; (19bdc <nrfx_gpiote_pin_uninit+0x34>)
   19bd2:	e7ef      	b.n	19bb4 <nrfx_gpiote_pin_uninit+0xc>
   19bd4:	0bad0004 	.word	0x0bad0004
   19bd8:	40842500 	.word	0x40842500
   19bdc:	0bad0000 	.word	0x0bad0000

00019be0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   19be0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19be2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   19be4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19be8:	2100      	movs	r1, #0
    uint32_t status = 0;
   19bea:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19bec:	e003      	b.n	19bf6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   19bee:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   19bf0:	3304      	adds	r3, #4
   19bf2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19bf4:	3101      	adds	r1, #1
   19bf6:	2907      	cmp	r1, #7
   19bf8:	d814      	bhi.n	19c24 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19bfa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   19bfe:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   19c02:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19c04:	2a00      	cmp	r2, #0
   19c06:	d0f2      	beq.n	19bee <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   19c08:	4a0c      	ldr	r2, [pc, #48]	; (19c3c <nrfx_gpiote_irq_handler+0x5c>)
   19c0a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19c0e:	4210      	tst	r0, r2
   19c10:	d0ed      	beq.n	19bee <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   19c12:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   19c16:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19c1a:	2500      	movs	r5, #0
   19c1c:	6015      	str	r5, [r2, #0]
   19c1e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   19c20:	4304      	orrs	r4, r0
   19c22:	e7e4      	b.n	19bee <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19c24:	4b05      	ldr	r3, [pc, #20]	; (19c3c <nrfx_gpiote_irq_handler+0x5c>)
   19c26:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19c2a:	b91b      	cbnz	r3, 19c34 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   19c2c:	4620      	mov	r0, r4
   19c2e:	f7ff fd49 	bl	196c4 <gpiote_evt_handle>
}
   19c32:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   19c34:	f7ff fcf6 	bl	19624 <port_event_handle>
   19c38:	e7f8      	b.n	19c2c <nrfx_gpiote_irq_handler+0x4c>
   19c3a:	bf00      	nop
   19c3c:	40031000 	.word	0x40031000

00019c40 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   19c40:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19c42:	4b08      	ldr	r3, [pc, #32]	; (19c64 <nrfx_ipc_init+0x24>)
   19c44:	791b      	ldrb	r3, [r3, #4]
   19c46:	b10b      	cbz	r3, 19c4c <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   19c48:	4807      	ldr	r0, [pc, #28]	; (19c68 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   19c4a:	bd38      	pop	{r3, r4, r5, pc}
   19c4c:	460d      	mov	r5, r1
   19c4e:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   19c50:	202a      	movs	r0, #42	; 0x2a
   19c52:	f7fa f845 	bl	13ce0 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19c56:	4b03      	ldr	r3, [pc, #12]	; (19c64 <nrfx_ipc_init+0x24>)
   19c58:	2201      	movs	r2, #1
   19c5a:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   19c5c:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   19c5e:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   19c60:	4802      	ldr	r0, [pc, #8]	; (19c6c <nrfx_ipc_init+0x2c>)
   19c62:	e7f2      	b.n	19c4a <nrfx_ipc_init+0xa>
   19c64:	2000d2b4 	.word	0x2000d2b4
   19c68:	0bad000c 	.word	0x0bad000c
   19c6c:	0bad0000 	.word	0x0bad0000

00019c70 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   19c70:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19c72:	2300      	movs	r3, #0
   19c74:	e008      	b.n	19c88 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   19c76:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   19c7a:	b2da      	uxtb	r2, r3
   19c7c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   19c80:	490d      	ldr	r1, [pc, #52]	; (19cb8 <nrfx_ipc_config_load+0x48>)
   19c82:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19c86:	3301      	adds	r3, #1
   19c88:	2b07      	cmp	r3, #7
   19c8a:	d9f4      	bls.n	19c76 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   19c8c:	2300      	movs	r3, #0
   19c8e:	e00a      	b.n	19ca6 <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   19c90:	f103 0208 	add.w	r2, r3, #8
   19c94:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   19c98:	b2da      	uxtb	r2, r3
   19c9a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   19c9e:	4906      	ldr	r1, [pc, #24]	; (19cb8 <nrfx_ipc_config_load+0x48>)
   19ca0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19ca4:	3301      	adds	r3, #1
   19ca6:	2b07      	cmp	r3, #7
   19ca8:	d9f2      	bls.n	19c90 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   19caa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   19cac:	4b02      	ldr	r3, [pc, #8]	; (19cb8 <nrfx_ipc_config_load+0x48>)
   19cae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19cb2:	bc10      	pop	{r4}
   19cb4:	4770      	bx	lr
   19cb6:	bf00      	nop
   19cb8:	4002a000 	.word	0x4002a000

00019cbc <nrfx_ipc_uninit>:
void nrfx_ipc_uninit(void)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   19cbc:	2300      	movs	r3, #0
   19cbe:	e007      	b.n	19cd0 <nrfx_ipc_uninit+0x14>
    p_reg->SEND_CNF[index] = channels_mask;
   19cc0:	b2da      	uxtb	r2, r3
   19cc2:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   19cc6:	490e      	ldr	r1, [pc, #56]	; (19d00 <nrfx_ipc_uninit+0x44>)
   19cc8:	2000      	movs	r0, #0
   19cca:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   19cce:	3301      	adds	r3, #1
   19cd0:	2b07      	cmp	r3, #7
   19cd2:	d9f5      	bls.n	19cc0 <nrfx_ipc_uninit+0x4>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   19cd4:	2300      	movs	r3, #0
   19cd6:	e007      	b.n	19ce8 <nrfx_ipc_uninit+0x2c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   19cd8:	b2da      	uxtb	r2, r3
   19cda:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   19cde:	4908      	ldr	r1, [pc, #32]	; (19d00 <nrfx_ipc_uninit+0x44>)
   19ce0:	2000      	movs	r0, #0
   19ce2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   19ce6:	3301      	adds	r3, #1
   19ce8:	2b07      	cmp	r3, #7
   19cea:	d9f5      	bls.n	19cd8 <nrfx_ipc_uninit+0x1c>
    p_reg->INTENCLR = mask;
   19cec:	4b04      	ldr	r3, [pc, #16]	; (19d00 <nrfx_ipc_uninit+0x44>)
   19cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19cf2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   19cf6:	4b03      	ldr	r3, [pc, #12]	; (19d04 <nrfx_ipc_uninit+0x48>)
   19cf8:	2200      	movs	r2, #0
   19cfa:	711a      	strb	r2, [r3, #4]
}
   19cfc:	4770      	bx	lr
   19cfe:	bf00      	nop
   19d00:	4002a000 	.word	0x4002a000
   19d04:	2000d2b4 	.word	0x2000d2b4

00019d08 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   19d08:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
   19d0a:	4b0c      	ldr	r3, [pc, #48]	; (19d3c <nrfx_ipc_irq_handler+0x34>)
   19d0c:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   19d10:	4602      	mov	r2, r0
    while (bitmask)
   19d12:	e00c      	b.n	19d2e <nrfx_ipc_irq_handler+0x26>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   19d14:	fa92 f3a2 	rbit	r3, r2
   19d18:	fab3 f383 	clz	r3, r3
   19d1c:	2101      	movs	r1, #1
   19d1e:	4099      	lsls	r1, r3
   19d20:	ea22 0201 	bic.w	r2, r2, r1
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   19d24:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d26:	4906      	ldr	r1, [pc, #24]	; (19d40 <nrfx_ipc_irq_handler+0x38>)
   19d28:	4419      	add	r1, r3
   19d2a:	2300      	movs	r3, #0
   19d2c:	600b      	str	r3, [r1, #0]
    while (bitmask)
   19d2e:	2a00      	cmp	r2, #0
   19d30:	d1f0      	bne.n	19d14 <nrfx_ipc_irq_handler+0xc>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   19d32:	4b04      	ldr	r3, [pc, #16]	; (19d44 <nrfx_ipc_irq_handler+0x3c>)
   19d34:	681a      	ldr	r2, [r3, #0]
   19d36:	6899      	ldr	r1, [r3, #8]
   19d38:	4790      	blx	r2
}
   19d3a:	bd08      	pop	{r3, pc}
   19d3c:	4002a000 	.word	0x4002a000
   19d40:	4002a100 	.word	0x4002a100
   19d44:	2000d2b4 	.word	0x2000d2b4

00019d48 <rpc_handle_data_message>:
   19d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d4c:	4680      	mov	r8, r0
   19d4e:	4604      	mov	r4, r0
   19d50:	2700      	movs	r7, #0
   19d52:	f858 6b08 	ldr.w	r6, [r8], #8
   19d56:	4d0c      	ldr	r5, [pc, #48]	; (19d88 <rpc_handle_data_message+0x40>)
   19d58:	b2f6      	uxtb	r6, r6
   19d5a:	782b      	ldrb	r3, [r5, #0]
   19d5c:	42b3      	cmp	r3, r6
   19d5e:	d00a      	beq.n	19d76 <rpc_handle_data_message+0x2e>
   19d60:	3701      	adds	r7, #1
   19d62:	2f04      	cmp	r7, #4
   19d64:	f105 050c 	add.w	r5, r5, #12
   19d68:	d1f7      	bne.n	19d5a <rpc_handle_data_message+0x12>
   19d6a:	68a0      	ldr	r0, [r4, #8]
   19d6c:	b150      	cbz	r0, 19d84 <rpc_handle_data_message+0x3c>
   19d6e:	f009 f9ff 	bl	23170 <rpc_transport_peer_data_free>
   19d72:	2000      	movs	r0, #0
   19d74:	e006      	b.n	19d84 <rpc_handle_data_message+0x3c>
   19d76:	6821      	ldr	r1, [r4, #0]
   19d78:	4640      	mov	r0, r8
   19d7a:	686b      	ldr	r3, [r5, #4]
   19d7c:	0c09      	lsrs	r1, r1, #16
   19d7e:	4798      	blx	r3
   19d80:	2802      	cmp	r0, #2
   19d82:	d0ed      	beq.n	19d60 <rpc_handle_data_message+0x18>
   19d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d88:	0002724c 	.word	0x0002724c

00019d8c <trace_write>:
   19d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d90:	4f53      	ldr	r7, [pc, #332]	; (19ee0 <trace_write+0x154>)
   19d92:	4605      	mov	r5, r0
   19d94:	2100      	movs	r1, #0
   19d96:	6838      	ldr	r0, [r7, #0]
   19d98:	f008 fa4e 	bl	22238 <nrf_modem_os_sem_take>
   19d9c:	4604      	mov	r4, r0
   19d9e:	2800      	cmp	r0, #0
   19da0:	d14c      	bne.n	19e3c <trace_write+0xb0>
   19da2:	782b      	ldrb	r3, [r5, #0]
   19da4:	f8d5 8008 	ldr.w	r8, [r5, #8]
   19da8:	2b62      	cmp	r3, #98	; 0x62
   19daa:	d043      	beq.n	19e34 <trace_write+0xa8>
   19dac:	2b63      	cmp	r3, #99	; 0x63
   19dae:	d043      	beq.n	19e38 <trace_write+0xac>
   19db0:	2b61      	cmp	r3, #97	; 0x61
   19db2:	d102      	bne.n	19dba <trace_write+0x2e>
   19db4:	4b4b      	ldr	r3, [pc, #300]	; (19ee4 <trace_write+0x158>)
   19db6:	881c      	ldrh	r4, [r3, #0]
   19db8:	b2a4      	uxth	r4, r4
   19dba:	6838      	ldr	r0, [r7, #0]
   19dbc:	f008 fa38 	bl	22230 <nrf_modem_os_sem_give>
   19dc0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   19dc4:	6929      	ldr	r1, [r5, #16]
   19dc6:	eba8 080a 	sub.w	r8, r8, sl
   19dca:	eba1 030a 	sub.w	r3, r1, sl
   19dce:	b29b      	uxth	r3, r3
   19dd0:	fa14 f488 	uxtah	r4, r4, r8
   19dd4:	fbb4 f2f3 	udiv	r2, r4, r3
   19dd8:	fb03 4412 	mls	r4, r3, r2, r4
   19ddc:	686a      	ldr	r2, [r5, #4]
   19dde:	eba2 020a 	sub.w	r2, r2, sl
   19de2:	fa13 f282 	uxtah	r2, r3, r2
   19de6:	1b12      	subs	r2, r2, r4
   19de8:	fb92 f0f3 	sdiv	r0, r2, r3
   19dec:	fb03 2210 	mls	r2, r3, r0, r2
   19df0:	fa1f f982 	uxth.w	r9, r2
   19df4:	fa14 f282 	uxtah	r2, r4, r2
   19df8:	4293      	cmp	r3, r2
   19dfa:	44a2      	add	sl, r4
   19dfc:	da22      	bge.n	19e44 <trace_write+0xb8>
   19dfe:	eba1 030a 	sub.w	r3, r1, sl
   19e02:	b29b      	uxth	r3, r3
   19e04:	eba9 0403 	sub.w	r4, r9, r3
   19e08:	4699      	mov	r9, r3
   19e0a:	b2a4      	uxth	r4, r4
   19e0c:	f1b9 0f00 	cmp.w	r9, #0
   19e10:	d064      	beq.n	19edc <trace_write+0x150>
   19e12:	2005      	movs	r0, #5
   19e14:	f7fc f8dc 	bl	15fd0 <nrf_modem_os_alloc>
   19e18:	4680      	mov	r8, r0
   19e1a:	2800      	cmp	r0, #0
   19e1c:	d05e      	beq.n	19edc <trace_write+0x150>
   19e1e:	b19c      	cbz	r4, 19e48 <trace_write+0xbc>
   19e20:	2005      	movs	r0, #5
   19e22:	f7fc f8d5 	bl	15fd0 <nrf_modem_os_alloc>
   19e26:	4606      	mov	r6, r0
   19e28:	b970      	cbnz	r0, 19e48 <trace_write+0xbc>
   19e2a:	4640      	mov	r0, r8
   19e2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e30:	f7fc b8d8 	b.w	15fe4 <nrf_modem_os_free>
   19e34:	4b2c      	ldr	r3, [pc, #176]	; (19ee8 <trace_write+0x15c>)
   19e36:	e7be      	b.n	19db6 <trace_write+0x2a>
   19e38:	4b2c      	ldr	r3, [pc, #176]	; (19eec <trace_write+0x160>)
   19e3a:	e7bc      	b.n	19db6 <trace_write+0x2a>
   19e3c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e40:	f7fc b8b6 	b.w	15fb0 <nrf_modem_os_trace_irq_set>
   19e44:	2400      	movs	r4, #0
   19e46:	e7e1      	b.n	19e0c <trace_write+0x80>
   19e48:	2100      	movs	r1, #0
   19e4a:	6838      	ldr	r0, [r7, #0]
   19e4c:	f008 f9f4 	bl	22238 <nrf_modem_os_sem_take>
   19e50:	b140      	cbz	r0, 19e64 <trace_write+0xd8>
   19e52:	f7fc f8ad 	bl	15fb0 <nrf_modem_os_trace_irq_set>
   19e56:	4640      	mov	r0, r8
   19e58:	f7fc f8c4 	bl	15fe4 <nrf_modem_os_free>
   19e5c:	2c00      	cmp	r4, #0
   19e5e:	d03d      	beq.n	19edc <trace_write+0x150>
   19e60:	4630      	mov	r0, r6
   19e62:	e7e3      	b.n	19e2c <trace_write+0xa0>
   19e64:	782b      	ldrb	r3, [r5, #0]
   19e66:	2b62      	cmp	r3, #98	; 0x62
   19e68:	d034      	beq.n	19ed4 <trace_write+0x148>
   19e6a:	2b63      	cmp	r3, #99	; 0x63
   19e6c:	d034      	beq.n	19ed8 <trace_write+0x14c>
   19e6e:	2b61      	cmp	r3, #97	; 0x61
   19e70:	d107      	bne.n	19e82 <trace_write+0xf6>
   19e72:	4a1c      	ldr	r2, [pc, #112]	; (19ee4 <trace_write+0x158>)
   19e74:	8813      	ldrh	r3, [r2, #0]
   19e76:	eb04 0109 	add.w	r1, r4, r9
   19e7a:	fa11 f383 	uxtah	r3, r1, r3
   19e7e:	b29b      	uxth	r3, r3
   19e80:	8013      	strh	r3, [r2, #0]
   19e82:	6838      	ldr	r0, [r7, #0]
   19e84:	f06f 0b10 	mvn.w	fp, #16
   19e88:	f06f 0741 	mvn.w	r7, #65	; 0x41
   19e8c:	f008 f9d0 	bl	22230 <nrf_modem_os_sem_give>
   19e90:	f888 b000 	strb.w	fp, [r8]
   19e94:	f888 7001 	strb.w	r7, [r8, #1]
   19e98:	782b      	ldrb	r3, [r5, #0]
   19e9a:	2105      	movs	r1, #5
   19e9c:	4640      	mov	r0, r8
   19e9e:	f888 3004 	strb.w	r3, [r8, #4]
   19ea2:	f8a8 9002 	strh.w	r9, [r8, #2]
   19ea6:	f008 f9f8 	bl	2229a <nrf_modem_os_trace_put>
   19eaa:	4649      	mov	r1, r9
   19eac:	4650      	mov	r0, sl
   19eae:	f008 f9f4 	bl	2229a <nrf_modem_os_trace_put>
   19eb2:	b19c      	cbz	r4, 19edc <trace_write+0x150>
   19eb4:	f886 b000 	strb.w	fp, [r6]
   19eb8:	7077      	strb	r7, [r6, #1]
   19eba:	782b      	ldrb	r3, [r5, #0]
   19ebc:	2105      	movs	r1, #5
   19ebe:	4630      	mov	r0, r6
   19ec0:	7133      	strb	r3, [r6, #4]
   19ec2:	8074      	strh	r4, [r6, #2]
   19ec4:	f008 f9e9 	bl	2229a <nrf_modem_os_trace_put>
   19ec8:	4621      	mov	r1, r4
   19eca:	68e8      	ldr	r0, [r5, #12]
   19ecc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ed0:	f008 b9e3 	b.w	2229a <nrf_modem_os_trace_put>
   19ed4:	4a04      	ldr	r2, [pc, #16]	; (19ee8 <trace_write+0x15c>)
   19ed6:	e7cd      	b.n	19e74 <trace_write+0xe8>
   19ed8:	4a04      	ldr	r2, [pc, #16]	; (19eec <trace_write+0x160>)
   19eda:	e7cb      	b.n	19e74 <trace_write+0xe8>
   19edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee0:	2000d2d0 	.word	0x2000d2d0
   19ee4:	2000d560 	.word	0x2000d560
   19ee8:	2000d55c 	.word	0x2000d55c
   19eec:	2000d55e 	.word	0x2000d55e

00019ef0 <ipc_trace_init>:
   19ef0:	2300      	movs	r3, #0
   19ef2:	4a08      	ldr	r2, [pc, #32]	; (19f14 <ipc_trace_init+0x24>)
   19ef4:	b510      	push	{r4, lr}
   19ef6:	8013      	strh	r3, [r2, #0]
   19ef8:	4a07      	ldr	r2, [pc, #28]	; (19f18 <ipc_trace_init+0x28>)
   19efa:	4604      	mov	r4, r0
   19efc:	8013      	strh	r3, [r2, #0]
   19efe:	4a07      	ldr	r2, [pc, #28]	; (19f1c <ipc_trace_init+0x2c>)
   19f00:	4807      	ldr	r0, [pc, #28]	; (19f20 <ipc_trace_init+0x30>)
   19f02:	8013      	strh	r3, [r2, #0]
   19f04:	2201      	movs	r2, #1
   19f06:	4611      	mov	r1, r2
   19f08:	f7fc f824 	bl	15f54 <nrf_modem_os_sem_init>
   19f0c:	4b05      	ldr	r3, [pc, #20]	; (19f24 <ipc_trace_init+0x34>)
   19f0e:	601c      	str	r4, [r3, #0]
   19f10:	bd10      	pop	{r4, pc}
   19f12:	bf00      	nop
   19f14:	2000d560 	.word	0x2000d560
   19f18:	2000d55c 	.word	0x2000d55c
   19f1c:	2000d55e 	.word	0x2000d55e
   19f20:	2000d2d0 	.word	0x2000d2d0
   19f24:	2000d2cc 	.word	0x2000d2cc

00019f28 <nrf_modem_trace_irq_handler>:
   19f28:	b508      	push	{r3, lr}
   19f2a:	4b10      	ldr	r3, [pc, #64]	; (19f6c <nrf_modem_trace_irq_handler+0x44>)
   19f2c:	781b      	ldrb	r3, [r3, #0]
   19f2e:	b90b      	cbnz	r3, 19f34 <nrf_modem_trace_irq_handler+0xc>
   19f30:	f7fc f846 	bl	15fc0 <nrf_modem_os_trace_irq_clear>
   19f34:	4b0e      	ldr	r3, [pc, #56]	; (19f70 <nrf_modem_trace_irq_handler+0x48>)
   19f36:	6818      	ldr	r0, [r3, #0]
   19f38:	6842      	ldr	r2, [r0, #4]
   19f3a:	6883      	ldr	r3, [r0, #8]
   19f3c:	429a      	cmp	r2, r3
   19f3e:	d001      	beq.n	19f44 <nrf_modem_trace_irq_handler+0x1c>
   19f40:	f7ff ff24 	bl	19d8c <trace_write>
   19f44:	4b0b      	ldr	r3, [pc, #44]	; (19f74 <nrf_modem_trace_irq_handler+0x4c>)
   19f46:	6818      	ldr	r0, [r3, #0]
   19f48:	6882      	ldr	r2, [r0, #8]
   19f4a:	6843      	ldr	r3, [r0, #4]
   19f4c:	429a      	cmp	r2, r3
   19f4e:	d001      	beq.n	19f54 <nrf_modem_trace_irq_handler+0x2c>
   19f50:	f7ff ff1c 	bl	19d8c <trace_write>
   19f54:	4b08      	ldr	r3, [pc, #32]	; (19f78 <nrf_modem_trace_irq_handler+0x50>)
   19f56:	6818      	ldr	r0, [r3, #0]
   19f58:	6882      	ldr	r2, [r0, #8]
   19f5a:	6843      	ldr	r3, [r0, #4]
   19f5c:	429a      	cmp	r2, r3
   19f5e:	d003      	beq.n	19f68 <nrf_modem_trace_irq_handler+0x40>
   19f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19f64:	f7ff bf12 	b.w	19d8c <trace_write>
   19f68:	bd08      	pop	{r3, pc}
   19f6a:	bf00      	nop
   19f6c:	2000d57b 	.word	0x2000d57b
   19f70:	2000d2c8 	.word	0x2000d2c8
   19f74:	2000d2c0 	.word	0x2000d2c0
   19f78:	2000d2c4 	.word	0x2000d2c4

00019f7c <ipc_trace_handle>:
   19f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f80:	4b43      	ldr	r3, [pc, #268]	; (1a090 <ipc_trace_handle+0x114>)
   19f82:	681b      	ldr	r3, [r3, #0]
   19f84:	6919      	ldr	r1, [r3, #16]
   19f86:	f8d3 a014 	ldr.w	sl, [r3, #20]
   19f8a:	7c1a      	ldrb	r2, [r3, #16]
   19f8c:	2200      	movs	r2, #0
   19f8e:	741a      	strb	r2, [r3, #16]
   19f90:	7c58      	ldrb	r0, [r3, #17]
   19f92:	745a      	strb	r2, [r3, #17]
   19f94:	7c98      	ldrb	r0, [r3, #18]
   19f96:	749a      	strb	r2, [r3, #18]
   19f98:	7cd8      	ldrb	r0, [r3, #19]
   19f9a:	74da      	strb	r2, [r3, #19]
   19f9c:	7d18      	ldrb	r0, [r3, #20]
   19f9e:	751a      	strb	r2, [r3, #20]
   19fa0:	7d58      	ldrb	r0, [r3, #21]
   19fa2:	755a      	strb	r2, [r3, #21]
   19fa4:	7d98      	ldrb	r0, [r3, #22]
   19fa6:	759a      	strb	r2, [r3, #22]
   19fa8:	7dd8      	ldrb	r0, [r3, #23]
   19faa:	75da      	strb	r2, [r3, #23]
   19fac:	2900      	cmp	r1, #0
   19fae:	d033      	beq.n	1a018 <ipc_trace_handle+0x9c>
   19fb0:	3901      	subs	r1, #1
   19fb2:	2903      	cmp	r1, #3
   19fb4:	d830      	bhi.n	1a018 <ipc_trace_handle+0x9c>
   19fb6:	e8df f001 	tbb	[pc, r1]
   19fba:	6502      	.short	0x6502
   19fbc:	534c      	.short	0x534c
   19fbe:	4a35      	ldr	r2, [pc, #212]	; (1a094 <ipc_trace_handle+0x118>)
   19fc0:	7811      	ldrb	r1, [r2, #0]
   19fc2:	b109      	cbz	r1, 19fc8 <ipc_trace_handle+0x4c>
   19fc4:	2100      	movs	r1, #0
   19fc6:	7011      	strb	r1, [r2, #0]
   19fc8:	2200      	movs	r2, #0
   19fca:	4691      	mov	r9, r2
   19fcc:	4617      	mov	r7, r2
   19fce:	4614      	mov	r4, r2
   19fd0:	4d31      	ldr	r5, [pc, #196]	; (1a098 <ipc_trace_handle+0x11c>)
   19fd2:	4932      	ldr	r1, [pc, #200]	; (1a09c <ipc_trace_handle+0x120>)
   19fd4:	4832      	ldr	r0, [pc, #200]	; (1a0a0 <ipc_trace_handle+0x124>)
   19fd6:	f8d5 e000 	ldr.w	lr, [r5]
   19fda:	f8d1 8000 	ldr.w	r8, [r1]
   19fde:	6806      	ldr	r6, [r0, #0]
   19fe0:	f8da b008 	ldr.w	fp, [sl, #8]
   19fe4:	9501      	str	r5, [sp, #4]
   19fe6:	45a3      	cmp	fp, r4
   19fe8:	d119      	bne.n	1a01e <ipc_trace_handle+0xa2>
   19fea:	b107      	cbz	r7, 19fee <ipc_trace_handle+0x72>
   19fec:	6006      	str	r6, [r0, #0]
   19fee:	f1b9 0f00 	cmp.w	r9, #0
   19ff2:	d001      	beq.n	19ff8 <ipc_trace_handle+0x7c>
   19ff4:	f8c1 8000 	str.w	r8, [r1]
   19ff8:	b112      	cbz	r2, 1a000 <ipc_trace_handle+0x84>
   19ffa:	9a01      	ldr	r2, [sp, #4]
   19ffc:	f8c2 e000 	str.w	lr, [r2]
   1a000:	7a1a      	ldrb	r2, [r3, #8]
   1a002:	2101      	movs	r1, #1
   1a004:	2200      	movs	r2, #0
   1a006:	7219      	strb	r1, [r3, #8]
   1a008:	7a59      	ldrb	r1, [r3, #9]
   1a00a:	725a      	strb	r2, [r3, #9]
   1a00c:	7a99      	ldrb	r1, [r3, #10]
   1a00e:	729a      	strb	r2, [r3, #10]
   1a010:	7ada      	ldrb	r2, [r3, #11]
   1a012:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1a016:	72da      	strb	r2, [r3, #11]
   1a018:	b003      	add	sp, #12
   1a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a01e:	1ca5      	adds	r5, r4, #2
   1a020:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   1a024:	686d      	ldr	r5, [r5, #4]
   1a026:	f895 c000 	ldrb.w	ip, [r5]
   1a02a:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   1a02e:	d009      	beq.n	1a044 <ipc_trace_handle+0xc8>
   1a030:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   1a034:	d00a      	beq.n	1a04c <ipc_trace_handle+0xd0>
   1a036:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   1a03a:	bf04      	itt	eq
   1a03c:	462e      	moveq	r6, r5
   1a03e:	2701      	moveq	r7, #1
   1a040:	3401      	adds	r4, #1
   1a042:	e7d0      	b.n	19fe6 <ipc_trace_handle+0x6a>
   1a044:	46a8      	mov	r8, r5
   1a046:	f04f 0901 	mov.w	r9, #1
   1a04a:	e7f9      	b.n	1a040 <ipc_trace_handle+0xc4>
   1a04c:	46ae      	mov	lr, r5
   1a04e:	2201      	movs	r2, #1
   1a050:	e7f6      	b.n	1a040 <ipc_trace_handle+0xc4>
   1a052:	2101      	movs	r1, #1
   1a054:	4a0f      	ldr	r2, [pc, #60]	; (1a094 <ipc_trace_handle+0x118>)
   1a056:	7011      	strb	r1, [r2, #0]
   1a058:	7a1a      	ldrb	r2, [r3, #8]
   1a05a:	2103      	movs	r1, #3
   1a05c:	2200      	movs	r2, #0
   1a05e:	e7d2      	b.n	1a006 <ipc_trace_handle+0x8a>
   1a060:	7a19      	ldrb	r1, [r3, #8]
   1a062:	2104      	movs	r1, #4
   1a064:	7219      	strb	r1, [r3, #8]
   1a066:	7a59      	ldrb	r1, [r3, #9]
   1a068:	725a      	strb	r2, [r3, #9]
   1a06a:	7a99      	ldrb	r1, [r3, #10]
   1a06c:	729a      	strb	r2, [r3, #10]
   1a06e:	7ad9      	ldrb	r1, [r3, #11]
   1a070:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a074:	72d9      	strb	r1, [r3, #11]
   1a076:	4b07      	ldr	r3, [pc, #28]	; (1a094 <ipc_trace_handle+0x118>)
   1a078:	701a      	strb	r2, [r3, #0]
   1a07a:	b003      	add	sp, #12
   1a07c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a080:	f7ff bf52 	b.w	19f28 <nrf_modem_trace_irq_handler>
   1a084:	b003      	add	sp, #12
   1a086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a08a:	f7fb bf91 	b.w	15fb0 <nrf_modem_os_trace_irq_set>
   1a08e:	bf00      	nop
   1a090:	2000d2cc 	.word	0x2000d2cc
   1a094:	2000d57b 	.word	0x2000d57b
   1a098:	2000d2c4 	.word	0x2000d2c4
   1a09c:	2000d2c0 	.word	0x2000d2c0
   1a0a0:	2000d2c8 	.word	0x2000d2c8

0001a0a4 <rpc_trace_coredump_in_progress>:
   1a0a4:	4b01      	ldr	r3, [pc, #4]	; (1a0ac <rpc_trace_coredump_in_progress+0x8>)
   1a0a6:	7818      	ldrb	r0, [r3, #0]
   1a0a8:	4770      	bx	lr
   1a0aa:	bf00      	nop
   1a0ac:	2000d57b 	.word	0x2000d57b

0001a0b0 <handle_modem_rpc_msg>:
   1a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0b4:	4606      	mov	r6, r0
   1a0b6:	460f      	mov	r7, r1
   1a0b8:	2500      	movs	r5, #0
   1a0ba:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1a130 <handle_modem_rpc_msg+0x80>
   1a0be:	6833      	ldr	r3, [r6, #0]
   1a0c0:	42ab      	cmp	r3, r5
   1a0c2:	d801      	bhi.n	1a0c8 <handle_modem_rpc_msg+0x18>
   1a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a0c8:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   1a0cc:	68a3      	ldr	r3, [r4, #8]
   1a0ce:	b1fb      	cbz	r3, 1a110 <handle_modem_rpc_msg+0x60>
   1a0d0:	6863      	ldr	r3, [r4, #4]
   1a0d2:	b2db      	uxtb	r3, r3
   1a0d4:	2b01      	cmp	r3, #1
   1a0d6:	d11b      	bne.n	1a110 <handle_modem_rpc_msg+0x60>
   1a0d8:	6862      	ldr	r2, [r4, #4]
   1a0da:	f8b8 3000 	ldrh.w	r3, [r8]
   1a0de:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1a0e2:	d115      	bne.n	1a110 <handle_modem_rpc_msg+0x60>
   1a0e4:	2f02      	cmp	r7, #2
   1a0e6:	68a0      	ldr	r0, [r4, #8]
   1a0e8:	d114      	bne.n	1a114 <handle_modem_rpc_msg+0x64>
   1a0ea:	f7ff fe2d 	bl	19d48 <rpc_handle_data_message>
   1a0ee:	2802      	cmp	r0, #2
   1a0f0:	d00e      	beq.n	1a110 <handle_modem_rpc_msg+0x60>
   1a0f2:	2801      	cmp	r0, #1
   1a0f4:	d113      	bne.n	1a11e <handle_modem_rpc_msg+0x6e>
   1a0f6:	6863      	ldr	r3, [r4, #4]
   1a0f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a0fc:	f043 0302 	orr.w	r3, r3, #2
   1a100:	6063      	str	r3, [r4, #4]
   1a102:	f8b8 3000 	ldrh.w	r3, [r8]
   1a106:	3301      	adds	r3, #1
   1a108:	f8a8 3000 	strh.w	r3, [r8]
   1a10c:	f7fb ff40 	bl	15f90 <nrf_modem_os_application_irq_set>
   1a110:	3501      	adds	r5, #1
   1a112:	e7d4      	b.n	1a0be <handle_modem_rpc_msg+0xe>
   1a114:	6801      	ldr	r1, [r0, #0]
   1a116:	0c09      	lsrs	r1, r1, #16
   1a118:	f008 ffe6 	bl	230e8 <rpc_handle_ctrl_message>
   1a11c:	e7e7      	b.n	1a0ee <handle_modem_rpc_msg+0x3e>
   1a11e:	2800      	cmp	r0, #0
   1a120:	d1ef      	bne.n	1a102 <handle_modem_rpc_msg+0x52>
   1a122:	6863      	ldr	r3, [r4, #4]
   1a124:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a128:	f043 0303 	orr.w	r3, r3, #3
   1a12c:	e7e8      	b.n	1a100 <handle_modem_rpc_msg+0x50>
   1a12e:	bf00      	nop
   1a130:	2000d562 	.word	0x2000d562

0001a134 <rpc_transport_ipc_msg_alloc>:
   1a134:	b570      	push	{r4, r5, r6, lr}
   1a136:	4616      	mov	r6, r2
   1a138:	2400      	movs	r4, #0
   1a13a:	6803      	ldr	r3, [r0, #0]
   1a13c:	42a3      	cmp	r3, r4
   1a13e:	d101      	bne.n	1a144 <rpc_transport_ipc_msg_alloc+0x10>
   1a140:	2300      	movs	r3, #0
   1a142:	e01c      	b.n	1a17e <rpc_transport_ipc_msg_alloc+0x4a>
   1a144:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   1a148:	6855      	ldr	r5, [r2, #4]
   1a14a:	b2ed      	uxtb	r5, r5
   1a14c:	2d03      	cmp	r5, #3
   1a14e:	d118      	bne.n	1a182 <rpc_transport_ipc_msg_alloc+0x4e>
   1a150:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   1a154:	6093      	str	r3, [r2, #8]
   1a156:	6851      	ldr	r1, [r2, #4]
   1a158:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1a15c:	6051      	str	r1, [r2, #4]
   1a15e:	490c      	ldr	r1, [pc, #48]	; (1a190 <rpc_transport_ipc_msg_alloc+0x5c>)
   1a160:	8808      	ldrh	r0, [r1, #0]
   1a162:	1c44      	adds	r4, r0, #1
   1a164:	800c      	strh	r4, [r1, #0]
   1a166:	6851      	ldr	r1, [r2, #4]
   1a168:	b289      	uxth	r1, r1
   1a16a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1a16e:	6051      	str	r1, [r2, #4]
   1a170:	4618      	mov	r0, r3
   1a172:	2240      	movs	r2, #64	; 0x40
   1a174:	2100      	movs	r1, #0
   1a176:	f00a fcb6 	bl	24ae6 <memset>
   1a17a:	4603      	mov	r3, r0
   1a17c:	6046      	str	r6, [r0, #4]
   1a17e:	4618      	mov	r0, r3
   1a180:	bd70      	pop	{r4, r5, r6, pc}
   1a182:	b915      	cbnz	r5, 1a18a <rpc_transport_ipc_msg_alloc+0x56>
   1a184:	6895      	ldr	r5, [r2, #8]
   1a186:	2d00      	cmp	r5, #0
   1a188:	d0e2      	beq.n	1a150 <rpc_transport_ipc_msg_alloc+0x1c>
   1a18a:	3401      	adds	r4, #1
   1a18c:	e7d6      	b.n	1a13c <rpc_transport_ipc_msg_alloc+0x8>
   1a18e:	bf00      	nop
   1a190:	2000d564 	.word	0x2000d564

0001a194 <rpc_transport_ipc_data_msg_send>:
   1a194:	b508      	push	{r3, lr}
   1a196:	4b0b      	ldr	r3, [pc, #44]	; (1a1c4 <rpc_transport_ipc_data_msg_send+0x30>)
   1a198:	681b      	ldr	r3, [r3, #0]
   1a19a:	1ac0      	subs	r0, r0, r3
   1a19c:	4b0a      	ldr	r3, [pc, #40]	; (1a1c8 <rpc_transport_ipc_data_msg_send+0x34>)
   1a19e:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1a1a2:	681b      	ldr	r3, [r3, #0]
   1a1a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a1a8:	6843      	ldr	r3, [r0, #4]
   1a1aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a1ae:	f043 0301 	orr.w	r3, r3, #1
   1a1b2:	6043      	str	r3, [r0, #4]
   1a1b4:	2003      	movs	r0, #3
   1a1b6:	f007 ffa4 	bl	22102 <nrf_modem_os_busywait>
   1a1ba:	2201      	movs	r2, #1
   1a1bc:	4b03      	ldr	r3, [pc, #12]	; (1a1cc <rpc_transport_ipc_data_msg_send+0x38>)
   1a1be:	601a      	str	r2, [r3, #0]
   1a1c0:	bd08      	pop	{r3, pc}
   1a1c2:	bf00      	nop
   1a1c4:	2000d2ec 	.word	0x2000d2ec
   1a1c8:	2000d2f0 	.word	0x2000d2f0
   1a1cc:	4002a00c 	.word	0x4002a00c

0001a1d0 <rpc_transport_ipc_ctrl_msg_send>:
   1a1d0:	b508      	push	{r3, lr}
   1a1d2:	4b0b      	ldr	r3, [pc, #44]	; (1a200 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   1a1d4:	681b      	ldr	r3, [r3, #0]
   1a1d6:	1ac0      	subs	r0, r0, r3
   1a1d8:	4b0a      	ldr	r3, [pc, #40]	; (1a204 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   1a1da:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1a1de:	681b      	ldr	r3, [r3, #0]
   1a1e0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a1e4:	6843      	ldr	r3, [r0, #4]
   1a1e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a1ea:	f043 0301 	orr.w	r3, r3, #1
   1a1ee:	6043      	str	r3, [r0, #4]
   1a1f0:	2003      	movs	r0, #3
   1a1f2:	f007 ff86 	bl	22102 <nrf_modem_os_busywait>
   1a1f6:	2201      	movs	r2, #1
   1a1f8:	4b03      	ldr	r3, [pc, #12]	; (1a208 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   1a1fa:	601a      	str	r2, [r3, #0]
   1a1fc:	bd08      	pop	{r3, pc}
   1a1fe:	bf00      	nop
   1a200:	2000d2e4 	.word	0x2000d2e4
   1a204:	2000d2e8 	.word	0x2000d2e8
   1a208:	4002a004 	.word	0x4002a004

0001a20c <rpc_transport_ipc_data_msg_alloc>:
   1a20c:	4b05      	ldr	r3, [pc, #20]	; (1a224 <rpc_transport_ipc_data_msg_alloc+0x18>)
   1a20e:	781b      	ldrb	r3, [r3, #0]
   1a210:	b933      	cbnz	r3, 1a220 <rpc_transport_ipc_data_msg_alloc+0x14>
   1a212:	4b05      	ldr	r3, [pc, #20]	; (1a228 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   1a214:	2202      	movs	r2, #2
   1a216:	6819      	ldr	r1, [r3, #0]
   1a218:	4b04      	ldr	r3, [pc, #16]	; (1a22c <rpc_transport_ipc_data_msg_alloc+0x20>)
   1a21a:	6818      	ldr	r0, [r3, #0]
   1a21c:	f7ff bf8a 	b.w	1a134 <rpc_transport_ipc_msg_alloc>
   1a220:	2000      	movs	r0, #0
   1a222:	4770      	bx	lr
   1a224:	2000d57d 	.word	0x2000d57d
   1a228:	2000d2ec 	.word	0x2000d2ec
   1a22c:	2000d2f0 	.word	0x2000d2f0

0001a230 <rpc_transport_ipc_ctrl_msg_alloc>:
   1a230:	230a      	movs	r3, #10
   1a232:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a234:	4c0c      	ldr	r4, [pc, #48]	; (1a268 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1a236:	4d0d      	ldr	r5, [pc, #52]	; (1a26c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   1a238:	9301      	str	r3, [sp, #4]
   1a23a:	2201      	movs	r2, #1
   1a23c:	6821      	ldr	r1, [r4, #0]
   1a23e:	6828      	ldr	r0, [r5, #0]
   1a240:	f7ff ff78 	bl	1a134 <rpc_transport_ipc_msg_alloc>
   1a244:	b968      	cbnz	r0, 1a262 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   1a246:	f007 ffef 	bl	22228 <nrf_modem_os_is_in_isr>
   1a24a:	b918      	cbnz	r0, 1a254 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   1a24c:	a901      	add	r1, sp, #4
   1a24e:	f007 ff5c 	bl	2210a <nrf_modem_os_timedwait>
   1a252:	e7f2      	b.n	1a23a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1a254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1a258:	9b01      	ldr	r3, [sp, #4]
   1a25a:	4358      	muls	r0, r3
   1a25c:	f007 ff51 	bl	22102 <nrf_modem_os_busywait>
   1a260:	e7eb      	b.n	1a23a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1a262:	b003      	add	sp, #12
   1a264:	bd30      	pop	{r4, r5, pc}
   1a266:	bf00      	nop
   1a268:	2000d2e4 	.word	0x2000d2e4
   1a26c:	2000d2e8 	.word	0x2000d2e8

0001a270 <rpc_transport_ipc_data_alloc>:
   1a270:	4b03      	ldr	r3, [pc, #12]	; (1a280 <rpc_transport_ipc_data_alloc+0x10>)
   1a272:	781b      	ldrb	r3, [r3, #0]
   1a274:	b90b      	cbnz	r3, 1a27a <rpc_transport_ipc_data_alloc+0xa>
   1a276:	f7fb bebd 	b.w	15ff4 <nrf_modem_os_shm_tx_alloc>
   1a27a:	2000      	movs	r0, #0
   1a27c:	4770      	bx	lr
   1a27e:	bf00      	nop
   1a280:	2000d57d 	.word	0x2000d57d

0001a284 <nrf_modem_application_irq_handler>:
   1a284:	b510      	push	{r4, lr}
   1a286:	4c06      	ldr	r4, [pc, #24]	; (1a2a0 <nrf_modem_application_irq_handler+0x1c>)
   1a288:	f7fb fe8a 	bl	15fa0 <nrf_modem_os_application_irq_clear>
   1a28c:	6820      	ldr	r0, [r4, #0]
   1a28e:	2101      	movs	r1, #1
   1a290:	f7ff ff0e 	bl	1a0b0 <handle_modem_rpc_msg>
   1a294:	6860      	ldr	r0, [r4, #4]
   1a296:	2102      	movs	r1, #2
   1a298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a29c:	f7ff bf08 	b.w	1a0b0 <handle_modem_rpc_msg>
   1a2a0:	2000d2d8 	.word	0x2000d2d8

0001a2a4 <rpc_transport_ipc_msg_free>:
   1a2a4:	2300      	movs	r3, #0
   1a2a6:	4911      	ldr	r1, [pc, #68]	; (1a2ec <rpc_transport_ipc_msg_free+0x48>)
   1a2a8:	b530      	push	{r4, r5, lr}
   1a2aa:	680a      	ldr	r2, [r1, #0]
   1a2ac:	6814      	ldr	r4, [r2, #0]
   1a2ae:	42a3      	cmp	r3, r4
   1a2b0:	d10b      	bne.n	1a2ca <rpc_transport_ipc_msg_free+0x26>
   1a2b2:	2300      	movs	r3, #0
   1a2b4:	684a      	ldr	r2, [r1, #4]
   1a2b6:	6811      	ldr	r1, [r2, #0]
   1a2b8:	428b      	cmp	r3, r1
   1a2ba:	d015      	beq.n	1a2e8 <rpc_transport_ipc_msg_free+0x44>
   1a2bc:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1a2c0:	68a4      	ldr	r4, [r4, #8]
   1a2c2:	42a0      	cmp	r0, r4
   1a2c4:	d008      	beq.n	1a2d8 <rpc_transport_ipc_msg_free+0x34>
   1a2c6:	3301      	adds	r3, #1
   1a2c8:	e7f6      	b.n	1a2b8 <rpc_transport_ipc_msg_free+0x14>
   1a2ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1a2ce:	68ad      	ldr	r5, [r5, #8]
   1a2d0:	42a8      	cmp	r0, r5
   1a2d2:	d001      	beq.n	1a2d8 <rpc_transport_ipc_msg_free+0x34>
   1a2d4:	3301      	adds	r3, #1
   1a2d6:	e7ea      	b.n	1a2ae <rpc_transport_ipc_msg_free+0xa>
   1a2d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a2dc:	685a      	ldr	r2, [r3, #4]
   1a2de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1a2e2:	f042 0203 	orr.w	r2, r2, #3
   1a2e6:	605a      	str	r2, [r3, #4]
   1a2e8:	bd30      	pop	{r4, r5, pc}
   1a2ea:	bf00      	nop
   1a2ec:	2000d2d8 	.word	0x2000d2d8

0001a2f0 <rpc_transport_ipc_init>:
   1a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f4:	2200      	movs	r2, #0
   1a2f6:	b095      	sub	sp, #84	; 0x54
   1a2f8:	4605      	mov	r5, r0
   1a2fa:	494d      	ldr	r1, [pc, #308]	; (1a430 <rpc_transport_ipc_init+0x140>)
   1a2fc:	7900      	ldrb	r0, [r0, #4]
   1a2fe:	f7ff fc9f 	bl	19c40 <nrfx_ipc_init>
   1a302:	2238      	movs	r2, #56	; 0x38
   1a304:	2100      	movs	r1, #0
   1a306:	a803      	add	r0, sp, #12
   1a308:	f00a fbed 	bl	24ae6 <memset>
   1a30c:	2302      	movs	r3, #2
   1a30e:	9304      	str	r3, [sp, #16]
   1a310:	2308      	movs	r3, #8
   1a312:	9306      	str	r3, [sp, #24]
   1a314:	2320      	movs	r3, #32
   1a316:	9308      	str	r3, [sp, #32]
   1a318:	2301      	movs	r3, #1
   1a31a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a31c:	2304      	movs	r3, #4
   1a31e:	930d      	str	r3, [sp, #52]	; 0x34
   1a320:	2310      	movs	r3, #16
   1a322:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1a326:	930f      	str	r3, [sp, #60]	; 0x3c
   1a328:	2380      	movs	r3, #128	; 0x80
   1a32a:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   1a32e:	23d5      	movs	r3, #213	; 0xd5
   1a330:	a803      	add	r0, sp, #12
   1a332:	9313      	str	r3, [sp, #76]	; 0x4c
   1a334:	f7ff fc9c 	bl	19c70 <nrfx_ipc_config_load>
   1a338:	682b      	ldr	r3, [r5, #0]
   1a33a:	2100      	movs	r1, #0
   1a33c:	685a      	ldr	r2, [r3, #4]
   1a33e:	6818      	ldr	r0, [r3, #0]
   1a340:	f00a fbd1 	bl	24ae6 <memset>
   1a344:	682a      	ldr	r2, [r5, #0]
   1a346:	6814      	ldr	r4, [r2, #0]
   1a348:	69d3      	ldr	r3, [r2, #28]
   1a34a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   1a34e:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1a352:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1a356:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   1a35a:	f104 0920 	add.w	r9, r4, #32
   1a35e:	2b00      	cmp	r3, #0
   1a360:	d060      	beq.n	1a424 <rpc_transport_ipc_init+0x134>
   1a362:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1a366:	4933      	ldr	r1, [pc, #204]	; (1a434 <rpc_transport_ipc_init+0x144>)
   1a368:	f8c1 9000 	str.w	r9, [r1]
   1a36c:	b13b      	cbz	r3, 1a37e <rpc_transport_ipc_init+0x8e>
   1a36e:	6992      	ldr	r2, [r2, #24]
   1a370:	4640      	mov	r0, r8
   1a372:	f8c8 2004 	str.w	r2, [r8, #4]
   1a376:	f8c8 3000 	str.w	r3, [r8]
   1a37a:	f7ff fdb9 	bl	19ef0 <ipc_trace_init>
   1a37e:	6828      	ldr	r0, [r5, #0]
   1a380:	2300      	movs	r3, #0
   1a382:	6902      	ldr	r2, [r0, #16]
   1a384:	2101      	movs	r1, #1
   1a386:	6062      	str	r2, [r4, #4]
   1a388:	6942      	ldr	r2, [r0, #20]
   1a38a:	70a1      	strb	r1, [r4, #2]
   1a38c:	60a2      	str	r2, [r4, #8]
   1a38e:	4a2a      	ldr	r2, [pc, #168]	; (1a438 <rpc_transport_ipc_init+0x148>)
   1a390:	7023      	strb	r3, [r4, #0]
   1a392:	6017      	str	r7, [r2, #0]
   1a394:	4a29      	ldr	r2, [pc, #164]	; (1a43c <rpc_transport_ipc_init+0x14c>)
   1a396:	7063      	strb	r3, [r4, #1]
   1a398:	6016      	str	r6, [r2, #0]
   1a39a:	2208      	movs	r2, #8
   1a39c:	70e3      	strb	r3, [r4, #3]
   1a39e:	60e6      	str	r6, [r4, #12]
   1a3a0:	6127      	str	r7, [r4, #16]
   1a3a2:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   1a3a6:	f8c4 9014 	str.w	r9, [r4, #20]
   1a3aa:	f8c4 8018 	str.w	r8, [r4, #24]
   1a3ae:	707b      	strb	r3, [r7, #1]
   1a3b0:	70bb      	strb	r3, [r7, #2]
   1a3b2:	70fb      	strb	r3, [r7, #3]
   1a3b4:	2714      	movs	r7, #20
   1a3b6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   1a3ba:	4a21      	ldr	r2, [pc, #132]	; (1a440 <rpc_transport_ipc_init+0x150>)
   1a3bc:	4d21      	ldr	r5, [pc, #132]	; (1a444 <rpc_transport_ipc_init+0x154>)
   1a3be:	f8c2 b000 	str.w	fp, [r2]
   1a3c2:	4a21      	ldr	r2, [pc, #132]	; (1a448 <rpc_transport_ipc_init+0x158>)
   1a3c4:	7073      	strb	r3, [r6, #1]
   1a3c6:	f8c2 a000 	str.w	sl, [r2]
   1a3ca:	4a20      	ldr	r2, [pc, #128]	; (1a44c <rpc_transport_ipc_init+0x15c>)
   1a3cc:	70b3      	strb	r3, [r6, #2]
   1a3ce:	70f3      	strb	r3, [r6, #3]
   1a3d0:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   1a3d4:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   1a3d8:	4c1d      	ldr	r4, [pc, #116]	; (1a450 <rpc_transport_ipc_init+0x160>)
   1a3da:	7029      	strb	r1, [r5, #0]
   1a3dc:	491d      	ldr	r1, [pc, #116]	; (1a454 <rpc_transport_ipc_init+0x164>)
   1a3de:	6023      	str	r3, [r4, #0]
   1a3e0:	9302      	str	r3, [sp, #8]
   1a3e2:	600b      	str	r3, [r1, #0]
   1a3e4:	680b      	ldr	r3, [r1, #0]
   1a3e6:	4e1c      	ldr	r6, [pc, #112]	; (1a458 <rpc_transport_ipc_init+0x168>)
   1a3e8:	9302      	str	r3, [sp, #8]
   1a3ea:	9b02      	ldr	r3, [sp, #8]
   1a3ec:	2000      	movs	r0, #0
   1a3ee:	a901      	add	r1, sp, #4
   1a3f0:	9701      	str	r7, [sp, #4]
   1a3f2:	f007 fe8a 	bl	2210a <nrf_modem_os_timedwait>
   1a3f6:	9b01      	ldr	r3, [sp, #4]
   1a3f8:	3b14      	subs	r3, #20
   1a3fa:	441e      	add	r6, r3
   1a3fc:	782b      	ldrb	r3, [r5, #0]
   1a3fe:	2b01      	cmp	r3, #1
   1a400:	d104      	bne.n	1a40c <rpc_transport_ipc_init+0x11c>
   1a402:	2e00      	cmp	r6, #0
   1a404:	d1f2      	bne.n	1a3ec <rpc_transport_ipc_init+0xfc>
   1a406:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1a40a:	6023      	str	r3, [r4, #0]
   1a40c:	6824      	ldr	r4, [r4, #0]
   1a40e:	b95c      	cbnz	r4, 1a428 <rpc_transport_ipc_init+0x138>
   1a410:	4b12      	ldr	r3, [pc, #72]	; (1a45c <rpc_transport_ipc_init+0x16c>)
   1a412:	701c      	strb	r4, [r3, #0]
   1a414:	4b12      	ldr	r3, [pc, #72]	; (1a460 <rpc_transport_ipc_init+0x170>)
   1a416:	801c      	strh	r4, [r3, #0]
   1a418:	4b12      	ldr	r3, [pc, #72]	; (1a464 <rpc_transport_ipc_init+0x174>)
   1a41a:	801c      	strh	r4, [r3, #0]
   1a41c:	4620      	mov	r0, r4
   1a41e:	b015      	add	sp, #84	; 0x54
   1a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a424:	4698      	mov	r8, r3
   1a426:	e79e      	b.n	1a366 <rpc_transport_ipc_init+0x76>
   1a428:	f7ff fc48 	bl	19cbc <nrfx_ipc_uninit>
   1a42c:	e7f6      	b.n	1a41c <rpc_transport_ipc_init+0x12c>
   1a42e:	bf00      	nop
   1a430:	0001a469 	.word	0x0001a469
   1a434:	2000d2e0 	.word	0x2000d2e0
   1a438:	2000d2f0 	.word	0x2000d2f0
   1a43c:	2000d2e8 	.word	0x2000d2e8
   1a440:	2000d2ec 	.word	0x2000d2ec
   1a444:	2000d57c 	.word	0x2000d57c
   1a448:	2000d2e4 	.word	0x2000d2e4
   1a44c:	4002a000 	.word	0x4002a000
   1a450:	2000d2d4 	.word	0x2000d2d4
   1a454:	40005610 	.word	0x40005610
   1a458:	000249f0 	.word	0x000249f0
   1a45c:	2000d57d 	.word	0x2000d57d
   1a460:	2000d564 	.word	0x2000d564
   1a464:	2000d562 	.word	0x2000d562

0001a468 <ipc_irq_handler>:
   1a468:	b570      	push	{r4, r5, r6, lr}
   1a46a:	4604      	mov	r4, r0
   1a46c:	0620      	lsls	r0, r4, #24
   1a46e:	d50c      	bpl.n	1a48a <ipc_irq_handler+0x22>
   1a470:	f7ff fd84 	bl	19f7c <ipc_trace_handle>
   1a474:	f7ff fe16 	bl	1a0a4 <rpc_trace_coredump_in_progress>
   1a478:	b138      	cbz	r0, 1a48a <ipc_irq_handler+0x22>
   1a47a:	22e0      	movs	r2, #224	; 0xe0
   1a47c:	4b3e      	ldr	r3, [pc, #248]	; (1a578 <ipc_irq_handler+0x110>)
   1a47e:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1a482:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a486:	605a      	str	r2, [r3, #4]
   1a488:	bd70      	pop	{r4, r5, r6, pc}
   1a48a:	07e1      	lsls	r1, r4, #31
   1a48c:	d548      	bpl.n	1a520 <ipc_irq_handler+0xb8>
   1a48e:	f248 0202 	movw	r2, #32770	; 0x8002
   1a492:	4b3a      	ldr	r3, [pc, #232]	; (1a57c <ipc_irq_handler+0x114>)
   1a494:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1a498:	4293      	cmp	r3, r2
   1a49a:	d035      	beq.n	1a508 <ipc_irq_handler+0xa0>
   1a49c:	d81b      	bhi.n	1a4d6 <ipc_irq_handler+0x6e>
   1a49e:	f243 0232 	movw	r2, #12338	; 0x3032
   1a4a2:	4293      	cmp	r3, r2
   1a4a4:	d036      	beq.n	1a514 <ipc_irq_handler+0xac>
   1a4a6:	d80b      	bhi.n	1a4c0 <ipc_irq_handler+0x58>
   1a4a8:	3b01      	subs	r3, #1
   1a4aa:	2b01      	cmp	r3, #1
   1a4ac:	d8ec      	bhi.n	1a488 <ipc_irq_handler+0x20>
   1a4ae:	2203      	movs	r2, #3
   1a4b0:	200e      	movs	r0, #14
   1a4b2:	4b33      	ldr	r3, [pc, #204]	; (1a580 <ipc_irq_handler+0x118>)
   1a4b4:	701a      	strb	r2, [r3, #0]
   1a4b6:	4b33      	ldr	r3, [pc, #204]	; (1a584 <ipc_irq_handler+0x11c>)
   1a4b8:	6018      	str	r0, [r3, #0]
   1a4ba:	f009 fb99 	bl	23bf0 <rpc_transport_ipc_fault_handler>
   1a4be:	e7e3      	b.n	1a488 <ipc_irq_handler+0x20>
   1a4c0:	f248 0201 	movw	r2, #32769	; 0x8001
   1a4c4:	4293      	cmp	r3, r2
   1a4c6:	d1df      	bne.n	1a488 <ipc_irq_handler+0x20>
   1a4c8:	2203      	movs	r2, #3
   1a4ca:	4b2d      	ldr	r3, [pc, #180]	; (1a580 <ipc_irq_handler+0x118>)
   1a4cc:	701a      	strb	r2, [r3, #0]
   1a4ce:	2216      	movs	r2, #22
   1a4d0:	4b2c      	ldr	r3, [pc, #176]	; (1a584 <ipc_irq_handler+0x11c>)
   1a4d2:	601a      	str	r2, [r3, #0]
   1a4d4:	e7d8      	b.n	1a488 <ipc_irq_handler+0x20>
   1a4d6:	4a2c      	ldr	r2, [pc, #176]	; (1a588 <ipc_irq_handler+0x120>)
   1a4d8:	4293      	cmp	r3, r2
   1a4da:	d80c      	bhi.n	1a4f6 <ipc_irq_handler+0x8e>
   1a4dc:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1a4e0:	d80c      	bhi.n	1a4fc <ipc_irq_handler+0x94>
   1a4e2:	f248 0203 	movw	r2, #32771	; 0x8003
   1a4e6:	4293      	cmp	r3, r2
   1a4e8:	d1ce      	bne.n	1a488 <ipc_irq_handler+0x20>
   1a4ea:	2203      	movs	r2, #3
   1a4ec:	4b24      	ldr	r3, [pc, #144]	; (1a580 <ipc_irq_handler+0x118>)
   1a4ee:	701a      	strb	r2, [r3, #0]
   1a4f0:	220c      	movs	r2, #12
   1a4f2:	4b24      	ldr	r3, [pc, #144]	; (1a584 <ipc_irq_handler+0x11c>)
   1a4f4:	e7ed      	b.n	1a4d2 <ipc_irq_handler+0x6a>
   1a4f6:	4a25      	ldr	r2, [pc, #148]	; (1a58c <ipc_irq_handler+0x124>)
   1a4f8:	4293      	cmp	r3, r2
   1a4fa:	d1c5      	bne.n	1a488 <ipc_irq_handler+0x20>
   1a4fc:	2103      	movs	r1, #3
   1a4fe:	4a20      	ldr	r2, [pc, #128]	; (1a580 <ipc_irq_handler+0x118>)
   1a500:	7011      	strb	r1, [r2, #0]
   1a502:	4a20      	ldr	r2, [pc, #128]	; (1a584 <ipc_irq_handler+0x11c>)
   1a504:	6013      	str	r3, [r2, #0]
   1a506:	e7bf      	b.n	1a488 <ipc_irq_handler+0x20>
   1a508:	2203      	movs	r2, #3
   1a50a:	4b1d      	ldr	r3, [pc, #116]	; (1a580 <ipc_irq_handler+0x118>)
   1a50c:	701a      	strb	r2, [r3, #0]
   1a50e:	225f      	movs	r2, #95	; 0x5f
   1a510:	4b1c      	ldr	r3, [pc, #112]	; (1a584 <ipc_irq_handler+0x11c>)
   1a512:	e7de      	b.n	1a4d2 <ipc_irq_handler+0x6a>
   1a514:	2203      	movs	r2, #3
   1a516:	4b1a      	ldr	r3, [pc, #104]	; (1a580 <ipc_irq_handler+0x118>)
   1a518:	701a      	strb	r2, [r3, #0]
   1a51a:	2205      	movs	r2, #5
   1a51c:	4b19      	ldr	r3, [pc, #100]	; (1a584 <ipc_irq_handler+0x11c>)
   1a51e:	e7d8      	b.n	1a4d2 <ipc_irq_handler+0x6a>
   1a520:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   1a524:	d003      	beq.n	1a52e <ipc_irq_handler+0xc6>
   1a526:	2202      	movs	r2, #2
   1a528:	4b15      	ldr	r3, [pc, #84]	; (1a580 <ipc_irq_handler+0x118>)
   1a52a:	701a      	strb	r2, [r3, #0]
   1a52c:	e7ac      	b.n	1a488 <ipc_irq_handler+0x20>
   1a52e:	0762      	lsls	r2, r4, #29
   1a530:	d505      	bpl.n	1a53e <ipc_irq_handler+0xd6>
   1a532:	4b13      	ldr	r3, [pc, #76]	; (1a580 <ipc_irq_handler+0x118>)
   1a534:	781a      	ldrb	r2, [r3, #0]
   1a536:	461e      	mov	r6, r3
   1a538:	b93a      	cbnz	r2, 1a54a <ipc_irq_handler+0xe2>
   1a53a:	f7fb fd29 	bl	15f90 <nrf_modem_os_application_irq_set>
   1a53e:	06e3      	lsls	r3, r4, #27
   1a540:	d5a2      	bpl.n	1a488 <ipc_irq_handler+0x20>
   1a542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a546:	f7fb bd23 	b.w	15f90 <nrf_modem_os_application_irq_set>
   1a54a:	2a01      	cmp	r2, #1
   1a54c:	d1f7      	bne.n	1a53e <ipc_irq_handler+0xd6>
   1a54e:	4a10      	ldr	r2, [pc, #64]	; (1a590 <ipc_irq_handler+0x128>)
   1a550:	4810      	ldr	r0, [pc, #64]	; (1a594 <ipc_irq_handler+0x12c>)
   1a552:	6812      	ldr	r2, [r2, #0]
   1a554:	6891      	ldr	r1, [r2, #8]
   1a556:	6041      	str	r1, [r0, #4]
   1a558:	6852      	ldr	r2, [r2, #4]
   1a55a:	6002      	str	r2, [r0, #0]
   1a55c:	b121      	cbz	r1, 1a568 <ipc_irq_handler+0x100>
   1a55e:	b11a      	cbz	r2, 1a568 <ipc_irq_handler+0x100>
   1a560:	6809      	ldr	r1, [r1, #0]
   1a562:	b109      	cbz	r1, 1a568 <ipc_irq_handler+0x100>
   1a564:	6812      	ldr	r2, [r2, #0]
   1a566:	b92a      	cbnz	r2, 1a574 <ipc_irq_handler+0x10c>
   1a568:	2303      	movs	r3, #3
   1a56a:	2205      	movs	r2, #5
   1a56c:	7033      	strb	r3, [r6, #0]
   1a56e:	4b05      	ldr	r3, [pc, #20]	; (1a584 <ipc_irq_handler+0x11c>)
   1a570:	601a      	str	r2, [r3, #0]
   1a572:	e7e4      	b.n	1a53e <ipc_irq_handler+0xd6>
   1a574:	701d      	strb	r5, [r3, #0]
   1a576:	e7e2      	b.n	1a53e <ipc_irq_handler+0xd6>
   1a578:	e000e100 	.word	0xe000e100
   1a57c:	4002a000 	.word	0x4002a000
   1a580:	2000d57c 	.word	0x2000d57c
   1a584:	2000d2d4 	.word	0x2000d2d4
   1a588:	04400004 	.word	0x04400004
   1a58c:	05500001 	.word	0x05500001
   1a590:	2000d2e0 	.word	0x2000d2e0
   1a594:	2000d2d8 	.word	0x2000d2d8

0001a598 <interface_init>:
   1a598:	b508      	push	{r3, lr}
   1a59a:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1a59e:	2100      	movs	r1, #0
   1a5a0:	4802      	ldr	r0, [pc, #8]	; (1a5ac <interface_init+0x14>)
   1a5a2:	f00a faa0 	bl	24ae6 <memset>
   1a5a6:	2000      	movs	r0, #0
   1a5a8:	bd08      	pop	{r3, pc}
   1a5aa:	bf00      	nop
   1a5ac:	2000d2f4 	.word	0x2000d2f4

0001a5b0 <interface_socket_allocate>:
   1a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5b2:	4606      	mov	r6, r0
   1a5b4:	2400      	movs	r4, #0
   1a5b6:	272c      	movs	r7, #44	; 0x2c
   1a5b8:	4b0f      	ldr	r3, [pc, #60]	; (1a5f8 <interface_socket_allocate+0x48>)
   1a5ba:	fb07 f004 	mul.w	r0, r7, r4
   1a5be:	181d      	adds	r5, r3, r0
   1a5c0:	5818      	ldr	r0, [r3, r0]
   1a5c2:	b988      	cbnz	r0, 1a5e8 <interface_socket_allocate+0x38>
   1a5c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a5c8:	2301      	movs	r3, #1
   1a5ca:	4628      	mov	r0, r5
   1a5cc:	61af      	str	r7, [r5, #24]
   1a5ce:	602b      	str	r3, [r5, #0]
   1a5d0:	f008 fdfd 	bl	231ce <packet_handler_alloc_and_init>
   1a5d4:	b168      	cbz	r0, 1a5f2 <interface_socket_allocate+0x42>
   1a5d6:	4628      	mov	r0, r5
   1a5d8:	f008 fe10 	bl	231fc <socket_free>
   1a5dc:	200c      	movs	r0, #12
   1a5de:	f007 fe1d 	bl	2221c <nrf_modem_os_errno_set>
   1a5e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a5e6:	e005      	b.n	1a5f4 <interface_socket_allocate+0x44>
   1a5e8:	3401      	adds	r4, #1
   1a5ea:	2c08      	cmp	r4, #8
   1a5ec:	d1e5      	bne.n	1a5ba <interface_socket_allocate+0xa>
   1a5ee:	2069      	movs	r0, #105	; 0x69
   1a5f0:	e7f5      	b.n	1a5de <interface_socket_allocate+0x2e>
   1a5f2:	6035      	str	r5, [r6, #0]
   1a5f4:	4620      	mov	r0, r4
   1a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a5f8:	2000d2f4 	.word	0x2000d2f4

0001a5fc <interface_socket_free>:
   1a5fc:	2807      	cmp	r0, #7
   1a5fe:	d805      	bhi.n	1a60c <interface_socket_free+0x10>
   1a600:	222c      	movs	r2, #44	; 0x2c
   1a602:	4b03      	ldr	r3, [pc, #12]	; (1a610 <interface_socket_free+0x14>)
   1a604:	fb02 3000 	mla	r0, r2, r0, r3
   1a608:	f008 bdf8 	b.w	231fc <socket_free>
   1a60c:	4770      	bx	lr
   1a60e:	bf00      	nop
   1a610:	2000d2f4 	.word	0x2000d2f4

0001a614 <interface_socket_packet_handler_update>:
   1a614:	2807      	cmp	r0, #7
   1a616:	b570      	push	{r4, r5, r6, lr}
   1a618:	d812      	bhi.n	1a640 <interface_socket_packet_handler_update+0x2c>
   1a61a:	232c      	movs	r3, #44	; 0x2c
   1a61c:	4358      	muls	r0, r3
   1a61e:	4c09      	ldr	r4, [pc, #36]	; (1a644 <interface_socket_packet_handler_update+0x30>)
   1a620:	5823      	ldr	r3, [r4, r0]
   1a622:	1825      	adds	r5, r4, r0
   1a624:	b163      	cbz	r3, 1a640 <interface_socket_packet_handler_update+0x2c>
   1a626:	4628      	mov	r0, r5
   1a628:	69ee      	ldr	r6, [r5, #28]
   1a62a:	f008 fdd0 	bl	231ce <packet_handler_alloc_and_init>
   1a62e:	4604      	mov	r4, r0
   1a630:	b920      	cbnz	r0, 1a63c <interface_socket_packet_handler_update+0x28>
   1a632:	4630      	mov	r0, r6
   1a634:	f009 fabf 	bl	23bb6 <packet_handler_delete>
   1a638:	4620      	mov	r0, r4
   1a63a:	bd70      	pop	{r4, r5, r6, pc}
   1a63c:	61ee      	str	r6, [r5, #28]
   1a63e:	e7fb      	b.n	1a638 <interface_socket_packet_handler_update+0x24>
   1a640:	2402      	movs	r4, #2
   1a642:	e7f9      	b.n	1a638 <interface_socket_packet_handler_update+0x24>
   1a644:	2000d2f4 	.word	0x2000d2f4

0001a648 <interface_socket_wait>:
   1a648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a64c:	4615      	mov	r5, r2
   1a64e:	222c      	movs	r2, #44	; 0x2c
   1a650:	4350      	muls	r0, r2
   1a652:	461e      	mov	r6, r3
   1a654:	4b0e      	ldr	r3, [pc, #56]	; (1a690 <interface_socket_wait+0x48>)
   1a656:	460c      	mov	r4, r1
   1a658:	181f      	adds	r7, r3, r0
   1a65a:	581b      	ldr	r3, [r3, r0]
   1a65c:	402b      	ands	r3, r5
   1a65e:	428b      	cmp	r3, r1
   1a660:	d102      	bne.n	1a668 <interface_socket_wait+0x20>
   1a662:	2000      	movs	r0, #0
   1a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a668:	687b      	ldr	r3, [r7, #4]
   1a66a:	2b00      	cmp	r3, #0
   1a66c:	d1f9      	bne.n	1a662 <interface_socket_wait+0x1a>
   1a66e:	46b8      	mov	r8, r7
   1a670:	f8d8 3000 	ldr.w	r3, [r8]
   1a674:	402b      	ands	r3, r5
   1a676:	42a3      	cmp	r3, r4
   1a678:	d0f3      	beq.n	1a662 <interface_socket_wait+0x1a>
   1a67a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a67e:	2b00      	cmp	r3, #0
   1a680:	d1ef      	bne.n	1a662 <interface_socket_wait+0x1a>
   1a682:	4631      	mov	r1, r6
   1a684:	4638      	mov	r0, r7
   1a686:	f007 fd40 	bl	2210a <nrf_modem_os_timedwait>
   1a68a:	2800      	cmp	r0, #0
   1a68c:	d0f0      	beq.n	1a670 <interface_socket_wait+0x28>
   1a68e:	e7e9      	b.n	1a664 <interface_socket_wait+0x1c>
   1a690:	2000d2f4 	.word	0x2000d2f4

0001a694 <interface_sockets_aux_state_set>:
   1a694:	4a0d      	ldr	r2, [pc, #52]	; (1a6cc <interface_sockets_aux_state_set+0x38>)
   1a696:	b570      	push	{r4, r5, r6, lr}
   1a698:	2300      	movs	r3, #0
   1a69a:	4611      	mov	r1, r2
   1a69c:	252c      	movs	r5, #44	; 0x2c
   1a69e:	fb05 f403 	mul.w	r4, r5, r3
   1a6a2:	590c      	ldr	r4, [r1, r4]
   1a6a4:	b15c      	cbz	r4, 1a6be <interface_sockets_aux_state_set+0x2a>
   1a6a6:	68d4      	ldr	r4, [r2, #12]
   1a6a8:	f024 0608 	bic.w	r6, r4, #8
   1a6ac:	2e02      	cmp	r6, #2
   1a6ae:	d001      	beq.n	1a6b4 <interface_sockets_aux_state_set+0x20>
   1a6b0:	2c05      	cmp	r4, #5
   1a6b2:	d104      	bne.n	1a6be <interface_sockets_aux_state_set+0x2a>
   1a6b4:	fb05 f603 	mul.w	r6, r5, r3
   1a6b8:	598c      	ldr	r4, [r1, r6]
   1a6ba:	4304      	orrs	r4, r0
   1a6bc:	518c      	str	r4, [r1, r6]
   1a6be:	3301      	adds	r3, #1
   1a6c0:	2b08      	cmp	r3, #8
   1a6c2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   1a6c6:	d1ea      	bne.n	1a69e <interface_sockets_aux_state_set+0xa>
   1a6c8:	bd70      	pop	{r4, r5, r6, pc}
   1a6ca:	bf00      	nop
   1a6cc:	2000d2f4 	.word	0x2000d2f4

0001a6d0 <interface_sockets_aux_state_clear>:
   1a6d0:	4a0d      	ldr	r2, [pc, #52]	; (1a708 <interface_sockets_aux_state_clear+0x38>)
   1a6d2:	b570      	push	{r4, r5, r6, lr}
   1a6d4:	2300      	movs	r3, #0
   1a6d6:	4611      	mov	r1, r2
   1a6d8:	252c      	movs	r5, #44	; 0x2c
   1a6da:	43c0      	mvns	r0, r0
   1a6dc:	fb05 f403 	mul.w	r4, r5, r3
   1a6e0:	590c      	ldr	r4, [r1, r4]
   1a6e2:	b15c      	cbz	r4, 1a6fc <interface_sockets_aux_state_clear+0x2c>
   1a6e4:	68d4      	ldr	r4, [r2, #12]
   1a6e6:	f024 0608 	bic.w	r6, r4, #8
   1a6ea:	2e02      	cmp	r6, #2
   1a6ec:	d001      	beq.n	1a6f2 <interface_sockets_aux_state_clear+0x22>
   1a6ee:	2c05      	cmp	r4, #5
   1a6f0:	d104      	bne.n	1a6fc <interface_sockets_aux_state_clear+0x2c>
   1a6f2:	fb05 f603 	mul.w	r6, r5, r3
   1a6f6:	598c      	ldr	r4, [r1, r6]
   1a6f8:	4004      	ands	r4, r0
   1a6fa:	518c      	str	r4, [r1, r6]
   1a6fc:	3301      	adds	r3, #1
   1a6fe:	2b08      	cmp	r3, #8
   1a700:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   1a704:	d1ea      	bne.n	1a6dc <interface_sockets_aux_state_clear+0xc>
   1a706:	bd70      	pop	{r4, r5, r6, pc}
   1a708:	2000d2f4 	.word	0x2000d2f4

0001a70c <interface_from_internal_id_search>:
   1a70c:	4b0a      	ldr	r3, [pc, #40]	; (1a738 <interface_from_internal_id_search+0x2c>)
   1a70e:	4602      	mov	r2, r0
   1a710:	b530      	push	{r4, r5, lr}
   1a712:	2000      	movs	r0, #0
   1a714:	461c      	mov	r4, r3
   1a716:	212c      	movs	r1, #44	; 0x2c
   1a718:	fb01 f500 	mul.w	r5, r1, r0
   1a71c:	5965      	ldr	r5, [r4, r5]
   1a71e:	b115      	cbz	r5, 1a726 <interface_from_internal_id_search+0x1a>
   1a720:	699d      	ldr	r5, [r3, #24]
   1a722:	4295      	cmp	r5, r2
   1a724:	d006      	beq.n	1a734 <interface_from_internal_id_search+0x28>
   1a726:	3001      	adds	r0, #1
   1a728:	2808      	cmp	r0, #8
   1a72a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   1a72e:	d1f3      	bne.n	1a718 <interface_from_internal_id_search+0xc>
   1a730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a734:	bd30      	pop	{r4, r5, pc}
   1a736:	bf00      	nop
   1a738:	2000d2f4 	.word	0x2000d2f4

0001a73c <interface_socket_from_handle_get>:
   1a73c:	2807      	cmp	r0, #7
   1a73e:	d808      	bhi.n	1a752 <interface_socket_from_handle_get+0x16>
   1a740:	232c      	movs	r3, #44	; 0x2c
   1a742:	4343      	muls	r3, r0
   1a744:	4a04      	ldr	r2, [pc, #16]	; (1a758 <interface_socket_from_handle_get+0x1c>)
   1a746:	18d0      	adds	r0, r2, r3
   1a748:	58d3      	ldr	r3, [r2, r3]
   1a74a:	2b00      	cmp	r3, #0
   1a74c:	bf08      	it	eq
   1a74e:	2000      	moveq	r0, #0
   1a750:	4770      	bx	lr
   1a752:	2000      	movs	r0, #0
   1a754:	4770      	bx	lr
   1a756:	bf00      	nop
   1a758:	2000d2f4 	.word	0x2000d2f4

0001a75c <interface_socket_setopt>:
   1a75c:	2807      	cmp	r0, #7
   1a75e:	b538      	push	{r3, r4, r5, lr}
   1a760:	d82c      	bhi.n	1a7bc <interface_socket_setopt+0x60>
   1a762:	242c      	movs	r4, #44	; 0x2c
   1a764:	4360      	muls	r0, r4
   1a766:	4d16      	ldr	r5, [pc, #88]	; (1a7c0 <interface_socket_setopt+0x64>)
   1a768:	182c      	adds	r4, r5, r0
   1a76a:	5828      	ldr	r0, [r5, r0]
   1a76c:	b330      	cbz	r0, 1a7bc <interface_socket_setopt+0x60>
   1a76e:	2901      	cmp	r1, #1
   1a770:	d005      	beq.n	1a77e <interface_socket_setopt+0x22>
   1a772:	206d      	movs	r0, #109	; 0x6d
   1a774:	f007 fd52 	bl	2221c <nrf_modem_os_errno_set>
   1a778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a77c:	e01b      	b.n	1a7b6 <interface_socket_setopt+0x5a>
   1a77e:	f1a2 0114 	sub.w	r1, r2, #20
   1a782:	2901      	cmp	r1, #1
   1a784:	d8f5      	bhi.n	1a772 <interface_socket_setopt+0x16>
   1a786:	9904      	ldr	r1, [sp, #16]
   1a788:	2908      	cmp	r1, #8
   1a78a:	d115      	bne.n	1a7b8 <interface_socket_setopt+0x5c>
   1a78c:	b1a3      	cbz	r3, 1a7b8 <interface_socket_setopt+0x5c>
   1a78e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1a792:	6858      	ldr	r0, [r3, #4]
   1a794:	2100      	movs	r1, #0
   1a796:	fbb0 f0f5 	udiv	r0, r0, r5
   1a79a:	681b      	ldr	r3, [r3, #0]
   1a79c:	fbe5 0103 	umlal	r0, r1, r5, r3
   1a7a0:	2901      	cmp	r1, #1
   1a7a2:	bf08      	it	eq
   1a7a4:	2800      	cmpeq	r0, #0
   1a7a6:	d301      	bcc.n	1a7ac <interface_socket_setopt+0x50>
   1a7a8:	2021      	movs	r0, #33	; 0x21
   1a7aa:	e7e3      	b.n	1a774 <interface_socket_setopt+0x18>
   1a7ac:	2a14      	cmp	r2, #20
   1a7ae:	bf0c      	ite	eq
   1a7b0:	6220      	streq	r0, [r4, #32]
   1a7b2:	6260      	strne	r0, [r4, #36]	; 0x24
   1a7b4:	2000      	movs	r0, #0
   1a7b6:	bd38      	pop	{r3, r4, r5, pc}
   1a7b8:	2016      	movs	r0, #22
   1a7ba:	e7db      	b.n	1a774 <interface_socket_setopt+0x18>
   1a7bc:	2009      	movs	r0, #9
   1a7be:	e7d9      	b.n	1a774 <interface_socket_setopt+0x18>
   1a7c0:	2000d2f4 	.word	0x2000d2f4

0001a7c4 <interface_socket_getopt>:
   1a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7c6:	4606      	mov	r6, r0
   1a7c8:	2e07      	cmp	r6, #7
   1a7ca:	4618      	mov	r0, r3
   1a7cc:	4615      	mov	r5, r2
   1a7ce:	9b08      	ldr	r3, [sp, #32]
   1a7d0:	d841      	bhi.n	1a856 <interface_socket_getopt+0x92>
   1a7d2:	242c      	movs	r4, #44	; 0x2c
   1a7d4:	4374      	muls	r4, r6
   1a7d6:	4f21      	ldr	r7, [pc, #132]	; (1a85c <interface_socket_getopt+0x98>)
   1a7d8:	593a      	ldr	r2, [r7, r4]
   1a7da:	193e      	adds	r6, r7, r4
   1a7dc:	2a00      	cmp	r2, #0
   1a7de:	d03a      	beq.n	1a856 <interface_socket_getopt+0x92>
   1a7e0:	2901      	cmp	r1, #1
   1a7e2:	d005      	beq.n	1a7f0 <interface_socket_getopt+0x2c>
   1a7e4:	206d      	movs	r0, #109	; 0x6d
   1a7e6:	f007 fd19 	bl	2221c <nrf_modem_os_errno_set>
   1a7ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a7ee:	e012      	b.n	1a816 <interface_socket_getopt+0x52>
   1a7f0:	b100      	cbz	r0, 1a7f4 <interface_socket_getopt+0x30>
   1a7f2:	b90b      	cbnz	r3, 1a7f8 <interface_socket_getopt+0x34>
   1a7f4:	2016      	movs	r0, #22
   1a7f6:	e7f6      	b.n	1a7e6 <interface_socket_getopt+0x22>
   1a7f8:	2d04      	cmp	r5, #4
   1a7fa:	d10e      	bne.n	1a81a <interface_socket_getopt+0x56>
   1a7fc:	681a      	ldr	r2, [r3, #0]
   1a7fe:	2a00      	cmp	r2, #0
   1a800:	d0f8      	beq.n	1a7f4 <interface_socket_getopt+0x30>
   1a802:	2a04      	cmp	r2, #4
   1a804:	bf28      	it	cs
   1a806:	2204      	movcs	r2, #4
   1a808:	3404      	adds	r4, #4
   1a80a:	601a      	str	r2, [r3, #0]
   1a80c:	1939      	adds	r1, r7, r4
   1a80e:	f00a f95d 	bl	24acc <memcpy>
   1a812:	2000      	movs	r0, #0
   1a814:	6070      	str	r0, [r6, #4]
   1a816:	b003      	add	sp, #12
   1a818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a81a:	f1a5 0214 	sub.w	r2, r5, #20
   1a81e:	2a01      	cmp	r2, #1
   1a820:	d8e0      	bhi.n	1a7e4 <interface_socket_getopt+0x20>
   1a822:	681a      	ldr	r2, [r3, #0]
   1a824:	2a00      	cmp	r2, #0
   1a826:	d0e5      	beq.n	1a7f4 <interface_socket_getopt+0x30>
   1a828:	2a08      	cmp	r2, #8
   1a82a:	bf28      	it	cs
   1a82c:	2208      	movcs	r2, #8
   1a82e:	601a      	str	r2, [r3, #0]
   1a830:	e9d6 4308 	ldrd	r4, r3, [r6, #32]
   1a834:	2d14      	cmp	r5, #20
   1a836:	bf18      	it	ne
   1a838:	461c      	movne	r4, r3
   1a83a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a83e:	fbb4 f1f3 	udiv	r1, r4, r3
   1a842:	9100      	str	r1, [sp, #0]
   1a844:	fb03 4111 	mls	r1, r3, r1, r4
   1a848:	434b      	muls	r3, r1
   1a84a:	4669      	mov	r1, sp
   1a84c:	9301      	str	r3, [sp, #4]
   1a84e:	f00a f93d 	bl	24acc <memcpy>
   1a852:	2000      	movs	r0, #0
   1a854:	e7df      	b.n	1a816 <interface_socket_getopt+0x52>
   1a856:	2009      	movs	r0, #9
   1a858:	e7c5      	b.n	1a7e6 <interface_socket_getopt+0x22>
   1a85a:	bf00      	nop
   1a85c:	2000d2f4 	.word	0x2000d2f4

0001a860 <interface_socket_fcntl>:
   1a860:	2807      	cmp	r0, #7
   1a862:	b510      	push	{r4, lr}
   1a864:	d82c      	bhi.n	1a8c0 <interface_socket_fcntl+0x60>
   1a866:	232c      	movs	r3, #44	; 0x2c
   1a868:	4343      	muls	r3, r0
   1a86a:	4c16      	ldr	r4, [pc, #88]	; (1a8c4 <interface_socket_fcntl+0x64>)
   1a86c:	58e0      	ldr	r0, [r4, r3]
   1a86e:	b338      	cbz	r0, 1a8c0 <interface_socket_fcntl+0x60>
   1a870:	2901      	cmp	r1, #1
   1a872:	d11d      	bne.n	1a8b0 <interface_socket_fcntl+0x50>
   1a874:	f012 0001 	ands.w	r0, r2, #1
   1a878:	58e2      	ldr	r2, [r4, r3]
   1a87a:	d004      	beq.n	1a886 <interface_socket_fcntl+0x26>
   1a87c:	2000      	movs	r0, #0
   1a87e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1a882:	50e2      	str	r2, [r4, r3]
   1a884:	bd10      	pop	{r4, pc}
   1a886:	0092      	lsls	r2, r2, #2
   1a888:	d407      	bmi.n	1a89a <interface_socket_fcntl+0x3a>
   1a88a:	58e2      	ldr	r2, [r4, r3]
   1a88c:	b292      	uxth	r2, r2
   1a88e:	2a0a      	cmp	r2, #10
   1a890:	d003      	beq.n	1a89a <interface_socket_fcntl+0x3a>
   1a892:	58e2      	ldr	r2, [r4, r3]
   1a894:	b292      	uxth	r2, r2
   1a896:	2a0b      	cmp	r2, #11
   1a898:	d105      	bne.n	1a8a6 <interface_socket_fcntl+0x46>
   1a89a:	200b      	movs	r0, #11
   1a89c:	f007 fcbe 	bl	2221c <nrf_modem_os_errno_set>
   1a8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a8a4:	e7ee      	b.n	1a884 <interface_socket_fcntl+0x24>
   1a8a6:	58e2      	ldr	r2, [r4, r3]
   1a8a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1a8ac:	50e2      	str	r2, [r4, r3]
   1a8ae:	e7e9      	b.n	1a884 <interface_socket_fcntl+0x24>
   1a8b0:	2902      	cmp	r1, #2
   1a8b2:	d103      	bne.n	1a8bc <interface_socket_fcntl+0x5c>
   1a8b4:	58e0      	ldr	r0, [r4, r3]
   1a8b6:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1a8ba:	e7e3      	b.n	1a884 <interface_socket_fcntl+0x24>
   1a8bc:	2016      	movs	r0, #22
   1a8be:	e7ed      	b.n	1a89c <interface_socket_fcntl+0x3c>
   1a8c0:	2009      	movs	r0, #9
   1a8c2:	e7eb      	b.n	1a89c <interface_socket_fcntl+0x3c>
   1a8c4:	2000d2f4 	.word	0x2000d2f4

0001a8c8 <rpc_error_to_nrf_errno>:
   1a8c8:	286a      	cmp	r0, #106	; 0x6a
   1a8ca:	bf9a      	itte	ls
   1a8cc:	4b01      	ldrls	r3, [pc, #4]	; (1a8d4 <rpc_error_to_nrf_errno+0xc>)
   1a8ce:	5c18      	ldrbls	r0, [r3, r0]
   1a8d0:	205f      	movhi	r0, #95	; 0x5f
   1a8d2:	4770      	bx	lr
   1a8d4:	000274fe 	.word	0x000274fe

0001a8d8 <rpc_error_to_nrf_gai_errno>:
   1a8d8:	2805      	cmp	r0, #5
   1a8da:	d013      	beq.n	1a904 <rpc_error_to_nrf_gai_errno+0x2c>
   1a8dc:	d807      	bhi.n	1a8ee <rpc_error_to_nrf_gai_errno+0x16>
   1a8de:	b170      	cbz	r0, 1a8fe <rpc_error_to_nrf_gai_errno+0x26>
   1a8e0:	4b0b      	ldr	r3, [pc, #44]	; (1a910 <rpc_error_to_nrf_gai_errno+0x38>)
   1a8e2:	5c1b      	ldrb	r3, [r3, r0]
   1a8e4:	4a0b      	ldr	r2, [pc, #44]	; (1a914 <rpc_error_to_nrf_gai_errno+0x3c>)
   1a8e6:	f240 1015 	movw	r0, #277	; 0x115
   1a8ea:	6013      	str	r3, [r2, #0]
   1a8ec:	4770      	bx	lr
   1a8ee:	2806      	cmp	r0, #6
   1a8f0:	d00b      	beq.n	1a90a <rpc_error_to_nrf_gai_errno+0x32>
   1a8f2:	280d      	cmp	r0, #13
   1a8f4:	d009      	beq.n	1a90a <rpc_error_to_nrf_gai_errno+0x32>
   1a8f6:	286a      	cmp	r0, #106	; 0x6a
   1a8f8:	d9f2      	bls.n	1a8e0 <rpc_error_to_nrf_gai_errno+0x8>
   1a8fa:	235f      	movs	r3, #95	; 0x5f
   1a8fc:	e7f2      	b.n	1a8e4 <rpc_error_to_nrf_gai_errno+0xc>
   1a8fe:	4b05      	ldr	r3, [pc, #20]	; (1a914 <rpc_error_to_nrf_gai_errno+0x3c>)
   1a900:	6018      	str	r0, [r3, #0]
   1a902:	4770      	bx	lr
   1a904:	f44f 708a 	mov.w	r0, #276	; 0x114
   1a908:	4770      	bx	lr
   1a90a:	f240 1011 	movw	r0, #273	; 0x111
   1a90e:	4770      	bx	lr
   1a910:	000274fe 	.word	0x000274fe
   1a914:	2000d45c 	.word	0x2000d45c

0001a918 <ip_interface_init>:
   1a918:	b510      	push	{r4, lr}
   1a91a:	2400      	movs	r4, #0
   1a91c:	4b06      	ldr	r3, [pc, #24]	; (1a938 <ip_interface_init+0x20>)
   1a91e:	2220      	movs	r2, #32
   1a920:	601c      	str	r4, [r3, #0]
   1a922:	4b06      	ldr	r3, [pc, #24]	; (1a93c <ip_interface_init+0x24>)
   1a924:	4621      	mov	r1, r4
   1a926:	4806      	ldr	r0, [pc, #24]	; (1a940 <ip_interface_init+0x28>)
   1a928:	601c      	str	r4, [r3, #0]
   1a92a:	f00a f8dc 	bl	24ae6 <memset>
   1a92e:	2201      	movs	r2, #1
   1a930:	4b04      	ldr	r3, [pc, #16]	; (1a944 <ip_interface_init+0x2c>)
   1a932:	4620      	mov	r0, r4
   1a934:	701a      	strb	r2, [r3, #0]
   1a936:	bd10      	pop	{r4, pc}
   1a938:	2000d468 	.word	0x2000d468
   1a93c:	2000d464 	.word	0x2000d464
   1a940:	2000d46c 	.word	0x2000d46c
   1a944:	2000d57f 	.word	0x2000d57f

0001a948 <ip_interface_open>:
   1a948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a94a:	2302      	movs	r3, #2
   1a94c:	460d      	mov	r5, r1
   1a94e:	4611      	mov	r1, r2
   1a950:	2200      	movs	r2, #0
   1a952:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a956:	b085      	sub	sp, #20
   1a958:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a95c:	4b35      	ldr	r3, [pc, #212]	; (1aa34 <ip_interface_open+0xec>)
   1a95e:	4606      	mov	r6, r0
   1a960:	781b      	ldrb	r3, [r3, #0]
   1a962:	9403      	str	r4, [sp, #12]
   1a964:	b92b      	cbnz	r3, 1a972 <ip_interface_open+0x2a>
   1a966:	2075      	movs	r0, #117	; 0x75
   1a968:	f007 fc58 	bl	2221c <nrf_modem_os_errno_set>
   1a96c:	4620      	mov	r0, r4
   1a96e:	b005      	add	sp, #20
   1a970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a972:	f020 0308 	bic.w	r3, r0, #8
   1a976:	2b02      	cmp	r3, #2
   1a978:	d003      	beq.n	1a982 <ip_interface_open+0x3a>
   1a97a:	2805      	cmp	r0, #5
   1a97c:	d001      	beq.n	1a982 <ip_interface_open+0x3a>
   1a97e:	206a      	movs	r0, #106	; 0x6a
   1a980:	e7f2      	b.n	1a968 <ip_interface_open+0x20>
   1a982:	1e6b      	subs	r3, r5, #1
   1a984:	2b02      	cmp	r3, #2
   1a986:	d814      	bhi.n	1a9b2 <ip_interface_open+0x6a>
   1a988:	4628      	mov	r0, r5
   1a98a:	aa02      	add	r2, sp, #8
   1a98c:	f008 fc67 	bl	2325e <protocol_verify>
   1a990:	4607      	mov	r7, r0
   1a992:	2800      	cmp	r0, #0
   1a994:	d14b      	bne.n	1aa2e <ip_interface_open+0xe6>
   1a996:	4629      	mov	r1, r5
   1a998:	4a27      	ldr	r2, [pc, #156]	; (1aa38 <ip_interface_open+0xf0>)
   1a99a:	a801      	add	r0, sp, #4
   1a99c:	f7ff fe08 	bl	1a5b0 <interface_socket_allocate>
   1a9a0:	9b01      	ldr	r3, [sp, #4]
   1a9a2:	4604      	mov	r4, r0
   1a9a4:	b95b      	cbnz	r3, 1a9be <ip_interface_open+0x76>
   1a9a6:	2669      	movs	r6, #105	; 0x69
   1a9a8:	4620      	mov	r0, r4
   1a9aa:	f7ff fe27 	bl	1a5fc <interface_socket_free>
   1a9ae:	4630      	mov	r0, r6
   1a9b0:	e000      	b.n	1a9b4 <ip_interface_open+0x6c>
   1a9b2:	2016      	movs	r0, #22
   1a9b4:	f007 fc32 	bl	2221c <nrf_modem_os_errno_set>
   1a9b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a9bc:	e7d6      	b.n	1a96c <ip_interface_open+0x24>
   1a9be:	9a02      	ldr	r2, [sp, #8]
   1a9c0:	e9c3 6503 	strd	r6, r5, [r3, #12]
   1a9c4:	615a      	str	r2, [r3, #20]
   1a9c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a9ca:	f247 0201 	movw	r2, #28673	; 0x7001
   1a9ce:	463b      	mov	r3, r7
   1a9d0:	f008 fc8d 	bl	232ee <ip_interface_request_create>
   1a9d4:	4602      	mov	r2, r0
   1a9d6:	2800      	cmp	r0, #0
   1a9d8:	d0e5      	beq.n	1a9a6 <ip_interface_open+0x5e>
   1a9da:	6883      	ldr	r3, [r0, #8]
   1a9dc:	3e02      	subs	r6, #2
   1a9de:	2e08      	cmp	r6, #8
   1a9e0:	f103 030c 	add.w	r3, r3, #12
   1a9e4:	6083      	str	r3, [r0, #8]
   1a9e6:	bf98      	it	ls
   1a9e8:	4b14      	ldrls	r3, [pc, #80]	; (1aa3c <ip_interface_open+0xf4>)
   1a9ea:	f247 0101 	movw	r1, #28673	; 0x7001
   1a9ee:	bf98      	it	ls
   1a9f0:	579f      	ldrsbls	r7, [r3, r6]
   1a9f2:	9b02      	ldr	r3, [sp, #8]
   1a9f4:	6147      	str	r7, [r0, #20]
   1a9f6:	61c3      	str	r3, [r0, #28]
   1a9f8:	6185      	str	r5, [r0, #24]
   1a9fa:	2004      	movs	r0, #4
   1a9fc:	f008 fbdb 	bl	231b6 <rpc_client_request_send>
   1aa00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aa04:	2102      	movs	r1, #2
   1aa06:	4620      	mov	r0, r4
   1aa08:	ab03      	add	r3, sp, #12
   1aa0a:	f008 fc83 	bl	23314 <ip_interface_wait>
   1aa0e:	4606      	mov	r6, r0
   1aa10:	2800      	cmp	r0, #0
   1aa12:	d1c9      	bne.n	1a9a8 <ip_interface_open+0x60>
   1aa14:	3d02      	subs	r5, #2
   1aa16:	2d01      	cmp	r5, #1
   1aa18:	d8a8      	bhi.n	1a96c <ip_interface_open+0x24>
   1aa1a:	9b01      	ldr	r3, [sp, #4]
   1aa1c:	681a      	ldr	r2, [r3, #0]
   1aa1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1aa22:	601a      	str	r2, [r3, #0]
   1aa24:	681a      	ldr	r2, [r3, #0]
   1aa26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1aa2a:	601a      	str	r2, [r3, #0]
   1aa2c:	e79e      	b.n	1a96c <ip_interface_open+0x24>
   1aa2e:	4604      	mov	r4, r0
   1aa30:	e79c      	b.n	1a96c <ip_interface_open+0x24>
   1aa32:	bf00      	nop
   1aa34:	2000d57f 	.word	0x2000d57f
   1aa38:	00023247 	.word	0x00023247
   1aa3c:	000274f0 	.word	0x000274f0

0001aa40 <ip_interface_close>:
   1aa40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aa46:	4605      	mov	r5, r0
   1aa48:	9301      	str	r3, [sp, #4]
   1aa4a:	f7ff fe77 	bl	1a73c <interface_socket_from_handle_get>
   1aa4e:	4604      	mov	r4, r0
   1aa50:	b388      	cbz	r0, 1aab6 <ip_interface_close+0x76>
   1aa52:	f247 0209 	movw	r2, #28681	; 0x7009
   1aa56:	6981      	ldr	r1, [r0, #24]
   1aa58:	2300      	movs	r3, #0
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	f008 fc47 	bl	232ee <ip_interface_request_create>
   1aa60:	4602      	mov	r2, r0
   1aa62:	b370      	cbz	r0, 1aac2 <ip_interface_close+0x82>
   1aa64:	6823      	ldr	r3, [r4, #0]
   1aa66:	f247 0109 	movw	r1, #28681	; 0x7009
   1aa6a:	0c1b      	lsrs	r3, r3, #16
   1aa6c:	041b      	lsls	r3, r3, #16
   1aa6e:	f043 030d 	orr.w	r3, r3, #13
   1aa72:	6023      	str	r3, [r4, #0]
   1aa74:	6823      	ldr	r3, [r4, #0]
   1aa76:	2004      	movs	r0, #4
   1aa78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1aa7c:	6023      	str	r3, [r4, #0]
   1aa7e:	6823      	ldr	r3, [r4, #0]
   1aa80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1aa84:	6023      	str	r3, [r4, #0]
   1aa86:	4c10      	ldr	r4, [pc, #64]	; (1aac8 <ip_interface_close+0x88>)
   1aa88:	f008 fb95 	bl	231b6 <rpc_client_request_send>
   1aa8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aa90:	210e      	movs	r1, #14
   1aa92:	4628      	mov	r0, r5
   1aa94:	ab01      	add	r3, sp, #4
   1aa96:	f008 fc3d 	bl	23314 <ip_interface_wait>
   1aa9a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1aa9e:	b120      	cbz	r0, 1aaaa <ip_interface_close+0x6a>
   1aaa0:	f008 fb90 	bl	231c4 <rpc_client_message_free>
   1aaa4:	2300      	movs	r3, #0
   1aaa6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1aaaa:	4628      	mov	r0, r5
   1aaac:	f7ff fda6 	bl	1a5fc <interface_socket_free>
   1aab0:	2000      	movs	r0, #0
   1aab2:	b003      	add	sp, #12
   1aab4:	bd30      	pop	{r4, r5, pc}
   1aab6:	2009      	movs	r0, #9
   1aab8:	f007 fbb0 	bl	2221c <nrf_modem_os_errno_set>
   1aabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aac0:	e7f7      	b.n	1aab2 <ip_interface_close+0x72>
   1aac2:	200c      	movs	r0, #12
   1aac4:	e7f8      	b.n	1aab8 <ip_interface_close+0x78>
   1aac6:	bf00      	nop
   1aac8:	2000d46c 	.word	0x2000d46c

0001aacc <ip_interface_sendto>:
   1aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aad0:	2700      	movs	r7, #0
   1aad2:	469a      	mov	sl, r3
   1aad4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1aad8:	2364      	movs	r3, #100	; 0x64
   1aada:	b089      	sub	sp, #36	; 0x24
   1aadc:	4681      	mov	r9, r0
   1aade:	4615      	mov	r5, r2
   1aae0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   1aae4:	9102      	str	r1, [sp, #8]
   1aae6:	f8ad 7010 	strh.w	r7, [sp, #16]
   1aaea:	f8ad 7012 	strh.w	r7, [sp, #18]
   1aaee:	9605      	str	r6, [sp, #20]
   1aaf0:	9307      	str	r3, [sp, #28]
   1aaf2:	f7ff fe23 	bl	1a73c <interface_socket_from_handle_get>
   1aaf6:	4604      	mov	r4, r0
   1aaf8:	b930      	cbnz	r0, 1ab08 <ip_interface_sendto+0x3c>
   1aafa:	2009      	movs	r0, #9
   1aafc:	f007 fb8e 	bl	2221c <nrf_modem_os_errno_set>
   1ab00:	4630      	mov	r0, r6
   1ab02:	b009      	add	sp, #36	; 0x24
   1ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab08:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ab0c:	dd01      	ble.n	1ab12 <ip_interface_sendto+0x46>
   1ab0e:	207a      	movs	r0, #122	; 0x7a
   1ab10:	e7f4      	b.n	1aafc <ip_interface_sendto+0x30>
   1ab12:	f1ba 0f00 	cmp.w	sl, #0
   1ab16:	d004      	beq.n	1ab22 <ip_interface_sendto+0x56>
   1ab18:	f1ba 0f02 	cmp.w	sl, #2
   1ab1c:	d006      	beq.n	1ab2c <ip_interface_sendto+0x60>
   1ab1e:	205f      	movs	r0, #95	; 0x5f
   1ab20:	e7ec      	b.n	1aafc <ip_interface_sendto+0x30>
   1ab22:	6807      	ldr	r7, [r0, #0]
   1ab24:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   1ab28:	f3c7 7700 	ubfx	r7, r7, #28, #1
   1ab2c:	2d00      	cmp	r5, #0
   1ab2e:	dd07      	ble.n	1ab40 <ip_interface_sendto+0x74>
   1ab30:	9b02      	ldr	r3, [sp, #8]
   1ab32:	b92b      	cbnz	r3, 1ab40 <ip_interface_sendto+0x74>
   1ab34:	200e      	movs	r0, #14
   1ab36:	f007 fb71 	bl	2221c <nrf_modem_os_errno_set>
   1ab3a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ab3e:	e7df      	b.n	1ab00 <ip_interface_sendto+0x34>
   1ab40:	6923      	ldr	r3, [r4, #16]
   1ab42:	f1bb 0f00 	cmp.w	fp, #0
   1ab46:	d012      	beq.n	1ab6e <ip_interface_sendto+0xa2>
   1ab48:	2b01      	cmp	r3, #1
   1ab4a:	d101      	bne.n	1ab50 <ip_interface_sendto+0x84>
   1ab4c:	207f      	movs	r0, #127	; 0x7f
   1ab4e:	e7f2      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1ab50:	68e2      	ldr	r2, [r4, #12]
   1ab52:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ab56:	429a      	cmp	r2, r3
   1ab58:	d001      	beq.n	1ab5e <ip_interface_sendto+0x92>
   1ab5a:	206a      	movs	r0, #106	; 0x6a
   1ab5c:	e7eb      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1ab5e:	f89b 3000 	ldrb.w	r3, [fp]
   1ab62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ab64:	4293      	cmp	r3, r2
   1ab66:	f000 80c5 	beq.w	1acf4 <ip_interface_sendto+0x228>
   1ab6a:	2016      	movs	r0, #22
   1ab6c:	e7e3      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1ab6e:	2b02      	cmp	r3, #2
   1ab70:	d10f      	bne.n	1ab92 <ip_interface_sendto+0xc6>
   1ab72:	6963      	ldr	r3, [r4, #20]
   1ab74:	2b02      	cmp	r3, #2
   1ab76:	d103      	bne.n	1ab80 <ip_interface_sendto+0xb4>
   1ab78:	6823      	ldr	r3, [r4, #0]
   1ab7a:	b29b      	uxth	r3, r3
   1ab7c:	2b05      	cmp	r3, #5
   1ab7e:	e005      	b.n	1ab8c <ip_interface_sendto+0xc0>
   1ab80:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1ab84:	d10d      	bne.n	1aba2 <ip_interface_sendto+0xd6>
   1ab86:	6823      	ldr	r3, [r4, #0]
   1ab88:	b29b      	uxth	r3, r3
   1ab8a:	2b0c      	cmp	r3, #12
   1ab8c:	d009      	beq.n	1aba2 <ip_interface_sendto+0xd6>
   1ab8e:	2080      	movs	r0, #128	; 0x80
   1ab90:	e7d1      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1ab92:	2b01      	cmp	r3, #1
   1ab94:	d105      	bne.n	1aba2 <ip_interface_sendto+0xd6>
   1ab96:	6963      	ldr	r3, [r4, #20]
   1ab98:	2b01      	cmp	r3, #1
   1ab9a:	d0ed      	beq.n	1ab78 <ip_interface_sendto+0xac>
   1ab9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1aba0:	e7f0      	b.n	1ab84 <ip_interface_sendto+0xb8>
   1aba2:	f247 0806 	movw	r8, #28678	; 0x7006
   1aba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aba8:	2b00      	cmp	r3, #0
   1abaa:	bf08      	it	eq
   1abac:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1abb0:	9306      	str	r3, [sp, #24]
   1abb2:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   1abb6:	9303      	str	r3, [sp, #12]
   1abb8:	6823      	ldr	r3, [r4, #0]
   1abba:	0319      	lsls	r1, r3, #12
   1abbc:	d501      	bpl.n	1abc2 <ip_interface_sendto+0xf6>
   1abbe:	68a0      	ldr	r0, [r4, #8]
   1abc0:	e7b9      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1abc2:	6820      	ldr	r0, [r4, #0]
   1abc4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   1abc8:	d107      	bne.n	1abda <ip_interface_sendto+0x10e>
   1abca:	b90f      	cbnz	r7, 1abd0 <ip_interface_sendto+0x104>
   1abcc:	200b      	movs	r0, #11
   1abce:	e7b2      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1abd0:	a906      	add	r1, sp, #24
   1abd2:	f007 fa9a 	bl	2210a <nrf_modem_os_timedwait>
   1abd6:	2874      	cmp	r0, #116	; 0x74
   1abd8:	d0f8      	beq.n	1abcc <ip_interface_sendto+0x100>
   1abda:	6823      	ldr	r3, [r4, #0]
   1abdc:	039a      	lsls	r2, r3, #14
   1abde:	d5eb      	bpl.n	1abb8 <ip_interface_sendto+0xec>
   1abe0:	4628      	mov	r0, r5
   1abe2:	f008 fae2 	bl	231aa <rpc_client_request_alloc>
   1abe6:	4606      	mov	r6, r0
   1abe8:	2800      	cmp	r0, #0
   1abea:	d133      	bne.n	1ac54 <ip_interface_sendto+0x188>
   1abec:	b927      	cbnz	r7, 1abf8 <ip_interface_sendto+0x12c>
   1abee:	a907      	add	r1, sp, #28
   1abf0:	2000      	movs	r0, #0
   1abf2:	f007 fa8a 	bl	2210a <nrf_modem_os_timedwait>
   1abf6:	e7e9      	b.n	1abcc <ip_interface_sendto+0x100>
   1abf8:	a906      	add	r1, sp, #24
   1abfa:	f007 fa86 	bl	2210a <nrf_modem_os_timedwait>
   1abfe:	2800      	cmp	r0, #0
   1ac00:	d0ee      	beq.n	1abe0 <ip_interface_sendto+0x114>
   1ac02:	e7e3      	b.n	1abcc <ip_interface_sendto+0x100>
   1ac04:	a905      	add	r1, sp, #20
   1ac06:	f007 fa80 	bl	2210a <nrf_modem_os_timedwait>
   1ac0a:	e05b      	b.n	1acc4 <ip_interface_sendto+0x1f8>
   1ac0c:	f008 fada 	bl	231c4 <rpc_client_message_free>
   1ac10:	2300      	movs	r3, #0
   1ac12:	4a3a      	ldr	r2, [pc, #232]	; (1acfc <ip_interface_sendto+0x230>)
   1ac14:	2e01      	cmp	r6, #1
   1ac16:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1ac1a:	d001      	beq.n	1ac20 <ip_interface_sendto+0x154>
   1ac1c:	2e12      	cmp	r6, #18
   1ac1e:	d10e      	bne.n	1ac3e <ip_interface_sendto+0x172>
   1ac20:	4b37      	ldr	r3, [pc, #220]	; (1ad00 <ip_interface_sendto+0x234>)
   1ac22:	781b      	ldrb	r3, [r3, #0]
   1ac24:	b147      	cbz	r7, 1ac38 <ip_interface_sendto+0x16c>
   1ac26:	2b00      	cmp	r3, #0
   1ac28:	d1c6      	bne.n	1abb8 <ip_interface_sendto+0xec>
   1ac2a:	2000      	movs	r0, #0
   1ac2c:	a906      	add	r1, sp, #24
   1ac2e:	f007 fa6c 	bl	2210a <nrf_modem_os_timedwait>
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d0c0      	beq.n	1abb8 <ip_interface_sendto+0xec>
   1ac36:	e7c9      	b.n	1abcc <ip_interface_sendto+0x100>
   1ac38:	2b00      	cmp	r3, #0
   1ac3a:	d1c7      	bne.n	1abcc <ip_interface_sendto+0x100>
   1ac3c:	e7d7      	b.n	1abee <ip_interface_sendto+0x122>
   1ac3e:	2e03      	cmp	r6, #3
   1ac40:	d102      	bne.n	1ac48 <ip_interface_sendto+0x17c>
   1ac42:	2f00      	cmp	r7, #0
   1ac44:	d1f1      	bne.n	1ac2a <ip_interface_sendto+0x15e>
   1ac46:	e7d2      	b.n	1abee <ip_interface_sendto+0x122>
   1ac48:	2e6a      	cmp	r6, #106	; 0x6a
   1ac4a:	bf96      	itet	ls
   1ac4c:	4b2d      	ldrls	r3, [pc, #180]	; (1ad04 <ip_interface_sendto+0x238>)
   1ac4e:	205f      	movhi	r0, #95	; 0x5f
   1ac50:	5d98      	ldrbls	r0, [r3, r6]
   1ac52:	e770      	b.n	1ab36 <ip_interface_sendto+0x6a>
   1ac54:	230c      	movs	r3, #12
   1ac56:	2200      	movs	r2, #0
   1ac58:	7203      	strb	r3, [r0, #8]
   1ac5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ac5c:	7242      	strb	r2, [r0, #9]
   1ac5e:	7282      	strb	r2, [r0, #10]
   1ac60:	72c2      	strb	r2, [r0, #11]
   1ac62:	f8c0 a014 	str.w	sl, [r0, #20]
   1ac66:	b11b      	cbz	r3, 1ac70 <ip_interface_sendto+0x1a4>
   1ac68:	ea4a 0303 	orr.w	r3, sl, r3
   1ac6c:	6173      	str	r3, [r6, #20]
   1ac6e:	62a2      	str	r2, [r4, #40]	; 0x28
   1ac70:	f1bb 0f00 	cmp.w	fp, #0
   1ac74:	d015      	beq.n	1aca2 <ip_interface_sendto+0x1d6>
   1ac76:	f106 031c 	add.w	r3, r6, #28
   1ac7a:	9301      	str	r3, [sp, #4]
   1ac7c:	f10d 0312 	add.w	r3, sp, #18
   1ac80:	9300      	str	r3, [sp, #0]
   1ac82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ac84:	ab04      	add	r3, sp, #16
   1ac86:	4659      	mov	r1, fp
   1ac88:	68e0      	ldr	r0, [r4, #12]
   1ac8a:	f008 fb06 	bl	2329a <ip_addr_parse>
   1ac8e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ac92:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1ac96:	8332      	strh	r2, [r6, #24]
   1ac98:	68b2      	ldr	r2, [r6, #8]
   1ac9a:	8373      	strh	r3, [r6, #26]
   1ac9c:	3304      	adds	r3, #4
   1ac9e:	4413      	add	r3, r2
   1aca0:	60b3      	str	r3, [r6, #8]
   1aca2:	69a3      	ldr	r3, [r4, #24]
   1aca4:	6075      	str	r5, [r6, #4]
   1aca6:	6133      	str	r3, [r6, #16]
   1aca8:	9b03      	ldr	r3, [sp, #12]
   1acaa:	60f3      	str	r3, [r6, #12]
   1acac:	9b02      	ldr	r3, [sp, #8]
   1acae:	b123      	cbz	r3, 1acba <ip_interface_sendto+0x1ee>
   1acb0:	462a      	mov	r2, r5
   1acb2:	4619      	mov	r1, r3
   1acb4:	6830      	ldr	r0, [r6, #0]
   1acb6:	f009 ff09 	bl	24acc <memcpy>
   1acba:	4632      	mov	r2, r6
   1acbc:	4641      	mov	r1, r8
   1acbe:	2004      	movs	r0, #4
   1acc0:	f008 fa79 	bl	231b6 <rpc_client_request_send>
   1acc4:	4b0d      	ldr	r3, [pc, #52]	; (1acfc <ip_interface_sendto+0x230>)
   1acc6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   1acca:	2800      	cmp	r0, #0
   1accc:	d09a      	beq.n	1ac04 <ip_interface_sendto+0x138>
   1acce:	6946      	ldr	r6, [r0, #20]
   1acd0:	2e00      	cmp	r6, #0
   1acd2:	d19b      	bne.n	1ac0c <ip_interface_sendto+0x140>
   1acd4:	6823      	ldr	r3, [r4, #0]
   1acd6:	011b      	lsls	r3, r3, #4
   1acd8:	bf49      	itett	mi
   1acda:	6823      	ldrmi	r3, [r4, #0]
   1acdc:	6985      	ldrpl	r5, [r0, #24]
   1acde:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   1ace2:	6023      	strmi	r3, [r4, #0]
   1ace4:	f008 fa6e 	bl	231c4 <rpc_client_message_free>
   1ace8:	2300      	movs	r3, #0
   1acea:	4a04      	ldr	r2, [pc, #16]	; (1acfc <ip_interface_sendto+0x230>)
   1acec:	462e      	mov	r6, r5
   1acee:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   1acf2:	e705      	b.n	1ab00 <ip_interface_sendto+0x34>
   1acf4:	f247 0807 	movw	r8, #28679	; 0x7007
   1acf8:	e755      	b.n	1aba6 <ip_interface_sendto+0xda>
   1acfa:	bf00      	nop
   1acfc:	2000d46c 	.word	0x2000d46c
   1ad00:	2000d57e 	.word	0x2000d57e
   1ad04:	000274fe 	.word	0x000274fe

0001ad08 <ip_interface_socketoption_get>:
   1ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad0c:	461f      	mov	r7, r3
   1ad0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad12:	b085      	sub	sp, #20
   1ad14:	9303      	str	r3, [sp, #12]
   1ad16:	680b      	ldr	r3, [r1, #0]
   1ad18:	4606      	mov	r6, r0
   1ad1a:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   1ad1e:	025d      	lsls	r5, r3, #9
   1ad20:	460c      	mov	r4, r1
   1ad22:	4691      	mov	r9, r2
   1ad24:	d461      	bmi.n	1adea <ip_interface_socketoption_get+0xe2>
   1ad26:	680b      	ldr	r3, [r1, #0]
   1ad28:	0219      	lsls	r1, r3, #8
   1ad2a:	d45e      	bmi.n	1adea <ip_interface_socketoption_get+0xe2>
   1ad2c:	6823      	ldr	r3, [r4, #0]
   1ad2e:	01da      	lsls	r2, r3, #7
   1ad30:	d45b      	bmi.n	1adea <ip_interface_socketoption_get+0xe2>
   1ad32:	6823      	ldr	r3, [r4, #0]
   1ad34:	019b      	lsls	r3, r3, #6
   1ad36:	d458      	bmi.n	1adea <ip_interface_socketoption_get+0xe2>
   1ad38:	6823      	ldr	r3, [r4, #0]
   1ad3a:	f247 0204 	movw	r2, #28676	; 0x7004
   1ad3e:	9301      	str	r3, [sp, #4]
   1ad40:	6823      	ldr	r3, [r4, #0]
   1ad42:	69a1      	ldr	r1, [r4, #24]
   1ad44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ad48:	6023      	str	r3, [r4, #0]
   1ad4a:	f8d8 3000 	ldr.w	r3, [r8]
   1ad4e:	f008 face 	bl	232ee <ip_interface_request_create>
   1ad52:	4605      	mov	r5, r0
   1ad54:	2800      	cmp	r0, #0
   1ad56:	d045      	beq.n	1ade4 <ip_interface_socketoption_get+0xdc>
   1ad58:	6883      	ldr	r3, [r0, #8]
   1ad5a:	4602      	mov	r2, r0
   1ad5c:	3308      	adds	r3, #8
   1ad5e:	6083      	str	r3, [r0, #8]
   1ad60:	f8c0 9014 	str.w	r9, [r0, #20]
   1ad64:	f247 0104 	movw	r1, #28676	; 0x7004
   1ad68:	f8d0 9000 	ldr.w	r9, [r0]
   1ad6c:	6187      	str	r7, [r0, #24]
   1ad6e:	2004      	movs	r0, #4
   1ad70:	f008 fa21 	bl	231b6 <rpc_client_request_send>
   1ad74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1ad78:	4630      	mov	r0, r6
   1ad7a:	4611      	mov	r1, r2
   1ad7c:	ab03      	add	r3, sp, #12
   1ad7e:	f008 fac9 	bl	23314 <ip_interface_wait>
   1ad82:	4683      	mov	fp, r0
   1ad84:	b9b8      	cbnz	r0, 1adb6 <ip_interface_socketoption_get+0xae>
   1ad86:	4f1a      	ldr	r7, [pc, #104]	; (1adf0 <ip_interface_socketoption_get+0xe8>)
   1ad88:	f8d8 0000 	ldr.w	r0, [r8]
   1ad8c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   1ad90:	b1e9      	cbz	r1, 1adce <ip_interface_socketoption_get+0xc6>
   1ad92:	684a      	ldr	r2, [r1, #4]
   1ad94:	4282      	cmp	r2, r0
   1ad96:	bf28      	it	cs
   1ad98:	4602      	movcs	r2, r0
   1ad9a:	f8c8 2000 	str.w	r2, [r8]
   1ad9e:	6809      	ldr	r1, [r1, #0]
   1ada0:	b191      	cbz	r1, 1adc8 <ip_interface_socketoption_get+0xc0>
   1ada2:	4650      	mov	r0, sl
   1ada4:	f009 fe92 	bl	24acc <memcpy>
   1ada8:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   1adac:	f008 fa0a 	bl	231c4 <rpc_client_message_free>
   1adb0:	2200      	movs	r2, #0
   1adb2:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   1adb6:	4648      	mov	r0, r9
   1adb8:	f008 fa07 	bl	231ca <rpc_client_data_free>
   1adbc:	9b01      	ldr	r3, [sp, #4]
   1adbe:	6023      	str	r3, [r4, #0]
   1adc0:	4658      	mov	r0, fp
   1adc2:	b005      	add	sp, #20
   1adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc8:	f04f 0b16 	mov.w	fp, #22
   1adcc:	e7ec      	b.n	1ada8 <ip_interface_socketoption_get+0xa0>
   1adce:	686a      	ldr	r2, [r5, #4]
   1add0:	4649      	mov	r1, r9
   1add2:	4282      	cmp	r2, r0
   1add4:	bf28      	it	cs
   1add6:	4602      	movcs	r2, r0
   1add8:	4650      	mov	r0, sl
   1adda:	f8c8 2000 	str.w	r2, [r8]
   1adde:	f009 fe75 	bl	24acc <memcpy>
   1ade2:	e7e8      	b.n	1adb6 <ip_interface_socketoption_get+0xae>
   1ade4:	f04f 0b0c 	mov.w	fp, #12
   1ade8:	e7e8      	b.n	1adbc <ip_interface_socketoption_get+0xb4>
   1adea:	f04f 0b0b 	mov.w	fp, #11
   1adee:	e7e7      	b.n	1adc0 <ip_interface_socketoption_get+0xb8>
   1adf0:	2000d46c 	.word	0x2000d46c

0001adf4 <ip_interface_bind>:
   1adf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1adf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1adfc:	4607      	mov	r7, r0
   1adfe:	4690      	mov	r8, r2
   1ae00:	460e      	mov	r6, r1
   1ae02:	9303      	str	r3, [sp, #12]
   1ae04:	2900      	cmp	r1, #0
   1ae06:	d04d      	beq.n	1aea4 <ip_interface_bind+0xb0>
   1ae08:	2a00      	cmp	r2, #0
   1ae0a:	d04b      	beq.n	1aea4 <ip_interface_bind+0xb0>
   1ae0c:	f7ff fc96 	bl	1a73c <interface_socket_from_handle_get>
   1ae10:	4605      	mov	r5, r0
   1ae12:	2800      	cmp	r0, #0
   1ae14:	d048      	beq.n	1aea8 <ip_interface_bind+0xb4>
   1ae16:	6803      	ldr	r3, [r0, #0]
   1ae18:	b29b      	uxth	r3, r3
   1ae1a:	2b02      	cmp	r3, #2
   1ae1c:	d144      	bne.n	1aea8 <ip_interface_bind+0xb4>
   1ae1e:	6981      	ldr	r1, [r0, #24]
   1ae20:	2300      	movs	r3, #0
   1ae22:	f247 0205 	movw	r2, #28677	; 0x7005
   1ae26:	4638      	mov	r0, r7
   1ae28:	f008 fa61 	bl	232ee <ip_interface_request_create>
   1ae2c:	4604      	mov	r4, r0
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	d03c      	beq.n	1aeac <ip_interface_bind+0xb8>
   1ae32:	6883      	ldr	r3, [r0, #8]
   1ae34:	4642      	mov	r2, r8
   1ae36:	3304      	adds	r3, #4
   1ae38:	6083      	str	r3, [r0, #8]
   1ae3a:	f100 0318 	add.w	r3, r0, #24
   1ae3e:	9301      	str	r3, [sp, #4]
   1ae40:	f10d 030a 	add.w	r3, sp, #10
   1ae44:	9300      	str	r3, [sp, #0]
   1ae46:	4631      	mov	r1, r6
   1ae48:	68e8      	ldr	r0, [r5, #12]
   1ae4a:	ab02      	add	r3, sp, #8
   1ae4c:	f008 fa25 	bl	2329a <ip_addr_parse>
   1ae50:	bb08      	cbnz	r0, 1ae96 <ip_interface_bind+0xa2>
   1ae52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ae56:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1ae5a:	82a3      	strh	r3, [r4, #20]
   1ae5c:	68a3      	ldr	r3, [r4, #8]
   1ae5e:	4e14      	ldr	r6, [pc, #80]	; (1aeb0 <ip_interface_bind+0xbc>)
   1ae60:	4413      	add	r3, r2
   1ae62:	60a3      	str	r3, [r4, #8]
   1ae64:	682b      	ldr	r3, [r5, #0]
   1ae66:	82e2      	strh	r2, [r4, #22]
   1ae68:	4033      	ands	r3, r6
   1ae6a:	f043 0303 	orr.w	r3, r3, #3
   1ae6e:	4622      	mov	r2, r4
   1ae70:	f247 0105 	movw	r1, #28677	; 0x7005
   1ae74:	2004      	movs	r0, #4
   1ae76:	602b      	str	r3, [r5, #0]
   1ae78:	f008 f99d 	bl	231b6 <rpc_client_request_send>
   1ae7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ae80:	2104      	movs	r1, #4
   1ae82:	4638      	mov	r0, r7
   1ae84:	ab03      	add	r3, sp, #12
   1ae86:	f008 fa45 	bl	23314 <ip_interface_wait>
   1ae8a:	b140      	cbz	r0, 1ae9e <ip_interface_bind+0xaa>
   1ae8c:	682b      	ldr	r3, [r5, #0]
   1ae8e:	4033      	ands	r3, r6
   1ae90:	f043 0302 	orr.w	r3, r3, #2
   1ae94:	602b      	str	r3, [r5, #0]
   1ae96:	f007 f9c1 	bl	2221c <nrf_modem_os_errno_set>
   1ae9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ae9e:	b004      	add	sp, #16
   1aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aea4:	2016      	movs	r0, #22
   1aea6:	e7f6      	b.n	1ae96 <ip_interface_bind+0xa2>
   1aea8:	2009      	movs	r0, #9
   1aeaa:	e7f4      	b.n	1ae96 <ip_interface_bind+0xa2>
   1aeac:	200c      	movs	r0, #12
   1aeae:	e7f2      	b.n	1ae96 <ip_interface_bind+0xa2>
   1aeb0:	ffff0000 	.word	0xffff0000

0001aeb4 <ip_interface_listen>:
   1aeb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1aeb6:	4605      	mov	r5, r0
   1aeb8:	f7ff fc40 	bl	1a73c <interface_socket_from_handle_get>
   1aebc:	4604      	mov	r4, r0
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d03a      	beq.n	1af38 <ip_interface_listen+0x84>
   1aec2:	6803      	ldr	r3, [r0, #0]
   1aec4:	b29b      	uxth	r3, r3
   1aec6:	2b04      	cmp	r3, #4
   1aec8:	d003      	beq.n	1aed2 <ip_interface_listen+0x1e>
   1aeca:	6803      	ldr	r3, [r0, #0]
   1aecc:	b29b      	uxth	r3, r3
   1aece:	2b0b      	cmp	r3, #11
   1aed0:	d134      	bne.n	1af3c <ip_interface_listen+0x88>
   1aed2:	2100      	movs	r1, #0
   1aed4:	4628      	mov	r0, r5
   1aed6:	4a1c      	ldr	r2, [pc, #112]	; (1af48 <ip_interface_listen+0x94>)
   1aed8:	f7ff fb9c 	bl	1a614 <interface_socket_packet_handler_update>
   1aedc:	4603      	mov	r3, r0
   1aede:	bb78      	cbnz	r0, 1af40 <ip_interface_listen+0x8c>
   1aee0:	f247 0208 	movw	r2, #28680	; 0x7008
   1aee4:	4628      	mov	r0, r5
   1aee6:	69a1      	ldr	r1, [r4, #24]
   1aee8:	f008 fa01 	bl	232ee <ip_interface_request_create>
   1aeec:	4602      	mov	r2, r0
   1aeee:	b348      	cbz	r0, 1af44 <ip_interface_listen+0x90>
   1aef0:	6883      	ldr	r3, [r0, #8]
   1aef2:	4e16      	ldr	r6, [pc, #88]	; (1af4c <ip_interface_listen+0x98>)
   1aef4:	3304      	adds	r3, #4
   1aef6:	6083      	str	r3, [r0, #8]
   1aef8:	6823      	ldr	r3, [r4, #0]
   1aefa:	f247 0108 	movw	r1, #28680	; 0x7008
   1aefe:	4033      	ands	r3, r6
   1af00:	f043 0306 	orr.w	r3, r3, #6
   1af04:	2004      	movs	r0, #4
   1af06:	6023      	str	r3, [r4, #0]
   1af08:	f008 f955 	bl	231b6 <rpc_client_request_send>
   1af0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1af14:	9301      	str	r3, [sp, #4]
   1af16:	2107      	movs	r1, #7
   1af18:	4628      	mov	r0, r5
   1af1a:	ab01      	add	r3, sp, #4
   1af1c:	f008 f9fa 	bl	23314 <ip_interface_wait>
   1af20:	b140      	cbz	r0, 1af34 <ip_interface_listen+0x80>
   1af22:	6823      	ldr	r3, [r4, #0]
   1af24:	4033      	ands	r3, r6
   1af26:	f043 0304 	orr.w	r3, r3, #4
   1af2a:	6023      	str	r3, [r4, #0]
   1af2c:	f007 f976 	bl	2221c <nrf_modem_os_errno_set>
   1af30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1af34:	b002      	add	sp, #8
   1af36:	bd70      	pop	{r4, r5, r6, pc}
   1af38:	2009      	movs	r0, #9
   1af3a:	e7f7      	b.n	1af2c <ip_interface_listen+0x78>
   1af3c:	2016      	movs	r0, #22
   1af3e:	e7f5      	b.n	1af2c <ip_interface_listen+0x78>
   1af40:	200b      	movs	r0, #11
   1af42:	e7f3      	b.n	1af2c <ip_interface_listen+0x78>
   1af44:	200c      	movs	r0, #12
   1af46:	e7f1      	b.n	1af2c <ip_interface_listen+0x78>
   1af48:	00023247 	.word	0x00023247
   1af4c:	ffff0000 	.word	0xffff0000

0001af50 <ip_interface_accept>:
   1af50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af54:	2500      	movs	r5, #0
   1af56:	4680      	mov	r8, r0
   1af58:	460f      	mov	r7, r1
   1af5a:	4691      	mov	r9, r2
   1af5c:	9500      	str	r5, [sp, #0]
   1af5e:	f7ff fbed 	bl	1a73c <interface_socket_from_handle_get>
   1af62:	4604      	mov	r4, r0
   1af64:	2800      	cmp	r0, #0
   1af66:	f000 80c7 	beq.w	1b0f8 <ip_interface_accept+0x1a8>
   1af6a:	6903      	ldr	r3, [r0, #16]
   1af6c:	2b01      	cmp	r3, #1
   1af6e:	f040 80c6 	bne.w	1b0fe <ip_interface_accept+0x1ae>
   1af72:	6803      	ldr	r3, [r0, #0]
   1af74:	b29b      	uxth	r3, r3
   1af76:	2b07      	cmp	r3, #7
   1af78:	f040 80c3 	bne.w	1b102 <ip_interface_accept+0x1b2>
   1af7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af80:	9301      	str	r3, [sp, #4]
   1af82:	6803      	ldr	r3, [r0, #0]
   1af84:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   1af88:	d15c      	bne.n	1b044 <ip_interface_accept+0xf4>
   1af8a:	6803      	ldr	r3, [r0, #0]
   1af8c:	03db      	lsls	r3, r3, #15
   1af8e:	d45d      	bmi.n	1b04c <ip_interface_accept+0xfc>
   1af90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1af94:	4640      	mov	r0, r8
   1af96:	4611      	mov	r1, r2
   1af98:	ab01      	add	r3, sp, #4
   1af9a:	f008 f9bb 	bl	23314 <ip_interface_wait>
   1af9e:	4606      	mov	r6, r0
   1afa0:	6825      	ldr	r5, [r4, #0]
   1afa2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1afa6:	d053      	beq.n	1b050 <ip_interface_accept+0x100>
   1afa8:	4668      	mov	r0, sp
   1afaa:	4a58      	ldr	r2, [pc, #352]	; (1b10c <ip_interface_accept+0x1bc>)
   1afac:	6921      	ldr	r1, [r4, #16]
   1afae:	f7ff faff 	bl	1a5b0 <interface_socket_allocate>
   1afb2:	9b00      	ldr	r3, [sp, #0]
   1afb4:	4605      	mov	r5, r0
   1afb6:	2b00      	cmp	r3, #0
   1afb8:	f000 80a5 	beq.w	1b106 <ip_interface_accept+0x1b6>
   1afbc:	6962      	ldr	r2, [r4, #20]
   1afbe:	4640      	mov	r0, r8
   1afc0:	615a      	str	r2, [r3, #20]
   1afc2:	68e2      	ldr	r2, [r4, #12]
   1afc4:	69a1      	ldr	r1, [r4, #24]
   1afc6:	60da      	str	r2, [r3, #12]
   1afc8:	6922      	ldr	r2, [r4, #16]
   1afca:	611a      	str	r2, [r3, #16]
   1afcc:	f247 020c 	movw	r2, #28684	; 0x700c
   1afd0:	2300      	movs	r3, #0
   1afd2:	f008 f98c 	bl	232ee <ip_interface_request_create>
   1afd6:	4602      	mov	r2, r0
   1afd8:	2800      	cmp	r0, #0
   1afda:	f000 8094 	beq.w	1b106 <ip_interface_accept+0x1b6>
   1afde:	6823      	ldr	r3, [r4, #0]
   1afe0:	f8df b130 	ldr.w	fp, [pc, #304]	; 1b114 <ip_interface_accept+0x1c4>
   1afe4:	f247 010c 	movw	r1, #28684	; 0x700c
   1afe8:	ea03 030b 	and.w	r3, r3, fp
   1afec:	f043 0308 	orr.w	r3, r3, #8
   1aff0:	2004      	movs	r0, #4
   1aff2:	6023      	str	r3, [r4, #0]
   1aff4:	f008 f8df 	bl	231b6 <rpc_client_request_send>
   1aff8:	6823      	ldr	r3, [r4, #0]
   1affa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1affe:	ea23 030a 	bic.w	r3, r3, sl
   1b002:	6023      	str	r3, [r4, #0]
   1b004:	2109      	movs	r1, #9
   1b006:	ab01      	add	r3, sp, #4
   1b008:	4640      	mov	r0, r8
   1b00a:	f008 f983 	bl	23314 <ip_interface_wait>
   1b00e:	6823      	ldr	r3, [r4, #0]
   1b010:	4606      	mov	r6, r0
   1b012:	ea43 030a 	orr.w	r3, r3, sl
   1b016:	6023      	str	r3, [r4, #0]
   1b018:	b1e0      	cbz	r0, 1b054 <ip_interface_accept+0x104>
   1b01a:	6823      	ldr	r3, [r4, #0]
   1b01c:	ea03 030b 	and.w	r3, r3, fp
   1b020:	f043 0307 	orr.w	r3, r3, #7
   1b024:	6023      	str	r3, [r4, #0]
   1b026:	6823      	ldr	r3, [r4, #0]
   1b028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b02c:	6023      	str	r3, [r4, #0]
   1b02e:	9b00      	ldr	r3, [sp, #0]
   1b030:	b113      	cbz	r3, 1b038 <ip_interface_accept+0xe8>
   1b032:	4628      	mov	r0, r5
   1b034:	f7ff fae2 	bl	1a5fc <interface_socket_free>
   1b038:	4630      	mov	r0, r6
   1b03a:	f007 f8ef 	bl	2221c <nrf_modem_os_errno_set>
   1b03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b042:	e046      	b.n	1b0d2 <ip_interface_accept+0x182>
   1b044:	260b      	movs	r6, #11
   1b046:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   1b04a:	e7a9      	b.n	1afa0 <ip_interface_accept+0x50>
   1b04c:	2616      	movs	r6, #22
   1b04e:	e7a7      	b.n	1afa0 <ip_interface_accept+0x50>
   1b050:	2e00      	cmp	r6, #0
   1b052:	d1ec      	bne.n	1b02e <ip_interface_accept+0xde>
   1b054:	4e2e      	ldr	r6, [pc, #184]	; (1b110 <ip_interface_accept+0x1c0>)
   1b056:	9800      	ldr	r0, [sp, #0]
   1b058:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   1b05c:	699a      	ldr	r2, [r3, #24]
   1b05e:	6182      	str	r2, [r0, #24]
   1b060:	b1c7      	cbz	r7, 1b094 <ip_interface_accept+0x144>
   1b062:	68c2      	ldr	r2, [r0, #12]
   1b064:	2a0a      	cmp	r2, #10
   1b066:	d137      	bne.n	1b0d8 <ip_interface_accept+0x188>
   1b068:	f8d9 1000 	ldr.w	r1, [r9]
   1b06c:	2924      	cmp	r1, #36	; 0x24
   1b06e:	d111      	bne.n	1b094 <ip_interface_accept+0x144>
   1b070:	7039      	strb	r1, [r7, #0]
   1b072:	607a      	str	r2, [r7, #4]
   1b074:	7f1a      	ldrb	r2, [r3, #28]
   1b076:	7f59      	ldrb	r1, [r3, #29]
   1b078:	3710      	adds	r7, #16
   1b07a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b07e:	f827 2c08 	strh.w	r2, [r7, #-8]
   1b082:	f103 0220 	add.w	r2, r3, #32
   1b086:	3330      	adds	r3, #48	; 0x30
   1b088:	f852 1b04 	ldr.w	r1, [r2], #4
   1b08c:	429a      	cmp	r2, r3
   1b08e:	f847 1b04 	str.w	r1, [r7], #4
   1b092:	d1f9      	bne.n	1b088 <ip_interface_accept+0x138>
   1b094:	6802      	ldr	r2, [r0, #0]
   1b096:	491f      	ldr	r1, [pc, #124]	; (1b114 <ip_interface_accept+0x1c4>)
   1b098:	400a      	ands	r2, r1
   1b09a:	f042 0205 	orr.w	r2, r2, #5
   1b09e:	6002      	str	r2, [r0, #0]
   1b0a0:	6802      	ldr	r2, [r0, #0]
   1b0a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1b0a6:	6002      	str	r2, [r0, #0]
   1b0a8:	6802      	ldr	r2, [r0, #0]
   1b0aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1b0ae:	6002      	str	r2, [r0, #0]
   1b0b0:	6823      	ldr	r3, [r4, #0]
   1b0b2:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   1b0b6:	400b      	ands	r3, r1
   1b0b8:	f043 0307 	orr.w	r3, r3, #7
   1b0bc:	6023      	str	r3, [r4, #0]
   1b0be:	6823      	ldr	r3, [r4, #0]
   1b0c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b0c4:	6023      	str	r3, [r4, #0]
   1b0c6:	f008 f87d 	bl	231c4 <rpc_client_message_free>
   1b0ca:	2300      	movs	r3, #0
   1b0cc:	4628      	mov	r0, r5
   1b0ce:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   1b0d2:	b003      	add	sp, #12
   1b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0d8:	2a02      	cmp	r2, #2
   1b0da:	d1db      	bne.n	1b094 <ip_interface_accept+0x144>
   1b0dc:	f8d9 1000 	ldr.w	r1, [r9]
   1b0e0:	2910      	cmp	r1, #16
   1b0e2:	d1d7      	bne.n	1b094 <ip_interface_accept+0x144>
   1b0e4:	7039      	strb	r1, [r7, #0]
   1b0e6:	607a      	str	r2, [r7, #4]
   1b0e8:	7f1a      	ldrb	r2, [r3, #28]
   1b0ea:	7f59      	ldrb	r1, [r3, #29]
   1b0ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b0f0:	813a      	strh	r2, [r7, #8]
   1b0f2:	6a1b      	ldr	r3, [r3, #32]
   1b0f4:	60fb      	str	r3, [r7, #12]
   1b0f6:	e7cd      	b.n	1b094 <ip_interface_accept+0x144>
   1b0f8:	2609      	movs	r6, #9
   1b0fa:	4605      	mov	r5, r0
   1b0fc:	e797      	b.n	1b02e <ip_interface_accept+0xde>
   1b0fe:	265f      	movs	r6, #95	; 0x5f
   1b100:	e795      	b.n	1b02e <ip_interface_accept+0xde>
   1b102:	2616      	movs	r6, #22
   1b104:	e793      	b.n	1b02e <ip_interface_accept+0xde>
   1b106:	260c      	movs	r6, #12
   1b108:	e791      	b.n	1b02e <ip_interface_accept+0xde>
   1b10a:	bf00      	nop
   1b10c:	00023247 	.word	0x00023247
   1b110:	2000d46c 	.word	0x2000d46c
   1b114:	ffff0000 	.word	0xffff0000

0001b118 <ip_interface_setopt>:
   1b118:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b11c:	2901      	cmp	r1, #1
   1b11e:	4606      	mov	r6, r0
   1b120:	4690      	mov	r8, r2
   1b122:	461d      	mov	r5, r3
   1b124:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1b126:	d008      	beq.n	1b13a <ip_interface_setopt+0x22>
   1b128:	206d      	movs	r0, #109	; 0x6d
   1b12a:	f007 f877 	bl	2221c <nrf_modem_os_errno_set>
   1b12e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b132:	4620      	mov	r0, r4
   1b134:	b004      	add	sp, #16
   1b136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b13a:	f7ff faff 	bl	1a73c <interface_socket_from_handle_get>
   1b13e:	4604      	mov	r4, r0
   1b140:	b908      	cbnz	r0, 1b146 <ip_interface_setopt+0x2e>
   1b142:	2009      	movs	r0, #9
   1b144:	e7f1      	b.n	1b12a <ip_interface_setopt+0x12>
   1b146:	f1a8 0319 	sub.w	r3, r8, #25
   1b14a:	2b1e      	cmp	r3, #30
   1b14c:	f200 8086 	bhi.w	1b25c <ip_interface_setopt+0x144>
   1b150:	e8df f003 	tbb	[pc, r3]
   1b154:	84848410 	.word	0x84848410
   1b158:	51493d84 	.word	0x51493d84
   1b15c:	84848484 	.word	0x84848484
   1b160:	59848484 	.word	0x59848484
   1b164:	84848484 	.word	0x84848484
   1b168:	84848484 	.word	0x84848484
   1b16c:	73666184 	.word	0x73666184
   1b170:	7976      	.short	0x7976
   1b172:	7c          	.byte	0x7c
   1b173:	00          	.byte	0x00
   1b174:	b90d      	cbnz	r5, 1b17a <ip_interface_setopt+0x62>
   1b176:	200e      	movs	r0, #14
   1b178:	e7d7      	b.n	1b12a <ip_interface_setopt+0x12>
   1b17a:	4628      	mov	r0, r5
   1b17c:	f7f5 ffb5 	bl	110ea <strlen>
   1b180:	42b8      	cmp	r0, r7
   1b182:	d1f8      	bne.n	1b176 <ip_interface_setopt+0x5e>
   1b184:	6823      	ldr	r3, [r4, #0]
   1b186:	b29b      	uxth	r3, r3
   1b188:	2b02      	cmp	r3, #2
   1b18a:	d1da      	bne.n	1b142 <ip_interface_setopt+0x2a>
   1b18c:	4628      	mov	r0, r5
   1b18e:	4937      	ldr	r1, [pc, #220]	; (1b26c <ip_interface_setopt+0x154>)
   1b190:	f009 fcfb 	bl	24b8a <strstr>
   1b194:	b108      	cbz	r0, 1b19a <ip_interface_setopt+0x82>
   1b196:	4285      	cmp	r5, r0
   1b198:	d001      	beq.n	1b19e <ip_interface_setopt+0x86>
   1b19a:	2016      	movs	r0, #22
   1b19c:	e7c5      	b.n	1b12a <ip_interface_setopt+0x12>
   1b19e:	4833      	ldr	r0, [pc, #204]	; (1b26c <ip_interface_setopt+0x154>)
   1b1a0:	f7f5 ffa3 	bl	110ea <strlen>
   1b1a4:	220a      	movs	r2, #10
   1b1a6:	2100      	movs	r1, #0
   1b1a8:	4428      	add	r0, r5
   1b1aa:	f003 fe05 	bl	1edb8 <strtoul>
   1b1ae:	2304      	movs	r3, #4
   1b1b0:	9301      	str	r3, [sp, #4]
   1b1b2:	ab03      	add	r3, sp, #12
   1b1b4:	4621      	mov	r1, r4
   1b1b6:	9003      	str	r0, [sp, #12]
   1b1b8:	9300      	str	r3, [sp, #0]
   1b1ba:	2208      	movs	r2, #8
   1b1bc:	f243 0310 	movw	r3, #12304	; 0x3010
   1b1c0:	4630      	mov	r0, r6
   1b1c2:	f008 fa4f 	bl	23664 <ip_interface_socketoption_send>
   1b1c6:	4604      	mov	r4, r0
   1b1c8:	2800      	cmp	r0, #0
   1b1ca:	d0b2      	beq.n	1b132 <ip_interface_setopt+0x1a>
   1b1cc:	e7ad      	b.n	1b12a <ip_interface_setopt+0x12>
   1b1ce:	4602      	mov	r2, r0
   1b1d0:	4633      	mov	r3, r6
   1b1d2:	f248 0101 	movw	r1, #32769	; 0x8001
   1b1d6:	f44f 7000 	mov.w	r0, #512	; 0x200
   1b1da:	e9cd 5700 	strd	r5, r7, [sp]
   1b1de:	f008 fa8c 	bl	236fa <setopt_check_and_send_int>
   1b1e2:	4604      	mov	r4, r0
   1b1e4:	e7a5      	b.n	1b132 <ip_interface_setopt+0x1a>
   1b1e6:	4602      	mov	r2, r0
   1b1e8:	4633      	mov	r3, r6
   1b1ea:	f244 0110 	movw	r1, #16400	; 0x4010
   1b1ee:	2004      	movs	r0, #4
   1b1f0:	e9cd 5700 	strd	r5, r7, [sp]
   1b1f4:	e7f3      	b.n	1b1de <ip_interface_setopt+0xc6>
   1b1f6:	4602      	mov	r2, r0
   1b1f8:	4633      	mov	r3, r6
   1b1fa:	f246 0110 	movw	r1, #24592	; 0x6010
   1b1fe:	2006      	movs	r0, #6
   1b200:	e9cd 5700 	strd	r5, r7, [sp]
   1b204:	e7eb      	b.n	1b1de <ip_interface_setopt+0xc6>
   1b206:	4602      	mov	r2, r0
   1b208:	4633      	mov	r3, r6
   1b20a:	f241 0104 	movw	r1, #4100	; 0x1004
   1b20e:	2008      	movs	r0, #8
   1b210:	e9cd 5700 	strd	r5, r7, [sp]
   1b214:	e7e3      	b.n	1b1de <ip_interface_setopt+0xc6>
   1b216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b21a:	62a3      	str	r3, [r4, #40]	; 0x28
   1b21c:	2400      	movs	r4, #0
   1b21e:	e788      	b.n	1b132 <ip_interface_setopt+0x1a>
   1b220:	2400      	movs	r4, #0
   1b222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1b226:	4622      	mov	r2, r4
   1b228:	6283      	str	r3, [r0, #40]	; 0x28
   1b22a:	4621      	mov	r1, r4
   1b22c:	4623      	mov	r3, r4
   1b22e:	4630      	mov	r0, r6
   1b230:	e9cd 4400 	strd	r4, r4, [sp]
   1b234:	f7ff fc4a 	bl	1aacc <ip_interface_sendto>
   1b238:	e77b      	b.n	1b132 <ip_interface_setopt+0x1a>
   1b23a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b23e:	e7ec      	b.n	1b21a <ip_interface_setopt+0x102>
   1b240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1b244:	e7e9      	b.n	1b21a <ip_interface_setopt+0x102>
   1b246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b24a:	e7e6      	b.n	1b21a <ip_interface_setopt+0x102>
   1b24c:	4602      	mov	r2, r0
   1b24e:	4633      	mov	r3, r6
   1b250:	f245 0106 	movw	r1, #20486	; 0x5006
   1b254:	2001      	movs	r0, #1
   1b256:	e9cd 5700 	strd	r5, r7, [sp]
   1b25a:	e7c0      	b.n	1b1de <ip_interface_setopt+0xc6>
   1b25c:	462b      	mov	r3, r5
   1b25e:	4642      	mov	r2, r8
   1b260:	2101      	movs	r1, #1
   1b262:	4630      	mov	r0, r6
   1b264:	9700      	str	r7, [sp, #0]
   1b266:	f7ff fa79 	bl	1a75c <interface_socket_setopt>
   1b26a:	e7ba      	b.n	1b1e2 <ip_interface_setopt+0xca>
   1b26c:	000274ec 	.word	0x000274ec

0001b270 <ip_interface_getaddrinfo>:
   1b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b274:	b087      	sub	sp, #28
   1b276:	9301      	str	r3, [sp, #4]
   1b278:	4b72      	ldr	r3, [pc, #456]	; (1b444 <ip_interface_getaddrinfo+0x1d4>)
   1b27a:	4680      	mov	r8, r0
   1b27c:	781b      	ldrb	r3, [r3, #0]
   1b27e:	460f      	mov	r7, r1
   1b280:	4614      	mov	r4, r2
   1b282:	b93b      	cbnz	r3, 1b294 <ip_interface_getaddrinfo+0x24>
   1b284:	2075      	movs	r0, #117	; 0x75
   1b286:	f006 ffc9 	bl	2221c <nrf_modem_os_errno_set>
   1b28a:	f240 1015 	movw	r0, #277	; 0x115
   1b28e:	b007      	add	sp, #28
   1b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b294:	4d6c      	ldr	r5, [pc, #432]	; (1b448 <ip_interface_getaddrinfo+0x1d8>)
   1b296:	682e      	ldr	r6, [r5, #0]
   1b298:	2e00      	cmp	r6, #0
   1b29a:	f040 80d0 	bne.w	1b43e <ip_interface_getaddrinfo+0x1ce>
   1b29e:	2301      	movs	r3, #1
   1b2a0:	486a      	ldr	r0, [pc, #424]	; (1b44c <ip_interface_getaddrinfo+0x1dc>)
   1b2a2:	496b      	ldr	r1, [pc, #428]	; (1b450 <ip_interface_getaddrinfo+0x1e0>)
   1b2a4:	4a6b      	ldr	r2, [pc, #428]	; (1b454 <ip_interface_getaddrinfo+0x1e4>)
   1b2a6:	602b      	str	r3, [r5, #0]
   1b2a8:	6003      	str	r3, [r0, #0]
   1b2aa:	4b6b      	ldr	r3, [pc, #428]	; (1b458 <ip_interface_getaddrinfo+0x1e8>)
   1b2ac:	468a      	mov	sl, r1
   1b2ae:	4691      	mov	r9, r2
   1b2b0:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 1b468 <ip_interface_getaddrinfo+0x1f8>
   1b2b4:	600e      	str	r6, [r1, #0]
   1b2b6:	6016      	str	r6, [r2, #0]
   1b2b8:	801e      	strh	r6, [r3, #0]
   1b2ba:	9002      	str	r0, [sp, #8]
   1b2bc:	b194      	cbz	r4, 1b2e4 <ip_interface_getaddrinfo+0x74>
   1b2be:	68e2      	ldr	r2, [r4, #12]
   1b2c0:	b182      	cbz	r2, 1b2e4 <ip_interface_getaddrinfo+0x74>
   1b2c2:	f8cb 2000 	str.w	r2, [fp]
   1b2c6:	b93f      	cbnz	r7, 1b2d8 <ip_interface_getaddrinfo+0x68>
   1b2c8:	68a0      	ldr	r0, [r4, #8]
   1b2ca:	2803      	cmp	r0, #3
   1b2cc:	d146      	bne.n	1b35c <ip_interface_getaddrinfo+0xec>
   1b2ce:	2300      	movs	r3, #0
   1b2d0:	f44f 7089 	mov.w	r0, #274	; 0x112
   1b2d4:	602b      	str	r3, [r5, #0]
   1b2d6:	e7da      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b2d8:	6822      	ldr	r2, [r4, #0]
   1b2da:	04d1      	lsls	r1, r2, #19
   1b2dc:	d508      	bpl.n	1b2f0 <ip_interface_getaddrinfo+0x80>
   1b2de:	0552      	lsls	r2, r2, #21
   1b2e0:	d406      	bmi.n	1b2f0 <ip_interface_getaddrinfo+0x80>
   1b2e2:	e7f1      	b.n	1b2c8 <ip_interface_getaddrinfo+0x58>
   1b2e4:	2201      	movs	r2, #1
   1b2e6:	f8cb 2000 	str.w	r2, [fp]
   1b2ea:	b187      	cbz	r7, 1b30e <ip_interface_getaddrinfo+0x9e>
   1b2ec:	2c00      	cmp	r4, #0
   1b2ee:	d1f3      	bne.n	1b2d8 <ip_interface_getaddrinfo+0x68>
   1b2f0:	220a      	movs	r2, #10
   1b2f2:	2100      	movs	r1, #0
   1b2f4:	4638      	mov	r0, r7
   1b2f6:	f003 fc43 	bl	1eb80 <strtol>
   1b2fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1b2fe:	1e41      	subs	r1, r0, #1
   1b300:	4291      	cmp	r1, r2
   1b302:	4b55      	ldr	r3, [pc, #340]	; (1b458 <ip_interface_getaddrinfo+0x1e8>)
   1b304:	d8e3      	bhi.n	1b2ce <ip_interface_getaddrinfo+0x5e>
   1b306:	0202      	lsls	r2, r0, #8
   1b308:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   1b30c:	8018      	strh	r0, [r3, #0]
   1b30e:	2c00      	cmp	r4, #0
   1b310:	d1da      	bne.n	1b2c8 <ip_interface_getaddrinfo+0x58>
   1b312:	f1b8 0f00 	cmp.w	r8, #0
   1b316:	d003      	beq.n	1b320 <ip_interface_getaddrinfo+0xb0>
   1b318:	4640      	mov	r0, r8
   1b31a:	f7f5 fee6 	bl	110ea <strlen>
   1b31e:	4606      	mov	r6, r0
   1b320:	2f00      	cmp	r7, #0
   1b322:	d03c      	beq.n	1b39e <ip_interface_getaddrinfo+0x12e>
   1b324:	2c00      	cmp	r4, #0
   1b326:	d03a      	beq.n	1b39e <ip_interface_getaddrinfo+0x12e>
   1b328:	6823      	ldr	r3, [r4, #0]
   1b32a:	04db      	lsls	r3, r3, #19
   1b32c:	d537      	bpl.n	1b39e <ip_interface_getaddrinfo+0x12e>
   1b32e:	213a      	movs	r1, #58	; 0x3a
   1b330:	4638      	mov	r0, r7
   1b332:	f009 fbe2 	bl	24afa <strchr>
   1b336:	bb48      	cbnz	r0, 1b38c <ip_interface_getaddrinfo+0x11c>
   1b338:	4601      	mov	r1, r0
   1b33a:	220a      	movs	r2, #10
   1b33c:	4638      	mov	r0, r7
   1b33e:	f003 fd3b 	bl	1edb8 <strtoul>
   1b342:	4601      	mov	r1, r0
   1b344:	4633      	mov	r3, r6
   1b346:	f247 020d 	movw	r2, #28685	; 0x700d
   1b34a:	4608      	mov	r0, r1
   1b34c:	f007 ffcf 	bl	232ee <ip_interface_request_create>
   1b350:	4607      	mov	r7, r0
   1b352:	bb38      	cbnz	r0, 1b3a4 <ip_interface_getaddrinfo+0x134>
   1b354:	6028      	str	r0, [r5, #0]
   1b356:	f240 100f 	movw	r0, #271	; 0x10f
   1b35a:	e798      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b35c:	6863      	ldr	r3, [r4, #4]
   1b35e:	2b0a      	cmp	r3, #10
   1b360:	d007      	beq.n	1b372 <ip_interface_getaddrinfo+0x102>
   1b362:	f033 0302 	bics.w	r3, r3, #2
   1b366:	d004      	beq.n	1b372 <ip_interface_getaddrinfo+0x102>
   1b368:	2300      	movs	r3, #0
   1b36a:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1b36e:	602b      	str	r3, [r5, #0]
   1b370:	e78d      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b372:	2301      	movs	r3, #1
   1b374:	68e1      	ldr	r1, [r4, #12]
   1b376:	aa05      	add	r2, sp, #20
   1b378:	9305      	str	r3, [sp, #20]
   1b37a:	f007 ff70 	bl	2325e <protocol_verify>
   1b37e:	2800      	cmp	r0, #0
   1b380:	d0c7      	beq.n	1b312 <ip_interface_getaddrinfo+0xa2>
   1b382:	2300      	movs	r3, #0
   1b384:	f240 1013 	movw	r0, #275	; 0x113
   1b388:	602b      	str	r3, [r5, #0]
   1b38a:	e780      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b38c:	9003      	str	r0, [sp, #12]
   1b38e:	4833      	ldr	r0, [pc, #204]	; (1b45c <ip_interface_getaddrinfo+0x1ec>)
   1b390:	f7f5 feab 	bl	110ea <strlen>
   1b394:	9b03      	ldr	r3, [sp, #12]
   1b396:	220a      	movs	r2, #10
   1b398:	2100      	movs	r1, #0
   1b39a:	4418      	add	r0, r3
   1b39c:	e7cf      	b.n	1b33e <ip_interface_getaddrinfo+0xce>
   1b39e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b3a2:	e7cf      	b.n	1b344 <ip_interface_getaddrinfo+0xd4>
   1b3a4:	2c00      	cmp	r4, #0
   1b3a6:	d03a      	beq.n	1b41e <ip_interface_getaddrinfo+0x1ae>
   1b3a8:	68a3      	ldr	r3, [r4, #8]
   1b3aa:	9a02      	ldr	r2, [sp, #8]
   1b3ac:	2b02      	cmp	r3, #2
   1b3ae:	6013      	str	r3, [r2, #0]
   1b3b0:	6862      	ldr	r2, [r4, #4]
   1b3b2:	bf08      	it	eq
   1b3b4:	f8cb 3000 	streq.w	r3, [fp]
   1b3b8:	3a02      	subs	r2, #2
   1b3ba:	2a08      	cmp	r2, #8
   1b3bc:	bf8e      	itee	hi
   1b3be:	2200      	movhi	r2, #0
   1b3c0:	4927      	ldrls	r1, [pc, #156]	; (1b460 <ip_interface_getaddrinfo+0x1f0>)
   1b3c2:	568a      	ldrsbls	r2, [r1, r2]
   1b3c4:	6182      	str	r2, [r0, #24]
   1b3c6:	68e2      	ldr	r2, [r4, #12]
   1b3c8:	61c3      	str	r3, [r0, #28]
   1b3ca:	2300      	movs	r3, #0
   1b3cc:	6202      	str	r2, [r0, #32]
   1b3ce:	7503      	strb	r3, [r0, #20]
   1b3d0:	7543      	strb	r3, [r0, #21]
   1b3d2:	7583      	strb	r3, [r0, #22]
   1b3d4:	75c3      	strb	r3, [r0, #23]
   1b3d6:	68bb      	ldr	r3, [r7, #8]
   1b3d8:	3310      	adds	r3, #16
   1b3da:	60bb      	str	r3, [r7, #8]
   1b3dc:	f1b8 0f00 	cmp.w	r8, #0
   1b3e0:	d005      	beq.n	1b3ee <ip_interface_getaddrinfo+0x17e>
   1b3e2:	6838      	ldr	r0, [r7, #0]
   1b3e4:	b118      	cbz	r0, 1b3ee <ip_interface_getaddrinfo+0x17e>
   1b3e6:	4632      	mov	r2, r6
   1b3e8:	4641      	mov	r1, r8
   1b3ea:	f009 fb6f 	bl	24acc <memcpy>
   1b3ee:	463a      	mov	r2, r7
   1b3f0:	f247 010d 	movw	r1, #28685	; 0x700d
   1b3f4:	2004      	movs	r0, #4
   1b3f6:	f007 fede 	bl	231b6 <rpc_client_request_send>
   1b3fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b3fe:	9305      	str	r3, [sp, #20]
   1b400:	4638      	mov	r0, r7
   1b402:	a905      	add	r1, sp, #20
   1b404:	f006 fe81 	bl	2210a <nrf_modem_os_timedwait>
   1b408:	682b      	ldr	r3, [r5, #0]
   1b40a:	2b01      	cmp	r3, #1
   1b40c:	d0f8      	beq.n	1b400 <ip_interface_getaddrinfo+0x190>
   1b40e:	f8d9 0000 	ldr.w	r0, [r9]
   1b412:	b950      	cbnz	r0, 1b42a <ip_interface_getaddrinfo+0x1ba>
   1b414:	f8da 3000 	ldr.w	r3, [sl]
   1b418:	9a01      	ldr	r2, [sp, #4]
   1b41a:	6013      	str	r3, [r2, #0]
   1b41c:	e737      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b41e:	2210      	movs	r2, #16
   1b420:	4621      	mov	r1, r4
   1b422:	3014      	adds	r0, #20
   1b424:	f009 fb5f 	bl	24ae6 <memset>
   1b428:	e7d5      	b.n	1b3d6 <ip_interface_getaddrinfo+0x166>
   1b42a:	2300      	movs	r3, #0
   1b42c:	602b      	str	r3, [r5, #0]
   1b42e:	4b0d      	ldr	r3, [pc, #52]	; (1b464 <ip_interface_getaddrinfo+0x1f4>)
   1b430:	6818      	ldr	r0, [r3, #0]
   1b432:	b108      	cbz	r0, 1b438 <ip_interface_getaddrinfo+0x1c8>
   1b434:	f006 fef2 	bl	2221c <nrf_modem_os_errno_set>
   1b438:	f8d9 0000 	ldr.w	r0, [r9]
   1b43c:	e727      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b43e:	f44f 708a 	mov.w	r0, #276	; 0x114
   1b442:	e724      	b.n	1b28e <ip_interface_getaddrinfo+0x1e>
   1b444:	2000d57f 	.word	0x2000d57f
   1b448:	2000d464 	.word	0x2000d464
   1b44c:	2000d458 	.word	0x2000d458
   1b450:	2000d468 	.word	0x2000d468
   1b454:	2000d460 	.word	0x2000d460
   1b458:	2000d566 	.word	0x2000d566
   1b45c:	000275a4 	.word	0x000275a4
   1b460:	000274f0 	.word	0x000274f0
   1b464:	2000d45c 	.word	0x2000d45c
   1b468:	2000d454 	.word	0x2000d454

0001b46c <ip_interface_freeaddrinfo>:
   1b46c:	b538      	push	{r3, r4, r5, lr}
   1b46e:	4d0a      	ldr	r5, [pc, #40]	; (1b498 <ip_interface_freeaddrinfo+0x2c>)
   1b470:	4604      	mov	r4, r0
   1b472:	682a      	ldr	r2, [r5, #0]
   1b474:	2a02      	cmp	r2, #2
   1b476:	d10e      	bne.n	1b496 <ip_interface_freeaddrinfo+0x2a>
   1b478:	b148      	cbz	r0, 1b48e <ip_interface_freeaddrinfo+0x22>
   1b47a:	6940      	ldr	r0, [r0, #20]
   1b47c:	f7fa fdb2 	bl	15fe4 <nrf_modem_os_free>
   1b480:	69a0      	ldr	r0, [r4, #24]
   1b482:	b108      	cbz	r0, 1b488 <ip_interface_freeaddrinfo+0x1c>
   1b484:	f7fa fdae 	bl	15fe4 <nrf_modem_os_free>
   1b488:	4620      	mov	r0, r4
   1b48a:	f7fa fdab 	bl	15fe4 <nrf_modem_os_free>
   1b48e:	2300      	movs	r3, #0
   1b490:	4a02      	ldr	r2, [pc, #8]	; (1b49c <ip_interface_freeaddrinfo+0x30>)
   1b492:	602b      	str	r3, [r5, #0]
   1b494:	6013      	str	r3, [r2, #0]
   1b496:	bd38      	pop	{r3, r4, r5, pc}
   1b498:	2000d464 	.word	0x2000d464
   1b49c:	2000d460 	.word	0x2000d460

0001b4a0 <rpc_ip_event_handler>:
   1b4a0:	f248 030f 	movw	r3, #32783	; 0x800f
   1b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a8:	4299      	cmp	r1, r3
   1b4aa:	4604      	mov	r4, r0
   1b4ac:	460e      	mov	r6, r1
   1b4ae:	b089      	sub	sp, #36	; 0x24
   1b4b0:	f000 80a4 	beq.w	1b5fc <rpc_ip_event_handler+0x15c>
   1b4b4:	f249 0304 	movw	r3, #36868	; 0x9004
   1b4b8:	4299      	cmp	r1, r3
   1b4ba:	f000 80ab 	beq.w	1b614 <rpc_ip_event_handler+0x174>
   1b4be:	f248 030d 	movw	r3, #32781	; 0x800d
   1b4c2:	4299      	cmp	r1, r3
   1b4c4:	f040 80b8 	bne.w	1b638 <rpc_ip_event_handler+0x198>
   1b4c8:	4bbc      	ldr	r3, [pc, #752]	; (1b7bc <rpc_ip_event_handler+0x31c>)
   1b4ca:	681a      	ldr	r2, [r3, #0]
   1b4cc:	9303      	str	r3, [sp, #12]
   1b4ce:	2a01      	cmp	r2, #1
   1b4d0:	d12d      	bne.n	1b52e <rpc_ip_event_handler+0x8e>
   1b4d2:	6940      	ldr	r0, [r0, #20]
   1b4d4:	2800      	cmp	r0, #0
   1b4d6:	f040 808c 	bne.w	1b5f2 <rpc_ip_event_handler+0x152>
   1b4da:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1b4de:	f8d4 8000 	ldr.w	r8, [r4]
   1b4e2:	ea4f 134a 	mov.w	r3, sl, lsl #5
   1b4e6:	4618      	mov	r0, r3
   1b4e8:	9301      	str	r3, [sp, #4]
   1b4ea:	f7fa fd71 	bl	15fd0 <nrf_modem_os_alloc>
   1b4ee:	4607      	mov	r7, r0
   1b4f0:	b310      	cbz	r0, 1b538 <rpc_ip_event_handler+0x98>
   1b4f2:	2024      	movs	r0, #36	; 0x24
   1b4f4:	fb00 f00a 	mul.w	r0, r0, sl
   1b4f8:	f7fa fd6a 	bl	15fd0 <nrf_modem_os_alloc>
   1b4fc:	4605      	mov	r5, r0
   1b4fe:	b1e8      	cbz	r0, 1b53c <rpc_ip_event_handler+0x9c>
   1b500:	2604      	movs	r6, #4
   1b502:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   1b506:	f107 0920 	add.w	r9, r7, #32
   1b50a:	9302      	str	r3, [sp, #8]
   1b50c:	9b02      	ldr	r3, [sp, #8]
   1b50e:	42ab      	cmp	r3, r5
   1b510:	d118      	bne.n	1b544 <rpc_ip_event_handler+0xa4>
   1b512:	f1ba 0f00 	cmp.w	sl, #0
   1b516:	d005      	beq.n	1b524 <rpc_ip_event_handler+0x84>
   1b518:	9b01      	ldr	r3, [sp, #4]
   1b51a:	443b      	add	r3, r7
   1b51c:	4699      	mov	r9, r3
   1b51e:	2300      	movs	r3, #0
   1b520:	f849 3c04 	str.w	r3, [r9, #-4]
   1b524:	4ba6      	ldr	r3, [pc, #664]	; (1b7c0 <rpc_ip_event_handler+0x320>)
   1b526:	601f      	str	r7, [r3, #0]
   1b528:	2302      	movs	r3, #2
   1b52a:	9a03      	ldr	r2, [sp, #12]
   1b52c:	6013      	str	r3, [r2, #0]
   1b52e:	6820      	ldr	r0, [r4, #0]
   1b530:	2800      	cmp	r0, #0
   1b532:	f040 81c7 	bne.w	1b8c4 <rpc_ip_event_handler+0x424>
   1b536:	e1c7      	b.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b538:	f7fa fd54 	bl	15fe4 <nrf_modem_os_free>
   1b53c:	220c      	movs	r2, #12
   1b53e:	4ba1      	ldr	r3, [pc, #644]	; (1b7c4 <rpc_ip_event_handler+0x324>)
   1b540:	601a      	str	r2, [r3, #0]
   1b542:	e7ef      	b.n	1b524 <rpc_ip_event_handler+0x84>
   1b544:	f858 2006 	ldr.w	r2, [r8, r6]
   1b548:	eb08 0106 	add.w	r1, r8, r6
   1b54c:	f849 2c20 	str.w	r2, [r9, #-32]
   1b550:	eb08 0206 	add.w	r2, r8, r6
   1b554:	6852      	ldr	r2, [r2, #4]
   1b556:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   1b55a:	3a01      	subs	r2, #1
   1b55c:	2a04      	cmp	r2, #4
   1b55e:	bf8c      	ite	hi
   1b560:	2200      	movhi	r2, #0
   1b562:	4b99      	ldrls	r3, [pc, #612]	; (1b7c8 <rpc_ip_event_handler+0x328>)
   1b564:	f106 0614 	add.w	r6, r6, #20
   1b568:	bf98      	it	ls
   1b56a:	569a      	ldrsbls	r2, [r3, r2]
   1b56c:	4b97      	ldr	r3, [pc, #604]	; (1b7cc <rpc_ip_event_handler+0x32c>)
   1b56e:	f849 2c1c 	str.w	r2, [r9, #-28]
   1b572:	681a      	ldr	r2, [r3, #0]
   1b574:	4b96      	ldr	r3, [pc, #600]	; (1b7d0 <rpc_ip_event_handler+0x330>)
   1b576:	f849 2c18 	str.w	r2, [r9, #-24]
   1b57a:	681a      	ldr	r2, [r3, #0]
   1b57c:	f849 2c14 	str.w	r2, [r9, #-20]
   1b580:	8a0a      	ldrh	r2, [r1, #16]
   1b582:	4994      	ldr	r1, [pc, #592]	; (1b7d4 <rpc_ip_event_handler+0x334>)
   1b584:	2a04      	cmp	r2, #4
   1b586:	8808      	ldrh	r0, [r1, #0]
   1b588:	f849 2c10 	str.w	r2, [r9, #-16]
   1b58c:	f849 5c0c 	str.w	r5, [r9, #-12]
   1b590:	eb08 0106 	add.w	r1, r8, r6
   1b594:	d121      	bne.n	1b5da <rpc_ip_event_handler+0x13a>
   1b596:	2202      	movs	r2, #2
   1b598:	606a      	str	r2, [r5, #4]
   1b59a:	2210      	movs	r2, #16
   1b59c:	8128      	strh	r0, [r5, #8]
   1b59e:	702a      	strb	r2, [r5, #0]
   1b5a0:	680a      	ldr	r2, [r1, #0]
   1b5a2:	60ea      	str	r2, [r5, #12]
   1b5a4:	f859 2c10 	ldr.w	r2, [r9, #-16]
   1b5a8:	f10b 0001 	add.w	r0, fp, #1
   1b5ac:	4416      	add	r6, r2
   1b5ae:	f7fa fd0f 	bl	15fd0 <nrf_modem_os_alloc>
   1b5b2:	f849 0c08 	str.w	r0, [r9, #-8]
   1b5b6:	b148      	cbz	r0, 1b5cc <rpc_ip_event_handler+0x12c>
   1b5b8:	465a      	mov	r2, fp
   1b5ba:	eb08 0106 	add.w	r1, r8, r6
   1b5be:	f009 fa85 	bl	24acc <memcpy>
   1b5c2:	2100      	movs	r1, #0
   1b5c4:	f859 2c08 	ldr.w	r2, [r9, #-8]
   1b5c8:	f802 100b 	strb.w	r1, [r2, fp]
   1b5cc:	f849 9c04 	str.w	r9, [r9, #-4]
   1b5d0:	445e      	add	r6, fp
   1b5d2:	f109 0920 	add.w	r9, r9, #32
   1b5d6:	3508      	adds	r5, #8
   1b5d8:	e798      	b.n	1b50c <rpc_ip_event_handler+0x6c>
   1b5da:	230a      	movs	r3, #10
   1b5dc:	f04f 0c24 	mov.w	ip, #36	; 0x24
   1b5e0:	8128      	strh	r0, [r5, #8]
   1b5e2:	606b      	str	r3, [r5, #4]
   1b5e4:	f885 c000 	strb.w	ip, [r5]
   1b5e8:	f105 0010 	add.w	r0, r5, #16
   1b5ec:	f009 fa6e 	bl	24acc <memcpy>
   1b5f0:	e7d8      	b.n	1b5a4 <rpc_ip_event_handler+0x104>
   1b5f2:	f7ff f971 	bl	1a8d8 <rpc_error_to_nrf_gai_errno>
   1b5f6:	4b73      	ldr	r3, [pc, #460]	; (1b7c4 <rpc_ip_event_handler+0x324>)
   1b5f8:	6018      	str	r0, [r3, #0]
   1b5fa:	e795      	b.n	1b528 <rpc_ip_event_handler+0x88>
   1b5fc:	6943      	ldr	r3, [r0, #20]
   1b5fe:	2b6a      	cmp	r3, #106	; 0x6a
   1b600:	bf8e      	itee	hi
   1b602:	235f      	movhi	r3, #95	; 0x5f
   1b604:	4a74      	ldrls	r2, [pc, #464]	; (1b7d8 <rpc_ip_event_handler+0x338>)
   1b606:	5cd3      	ldrbls	r3, [r2, r3]
   1b608:	4a74      	ldr	r2, [pc, #464]	; (1b7dc <rpc_ip_event_handler+0x33c>)
   1b60a:	6013      	str	r3, [r2, #0]
   1b60c:	4b74      	ldr	r3, [pc, #464]	; (1b7e0 <rpc_ip_event_handler+0x340>)
   1b60e:	2201      	movs	r2, #1
   1b610:	701a      	strb	r2, [r3, #0]
   1b612:	e159      	b.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b614:	6903      	ldr	r3, [r0, #16]
   1b616:	2b03      	cmp	r3, #3
   1b618:	d807      	bhi.n	1b62a <rpc_ip_event_handler+0x18a>
   1b61a:	e8df f003 	tbb	[pc, r3]
   1b61e:	0802      	.short	0x0802
   1b620:	0802      	.short	0x0802
   1b622:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1b626:	f7ff f835 	bl	1a694 <interface_sockets_aux_state_set>
   1b62a:	4b6e      	ldr	r3, [pc, #440]	; (1b7e4 <rpc_ip_event_handler+0x344>)
   1b62c:	e7ef      	b.n	1b60e <rpc_ip_event_handler+0x16e>
   1b62e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1b632:	f7ff f84d 	bl	1a6d0 <interface_sockets_aux_state_clear>
   1b636:	e7f8      	b.n	1b62a <rpc_ip_event_handler+0x18a>
   1b638:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1b63c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1b640:	68c0      	ldr	r0, [r0, #12]
   1b642:	d13b      	bne.n	1b6bc <rpc_ip_event_handler+0x21c>
   1b644:	f7ff f862 	bl	1a70c <interface_from_internal_id_search>
   1b648:	4607      	mov	r7, r0
   1b64a:	4638      	mov	r0, r7
   1b64c:	f7ff f876 	bl	1a73c <interface_socket_from_handle_get>
   1b650:	4605      	mov	r5, r0
   1b652:	2800      	cmp	r0, #0
   1b654:	f43f af6b 	beq.w	1b52e <rpc_ip_event_handler+0x8e>
   1b658:	4601      	mov	r1, r0
   1b65a:	4633      	mov	r3, r6
   1b65c:	4622      	mov	r2, r4
   1b65e:	4638      	mov	r0, r7
   1b660:	f000 fd56 	bl	1c110 <tls_rpc_ip_event_handler>
   1b664:	2800      	cmp	r0, #0
   1b666:	f000 812f 	beq.w	1b8c8 <rpc_ip_event_handler+0x428>
   1b66a:	f248 030c 	movw	r3, #32780	; 0x800c
   1b66e:	429e      	cmp	r6, r3
   1b670:	d826      	bhi.n	1b6c0 <rpc_ip_event_handler+0x220>
   1b672:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1b676:	f67f af5a 	bls.w	1b52e <rpc_ip_event_handler+0x8e>
   1b67a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1b67e:	3e01      	subs	r6, #1
   1b680:	2e0b      	cmp	r6, #11
   1b682:	f63f af54 	bhi.w	1b52e <rpc_ip_event_handler+0x8e>
   1b686:	a301      	add	r3, pc, #4	; (adr r3, 1b68c <rpc_ip_event_handler+0x1ec>)
   1b688:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b68c:	0001b751 	.word	0x0001b751
   1b690:	0001b805 	.word	0x0001b805
   1b694:	0001b921 	.word	0x0001b921
   1b698:	0001b93f 	.word	0x0001b93f
   1b69c:	0001b7e9 	.word	0x0001b7e9
   1b6a0:	0001b8d1 	.word	0x0001b8d1
   1b6a4:	0001b8d1 	.word	0x0001b8d1
   1b6a8:	0001b849 	.word	0x0001b849
   1b6ac:	0001b76b 	.word	0x0001b76b
   1b6b0:	0001b52f 	.word	0x0001b52f
   1b6b4:	0001b52f 	.word	0x0001b52f
   1b6b8:	0001b873 	.word	0x0001b873
   1b6bc:	0c07      	lsrs	r7, r0, #16
   1b6be:	e7c4      	b.n	1b64a <rpc_ip_event_handler+0x1aa>
   1b6c0:	f249 0302 	movw	r3, #36866	; 0x9002
   1b6c4:	429e      	cmp	r6, r3
   1b6c6:	f000 80cc 	beq.w	1b862 <rpc_ip_event_handler+0x3c2>
   1b6ca:	f249 0303 	movw	r3, #36867	; 0x9003
   1b6ce:	429e      	cmp	r6, r3
   1b6d0:	d05b      	beq.n	1b78a <rpc_ip_event_handler+0x2ea>
   1b6d2:	f249 0301 	movw	r3, #36865	; 0x9001
   1b6d6:	429e      	cmp	r6, r3
   1b6d8:	f47f af29 	bne.w	1b52e <rpc_ip_event_handler+0x8e>
   1b6dc:	682e      	ldr	r6, [r5, #0]
   1b6de:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1b6e2:	f000 80ee 	beq.w	1b8c2 <rpc_ip_event_handler+0x422>
   1b6e6:	68a3      	ldr	r3, [r4, #8]
   1b6e8:	2b04      	cmp	r3, #4
   1b6ea:	f240 80e7 	bls.w	1b8bc <rpc_ip_event_handler+0x41c>
   1b6ee:	8a63      	ldrh	r3, [r4, #18]
   1b6f0:	2b00      	cmp	r3, #0
   1b6f2:	f000 80e4 	beq.w	1b8be <rpc_ip_event_handler+0x41e>
   1b6f6:	2b10      	cmp	r3, #16
   1b6f8:	f040 80cc 	bne.w	1b894 <rpc_ip_event_handler+0x3f4>
   1b6fc:	2024      	movs	r0, #36	; 0x24
   1b6fe:	f7fa fc67 	bl	15fd0 <nrf_modem_os_alloc>
   1b702:	b318      	cbz	r0, 1b74c <rpc_ip_event_handler+0x2ac>
   1b704:	230a      	movs	r3, #10
   1b706:	6043      	str	r3, [r0, #4]
   1b708:	2324      	movs	r3, #36	; 0x24
   1b70a:	7003      	strb	r3, [r0, #0]
   1b70c:	7c62      	ldrb	r2, [r4, #17]
   1b70e:	7c23      	ldrb	r3, [r4, #16]
   1b710:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1b714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b718:	8103      	strh	r3, [r0, #8]
   1b71a:	f100 0210 	add.w	r2, r0, #16
   1b71e:	f104 0314 	add.w	r3, r4, #20
   1b722:	f853 6b04 	ldr.w	r6, [r3], #4
   1b726:	428b      	cmp	r3, r1
   1b728:	f842 6b04 	str.w	r6, [r2], #4
   1b72c:	d1f9      	bne.n	1b722 <rpc_ip_event_handler+0x282>
   1b72e:	2324      	movs	r3, #36	; 0x24
   1b730:	6822      	ldr	r2, [r4, #0]
   1b732:	9307      	str	r3, [sp, #28]
   1b734:	9204      	str	r2, [sp, #16]
   1b736:	6862      	ldr	r2, [r4, #4]
   1b738:	a904      	add	r1, sp, #16
   1b73a:	e9cd 2005 	strd	r2, r0, [sp, #20]
   1b73e:	69e8      	ldr	r0, [r5, #28]
   1b740:	6803      	ldr	r3, [r0, #0]
   1b742:	685b      	ldr	r3, [r3, #4]
   1b744:	4798      	blx	r3
   1b746:	3001      	adds	r0, #1
   1b748:	f040 808f 	bne.w	1b86a <rpc_ip_event_handler+0x3ca>
   1b74c:	2002      	movs	r0, #2
   1b74e:	e0bc      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b750:	682b      	ldr	r3, [r5, #0]
   1b752:	2b01      	cmp	r3, #1
   1b754:	f040 80b8 	bne.w	1b8c8 <rpc_ip_event_handler+0x428>
   1b758:	6960      	ldr	r0, [r4, #20]
   1b75a:	2800      	cmp	r0, #0
   1b75c:	f040 80e9 	bne.w	1b932 <rpc_ip_event_handler+0x492>
   1b760:	2302      	movs	r3, #2
   1b762:	602b      	str	r3, [r5, #0]
   1b764:	69a3      	ldr	r3, [r4, #24]
   1b766:	61ab      	str	r3, [r5, #24]
   1b768:	e0af      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b76a:	682b      	ldr	r3, [r5, #0]
   1b76c:	b29b      	uxth	r3, r3
   1b76e:	2b0d      	cmp	r3, #13
   1b770:	f040 80aa 	bne.w	1b8c8 <rpc_ip_event_handler+0x428>
   1b774:	6960      	ldr	r0, [r4, #20]
   1b776:	2800      	cmp	r0, #0
   1b778:	f040 80db 	bne.w	1b932 <rpc_ip_event_handler+0x492>
   1b77c:	682b      	ldr	r3, [r5, #0]
   1b77e:	0c1b      	lsrs	r3, r3, #16
   1b780:	041b      	lsls	r3, r3, #16
   1b782:	f043 030e 	orr.w	r3, r3, #14
   1b786:	602b      	str	r3, [r5, #0]
   1b788:	e09f      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b78a:	682b      	ldr	r3, [r5, #0]
   1b78c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1b790:	602b      	str	r3, [r5, #0]
   1b792:	682b      	ldr	r3, [r5, #0]
   1b794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b798:	602b      	str	r3, [r5, #0]
   1b79a:	6923      	ldr	r3, [r4, #16]
   1b79c:	2b6c      	cmp	r3, #108	; 0x6c
   1b79e:	d107      	bne.n	1b7b0 <rpc_ip_event_handler+0x310>
   1b7a0:	682b      	ldr	r3, [r5, #0]
   1b7a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1b7a6:	602b      	str	r3, [r5, #0]
   1b7a8:	2380      	movs	r3, #128	; 0x80
   1b7aa:	606b      	str	r3, [r5, #4]
   1b7ac:	60ab      	str	r3, [r5, #8]
   1b7ae:	e08b      	b.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b7b0:	2b6a      	cmp	r3, #106	; 0x6a
   1b7b2:	bf96      	itet	ls
   1b7b4:	4a08      	ldrls	r2, [pc, #32]	; (1b7d8 <rpc_ip_event_handler+0x338>)
   1b7b6:	235f      	movhi	r3, #95	; 0x5f
   1b7b8:	5cd3      	ldrbls	r3, [r2, r3]
   1b7ba:	e7f6      	b.n	1b7aa <rpc_ip_event_handler+0x30a>
   1b7bc:	2000d464 	.word	0x2000d464
   1b7c0:	2000d468 	.word	0x2000d468
   1b7c4:	2000d460 	.word	0x2000d460
   1b7c8:	000274f9 	.word	0x000274f9
   1b7cc:	2000d458 	.word	0x2000d458
   1b7d0:	2000d454 	.word	0x2000d454
   1b7d4:	2000d566 	.word	0x2000d566
   1b7d8:	000274fe 	.word	0x000274fe
   1b7dc:	2000d48c 	.word	0x2000d48c
   1b7e0:	2000d580 	.word	0x2000d580
   1b7e4:	2000d57e 	.word	0x2000d57e
   1b7e8:	682b      	ldr	r3, [r5, #0]
   1b7ea:	b29b      	uxth	r3, r3
   1b7ec:	2b03      	cmp	r3, #3
   1b7ee:	d16b      	bne.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b7f0:	6960      	ldr	r0, [r4, #20]
   1b7f2:	2800      	cmp	r0, #0
   1b7f4:	f040 809d 	bne.w	1b932 <rpc_ip_event_handler+0x492>
   1b7f8:	682b      	ldr	r3, [r5, #0]
   1b7fa:	0c1b      	lsrs	r3, r3, #16
   1b7fc:	041b      	lsls	r3, r3, #16
   1b7fe:	f043 0304 	orr.w	r3, r3, #4
   1b802:	e7c0      	b.n	1b786 <rpc_ip_event_handler+0x2e6>
   1b804:	682b      	ldr	r3, [r5, #0]
   1b806:	0099      	lsls	r1, r3, #2
   1b808:	d55e      	bpl.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b80a:	682b      	ldr	r3, [r5, #0]
   1b80c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b810:	602b      	str	r3, [r5, #0]
   1b812:	6960      	ldr	r0, [r4, #20]
   1b814:	b968      	cbnz	r0, 1b832 <rpc_ip_event_handler+0x392>
   1b816:	682b      	ldr	r3, [r5, #0]
   1b818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b81c:	602b      	str	r3, [r5, #0]
   1b81e:	682b      	ldr	r3, [r5, #0]
   1b820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b824:	602b      	str	r3, [r5, #0]
   1b826:	682b      	ldr	r3, [r5, #0]
   1b828:	0c1b      	lsrs	r3, r3, #16
   1b82a:	041b      	lsls	r3, r3, #16
   1b82c:	f043 0305 	orr.w	r3, r3, #5
   1b830:	e7a9      	b.n	1b786 <rpc_ip_event_handler+0x2e6>
   1b832:	286a      	cmp	r0, #106	; 0x6a
   1b834:	bf8e      	itee	hi
   1b836:	235f      	movhi	r3, #95	; 0x5f
   1b838:	4b4c      	ldrls	r3, [pc, #304]	; (1b96c <rpc_ip_event_handler+0x4cc>)
   1b83a:	5c1b      	ldrbls	r3, [r3, r0]
   1b83c:	606b      	str	r3, [r5, #4]
   1b83e:	682b      	ldr	r3, [r5, #0]
   1b840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b844:	602b      	str	r3, [r5, #0]
   1b846:	e03f      	b.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b848:	682b      	ldr	r3, [r5, #0]
   1b84a:	b29b      	uxth	r3, r3
   1b84c:	2b06      	cmp	r3, #6
   1b84e:	d13b      	bne.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b850:	6960      	ldr	r0, [r4, #20]
   1b852:	2800      	cmp	r0, #0
   1b854:	d16d      	bne.n	1b932 <rpc_ip_event_handler+0x492>
   1b856:	682b      	ldr	r3, [r5, #0]
   1b858:	0c1b      	lsrs	r3, r3, #16
   1b85a:	041b      	lsls	r3, r3, #16
   1b85c:	f043 0307 	orr.w	r3, r3, #7
   1b860:	e791      	b.n	1b786 <rpc_ip_event_handler+0x2e6>
   1b862:	682b      	ldr	r3, [r5, #0]
   1b864:	b29b      	uxth	r3, r3
   1b866:	2b07      	cmp	r3, #7
   1b868:	d12e      	bne.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b86a:	682b      	ldr	r3, [r5, #0]
   1b86c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b870:	e7e8      	b.n	1b844 <rpc_ip_event_handler+0x3a4>
   1b872:	682b      	ldr	r3, [r5, #0]
   1b874:	b29b      	uxth	r3, r3
   1b876:	2b08      	cmp	r3, #8
   1b878:	d126      	bne.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b87a:	6963      	ldr	r3, [r4, #20]
   1b87c:	2b00      	cmp	r3, #0
   1b87e:	d16d      	bne.n	1b95c <rpc_ip_event_handler+0x4bc>
   1b880:	4b3b      	ldr	r3, [pc, #236]	; (1b970 <rpc_ip_event_handler+0x4d0>)
   1b882:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b886:	682b      	ldr	r3, [r5, #0]
   1b888:	0c1b      	lsrs	r3, r3, #16
   1b88a:	041b      	lsls	r3, r3, #16
   1b88c:	f043 0309 	orr.w	r3, r3, #9
   1b890:	602b      	str	r3, [r5, #0]
   1b892:	e032      	b.n	1b8fa <rpc_ip_event_handler+0x45a>
   1b894:	2b04      	cmp	r3, #4
   1b896:	d114      	bne.n	1b8c2 <rpc_ip_event_handler+0x422>
   1b898:	2010      	movs	r0, #16
   1b89a:	f7fa fb99 	bl	15fd0 <nrf_modem_os_alloc>
   1b89e:	2800      	cmp	r0, #0
   1b8a0:	f43f af54 	beq.w	1b74c <rpc_ip_event_handler+0x2ac>
   1b8a4:	2302      	movs	r3, #2
   1b8a6:	6043      	str	r3, [r0, #4]
   1b8a8:	2310      	movs	r3, #16
   1b8aa:	7003      	strb	r3, [r0, #0]
   1b8ac:	7c22      	ldrb	r2, [r4, #16]
   1b8ae:	7c61      	ldrb	r1, [r4, #17]
   1b8b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1b8b4:	8102      	strh	r2, [r0, #8]
   1b8b6:	6962      	ldr	r2, [r4, #20]
   1b8b8:	60c2      	str	r2, [r0, #12]
   1b8ba:	e739      	b.n	1b730 <rpc_ip_event_handler+0x290>
   1b8bc:	2300      	movs	r3, #0
   1b8be:	4618      	mov	r0, r3
   1b8c0:	e736      	b.n	1b730 <rpc_ip_event_handler+0x290>
   1b8c2:	6820      	ldr	r0, [r4, #0]
   1b8c4:	f007 fc81 	bl	231ca <rpc_client_data_free>
   1b8c8:	2000      	movs	r0, #0
   1b8ca:	b009      	add	sp, #36	; 0x24
   1b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8d0:	4b27      	ldr	r3, [pc, #156]	; (1b970 <rpc_ip_event_handler+0x4d0>)
   1b8d2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b8d6:	6963      	ldr	r3, [r4, #20]
   1b8d8:	b17b      	cbz	r3, 1b8fa <rpc_ip_event_handler+0x45a>
   1b8da:	2b6b      	cmp	r3, #107	; 0x6b
   1b8dc:	d10f      	bne.n	1b8fe <rpc_ip_event_handler+0x45e>
   1b8de:	6928      	ldr	r0, [r5, #16]
   1b8e0:	220c      	movs	r2, #12
   1b8e2:	2801      	cmp	r0, #1
   1b8e4:	682b      	ldr	r3, [r5, #0]
   1b8e6:	d104      	bne.n	1b8f2 <rpc_ip_event_handler+0x452>
   1b8e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1b8ec:	602b      	str	r3, [r5, #0]
   1b8ee:	606a      	str	r2, [r5, #4]
   1b8f0:	e7eb      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b8f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b8f6:	602b      	str	r3, [r5, #0]
   1b8f8:	606a      	str	r2, [r5, #4]
   1b8fa:	2001      	movs	r0, #1
   1b8fc:	e7e5      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b8fe:	f023 0002 	bic.w	r0, r3, #2
   1b902:	2801      	cmp	r0, #1
   1b904:	d102      	bne.n	1b90c <rpc_ip_event_handler+0x46c>
   1b906:	230c      	movs	r3, #12
   1b908:	606b      	str	r3, [r5, #4]
   1b90a:	e7de      	b.n	1b8ca <rpc_ip_event_handler+0x42a>
   1b90c:	2b6a      	cmp	r3, #106	; 0x6a
   1b90e:	bf8e      	itee	hi
   1b910:	235f      	movhi	r3, #95	; 0x5f
   1b912:	4a16      	ldrls	r2, [pc, #88]	; (1b96c <rpc_ip_event_handler+0x4cc>)
   1b914:	5cd3      	ldrbls	r3, [r2, r3]
   1b916:	606b      	str	r3, [r5, #4]
   1b918:	682b      	ldr	r3, [r5, #0]
   1b91a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b91e:	e7b7      	b.n	1b890 <rpc_ip_event_handler+0x3f0>
   1b920:	682b      	ldr	r3, [r5, #0]
   1b922:	025a      	lsls	r2, r3, #9
   1b924:	d5d0      	bpl.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b926:	6960      	ldr	r0, [r4, #20]
   1b928:	b918      	cbnz	r0, 1b932 <rpc_ip_event_handler+0x492>
   1b92a:	682b      	ldr	r3, [r5, #0]
   1b92c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b930:	e729      	b.n	1b786 <rpc_ip_event_handler+0x2e6>
   1b932:	286a      	cmp	r0, #106	; 0x6a
   1b934:	d817      	bhi.n	1b966 <rpc_ip_event_handler+0x4c6>
   1b936:	4b0d      	ldr	r3, [pc, #52]	; (1b96c <rpc_ip_event_handler+0x4cc>)
   1b938:	5c1b      	ldrb	r3, [r3, r0]
   1b93a:	606b      	str	r3, [r5, #4]
   1b93c:	e7c4      	b.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b93e:	682b      	ldr	r3, [r5, #0]
   1b940:	01db      	lsls	r3, r3, #7
   1b942:	d5c1      	bpl.n	1b8c8 <rpc_ip_event_handler+0x428>
   1b944:	6963      	ldr	r3, [r4, #20]
   1b946:	b94b      	cbnz	r3, 1b95c <rpc_ip_event_handler+0x4bc>
   1b948:	6820      	ldr	r0, [r4, #0]
   1b94a:	b118      	cbz	r0, 1b954 <rpc_ip_event_handler+0x4b4>
   1b94c:	2001      	movs	r0, #1
   1b94e:	4b08      	ldr	r3, [pc, #32]	; (1b970 <rpc_ip_event_handler+0x4d0>)
   1b950:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b954:	682b      	ldr	r3, [r5, #0]
   1b956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1b95a:	e714      	b.n	1b786 <rpc_ip_event_handler+0x2e6>
   1b95c:	2b6a      	cmp	r3, #106	; 0x6a
   1b95e:	d802      	bhi.n	1b966 <rpc_ip_event_handler+0x4c6>
   1b960:	4a02      	ldr	r2, [pc, #8]	; (1b96c <rpc_ip_event_handler+0x4cc>)
   1b962:	5cd3      	ldrb	r3, [r2, r3]
   1b964:	e7e9      	b.n	1b93a <rpc_ip_event_handler+0x49a>
   1b966:	235f      	movs	r3, #95	; 0x5f
   1b968:	e7e7      	b.n	1b93a <rpc_ip_event_handler+0x49a>
   1b96a:	bf00      	nop
   1b96c:	000274fe 	.word	0x000274fe
   1b970:	2000d46c 	.word	0x2000d46c

0001b974 <secure_socket_dtls_timeout_check>:
   1b974:	281f      	cmp	r0, #31
   1b976:	dc0b      	bgt.n	1b990 <secure_socket_dtls_timeout_check+0x1c>
   1b978:	2800      	cmp	r0, #0
   1b97a:	dd10      	ble.n	1b99e <secure_socket_dtls_timeout_check+0x2a>
   1b97c:	2301      	movs	r3, #1
   1b97e:	fa03 f000 	lsl.w	r0, r3, r0
   1b982:	4b09      	ldr	r3, [pc, #36]	; (1b9a8 <secure_socket_dtls_timeout_check+0x34>)
   1b984:	4003      	ands	r3, r0
   1b986:	2b00      	cmp	r3, #0
   1b988:	bf0c      	ite	eq
   1b98a:	2016      	moveq	r0, #22
   1b98c:	2000      	movne	r0, #0
   1b98e:	4770      	bx	lr
   1b990:	283f      	cmp	r0, #63	; 0x3f
   1b992:	d006      	beq.n	1b9a2 <secure_socket_dtls_timeout_check+0x2e>
   1b994:	287b      	cmp	r0, #123	; 0x7b
   1b996:	bf14      	ite	ne
   1b998:	2016      	movne	r0, #22
   1b99a:	2000      	moveq	r0, #0
   1b99c:	4770      	bx	lr
   1b99e:	2016      	movs	r0, #22
   1b9a0:	4770      	bx	lr
   1b9a2:	2000      	movs	r0, #0
   1b9a4:	4770      	bx	lr
   1b9a6:	bf00      	nop
   1b9a8:	8000808a 	.word	0x8000808a

0001b9ac <hostname_free>:
   1b9ac:	b538      	push	{r3, r4, r5, lr}
   1b9ae:	4c07      	ldr	r4, [pc, #28]	; (1b9cc <hostname_free+0x20>)
   1b9b0:	4605      	mov	r5, r0
   1b9b2:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   1b9b6:	b138      	cbz	r0, 1b9c8 <hostname_free+0x1c>
   1b9b8:	f7fa fb14 	bl	15fe4 <nrf_modem_os_free>
   1b9bc:	2300      	movs	r3, #0
   1b9be:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   1b9c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b9c6:	6063      	str	r3, [r4, #4]
   1b9c8:	bd38      	pop	{r3, r4, r5, pc}
   1b9ca:	bf00      	nop
   1b9cc:	2000d490 	.word	0x2000d490

0001b9d0 <secure_socket_attach_initiate>:
   1b9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b9d8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1ba70 <secure_socket_attach_initiate+0xa0>
   1b9dc:	9301      	str	r3, [sp, #4]
   1b9de:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   1b9e2:	460d      	mov	r5, r1
   1b9e4:	4616      	mov	r6, r2
   1b9e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b9ea:	f247 0281 	movw	r2, #28801	; 0x7081
   1b9ee:	6989      	ldr	r1, [r1, #24]
   1b9f0:	4607      	mov	r7, r0
   1b9f2:	f007 fc7c 	bl	232ee <ip_interface_request_create>
   1b9f6:	4604      	mov	r4, r0
   1b9f8:	b398      	cbz	r0, 1ba62 <secure_socket_attach_initiate+0x92>
   1b9fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b9fe:	b122      	cbz	r2, 1ba0a <secure_socket_attach_initiate+0x3a>
   1ba00:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   1ba04:	6800      	ldr	r0, [r0, #0]
   1ba06:	f009 f861 	bl	24acc <memcpy>
   1ba0a:	2324      	movs	r3, #36	; 0x24
   1ba0c:	4a17      	ldr	r2, [pc, #92]	; (1ba6c <secure_socket_attach_initiate+0x9c>)
   1ba0e:	fb03 2307 	mla	r3, r3, r7, r2
   1ba12:	f104 0214 	add.w	r2, r4, #20
   1ba16:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1ba1a:	f853 0b04 	ldr.w	r0, [r3], #4
   1ba1e:	428b      	cmp	r3, r1
   1ba20:	f842 0b04 	str.w	r0, [r2], #4
   1ba24:	d1f9      	bne.n	1ba1a <secure_socket_attach_initiate+0x4a>
   1ba26:	68a3      	ldr	r3, [r4, #8]
   1ba28:	4622      	mov	r2, r4
   1ba2a:	3324      	adds	r3, #36	; 0x24
   1ba2c:	60a3      	str	r3, [r4, #8]
   1ba2e:	682b      	ldr	r3, [r5, #0]
   1ba30:	f247 0181 	movw	r1, #28801	; 0x7081
   1ba34:	0c1b      	lsrs	r3, r3, #16
   1ba36:	041b      	lsls	r3, r3, #16
   1ba38:	f043 030a 	orr.w	r3, r3, #10
   1ba3c:	602b      	str	r3, [r5, #0]
   1ba3e:	2004      	movs	r0, #4
   1ba40:	f007 fbb9 	bl	231b6 <rpc_client_request_send>
   1ba44:	682b      	ldr	r3, [r5, #0]
   1ba46:	00db      	lsls	r3, r3, #3
   1ba48:	d40d      	bmi.n	1ba66 <secure_socket_attach_initiate+0x96>
   1ba4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ba4e:	210b      	movs	r1, #11
   1ba50:	4638      	mov	r0, r7
   1ba52:	ab01      	add	r3, sp, #4
   1ba54:	f007 fc5e 	bl	23314 <ip_interface_wait>
   1ba58:	b100      	cbz	r0, 1ba5c <secure_socket_attach_initiate+0x8c>
   1ba5a:	602e      	str	r6, [r5, #0]
   1ba5c:	b003      	add	sp, #12
   1ba5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ba62:	200c      	movs	r0, #12
   1ba64:	e7fa      	b.n	1ba5c <secure_socket_attach_initiate+0x8c>
   1ba66:	2077      	movs	r0, #119	; 0x77
   1ba68:	e7f8      	b.n	1ba5c <secure_socket_attach_initiate+0x8c>
   1ba6a:	bf00      	nop
   1ba6c:	2000d582 	.word	0x2000d582
   1ba70:	2000d490 	.word	0x2000d490

0001ba74 <tls_interface_init>:
   1ba74:	2201      	movs	r2, #1
   1ba76:	4b02      	ldr	r3, [pc, #8]	; (1ba80 <tls_interface_init+0xc>)
   1ba78:	2000      	movs	r0, #0
   1ba7a:	701a      	strb	r2, [r3, #0]
   1ba7c:	4770      	bx	lr
   1ba7e:	bf00      	nop
   1ba80:	2000d581 	.word	0x2000d581

0001ba84 <tls_interface_open>:
   1ba84:	b538      	push	{r3, r4, r5, lr}
   1ba86:	4b21      	ldr	r3, [pc, #132]	; (1bb0c <tls_interface_open+0x88>)
   1ba88:	4615      	mov	r5, r2
   1ba8a:	781b      	ldrb	r3, [r3, #0]
   1ba8c:	b92b      	cbnz	r3, 1ba9a <tls_interface_open+0x16>
   1ba8e:	2075      	movs	r0, #117	; 0x75
   1ba90:	f006 fbc4 	bl	2221c <nrf_modem_os_errno_set>
   1ba94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ba98:	e031      	b.n	1bafe <tls_interface_open+0x7a>
   1ba9a:	1e4b      	subs	r3, r1, #1
   1ba9c:	2b01      	cmp	r3, #1
   1ba9e:	d809      	bhi.n	1bab4 <tls_interface_open+0x30>
   1baa0:	b952      	cbnz	r2, 1bab8 <tls_interface_open+0x34>
   1baa2:	2901      	cmp	r1, #1
   1baa4:	bf0b      	itete	eq
   1baa6:	2201      	moveq	r2, #1
   1baa8:	2202      	movne	r2, #2
   1baaa:	f44f 7582 	moveq.w	r5, #260	; 0x104
   1baae:	f44f 7587 	movne.w	r5, #270	; 0x10e
   1bab2:	e007      	b.n	1bac4 <tls_interface_open+0x40>
   1bab4:	206b      	movs	r0, #107	; 0x6b
   1bab6:	e7eb      	b.n	1ba90 <tls_interface_open+0xc>
   1bab8:	2901      	cmp	r1, #1
   1baba:	d122      	bne.n	1bb02 <tls_interface_open+0x7e>
   1babc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1bac0:	d1f8      	bne.n	1bab4 <tls_interface_open+0x30>
   1bac2:	460a      	mov	r2, r1
   1bac4:	f7fe ff40 	bl	1a948 <ip_interface_open>
   1bac8:	1e04      	subs	r4, r0, #0
   1baca:	dbe3      	blt.n	1ba94 <tls_interface_open+0x10>
   1bacc:	2224      	movs	r2, #36	; 0x24
   1bace:	4910      	ldr	r1, [pc, #64]	; (1bb10 <tls_interface_open+0x8c>)
   1bad0:	4b10      	ldr	r3, [pc, #64]	; (1bb14 <tls_interface_open+0x90>)
   1bad2:	fb02 1204 	mla	r2, r2, r4, r1
   1bad6:	f103 0124 	add.w	r1, r3, #36	; 0x24
   1bada:	f853 0b04 	ldr.w	r0, [r3], #4
   1bade:	428b      	cmp	r3, r1
   1bae0:	f842 0b04 	str.w	r0, [r2], #4
   1bae4:	d1f9      	bne.n	1bada <tls_interface_open+0x56>
   1bae6:	4620      	mov	r0, r4
   1bae8:	f7fe fe28 	bl	1a73c <interface_socket_from_handle_get>
   1baec:	6803      	ldr	r3, [r0, #0]
   1baee:	6145      	str	r5, [r0, #20]
   1baf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1baf4:	6003      	str	r3, [r0, #0]
   1baf6:	6803      	ldr	r3, [r0, #0]
   1baf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bafc:	6003      	str	r3, [r0, #0]
   1bafe:	4620      	mov	r0, r4
   1bb00:	bd38      	pop	{r3, r4, r5, pc}
   1bb02:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1bb06:	d1d5      	bne.n	1bab4 <tls_interface_open+0x30>
   1bb08:	2202      	movs	r2, #2
   1bb0a:	e7db      	b.n	1bac4 <tls_interface_open+0x40>
   1bb0c:	2000d581 	.word	0x2000d581
   1bb10:	2000d582 	.word	0x2000d582
   1bb14:	00027569 	.word	0x00027569

0001bb18 <tls_interface_sendto>:
   1bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb1c:	b085      	sub	sp, #20
   1bb1e:	4606      	mov	r6, r0
   1bb20:	4691      	mov	r9, r2
   1bb22:	461f      	mov	r7, r3
   1bb24:	9103      	str	r1, [sp, #12]
   1bb26:	f7fe fe09 	bl	1a73c <interface_socket_from_handle_get>
   1bb2a:	4605      	mov	r5, r0
   1bb2c:	2800      	cmp	r0, #0
   1bb2e:	d06c      	beq.n	1bc0a <tls_interface_sendto+0xf2>
   1bb30:	f04f 0a24 	mov.w	sl, #36	; 0x24
   1bb34:	07bb      	lsls	r3, r7, #30
   1bb36:	bf48      	it	mi
   1bb38:	2300      	movmi	r3, #0
   1bb3a:	f04f 0400 	mov.w	r4, #0
   1bb3e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1bb42:	bf58      	it	pl
   1bb44:	6803      	ldrpl	r3, [r0, #0]
   1bb46:	fb0a fa06 	mul.w	sl, sl, r6
   1bb4a:	bf5c      	itt	pl
   1bb4c:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1bb50:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   1bb54:	9302      	str	r3, [sp, #8]
   1bb56:	6829      	ldr	r1, [r5, #0]
   1bb58:	eba9 0804 	sub.w	r8, r9, r4
   1bb5c:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1bb60:	b289      	uxth	r1, r1
   1bb62:	bfa8      	it	ge
   1bb64:	f44f 6800 	movge.w	r8, #2048	; 0x800
   1bb68:	290c      	cmp	r1, #12
   1bb6a:	d110      	bne.n	1bb8e <tls_interface_sendto+0x76>
   1bb6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bb6e:	9903      	ldr	r1, [sp, #12]
   1bb70:	9301      	str	r3, [sp, #4]
   1bb72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bb74:	4642      	mov	r2, r8
   1bb76:	9300      	str	r3, [sp, #0]
   1bb78:	4630      	mov	r0, r6
   1bb7a:	463b      	mov	r3, r7
   1bb7c:	4421      	add	r1, r4
   1bb7e:	f7fe ffa5 	bl	1aacc <ip_interface_sendto>
   1bb82:	f1b0 0b00 	subs.w	fp, r0, #0
   1bb86:	da32      	bge.n	1bbee <tls_interface_sendto+0xd6>
   1bb88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bb8c:	e034      	b.n	1bbf8 <tls_interface_sendto+0xe0>
   1bb8e:	6828      	ldr	r0, [r5, #0]
   1bb90:	b280      	uxth	r0, r0
   1bb92:	280b      	cmp	r0, #11
   1bb94:	d109      	bne.n	1bbaa <tls_interface_sendto+0x92>
   1bb96:	4b21      	ldr	r3, [pc, #132]	; (1bc1c <tls_interface_sendto+0x104>)
   1bb98:	f813 200a 	ldrb.w	r2, [r3, sl]
   1bb9c:	2a02      	cmp	r2, #2
   1bb9e:	d031      	beq.n	1bc04 <tls_interface_sendto+0xec>
   1bba0:	692a      	ldr	r2, [r5, #16]
   1bba2:	2a01      	cmp	r2, #1
   1bba4:	d133      	bne.n	1bc0e <tls_interface_sendto+0xf6>
   1bba6:	206d      	movs	r0, #109	; 0x6d
   1bba8:	e02c      	b.n	1bc04 <tls_interface_sendto+0xec>
   1bbaa:	4628      	mov	r0, r5
   1bbac:	f007 fe1b 	bl	237e6 <attach_trigger_condition_verify>
   1bbb0:	b388      	cbz	r0, 1bc16 <tls_interface_sendto+0xfe>
   1bbb2:	4b1a      	ldr	r3, [pc, #104]	; (1bc1c <tls_interface_sendto+0x104>)
   1bbb4:	f813 100a 	ldrb.w	r1, [r3, sl]
   1bbb8:	2902      	cmp	r1, #2
   1bbba:	d110      	bne.n	1bbde <tls_interface_sendto+0xc6>
   1bbbc:	4629      	mov	r1, r5
   1bbbe:	4630      	mov	r0, r6
   1bbc0:	f007 fe28 	bl	23814 <secure_client_socket>
   1bbc4:	b970      	cbnz	r0, 1bbe4 <tls_interface_sendto+0xcc>
   1bbc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bbc8:	9903      	ldr	r1, [sp, #12]
   1bbca:	9301      	str	r3, [sp, #4]
   1bbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bbce:	4642      	mov	r2, r8
   1bbd0:	9300      	str	r3, [sp, #0]
   1bbd2:	4630      	mov	r0, r6
   1bbd4:	463b      	mov	r3, r7
   1bbd6:	4421      	add	r1, r4
   1bbd8:	f7fe ff78 	bl	1aacc <ip_interface_sendto>
   1bbdc:	4683      	mov	fp, r0
   1bbde:	f1bb 0f00 	cmp.w	fp, #0
   1bbe2:	e7d0      	b.n	1bb86 <tls_interface_sendto+0x6e>
   1bbe4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1bbe8:	d00a      	beq.n	1bc00 <tls_interface_sendto+0xe8>
   1bbea:	2800      	cmp	r0, #0
   1bbec:	dc0a      	bgt.n	1bc04 <tls_interface_sendto+0xec>
   1bbee:	9b02      	ldr	r3, [sp, #8]
   1bbf0:	445c      	add	r4, fp
   1bbf2:	b10b      	cbz	r3, 1bbf8 <tls_interface_sendto+0xe0>
   1bbf4:	45a1      	cmp	r9, r4
   1bbf6:	dcae      	bgt.n	1bb56 <tls_interface_sendto+0x3e>
   1bbf8:	4620      	mov	r0, r4
   1bbfa:	b005      	add	sp, #20
   1bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc00:	2800      	cmp	r0, #0
   1bc02:	ddc1      	ble.n	1bb88 <tls_interface_sendto+0x70>
   1bc04:	f006 fb0a 	bl	2221c <nrf_modem_os_errno_set>
   1bc08:	e7be      	b.n	1bb88 <tls_interface_sendto+0x70>
   1bc0a:	2009      	movs	r0, #9
   1bc0c:	e7fa      	b.n	1bc04 <tls_interface_sendto+0xec>
   1bc0e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1bc12:	d1ec      	bne.n	1bbee <tls_interface_sendto+0xd6>
   1bc14:	e7b8      	b.n	1bb88 <tls_interface_sendto+0x70>
   1bc16:	2080      	movs	r0, #128	; 0x80
   1bc18:	e7f4      	b.n	1bc04 <tls_interface_sendto+0xec>
   1bc1a:	bf00      	nop
   1bc1c:	2000d582 	.word	0x2000d582

0001bc20 <tls_interface_recvfrom>:
   1bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc24:	460d      	mov	r5, r1
   1bc26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1bc2a:	4604      	mov	r4, r0
   1bc2c:	4616      	mov	r6, r2
   1bc2e:	461f      	mov	r7, r3
   1bc30:	f7fe fd84 	bl	1a73c <interface_socket_from_handle_get>
   1bc34:	4601      	mov	r1, r0
   1bc36:	b320      	cbz	r0, 1bc82 <tls_interface_recvfrom+0x62>
   1bc38:	6803      	ldr	r3, [r0, #0]
   1bc3a:	b29b      	uxth	r3, r3
   1bc3c:	2b0c      	cmp	r3, #12
   1bc3e:	d003      	beq.n	1bc48 <tls_interface_recvfrom+0x28>
   1bc40:	6803      	ldr	r3, [r0, #0]
   1bc42:	b29b      	uxth	r3, r3
   1bc44:	2b0d      	cmp	r3, #13
   1bc46:	d109      	bne.n	1bc5c <tls_interface_recvfrom+0x3c>
   1bc48:	463b      	mov	r3, r7
   1bc4a:	4632      	mov	r2, r6
   1bc4c:	4629      	mov	r1, r5
   1bc4e:	4620      	mov	r0, r4
   1bc50:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1bc54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bc58:	f007 bb6c 	b.w	23334 <ip_interface_recvfrom>
   1bc5c:	f007 fdc3 	bl	237e6 <attach_trigger_condition_verify>
   1bc60:	b198      	cbz	r0, 1bc8a <tls_interface_recvfrom+0x6a>
   1bc62:	2324      	movs	r3, #36	; 0x24
   1bc64:	4363      	muls	r3, r4
   1bc66:	4a0a      	ldr	r2, [pc, #40]	; (1bc90 <tls_interface_recvfrom+0x70>)
   1bc68:	5cd3      	ldrb	r3, [r2, r3]
   1bc6a:	2b02      	cmp	r3, #2
   1bc6c:	d10d      	bne.n	1bc8a <tls_interface_recvfrom+0x6a>
   1bc6e:	4620      	mov	r0, r4
   1bc70:	f007 fdd0 	bl	23814 <secure_client_socket>
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d0e7      	beq.n	1bc48 <tls_interface_recvfrom+0x28>
   1bc78:	dc04      	bgt.n	1bc84 <tls_interface_recvfrom+0x64>
   1bc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bc82:	2009      	movs	r0, #9
   1bc84:	f006 faca 	bl	2221c <nrf_modem_os_errno_set>
   1bc88:	e7f7      	b.n	1bc7a <tls_interface_recvfrom+0x5a>
   1bc8a:	200b      	movs	r0, #11
   1bc8c:	e7fa      	b.n	1bc84 <tls_interface_recvfrom+0x64>
   1bc8e:	bf00      	nop
   1bc90:	2000d582 	.word	0x2000d582

0001bc94 <tls_interface_bind>:
   1bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc96:	4604      	mov	r4, r0
   1bc98:	460e      	mov	r6, r1
   1bc9a:	4617      	mov	r7, r2
   1bc9c:	f7fe fd4e 	bl	1a73c <interface_socket_from_handle_get>
   1bca0:	4605      	mov	r5, r0
   1bca2:	b1d8      	cbz	r0, 1bcdc <tls_interface_bind+0x48>
   1bca4:	6803      	ldr	r3, [r0, #0]
   1bca6:	b29b      	uxth	r3, r3
   1bca8:	2b02      	cmp	r3, #2
   1bcaa:	d119      	bne.n	1bce0 <tls_interface_bind+0x4c>
   1bcac:	463a      	mov	r2, r7
   1bcae:	4631      	mov	r1, r6
   1bcb0:	4620      	mov	r0, r4
   1bcb2:	f7ff f89f 	bl	1adf4 <ip_interface_bind>
   1bcb6:	b950      	cbnz	r0, 1bcce <tls_interface_bind+0x3a>
   1bcb8:	2324      	movs	r3, #36	; 0x24
   1bcba:	4363      	muls	r3, r4
   1bcbc:	4a09      	ldr	r2, [pc, #36]	; (1bce4 <tls_interface_bind+0x50>)
   1bcbe:	5cd3      	ldrb	r3, [r2, r3]
   1bcc0:	2b01      	cmp	r3, #1
   1bcc2:	d10a      	bne.n	1bcda <tls_interface_bind+0x46>
   1bcc4:	2204      	movs	r2, #4
   1bcc6:	4629      	mov	r1, r5
   1bcc8:	4620      	mov	r0, r4
   1bcca:	f7ff fe81 	bl	1b9d0 <secure_socket_attach_initiate>
   1bcce:	2800      	cmp	r0, #0
   1bcd0:	dd03      	ble.n	1bcda <tls_interface_bind+0x46>
   1bcd2:	f006 faa3 	bl	2221c <nrf_modem_os_errno_set>
   1bcd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcdc:	2009      	movs	r0, #9
   1bcde:	e7f8      	b.n	1bcd2 <tls_interface_bind+0x3e>
   1bce0:	205f      	movs	r0, #95	; 0x5f
   1bce2:	e7f6      	b.n	1bcd2 <tls_interface_bind+0x3e>
   1bce4:	2000d582 	.word	0x2000d582

0001bce8 <tls_interface_connect>:
   1bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcea:	4605      	mov	r5, r0
   1bcec:	460e      	mov	r6, r1
   1bcee:	4617      	mov	r7, r2
   1bcf0:	f7fe fd24 	bl	1a73c <interface_socket_from_handle_get>
   1bcf4:	4604      	mov	r4, r0
   1bcf6:	b1f0      	cbz	r0, 1bd36 <tls_interface_connect+0x4e>
   1bcf8:	2324      	movs	r3, #36	; 0x24
   1bcfa:	436b      	muls	r3, r5
   1bcfc:	4a10      	ldr	r2, [pc, #64]	; (1bd40 <tls_interface_connect+0x58>)
   1bcfe:	5cd3      	ldrb	r3, [r2, r3]
   1bd00:	2b02      	cmp	r3, #2
   1bd02:	d11a      	bne.n	1bd3a <tls_interface_connect+0x52>
   1bd04:	6803      	ldr	r3, [r0, #0]
   1bd06:	b29b      	uxth	r3, r3
   1bd08:	2b02      	cmp	r3, #2
   1bd0a:	d003      	beq.n	1bd14 <tls_interface_connect+0x2c>
   1bd0c:	6803      	ldr	r3, [r0, #0]
   1bd0e:	b29b      	uxth	r3, r3
   1bd10:	2b04      	cmp	r3, #4
   1bd12:	d112      	bne.n	1bd3a <tls_interface_connect+0x52>
   1bd14:	463a      	mov	r2, r7
   1bd16:	4631      	mov	r1, r6
   1bd18:	4628      	mov	r0, r5
   1bd1a:	f007 fc0d 	bl	23538 <ip_interface_connect>
   1bd1e:	b918      	cbnz	r0, 1bd28 <tls_interface_connect+0x40>
   1bd20:	4621      	mov	r1, r4
   1bd22:	4628      	mov	r0, r5
   1bd24:	f007 fd76 	bl	23814 <secure_client_socket>
   1bd28:	2800      	cmp	r0, #0
   1bd2a:	dd03      	ble.n	1bd34 <tls_interface_connect+0x4c>
   1bd2c:	f006 fa76 	bl	2221c <nrf_modem_os_errno_set>
   1bd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd36:	2009      	movs	r0, #9
   1bd38:	e7f8      	b.n	1bd2c <tls_interface_connect+0x44>
   1bd3a:	205f      	movs	r0, #95	; 0x5f
   1bd3c:	e7f6      	b.n	1bd2c <tls_interface_connect+0x44>
   1bd3e:	bf00      	nop
   1bd40:	2000d582 	.word	0x2000d582

0001bd44 <tls_interface_listen>:
   1bd44:	b538      	push	{r3, r4, r5, lr}
   1bd46:	460d      	mov	r5, r1
   1bd48:	4604      	mov	r4, r0
   1bd4a:	f7fe fcf7 	bl	1a73c <interface_socket_from_handle_get>
   1bd4e:	4601      	mov	r1, r0
   1bd50:	2800      	cmp	r0, #0
   1bd52:	d033      	beq.n	1bdbc <tls_interface_listen+0x78>
   1bd54:	6803      	ldr	r3, [r0, #0]
   1bd56:	00db      	lsls	r3, r3, #3
   1bd58:	d432      	bmi.n	1bdc0 <tls_interface_listen+0x7c>
   1bd5a:	6903      	ldr	r3, [r0, #16]
   1bd5c:	2b01      	cmp	r3, #1
   1bd5e:	d12f      	bne.n	1bdc0 <tls_interface_listen+0x7c>
   1bd60:	6803      	ldr	r3, [r0, #0]
   1bd62:	b29b      	uxth	r3, r3
   1bd64:	2b04      	cmp	r3, #4
   1bd66:	d105      	bne.n	1bd74 <tls_interface_listen+0x30>
   1bd68:	2324      	movs	r3, #36	; 0x24
   1bd6a:	4363      	muls	r3, r4
   1bd6c:	4a15      	ldr	r2, [pc, #84]	; (1bdc4 <tls_interface_listen+0x80>)
   1bd6e:	5cd3      	ldrb	r3, [r2, r3]
   1bd70:	2b02      	cmp	r3, #2
   1bd72:	d009      	beq.n	1bd88 <tls_interface_listen+0x44>
   1bd74:	680b      	ldr	r3, [r1, #0]
   1bd76:	b29b      	uxth	r3, r3
   1bd78:	2b0b      	cmp	r3, #11
   1bd7a:	d121      	bne.n	1bdc0 <tls_interface_listen+0x7c>
   1bd7c:	2324      	movs	r3, #36	; 0x24
   1bd7e:	4363      	muls	r3, r4
   1bd80:	4a10      	ldr	r2, [pc, #64]	; (1bdc4 <tls_interface_listen+0x80>)
   1bd82:	5cd3      	ldrb	r3, [r2, r3]
   1bd84:	2b01      	cmp	r3, #1
   1bd86:	d11b      	bne.n	1bdc0 <tls_interface_listen+0x7c>
   1bd88:	2324      	movs	r3, #36	; 0x24
   1bd8a:	2001      	movs	r0, #1
   1bd8c:	4363      	muls	r3, r4
   1bd8e:	4a0d      	ldr	r2, [pc, #52]	; (1bdc4 <tls_interface_listen+0x80>)
   1bd90:	54d0      	strb	r0, [r2, r3]
   1bd92:	680b      	ldr	r3, [r1, #0]
   1bd94:	2b0b      	cmp	r3, #11
   1bd96:	d10a      	bne.n	1bdae <tls_interface_listen+0x6a>
   1bd98:	4629      	mov	r1, r5
   1bd9a:	4620      	mov	r0, r4
   1bd9c:	f7ff f88a 	bl	1aeb4 <ip_interface_listen>
   1bda0:	2800      	cmp	r0, #0
   1bda2:	dd03      	ble.n	1bdac <tls_interface_listen+0x68>
   1bda4:	f006 fa3a 	bl	2221c <nrf_modem_os_errno_set>
   1bda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bdac:	bd38      	pop	{r3, r4, r5, pc}
   1bdae:	4620      	mov	r0, r4
   1bdb0:	680a      	ldr	r2, [r1, #0]
   1bdb2:	f7ff fe0d 	bl	1b9d0 <secure_socket_attach_initiate>
   1bdb6:	2800      	cmp	r0, #0
   1bdb8:	d0ee      	beq.n	1bd98 <tls_interface_listen+0x54>
   1bdba:	e7f1      	b.n	1bda0 <tls_interface_listen+0x5c>
   1bdbc:	2009      	movs	r0, #9
   1bdbe:	e7f1      	b.n	1bda4 <tls_interface_listen+0x60>
   1bdc0:	205f      	movs	r0, #95	; 0x5f
   1bdc2:	e7ef      	b.n	1bda4 <tls_interface_listen+0x60>
   1bdc4:	2000d582 	.word	0x2000d582

0001bdc8 <tls_interface_accept>:
   1bdc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bdcc:	4605      	mov	r5, r0
   1bdce:	460e      	mov	r6, r1
   1bdd0:	4617      	mov	r7, r2
   1bdd2:	4698      	mov	r8, r3
   1bdd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bdd8:	f7fe fcb0 	bl	1a73c <interface_socket_from_handle_get>
   1bddc:	9401      	str	r4, [sp, #4]
   1bdde:	2800      	cmp	r0, #0
   1bde0:	d04b      	beq.n	1be7a <tls_interface_accept+0xb2>
   1bde2:	6803      	ldr	r3, [r0, #0]
   1bde4:	b29b      	uxth	r3, r3
   1bde6:	2b07      	cmp	r3, #7
   1bde8:	d147      	bne.n	1be7a <tls_interface_accept+0xb2>
   1bdea:	6803      	ldr	r3, [r0, #0]
   1bdec:	00db      	lsls	r3, r3, #3
   1bdee:	d506      	bpl.n	1bdfe <tls_interface_accept+0x36>
   1bdf0:	205f      	movs	r0, #95	; 0x5f
   1bdf2:	f006 fa13 	bl	2221c <nrf_modem_os_errno_set>
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	b002      	add	sp, #8
   1bdfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bdfe:	4643      	mov	r3, r8
   1be00:	463a      	mov	r2, r7
   1be02:	4631      	mov	r1, r6
   1be04:	4628      	mov	r0, r5
   1be06:	f7ff f8a3 	bl	1af50 <ip_interface_accept>
   1be0a:	1e04      	subs	r4, r0, #0
   1be0c:	db2f      	blt.n	1be6e <tls_interface_accept+0xa6>
   1be0e:	f7fe fc95 	bl	1a73c <interface_socket_from_handle_get>
   1be12:	2124      	movs	r1, #36	; 0x24
   1be14:	6803      	ldr	r3, [r0, #0]
   1be16:	4a1a      	ldr	r2, [pc, #104]	; (1be80 <tls_interface_accept+0xb8>)
   1be18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1be1c:	6003      	str	r3, [r0, #0]
   1be1e:	6803      	ldr	r3, [r0, #0]
   1be20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1be24:	6003      	str	r3, [r0, #0]
   1be26:	fb01 2305 	mla	r3, r1, r5, r2
   1be2a:	fb01 2104 	mla	r1, r1, r4, r2
   1be2e:	f103 0524 	add.w	r5, r3, #36	; 0x24
   1be32:	f853 6b04 	ldr.w	r6, [r3], #4
   1be36:	42ab      	cmp	r3, r5
   1be38:	f841 6b04 	str.w	r6, [r1], #4
   1be3c:	d1f9      	bne.n	1be32 <tls_interface_accept+0x6a>
   1be3e:	2324      	movs	r3, #36	; 0x24
   1be40:	2102      	movs	r1, #2
   1be42:	4363      	muls	r3, r4
   1be44:	54d1      	strb	r1, [r2, r3]
   1be46:	6803      	ldr	r3, [r0, #0]
   1be48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1be4c:	0c1b      	lsrs	r3, r3, #16
   1be4e:	041b      	lsls	r3, r3, #16
   1be50:	f043 030b 	orr.w	r3, r3, #11
   1be54:	6003      	str	r3, [r0, #0]
   1be56:	210c      	movs	r1, #12
   1be58:	4620      	mov	r0, r4
   1be5a:	ab01      	add	r3, sp, #4
   1be5c:	f007 fa5a 	bl	23314 <ip_interface_wait>
   1be60:	4605      	mov	r5, r0
   1be62:	2800      	cmp	r0, #0
   1be64:	d0c7      	beq.n	1bdf6 <tls_interface_accept+0x2e>
   1be66:	4620      	mov	r0, r4
   1be68:	f7fe fdea 	bl	1aa40 <ip_interface_close>
   1be6c:	462c      	mov	r4, r5
   1be6e:	4620      	mov	r0, r4
   1be70:	f006 f9d4 	bl	2221c <nrf_modem_os_errno_set>
   1be74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1be78:	e7bd      	b.n	1bdf6 <tls_interface_accept+0x2e>
   1be7a:	2409      	movs	r4, #9
   1be7c:	e7f7      	b.n	1be6e <tls_interface_accept+0xa6>
   1be7e:	bf00      	nop
   1be80:	2000d582 	.word	0x2000d582

0001be84 <tls_interface_setopt>:
   1be84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1be86:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1be8a:	4606      	mov	r6, r0
   1be8c:	4615      	mov	r5, r2
   1be8e:	461f      	mov	r7, r3
   1be90:	9c08      	ldr	r4, [sp, #32]
   1be92:	d004      	beq.n	1be9e <tls_interface_setopt+0x1a>
   1be94:	b003      	add	sp, #12
   1be96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1be9a:	f7ff b93d 	b.w	1b118 <ip_interface_setopt>
   1be9e:	b923      	cbnz	r3, 1beaa <tls_interface_setopt+0x26>
   1bea0:	2a05      	cmp	r2, #5
   1bea2:	d100      	bne.n	1bea6 <tls_interface_setopt+0x22>
   1bea4:	b10c      	cbz	r4, 1beaa <tls_interface_setopt+0x26>
   1bea6:	200e      	movs	r0, #14
   1bea8:	e077      	b.n	1bf9a <tls_interface_setopt+0x116>
   1beaa:	4630      	mov	r0, r6
   1beac:	f7fe fc46 	bl	1a73c <interface_socket_from_handle_get>
   1beb0:	4601      	mov	r1, r0
   1beb2:	2800      	cmp	r0, #0
   1beb4:	f000 8087 	beq.w	1bfc6 <tls_interface_setopt+0x142>
   1beb8:	6803      	ldr	r3, [r0, #0]
   1beba:	b29b      	uxth	r3, r3
   1bebc:	2b02      	cmp	r3, #2
   1bebe:	d007      	beq.n	1bed0 <tls_interface_setopt+0x4c>
   1bec0:	6803      	ldr	r3, [r0, #0]
   1bec2:	b29b      	uxth	r3, r3
   1bec4:	2b04      	cmp	r3, #4
   1bec6:	d003      	beq.n	1bed0 <tls_interface_setopt+0x4c>
   1bec8:	6803      	ldr	r3, [r0, #0]
   1beca:	b29b      	uxth	r3, r3
   1becc:	2b05      	cmp	r3, #5
   1bece:	d17a      	bne.n	1bfc6 <tls_interface_setopt+0x142>
   1bed0:	3d01      	subs	r5, #1
   1bed2:	2d08      	cmp	r5, #8
   1bed4:	d879      	bhi.n	1bfca <tls_interface_setopt+0x146>
   1bed6:	e8df f005 	tbb	[pc, r5]
   1beda:	2605      	.short	0x2605
   1bedc:	55433818 	.word	0x55433818
   1bee0:	6578      	.short	0x6578
   1bee2:	71          	.byte	0x71
   1bee3:	00          	.byte	0x00
   1bee4:	2c04      	cmp	r4, #4
   1bee6:	d174      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1bee8:	6838      	ldr	r0, [r7, #0]
   1beea:	b930      	cbnz	r0, 1befa <tls_interface_setopt+0x76>
   1beec:	2324      	movs	r3, #36	; 0x24
   1beee:	2202      	movs	r2, #2
   1bef0:	435e      	muls	r6, r3
   1bef2:	4b39      	ldr	r3, [pc, #228]	; (1bfd8 <tls_interface_setopt+0x154>)
   1bef4:	559a      	strb	r2, [r3, r6]
   1bef6:	b003      	add	sp, #12
   1bef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1befa:	2801      	cmp	r0, #1
   1befc:	d169      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1befe:	2324      	movs	r3, #36	; 0x24
   1bf00:	435e      	muls	r6, r3
   1bf02:	4b35      	ldr	r3, [pc, #212]	; (1bfd8 <tls_interface_setopt+0x154>)
   1bf04:	5598      	strb	r0, [r3, r6]
   1bf06:	2000      	movs	r0, #0
   1bf08:	e7f5      	b.n	1bef6 <tls_interface_setopt+0x72>
   1bf0a:	2c01      	cmp	r4, #1
   1bf0c:	d161      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1bf0e:	2f00      	cmp	r7, #0
   1bf10:	d0c9      	beq.n	1bea6 <tls_interface_setopt+0x22>
   1bf12:	2024      	movs	r0, #36	; 0x24
   1bf14:	783b      	ldrb	r3, [r7, #0]
   1bf16:	4a30      	ldr	r2, [pc, #192]	; (1bfd8 <tls_interface_setopt+0x154>)
   1bf18:	3b00      	subs	r3, #0
   1bf1a:	bf18      	it	ne
   1bf1c:	2301      	movne	r3, #1
   1bf1e:	fb00 2606 	mla	r6, r0, r6, r2
   1bf22:	7073      	strb	r3, [r6, #1]
   1bf24:	e7ef      	b.n	1bf06 <tls_interface_setopt+0x82>
   1bf26:	2c03      	cmp	r4, #3
   1bf28:	d953      	bls.n	1bfd2 <tls_interface_setopt+0x14e>
   1bf2a:	f014 0503 	ands.w	r5, r4, #3
   1bf2e:	d150      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1bf30:	2324      	movs	r3, #36	; 0x24
   1bf32:	435e      	muls	r6, r3
   1bf34:	4828      	ldr	r0, [pc, #160]	; (1bfd8 <tls_interface_setopt+0x154>)
   1bf36:	08a2      	lsrs	r2, r4, #2
   1bf38:	1983      	adds	r3, r0, r6
   1bf3a:	70da      	strb	r2, [r3, #3]
   1bf3c:	4639      	mov	r1, r7
   1bf3e:	4622      	mov	r2, r4
   1bf40:	3604      	adds	r6, #4
   1bf42:	4430      	add	r0, r6
   1bf44:	f008 fdc2 	bl	24acc <memcpy>
   1bf48:	e7dd      	b.n	1bf06 <tls_interface_setopt+0x82>
   1bf4a:	2c04      	cmp	r4, #4
   1bf4c:	d141      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1bf4e:	683b      	ldr	r3, [r7, #0]
   1bf50:	2b02      	cmp	r3, #2
   1bf52:	d83e      	bhi.n	1bfd2 <tls_interface_setopt+0x14e>
   1bf54:	2024      	movs	r0, #36	; 0x24
   1bf56:	4a20      	ldr	r2, [pc, #128]	; (1bfd8 <tls_interface_setopt+0x154>)
   1bf58:	fb00 2606 	mla	r6, r0, r6, r2
   1bf5c:	70b3      	strb	r3, [r6, #2]
   1bf5e:	e7d2      	b.n	1bf06 <tls_interface_setopt+0x82>
   1bf60:	4630      	mov	r0, r6
   1bf62:	f7ff fd23 	bl	1b9ac <hostname_free>
   1bf66:	2c00      	cmp	r4, #0
   1bf68:	d0cd      	beq.n	1bf06 <tls_interface_setopt+0x82>
   1bf6a:	4620      	mov	r0, r4
   1bf6c:	f7fa f830 	bl	15fd0 <nrf_modem_os_alloc>
   1bf70:	4b1a      	ldr	r3, [pc, #104]	; (1bfdc <tls_interface_setopt+0x158>)
   1bf72:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   1bf76:	b350      	cbz	r0, 1bfce <tls_interface_setopt+0x14a>
   1bf78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1bf7c:	4622      	mov	r2, r4
   1bf7e:	4639      	mov	r1, r7
   1bf80:	6074      	str	r4, [r6, #4]
   1bf82:	e7df      	b.n	1bf44 <tls_interface_setopt+0xc0>
   1bf84:	f247 0301 	movw	r3, #28673	; 0x7001
   1bf88:	e9cd 7400 	strd	r7, r4, [sp]
   1bf8c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bf90:	4630      	mov	r0, r6
   1bf92:	f007 fb67 	bl	23664 <ip_interface_socketoption_send>
   1bf96:	2800      	cmp	r0, #0
   1bf98:	d0b5      	beq.n	1bf06 <tls_interface_setopt+0x82>
   1bf9a:	f006 f93f 	bl	2221c <nrf_modem_os_errno_set>
   1bf9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bfa2:	e7a8      	b.n	1bef6 <tls_interface_setopt+0x72>
   1bfa4:	2c04      	cmp	r4, #4
   1bfa6:	d114      	bne.n	1bfd2 <tls_interface_setopt+0x14e>
   1bfa8:	6838      	ldr	r0, [r7, #0]
   1bfaa:	f7ff fce3 	bl	1b974 <secure_socket_dtls_timeout_check>
   1bfae:	2800      	cmp	r0, #0
   1bfb0:	d1f3      	bne.n	1bf9a <tls_interface_setopt+0x116>
   1bfb2:	f247 0302 	movw	r3, #28674	; 0x7002
   1bfb6:	e9cd 7400 	strd	r7, r4, [sp]
   1bfba:	e7e7      	b.n	1bf8c <tls_interface_setopt+0x108>
   1bfbc:	f247 0303 	movw	r3, #28675	; 0x7003
   1bfc0:	e9cd 7400 	strd	r7, r4, [sp]
   1bfc4:	e7e2      	b.n	1bf8c <tls_interface_setopt+0x108>
   1bfc6:	2009      	movs	r0, #9
   1bfc8:	e7e7      	b.n	1bf9a <tls_interface_setopt+0x116>
   1bfca:	206d      	movs	r0, #109	; 0x6d
   1bfcc:	e7e5      	b.n	1bf9a <tls_interface_setopt+0x116>
   1bfce:	200c      	movs	r0, #12
   1bfd0:	e7e3      	b.n	1bf9a <tls_interface_setopt+0x116>
   1bfd2:	2016      	movs	r0, #22
   1bfd4:	e7e1      	b.n	1bf9a <tls_interface_setopt+0x116>
   1bfd6:	bf00      	nop
   1bfd8:	2000d582 	.word	0x2000d582
   1bfdc:	2000d490 	.word	0x2000d490

0001bfe0 <tls_interface_getopt>:
   1bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfe2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1bfe6:	b085      	sub	sp, #20
   1bfe8:	4606      	mov	r6, r0
   1bfea:	4617      	mov	r7, r2
   1bfec:	461d      	mov	r5, r3
   1bfee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1bff0:	d004      	beq.n	1bffc <tls_interface_getopt+0x1c>
   1bff2:	b005      	add	sp, #20
   1bff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1bff8:	f007 bb9a 	b.w	23730 <ip_interface_getopt>
   1bffc:	b103      	cbz	r3, 1c000 <tls_interface_getopt+0x20>
   1bffe:	b92c      	cbnz	r4, 1c00c <tls_interface_getopt+0x2c>
   1c000:	200e      	movs	r0, #14
   1c002:	f006 f90b 	bl	2221c <nrf_modem_os_errno_set>
   1c006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c00a:	e051      	b.n	1c0b0 <tls_interface_getopt+0xd0>
   1c00c:	6823      	ldr	r3, [r4, #0]
   1c00e:	b90b      	cbnz	r3, 1c014 <tls_interface_getopt+0x34>
   1c010:	2016      	movs	r0, #22
   1c012:	e7f6      	b.n	1c002 <tls_interface_getopt+0x22>
   1c014:	f7fe fb92 	bl	1a73c <interface_socket_from_handle_get>
   1c018:	4601      	mov	r1, r0
   1c01a:	2800      	cmp	r0, #0
   1c01c:	d068      	beq.n	1c0f0 <tls_interface_getopt+0x110>
   1c01e:	1e7a      	subs	r2, r7, #1
   1c020:	2a07      	cmp	r2, #7
   1c022:	d871      	bhi.n	1c108 <tls_interface_getopt+0x128>
   1c024:	e8df f002 	tbb	[pc, r2]
   1c028:	461a2904 	.word	0x461a2904
   1c02c:	5f705370 	.word	0x5f705370
   1c030:	6823      	ldr	r3, [r4, #0]
   1c032:	2124      	movs	r1, #36	; 0x24
   1c034:	2b04      	cmp	r3, #4
   1c036:	bf88      	it	hi
   1c038:	2304      	movhi	r3, #4
   1c03a:	fb01 f606 	mul.w	r6, r1, r6
   1c03e:	bf88      	it	hi
   1c040:	6023      	strhi	r3, [r4, #0]
   1c042:	4b32      	ldr	r3, [pc, #200]	; (1c10c <tls_interface_getopt+0x12c>)
   1c044:	a903      	add	r1, sp, #12
   1c046:	5d9b      	ldrb	r3, [r3, r6]
   1c048:	1e5a      	subs	r2, r3, #1
   1c04a:	4253      	negs	r3, r2
   1c04c:	4153      	adcs	r3, r2
   1c04e:	6822      	ldr	r2, [r4, #0]
   1c050:	9303      	str	r3, [sp, #12]
   1c052:	4628      	mov	r0, r5
   1c054:	f008 fd3a 	bl	24acc <memcpy>
   1c058:	2000      	movs	r0, #0
   1c05a:	e029      	b.n	1c0b0 <tls_interface_getopt+0xd0>
   1c05c:	6823      	ldr	r3, [r4, #0]
   1c05e:	2b00      	cmp	r3, #0
   1c060:	d0d6      	beq.n	1c010 <tls_interface_getopt+0x30>
   1c062:	2124      	movs	r1, #36	; 0x24
   1c064:	2b01      	cmp	r3, #1
   1c066:	bf88      	it	hi
   1c068:	2301      	movhi	r3, #1
   1c06a:	4828      	ldr	r0, [pc, #160]	; (1c10c <tls_interface_getopt+0x12c>)
   1c06c:	bf88      	it	hi
   1c06e:	6023      	strhi	r3, [r4, #0]
   1c070:	fb01 0106 	mla	r1, r1, r6, r0
   1c074:	6822      	ldr	r2, [r4, #0]
   1c076:	3101      	adds	r1, #1
   1c078:	e7eb      	b.n	1c052 <tls_interface_getopt+0x72>
   1c07a:	2324      	movs	r3, #36	; 0x24
   1c07c:	4923      	ldr	r1, [pc, #140]	; (1c10c <tls_interface_getopt+0x12c>)
   1c07e:	6822      	ldr	r2, [r4, #0]
   1c080:	fb03 1306 	mla	r3, r3, r6, r1
   1c084:	78d8      	ldrb	r0, [r3, #3]
   1c086:	0793      	lsls	r3, r2, #30
   1c088:	bf14      	ite	ne
   1c08a:	2300      	movne	r3, #0
   1c08c:	0893      	lsreq	r3, r2, #2
   1c08e:	4283      	cmp	r3, r0
   1c090:	bf28      	it	cs
   1c092:	4603      	movcs	r3, r0
   1c094:	009f      	lsls	r7, r3, #2
   1c096:	b143      	cbz	r3, 1c0aa <tls_interface_getopt+0xca>
   1c098:	2024      	movs	r0, #36	; 0x24
   1c09a:	fb00 1106 	mla	r1, r0, r6, r1
   1c09e:	42ba      	cmp	r2, r7
   1c0a0:	bf88      	it	hi
   1c0a2:	6027      	strhi	r7, [r4, #0]
   1c0a4:	6822      	ldr	r2, [r4, #0]
   1c0a6:	3104      	adds	r1, #4
   1c0a8:	e7d3      	b.n	1c052 <tls_interface_getopt+0x72>
   1c0aa:	2800      	cmp	r0, #0
   1c0ac:	d1b0      	bne.n	1c010 <tls_interface_getopt+0x30>
   1c0ae:	6020      	str	r0, [r4, #0]
   1c0b0:	b005      	add	sp, #20
   1c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c0b4:	6823      	ldr	r3, [r4, #0]
   1c0b6:	2124      	movs	r1, #36	; 0x24
   1c0b8:	2b04      	cmp	r3, #4
   1c0ba:	bf88      	it	hi
   1c0bc:	2304      	movhi	r3, #4
   1c0be:	4813      	ldr	r0, [pc, #76]	; (1c10c <tls_interface_getopt+0x12c>)
   1c0c0:	bf88      	it	hi
   1c0c2:	6023      	strhi	r3, [r4, #0]
   1c0c4:	fb01 0106 	mla	r1, r1, r6, r0
   1c0c8:	6822      	ldr	r2, [r4, #0]
   1c0ca:	3102      	adds	r1, #2
   1c0cc:	e7c1      	b.n	1c052 <tls_interface_getopt+0x72>
   1c0ce:	f247 0301 	movw	r3, #28673	; 0x7001
   1c0d2:	e9cd 5400 	strd	r5, r4, [sp]
   1c0d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c0da:	4630      	mov	r0, r6
   1c0dc:	f7fe fe14 	bl	1ad08 <ip_interface_socketoption_get>
   1c0e0:	2800      	cmp	r0, #0
   1c0e2:	d0e5      	beq.n	1c0b0 <tls_interface_getopt+0xd0>
   1c0e4:	e78d      	b.n	1c002 <tls_interface_getopt+0x22>
   1c0e6:	6823      	ldr	r3, [r4, #0]
   1c0e8:	2b04      	cmp	r3, #4
   1c0ea:	d903      	bls.n	1c0f4 <tls_interface_getopt+0x114>
   1c0ec:	2304      	movs	r3, #4
   1c0ee:	6023      	str	r3, [r4, #0]
   1c0f0:	2009      	movs	r0, #9
   1c0f2:	e786      	b.n	1c002 <tls_interface_getopt+0x22>
   1c0f4:	6828      	ldr	r0, [r5, #0]
   1c0f6:	f7ff fc3d 	bl	1b974 <secure_socket_dtls_timeout_check>
   1c0fa:	2800      	cmp	r0, #0
   1c0fc:	d181      	bne.n	1c002 <tls_interface_getopt+0x22>
   1c0fe:	f247 0302 	movw	r3, #28674	; 0x7002
   1c102:	e9cd 5400 	strd	r5, r4, [sp]
   1c106:	e7e6      	b.n	1c0d6 <tls_interface_getopt+0xf6>
   1c108:	206d      	movs	r0, #109	; 0x6d
   1c10a:	e77a      	b.n	1c002 <tls_interface_getopt+0x22>
   1c10c:	2000d582 	.word	0x2000d582

0001c110 <tls_rpc_ip_event_handler>:
   1c110:	b570      	push	{r4, r5, r6, lr}
   1c112:	460c      	mov	r4, r1
   1c114:	f248 0181 	movw	r1, #32897	; 0x8081
   1c118:	428b      	cmp	r3, r1
   1c11a:	4606      	mov	r6, r0
   1c11c:	d035      	beq.n	1c18a <tls_rpc_ip_event_handler+0x7a>
   1c11e:	f249 0182 	movw	r1, #36994	; 0x9082
   1c122:	428b      	cmp	r3, r1
   1c124:	d040      	beq.n	1c1a8 <tls_rpc_ip_event_handler+0x98>
   1c126:	f248 0102 	movw	r1, #32770	; 0x8002
   1c12a:	428b      	cmp	r3, r1
   1c12c:	d161      	bne.n	1c1f2 <tls_rpc_ip_event_handler+0xe2>
   1c12e:	2c00      	cmp	r4, #0
   1c130:	d05f      	beq.n	1c1f2 <tls_rpc_ip_event_handler+0xe2>
   1c132:	6963      	ldr	r3, [r4, #20]
   1c134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1c138:	d002      	beq.n	1c140 <tls_rpc_ip_event_handler+0x30>
   1c13a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1c13e:	d158      	bne.n	1c1f2 <tls_rpc_ip_event_handler+0xe2>
   1c140:	6823      	ldr	r3, [r4, #0]
   1c142:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1c146:	6023      	str	r3, [r4, #0]
   1c148:	6955      	ldr	r5, [r2, #20]
   1c14a:	2d00      	cmp	r5, #0
   1c14c:	d14d      	bne.n	1c1ea <tls_rpc_ip_event_handler+0xda>
   1c14e:	6823      	ldr	r3, [r4, #0]
   1c150:	0c1b      	lsrs	r3, r3, #16
   1c152:	041b      	lsls	r3, r3, #16
   1c154:	f043 0305 	orr.w	r3, r3, #5
   1c158:	6023      	str	r3, [r4, #0]
   1c15a:	6823      	ldr	r3, [r4, #0]
   1c15c:	00db      	lsls	r3, r3, #3
   1c15e:	d401      	bmi.n	1c164 <tls_rpc_ip_event_handler+0x54>
   1c160:	2000      	movs	r0, #0
   1c162:	e020      	b.n	1c1a6 <tls_rpc_ip_event_handler+0x96>
   1c164:	2324      	movs	r3, #36	; 0x24
   1c166:	4373      	muls	r3, r6
   1c168:	4a23      	ldr	r2, [pc, #140]	; (1c1f8 <tls_rpc_ip_event_handler+0xe8>)
   1c16a:	5cd3      	ldrb	r3, [r2, r3]
   1c16c:	2b02      	cmp	r3, #2
   1c16e:	d1f7      	bne.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c170:	4621      	mov	r1, r4
   1c172:	4630      	mov	r0, r6
   1c174:	f007 fb4e 	bl	23814 <secure_client_socket>
   1c178:	2800      	cmp	r0, #0
   1c17a:	d0f1      	beq.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c17c:	2877      	cmp	r0, #119	; 0x77
   1c17e:	d0ef      	beq.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c180:	6060      	str	r0, [r4, #4]
   1c182:	6823      	ldr	r3, [r4, #0]
   1c184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1c188:	e02d      	b.n	1c1e6 <tls_rpc_ip_event_handler+0xd6>
   1c18a:	2c00      	cmp	r4, #0
   1c18c:	d0e8      	beq.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c18e:	6823      	ldr	r3, [r4, #0]
   1c190:	b29b      	uxth	r3, r3
   1c192:	2b0a      	cmp	r3, #10
   1c194:	d1e4      	bne.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c196:	6950      	ldr	r0, [r2, #20]
   1c198:	bb40      	cbnz	r0, 1c1ec <tls_rpc_ip_event_handler+0xdc>
   1c19a:	6823      	ldr	r3, [r4, #0]
   1c19c:	0c1b      	lsrs	r3, r3, #16
   1c19e:	041b      	lsls	r3, r3, #16
   1c1a0:	f043 030b 	orr.w	r3, r3, #11
   1c1a4:	6023      	str	r3, [r4, #0]
   1c1a6:	bd70      	pop	{r4, r5, r6, pc}
   1c1a8:	2c00      	cmp	r4, #0
   1c1aa:	d0d9      	beq.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c1ac:	6823      	ldr	r3, [r4, #0]
   1c1ae:	b29b      	uxth	r3, r3
   1c1b0:	2b0b      	cmp	r3, #11
   1c1b2:	d1d5      	bne.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c1b4:	6915      	ldr	r5, [r2, #16]
   1c1b6:	b9c5      	cbnz	r5, 1c1ea <tls_rpc_ip_event_handler+0xda>
   1c1b8:	6823      	ldr	r3, [r4, #0]
   1c1ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1c1be:	6023      	str	r3, [r4, #0]
   1c1c0:	f7ff fbf4 	bl	1b9ac <hostname_free>
   1c1c4:	6823      	ldr	r3, [r4, #0]
   1c1c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1c1ca:	6023      	str	r3, [r4, #0]
   1c1cc:	6823      	ldr	r3, [r4, #0]
   1c1ce:	0c1b      	lsrs	r3, r3, #16
   1c1d0:	041b      	lsls	r3, r3, #16
   1c1d2:	f043 030c 	orr.w	r3, r3, #12
   1c1d6:	6023      	str	r3, [r4, #0]
   1c1d8:	6823      	ldr	r3, [r4, #0]
   1c1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c1de:	6023      	str	r3, [r4, #0]
   1c1e0:	6823      	ldr	r3, [r4, #0]
   1c1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c1e6:	6023      	str	r3, [r4, #0]
   1c1e8:	e7ba      	b.n	1c160 <tls_rpc_ip_event_handler+0x50>
   1c1ea:	4628      	mov	r0, r5
   1c1ec:	f7fe fb6c 	bl	1a8c8 <rpc_error_to_nrf_errno>
   1c1f0:	e7c6      	b.n	1c180 <tls_rpc_ip_event_handler+0x70>
   1c1f2:	2001      	movs	r0, #1
   1c1f4:	e7d7      	b.n	1c1a6 <tls_rpc_ip_event_handler+0x96>
   1c1f6:	bf00      	nop
   1c1f8:	2000d582 	.word	0x2000d582

0001c1fc <at_cmd_send>:
   1c1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c1fe:	4615      	mov	r5, r2
   1c200:	f06f 0258 	mvn.w	r2, #88	; 0x58
   1c204:	2300      	movs	r3, #0
   1c206:	7302      	strb	r2, [r0, #12]
   1c208:	2204      	movs	r2, #4
   1c20a:	4c0d      	ldr	r4, [pc, #52]	; (1c240 <at_cmd_send+0x44>)
   1c20c:	7343      	strb	r3, [r0, #13]
   1c20e:	7383      	strb	r3, [r0, #14]
   1c210:	73c3      	strb	r3, [r0, #15]
   1c212:	7202      	strb	r2, [r0, #8]
   1c214:	7243      	strb	r3, [r0, #9]
   1c216:	7283      	strb	r3, [r0, #10]
   1c218:	72c3      	strb	r3, [r0, #11]
   1c21a:	4602      	mov	r2, r0
   1c21c:	b289      	uxth	r1, r1
   1c21e:	2003      	movs	r0, #3
   1c220:	7023      	strb	r3, [r4, #0]
   1c222:	f006 ffc8 	bl	231b6 <rpc_client_request_send>
   1c226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c22a:	9301      	str	r3, [sp, #4]
   1c22c:	7823      	ldrb	r3, [r4, #0]
   1c22e:	42ab      	cmp	r3, r5
   1c230:	d101      	bne.n	1c236 <at_cmd_send+0x3a>
   1c232:	b003      	add	sp, #12
   1c234:	bd30      	pop	{r4, r5, pc}
   1c236:	a901      	add	r1, sp, #4
   1c238:	2000      	movs	r0, #0
   1c23a:	f005 ff66 	bl	2210a <nrf_modem_os_timedwait>
   1c23e:	e7f5      	b.n	1c22c <at_cmd_send+0x30>
   1c240:	2000d6a2 	.word	0x2000d6a2

0001c244 <at_response_match>:
   1c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c246:	4605      	mov	r5, r0
   1c248:	2400      	movs	r4, #0
   1c24a:	4f10      	ldr	r7, [pc, #64]	; (1c28c <at_response_match+0x48>)
   1c24c:	f857 6b04 	ldr.w	r6, [r7], #4
   1c250:	4628      	mov	r0, r5
   1c252:	4631      	mov	r1, r6
   1c254:	f008 fc99 	bl	24b8a <strstr>
   1c258:	b928      	cbnz	r0, 1c266 <at_response_match+0x22>
   1c25a:	3401      	adds	r4, #1
   1c25c:	2c04      	cmp	r4, #4
   1c25e:	d1f5      	bne.n	1c24c <at_response_match+0x8>
   1c260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1c264:	e00e      	b.n	1c284 <at_response_match+0x40>
   1c266:	2c01      	cmp	r4, #1
   1c268:	d0fa      	beq.n	1c260 <at_response_match+0x1c>
   1c26a:	1ea3      	subs	r3, r4, #2
   1c26c:	2b01      	cmp	r3, #1
   1c26e:	d80a      	bhi.n	1c286 <at_response_match+0x42>
   1c270:	4630      	mov	r0, r6
   1c272:	f7f4 ff3a 	bl	110ea <strlen>
   1c276:	220a      	movs	r2, #10
   1c278:	2100      	movs	r1, #0
   1c27a:	4428      	add	r0, r5
   1c27c:	f002 fc80 	bl	1eb80 <strtol>
   1c280:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   1c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c286:	2000      	movs	r0, #0
   1c288:	e7fc      	b.n	1c284 <at_response_match+0x40>
   1c28a:	bf00      	nop
   1c28c:	0002727c 	.word	0x0002727c

0001c290 <at_vprintf>:
   1c290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c294:	4607      	mov	r7, r0
   1c296:	460e      	mov	r6, r1
   1c298:	481d      	ldr	r0, [pc, #116]	; (1c310 <at_vprintf+0x80>)
   1c29a:	2100      	movs	r1, #0
   1c29c:	4690      	mov	r8, r2
   1c29e:	461d      	mov	r5, r3
   1c2a0:	9301      	str	r3, [sp, #4]
   1c2a2:	f002 fd93 	bl	1edcc <vsniprintf>
   1c2a6:	3001      	adds	r0, #1
   1c2a8:	f006 ff7f 	bl	231aa <rpc_client_request_alloc>
   1c2ac:	4604      	mov	r4, r0
   1c2ae:	b360      	cbz	r0, 1c30a <at_vprintf+0x7a>
   1c2b0:	9501      	str	r5, [sp, #4]
   1c2b2:	462b      	mov	r3, r5
   1c2b4:	6841      	ldr	r1, [r0, #4]
   1c2b6:	4642      	mov	r2, r8
   1c2b8:	6800      	ldr	r0, [r0, #0]
   1c2ba:	f002 fd87 	bl	1edcc <vsniprintf>
   1c2be:	2202      	movs	r2, #2
   1c2c0:	2101      	movs	r1, #1
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	f7ff ff9a 	bl	1c1fc <at_cmd_send>
   1c2c8:	4d12      	ldr	r5, [pc, #72]	; (1c314 <at_vprintf+0x84>)
   1c2ca:	b97f      	cbnz	r7, 1c2ec <at_vprintf+0x5c>
   1c2cc:	682b      	ldr	r3, [r5, #0]
   1c2ce:	6818      	ldr	r0, [r3, #0]
   1c2d0:	f7ff ffb8 	bl	1c244 <at_response_match>
   1c2d4:	4604      	mov	r4, r0
   1c2d6:	682b      	ldr	r3, [r5, #0]
   1c2d8:	6818      	ldr	r0, [r3, #0]
   1c2da:	f006 ff76 	bl	231ca <rpc_client_data_free>
   1c2de:	6828      	ldr	r0, [r5, #0]
   1c2e0:	f006 ff70 	bl	231c4 <rpc_client_message_free>
   1c2e4:	4620      	mov	r0, r4
   1c2e6:	b002      	add	sp, #8
   1c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ec:	682c      	ldr	r4, [r5, #0]
   1c2ee:	4638      	mov	r0, r7
   1c2f0:	6862      	ldr	r2, [r4, #4]
   1c2f2:	6821      	ldr	r1, [r4, #0]
   1c2f4:	42b2      	cmp	r2, r6
   1c2f6:	bf28      	it	cs
   1c2f8:	4632      	movcs	r2, r6
   1c2fa:	f008 fbe7 	bl	24acc <memcpy>
   1c2fe:	6863      	ldr	r3, [r4, #4]
   1c300:	42b3      	cmp	r3, r6
   1c302:	d9e3      	bls.n	1c2cc <at_vprintf+0x3c>
   1c304:	f06f 0406 	mvn.w	r4, #6
   1c308:	e7e5      	b.n	1c2d6 <at_vprintf+0x46>
   1c30a:	f06f 040b 	mvn.w	r4, #11
   1c30e:	e7e9      	b.n	1c2e4 <at_vprintf+0x54>
   1c310:	0002540c 	.word	0x0002540c
   1c314:	2000d4e0 	.word	0x2000d4e0

0001c318 <nrf_modem_at_init>:
   1c318:	2201      	movs	r2, #1
   1c31a:	b508      	push	{r3, lr}
   1c31c:	4611      	mov	r1, r2
   1c31e:	4808      	ldr	r0, [pc, #32]	; (1c340 <nrf_modem_at_init+0x28>)
   1c320:	f7f9 fe18 	bl	15f54 <nrf_modem_os_sem_init>
   1c324:	2000      	movs	r0, #0
   1c326:	f006 ff40 	bl	231aa <rpc_client_request_alloc>
   1c32a:	b128      	cbz	r0, 1c338 <nrf_modem_at_init+0x20>
   1c32c:	2201      	movs	r2, #1
   1c32e:	2105      	movs	r1, #5
   1c330:	f7ff ff64 	bl	1c1fc <at_cmd_send>
   1c334:	2000      	movs	r0, #0
   1c336:	bd08      	pop	{r3, pc}
   1c338:	f06f 000b 	mvn.w	r0, #11
   1c33c:	e7fb      	b.n	1c336 <nrf_modem_at_init+0x1e>
   1c33e:	bf00      	nop
   1c340:	2000d4d0 	.word	0x2000d4d0

0001c344 <nrf_modem_at_notif_handler_set>:
   1c344:	4b01      	ldr	r3, [pc, #4]	; (1c34c <nrf_modem_at_notif_handler_set+0x8>)
   1c346:	6018      	str	r0, [r3, #0]
   1c348:	2000      	movs	r0, #0
   1c34a:	4770      	bx	lr
   1c34c:	2000d4dc 	.word	0x2000d4dc

0001c350 <nrf_modem_at_printf>:
   1c350:	b40f      	push	{r0, r1, r2, r3}
   1c352:	4b11      	ldr	r3, [pc, #68]	; (1c398 <nrf_modem_at_printf+0x48>)
   1c354:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c356:	781b      	ldrb	r3, [r3, #0]
   1c358:	9c06      	ldr	r4, [sp, #24]
   1c35a:	b1bb      	cbz	r3, 1c38c <nrf_modem_at_printf+0x3c>
   1c35c:	b1cc      	cbz	r4, 1c392 <nrf_modem_at_printf+0x42>
   1c35e:	4d0f      	ldr	r5, [pc, #60]	; (1c39c <nrf_modem_at_printf+0x4c>)
   1c360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c364:	6828      	ldr	r0, [r5, #0]
   1c366:	f005 ff67 	bl	22238 <nrf_modem_os_sem_take>
   1c36a:	2100      	movs	r1, #0
   1c36c:	4622      	mov	r2, r4
   1c36e:	ab07      	add	r3, sp, #28
   1c370:	4608      	mov	r0, r1
   1c372:	9301      	str	r3, [sp, #4]
   1c374:	f7ff ff8c 	bl	1c290 <at_vprintf>
   1c378:	4604      	mov	r4, r0
   1c37a:	6828      	ldr	r0, [r5, #0]
   1c37c:	f005 ff58 	bl	22230 <nrf_modem_os_sem_give>
   1c380:	4620      	mov	r0, r4
   1c382:	b003      	add	sp, #12
   1c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1c388:	b004      	add	sp, #16
   1c38a:	4770      	bx	lr
   1c38c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c390:	e7f6      	b.n	1c380 <nrf_modem_at_printf+0x30>
   1c392:	f06f 040d 	mvn.w	r4, #13
   1c396:	e7f3      	b.n	1c380 <nrf_modem_at_printf+0x30>
   1c398:	2000d6a8 	.word	0x2000d6a8
   1c39c:	2000d4d0 	.word	0x2000d4d0

0001c3a0 <nrf_modem_at_cmd>:
   1c3a0:	b40c      	push	{r2, r3}
   1c3a2:	4b2e      	ldr	r3, [pc, #184]	; (1c45c <nrf_modem_at_cmd+0xbc>)
   1c3a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c3a8:	781b      	ldrb	r3, [r3, #0]
   1c3aa:	4605      	mov	r5, r0
   1c3ac:	460f      	mov	r7, r1
   1c3ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1c3b2:	2b00      	cmp	r3, #0
   1c3b4:	d049      	beq.n	1c44a <nrf_modem_at_cmd+0xaa>
   1c3b6:	2800      	cmp	r0, #0
   1c3b8:	d04a      	beq.n	1c450 <nrf_modem_at_cmd+0xb0>
   1c3ba:	f1b8 0f00 	cmp.w	r8, #0
   1c3be:	d047      	beq.n	1c450 <nrf_modem_at_cmd+0xb0>
   1c3c0:	2900      	cmp	r1, #0
   1c3c2:	d048      	beq.n	1c456 <nrf_modem_at_cmd+0xb6>
   1c3c4:	4b26      	ldr	r3, [pc, #152]	; (1c460 <nrf_modem_at_cmd+0xc0>)
   1c3c6:	681a      	ldr	r2, [r3, #0]
   1c3c8:	4699      	mov	r9, r3
   1c3ca:	b1d2      	cbz	r2, 1c402 <nrf_modem_at_cmd+0x62>
   1c3cc:	4e25      	ldr	r6, [pc, #148]	; (1c464 <nrf_modem_at_cmd+0xc4>)
   1c3ce:	6833      	ldr	r3, [r6, #0]
   1c3d0:	b1bb      	cbz	r3, 1c402 <nrf_modem_at_cmd+0x62>
   1c3d2:	2400      	movs	r4, #0
   1c3d4:	f8d9 3000 	ldr.w	r3, [r9]
   1c3d8:	429c      	cmp	r4, r3
   1c3da:	d212      	bcs.n	1c402 <nrf_modem_at_cmd+0x62>
   1c3dc:	6833      	ldr	r3, [r6, #0]
   1c3de:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   1c3e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1c3e6:	f7f4 fe80 	bl	110ea <strlen>
   1c3ea:	6833      	ldr	r3, [r6, #0]
   1c3ec:	4602      	mov	r2, r0
   1c3ee:	4641      	mov	r1, r8
   1c3f0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1c3f4:	f008 fb96 	bl	24b24 <strncmp>
   1c3f8:	b9a8      	cbnz	r0, 1c426 <nrf_modem_at_cmd+0x86>
   1c3fa:	6833      	ldr	r3, [r6, #0]
   1c3fc:	4453      	add	r3, sl
   1c3fe:	685b      	ldr	r3, [r3, #4]
   1c400:	b99b      	cbnz	r3, 1c42a <nrf_modem_at_cmd+0x8a>
   1c402:	4e19      	ldr	r6, [pc, #100]	; (1c468 <nrf_modem_at_cmd+0xc8>)
   1c404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c408:	6830      	ldr	r0, [r6, #0]
   1c40a:	f005 ff15 	bl	22238 <nrf_modem_os_sem_take>
   1c40e:	ab0b      	add	r3, sp, #44	; 0x2c
   1c410:	4642      	mov	r2, r8
   1c412:	4639      	mov	r1, r7
   1c414:	4628      	mov	r0, r5
   1c416:	9301      	str	r3, [sp, #4]
   1c418:	f7ff ff3a 	bl	1c290 <at_vprintf>
   1c41c:	4604      	mov	r4, r0
   1c41e:	6830      	ldr	r0, [r6, #0]
   1c420:	f005 ff06 	bl	22230 <nrf_modem_os_sem_give>
   1c424:	e00b      	b.n	1c43e <nrf_modem_at_cmd+0x9e>
   1c426:	3401      	adds	r4, #1
   1c428:	e7d4      	b.n	1c3d4 <nrf_modem_at_cmd+0x34>
   1c42a:	4642      	mov	r2, r8
   1c42c:	4639      	mov	r1, r7
   1c42e:	4628      	mov	r0, r5
   1c430:	4798      	blx	r3
   1c432:	1e04      	subs	r4, r0, #0
   1c434:	db03      	blt.n	1c43e <nrf_modem_at_cmd+0x9e>
   1c436:	4628      	mov	r0, r5
   1c438:	f7ff ff04 	bl	1c244 <at_response_match>
   1c43c:	4604      	mov	r4, r0
   1c43e:	4620      	mov	r0, r4
   1c440:	b002      	add	sp, #8
   1c442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c446:	b002      	add	sp, #8
   1c448:	4770      	bx	lr
   1c44a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c44e:	e7f6      	b.n	1c43e <nrf_modem_at_cmd+0x9e>
   1c450:	f06f 040d 	mvn.w	r4, #13
   1c454:	e7f3      	b.n	1c43e <nrf_modem_at_cmd+0x9e>
   1c456:	f06f 0415 	mvn.w	r4, #21
   1c45a:	e7f0      	b.n	1c43e <nrf_modem_at_cmd+0x9e>
   1c45c:	2000d6a8 	.word	0x2000d6a8
   1c460:	2000d4d8 	.word	0x2000d4d8
   1c464:	2000d4d4 	.word	0x2000d4d4
   1c468:	2000d4d0 	.word	0x2000d4d0

0001c46c <nrf_modem_at_scanf>:
   1c46c:	b40e      	push	{r1, r2, r3}
   1c46e:	4b23      	ldr	r3, [pc, #140]	; (1c4fc <nrf_modem_at_scanf+0x90>)
   1c470:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   1c472:	781b      	ldrb	r3, [r3, #0]
   1c474:	4605      	mov	r5, r0
   1c476:	9f07      	ldr	r7, [sp, #28]
   1c478:	2b00      	cmp	r3, #0
   1c47a:	d039      	beq.n	1c4f0 <nrf_modem_at_scanf+0x84>
   1c47c:	2800      	cmp	r0, #0
   1c47e:	d03a      	beq.n	1c4f6 <nrf_modem_at_scanf+0x8a>
   1c480:	2f00      	cmp	r7, #0
   1c482:	d038      	beq.n	1c4f6 <nrf_modem_at_scanf+0x8a>
   1c484:	4e1e      	ldr	r6, [pc, #120]	; (1c500 <nrf_modem_at_scanf+0x94>)
   1c486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c48a:	6830      	ldr	r0, [r6, #0]
   1c48c:	f005 fed4 	bl	22238 <nrf_modem_os_sem_take>
   1c490:	4628      	mov	r0, r5
   1c492:	f7f4 fe2a 	bl	110ea <strlen>
   1c496:	3001      	adds	r0, #1
   1c498:	f006 fe87 	bl	231aa <rpc_client_request_alloc>
   1c49c:	4604      	mov	r4, r0
   1c49e:	b320      	cbz	r0, 1c4ea <nrf_modem_at_scanf+0x7e>
   1c4a0:	4629      	mov	r1, r5
   1c4a2:	6800      	ldr	r0, [r0, #0]
   1c4a4:	4d17      	ldr	r5, [pc, #92]	; (1c504 <nrf_modem_at_scanf+0x98>)
   1c4a6:	f008 fb35 	bl	24b14 <strcpy>
   1c4aa:	4620      	mov	r0, r4
   1c4ac:	2202      	movs	r2, #2
   1c4ae:	2101      	movs	r1, #1
   1c4b0:	f7ff fea4 	bl	1c1fc <at_cmd_send>
   1c4b4:	682b      	ldr	r3, [r5, #0]
   1c4b6:	aa08      	add	r2, sp, #32
   1c4b8:	4639      	mov	r1, r7
   1c4ba:	6818      	ldr	r0, [r3, #0]
   1c4bc:	9201      	str	r2, [sp, #4]
   1c4be:	f002 fcb7 	bl	1ee30 <vsiscanf>
   1c4c2:	682b      	ldr	r3, [r5, #0]
   1c4c4:	1e04      	subs	r4, r0, #0
   1c4c6:	6818      	ldr	r0, [r3, #0]
   1c4c8:	bf08      	it	eq
   1c4ca:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   1c4ce:	f006 fe7c 	bl	231ca <rpc_client_data_free>
   1c4d2:	6828      	ldr	r0, [r5, #0]
   1c4d4:	f006 fe76 	bl	231c4 <rpc_client_message_free>
   1c4d8:	6830      	ldr	r0, [r6, #0]
   1c4da:	f005 fea9 	bl	22230 <nrf_modem_os_sem_give>
   1c4de:	4620      	mov	r0, r4
   1c4e0:	b002      	add	sp, #8
   1c4e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c4e6:	b003      	add	sp, #12
   1c4e8:	4770      	bx	lr
   1c4ea:	f06f 040b 	mvn.w	r4, #11
   1c4ee:	e7f3      	b.n	1c4d8 <nrf_modem_at_scanf+0x6c>
   1c4f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c4f4:	e7f3      	b.n	1c4de <nrf_modem_at_scanf+0x72>
   1c4f6:	f06f 040d 	mvn.w	r4, #13
   1c4fa:	e7f0      	b.n	1c4de <nrf_modem_at_scanf+0x72>
   1c4fc:	2000d6a8 	.word	0x2000d6a8
   1c500:	2000d4d0 	.word	0x2000d4d0
   1c504:	2000d4e0 	.word	0x2000d4e0

0001c508 <rpc_at_event_handler>:
   1c508:	b570      	push	{r4, r5, r6, lr}
   1c50a:	68c3      	ldr	r3, [r0, #12]
   1c50c:	4605      	mov	r5, r0
   1c50e:	2ba7      	cmp	r3, #167	; 0xa7
   1c510:	d003      	beq.n	1c51a <rpc_at_event_handler+0x12>
   1c512:	6828      	ldr	r0, [r5, #0]
   1c514:	f006 fe59 	bl	231ca <rpc_client_data_free>
   1c518:	e008      	b.n	1c52c <rpc_at_event_handler+0x24>
   1c51a:	2903      	cmp	r1, #3
   1c51c:	d008      	beq.n	1c530 <rpc_at_event_handler+0x28>
   1c51e:	2904      	cmp	r1, #4
   1c520:	d019      	beq.n	1c556 <rpc_at_event_handler+0x4e>
   1c522:	2902      	cmp	r1, #2
   1c524:	d102      	bne.n	1c52c <rpc_at_event_handler+0x24>
   1c526:	2201      	movs	r2, #1
   1c528:	4b0e      	ldr	r3, [pc, #56]	; (1c564 <rpc_at_event_handler+0x5c>)
   1c52a:	701a      	strb	r2, [r3, #0]
   1c52c:	2000      	movs	r0, #0
   1c52e:	e00a      	b.n	1c546 <rpc_at_event_handler+0x3e>
   1c530:	4e0d      	ldr	r6, [pc, #52]	; (1c568 <rpc_at_event_handler+0x60>)
   1c532:	6833      	ldr	r3, [r6, #0]
   1c534:	b143      	cbz	r3, 1c548 <rpc_at_event_handler+0x40>
   1c536:	2400      	movs	r4, #0
   1c538:	6800      	ldr	r0, [r0, #0]
   1c53a:	4798      	blx	r3
   1c53c:	6828      	ldr	r0, [r5, #0]
   1c53e:	6034      	str	r4, [r6, #0]
   1c540:	f006 fe43 	bl	231ca <rpc_client_data_free>
   1c544:	b2e0      	uxtb	r0, r4
   1c546:	bd70      	pop	{r4, r5, r6, pc}
   1c548:	2202      	movs	r2, #2
   1c54a:	4b08      	ldr	r3, [pc, #32]	; (1c56c <rpc_at_event_handler+0x64>)
   1c54c:	2401      	movs	r4, #1
   1c54e:	6018      	str	r0, [r3, #0]
   1c550:	4b04      	ldr	r3, [pc, #16]	; (1c564 <rpc_at_event_handler+0x5c>)
   1c552:	701a      	strb	r2, [r3, #0]
   1c554:	e7f6      	b.n	1c544 <rpc_at_event_handler+0x3c>
   1c556:	4b06      	ldr	r3, [pc, #24]	; (1c570 <rpc_at_event_handler+0x68>)
   1c558:	681b      	ldr	r3, [r3, #0]
   1c55a:	2b00      	cmp	r3, #0
   1c55c:	d0d9      	beq.n	1c512 <rpc_at_event_handler+0xa>
   1c55e:	6800      	ldr	r0, [r0, #0]
   1c560:	4798      	blx	r3
   1c562:	e7d6      	b.n	1c512 <rpc_at_event_handler+0xa>
   1c564:	2000d6a2 	.word	0x2000d6a2
   1c568:	2000d4e4 	.word	0x2000d4e4
   1c56c:	2000d4e0 	.word	0x2000d4e0
   1c570:	2000d4dc 	.word	0x2000d4dc

0001c574 <rpc_dfu_event_handler>:
   1c574:	b510      	push	{r4, lr}
   1c576:	4604      	mov	r4, r0
   1c578:	6800      	ldr	r0, [r0, #0]
   1c57a:	b108      	cbz	r0, 1c580 <rpc_dfu_event_handler+0xc>
   1c57c:	f006 fe25 	bl	231ca <rpc_client_data_free>
   1c580:	4b05      	ldr	r3, [pc, #20]	; (1c598 <rpc_dfu_event_handler+0x24>)
   1c582:	68e2      	ldr	r2, [r4, #12]
   1c584:	429a      	cmp	r2, r3
   1c586:	bf05      	ittet	eq
   1c588:	2001      	moveq	r0, #1
   1c58a:	4b04      	ldreq	r3, [pc, #16]	; (1c59c <rpc_dfu_event_handler+0x28>)
   1c58c:	2000      	movne	r0, #0
   1c58e:	7018      	strbeq	r0, [r3, #0]
   1c590:	bf04      	itt	eq
   1c592:	4b03      	ldreq	r3, [pc, #12]	; (1c5a0 <rpc_dfu_event_handler+0x2c>)
   1c594:	601c      	streq	r4, [r3, #0]
   1c596:	bd10      	pop	{r4, pc}
   1c598:	15abe11a 	.word	0x15abe11a
   1c59c:	2000d6a3 	.word	0x2000d6a3
   1c5a0:	2000d4e8 	.word	0x2000d4e8

0001c5a4 <rpc_gnss_event_handler>:
   1c5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5a8:	6804      	ldr	r4, [r0, #0]
   1c5aa:	4607      	mov	r7, r0
   1c5ac:	460d      	mov	r5, r1
   1c5ae:	2c00      	cmp	r4, #0
   1c5b0:	f000 8086 	beq.w	1c6c0 <rpc_gnss_event_handler+0x11c>
   1c5b4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1c5b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1c5bc:	d142      	bne.n	1c644 <rpc_gnss_event_handler+0xa0>
   1c5be:	4b5f      	ldr	r3, [pc, #380]	; (1c73c <rpc_gnss_event_handler+0x198>)
   1c5c0:	781a      	ldrb	r2, [r3, #0]
   1c5c2:	4698      	mov	r8, r3
   1c5c4:	2a01      	cmp	r2, #1
   1c5c6:	d131      	bne.n	1c62c <rpc_gnss_event_handler+0x88>
   1c5c8:	4a5d      	ldr	r2, [pc, #372]	; (1c740 <rpc_gnss_event_handler+0x19c>)
   1c5ca:	6821      	ldr	r1, [r4, #0]
   1c5cc:	8812      	ldrh	r2, [r2, #0]
   1c5ce:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1c5d2:	d12b      	bne.n	1c62c <rpc_gnss_event_handler+0x88>
   1c5d4:	6862      	ldr	r2, [r4, #4]
   1c5d6:	bb6a      	cbnz	r2, 1c634 <rpc_gnss_event_handler+0x90>
   1c5d8:	4b5a      	ldr	r3, [pc, #360]	; (1c744 <rpc_gnss_event_handler+0x1a0>)
   1c5da:	681e      	ldr	r6, [r3, #0]
   1c5dc:	b31e      	cbz	r6, 1c626 <rpc_gnss_event_handler+0x82>
   1c5de:	f242 0309 	movw	r3, #8201	; 0x2009
   1c5e2:	429d      	cmp	r5, r3
   1c5e4:	d11f      	bne.n	1c626 <rpc_gnss_event_handler+0x82>
   1c5e6:	4630      	mov	r0, r6
   1c5e8:	8923      	ldrh	r3, [r4, #8]
   1c5ea:	2280      	movs	r2, #128	; 0x80
   1c5ec:	f840 3b04 	str.w	r3, [r0], #4
   1c5f0:	f104 010a 	add.w	r1, r4, #10
   1c5f4:	f008 fa6a 	bl	24acc <memcpy>
   1c5f8:	2280      	movs	r2, #128	; 0x80
   1c5fa:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   1c5fe:	f106 0084 	add.w	r0, r6, #132	; 0x84
   1c602:	f008 fa63 	bl	24acc <memcpy>
   1c606:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   1c60a:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   1c60e:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   1c612:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   1c616:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   1c61a:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   1c61e:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   1c622:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1c626:	2300      	movs	r3, #0
   1c628:	f888 3000 	strb.w	r3, [r8]
   1c62c:	6838      	ldr	r0, [r7, #0]
   1c62e:	f006 fdcc 	bl	231ca <rpc_client_data_free>
   1c632:	e045      	b.n	1c6c0 <rpc_gnss_event_handler+0x11c>
   1c634:	f647 71ff 	movw	r1, #32767	; 0x7fff
   1c638:	428a      	cmp	r2, r1
   1c63a:	bf0c      	ite	eq
   1c63c:	2203      	moveq	r2, #3
   1c63e:	2202      	movne	r2, #2
   1c640:	701a      	strb	r2, [r3, #0]
   1c642:	e7f3      	b.n	1c62c <rpc_gnss_event_handler+0x88>
   1c644:	4e40      	ldr	r6, [pc, #256]	; (1c748 <rpc_gnss_event_handler+0x1a4>)
   1c646:	6833      	ldr	r3, [r6, #0]
   1c648:	2b00      	cmp	r3, #0
   1c64a:	d0ef      	beq.n	1c62c <rpc_gnss_event_handler+0x88>
   1c64c:	f244 0204 	movw	r2, #16388	; 0x4004
   1c650:	4291      	cmp	r1, r2
   1c652:	d80b      	bhi.n	1c66c <rpc_gnss_event_handler+0xc8>
   1c654:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1c658:	d9e8      	bls.n	1c62c <rpc_gnss_event_handler+0x88>
   1c65a:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   1c65e:	3a02      	subs	r2, #2
   1c660:	2a02      	cmp	r2, #2
   1c662:	d80b      	bhi.n	1c67c <rpc_gnss_event_handler+0xd8>
   1c664:	e8df f002 	tbb	[pc, r2]
   1c668:	4f45      	.short	0x4f45
   1c66a:	59          	.byte	0x59
   1c66b:	00          	.byte	0x00
   1c66c:	f244 1301 	movw	r3, #16641	; 0x4101
   1c670:	4299      	cmp	r1, r3
   1c672:	d003      	beq.n	1c67c <rpc_gnss_event_handler+0xd8>
   1c674:	f244 2301 	movw	r3, #16897	; 0x4201
   1c678:	4299      	cmp	r1, r3
   1c67a:	d1d7      	bne.n	1c62c <rpc_gnss_event_handler+0x88>
   1c67c:	4f33      	ldr	r7, [pc, #204]	; (1c74c <rpc_gnss_event_handler+0x1a8>)
   1c67e:	6838      	ldr	r0, [r7, #0]
   1c680:	b108      	cbz	r0, 1c686 <rpc_gnss_event_handler+0xe2>
   1c682:	f006 fda2 	bl	231ca <rpc_client_data_free>
   1c686:	f244 2301 	movw	r3, #16897	; 0x4201
   1c68a:	429d      	cmp	r5, r3
   1c68c:	4b30      	ldr	r3, [pc, #192]	; (1c750 <rpc_gnss_event_handler+0x1ac>)
   1c68e:	d11a      	bne.n	1c6c6 <rpc_gnss_event_handler+0x122>
   1c690:	2202      	movs	r2, #2
   1c692:	603c      	str	r4, [r7, #0]
   1c694:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   1c698:	701a      	strb	r2, [r3, #0]
   1c69a:	07e3      	lsls	r3, r4, #31
   1c69c:	d502      	bpl.n	1c6a4 <rpc_gnss_event_handler+0x100>
   1c69e:	2002      	movs	r0, #2
   1c6a0:	6833      	ldr	r3, [r6, #0]
   1c6a2:	4798      	blx	r3
   1c6a4:	4d2b      	ldr	r5, [pc, #172]	; (1c754 <rpc_gnss_event_handler+0x1b0>)
   1c6a6:	f014 0418 	ands.w	r4, r4, #24
   1c6aa:	6833      	ldr	r3, [r6, #0]
   1c6ac:	782a      	ldrb	r2, [r5, #0]
   1c6ae:	d01a      	beq.n	1c6e6 <rpc_gnss_event_handler+0x142>
   1c6b0:	b91a      	cbnz	r2, 1c6ba <rpc_gnss_event_handler+0x116>
   1c6b2:	2005      	movs	r0, #5
   1c6b4:	4798      	blx	r3
   1c6b6:	2301      	movs	r3, #1
   1c6b8:	702b      	strb	r3, [r5, #0]
   1c6ba:	2001      	movs	r0, #1
   1c6bc:	6833      	ldr	r3, [r6, #0]
   1c6be:	4798      	blx	r3
   1c6c0:	2000      	movs	r0, #0
   1c6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c6c6:	f244 1201 	movw	r2, #16641	; 0x4101
   1c6ca:	4295      	cmp	r5, r2
   1c6cc:	bf0b      	itete	eq
   1c6ce:	2201      	moveq	r2, #1
   1c6d0:	2200      	movne	r2, #0
   1c6d2:	603c      	streq	r4, [r7, #0]
   1c6d4:	603c      	strne	r4, [r7, #0]
   1c6d6:	bf0b      	itete	eq
   1c6d8:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   1c6dc:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   1c6e0:	701a      	strbeq	r2, [r3, #0]
   1c6e2:	701a      	strbne	r2, [r3, #0]
   1c6e4:	e7d9      	b.n	1c69a <rpc_gnss_event_handler+0xf6>
   1c6e6:	2a00      	cmp	r2, #0
   1c6e8:	d0e7      	beq.n	1c6ba <rpc_gnss_event_handler+0x116>
   1c6ea:	2006      	movs	r0, #6
   1c6ec:	4798      	blx	r3
   1c6ee:	702c      	strb	r4, [r5, #0]
   1c6f0:	e7e3      	b.n	1c6ba <rpc_gnss_event_handler+0x116>
   1c6f2:	4c19      	ldr	r4, [pc, #100]	; (1c758 <rpc_gnss_event_handler+0x1b4>)
   1c6f4:	6820      	ldr	r0, [r4, #0]
   1c6f6:	b108      	cbz	r0, 1c6fc <rpc_gnss_event_handler+0x158>
   1c6f8:	f006 fd67 	bl	231ca <rpc_client_data_free>
   1c6fc:	683b      	ldr	r3, [r7, #0]
   1c6fe:	2003      	movs	r0, #3
   1c700:	6023      	str	r3, [r4, #0]
   1c702:	6833      	ldr	r3, [r6, #0]
   1c704:	e7db      	b.n	1c6be <rpc_gnss_event_handler+0x11a>
   1c706:	4c15      	ldr	r4, [pc, #84]	; (1c75c <rpc_gnss_event_handler+0x1b8>)
   1c708:	6820      	ldr	r0, [r4, #0]
   1c70a:	b108      	cbz	r0, 1c710 <rpc_gnss_event_handler+0x16c>
   1c70c:	f006 fd5d 	bl	231ca <rpc_client_data_free>
   1c710:	683b      	ldr	r3, [r7, #0]
   1c712:	2004      	movs	r0, #4
   1c714:	6023      	str	r3, [r4, #0]
   1c716:	6833      	ldr	r3, [r6, #0]
   1c718:	e7d1      	b.n	1c6be <rpc_gnss_event_handler+0x11a>
   1c71a:	7822      	ldrb	r2, [r4, #0]
   1c71c:	2a03      	cmp	r2, #3
   1c71e:	d885      	bhi.n	1c62c <rpc_gnss_event_handler+0x88>
   1c720:	e8df f002 	tbb	[pc, r2]
   1c724:	09070502 	.word	0x09070502
   1c728:	2007      	movs	r0, #7
   1c72a:	4798      	blx	r3
   1c72c:	e77e      	b.n	1c62c <rpc_gnss_event_handler+0x88>
   1c72e:	2008      	movs	r0, #8
   1c730:	e7fb      	b.n	1c72a <rpc_gnss_event_handler+0x186>
   1c732:	2009      	movs	r0, #9
   1c734:	e7f9      	b.n	1c72a <rpc_gnss_event_handler+0x186>
   1c736:	200a      	movs	r0, #10
   1c738:	e7f7      	b.n	1c72a <rpc_gnss_event_handler+0x186>
   1c73a:	bf00      	nop
   1c73c:	2000d6a6 	.word	0x2000d6a6
   1c740:	2000d568 	.word	0x2000d568
   1c744:	2000d4fc 	.word	0x2000d4fc
   1c748:	2000d4ec 	.word	0x2000d4ec
   1c74c:	2000d4f0 	.word	0x2000d4f0
   1c750:	2000d6a5 	.word	0x2000d6a5
   1c754:	2000d6a4 	.word	0x2000d6a4
   1c758:	2000d4f8 	.word	0x2000d4f8
   1c75c:	2000d4f4 	.word	0x2000d4f4

0001c760 <full_dfu_ipc_irq_handler>:
   1c760:	2301      	movs	r3, #1
   1c762:	4a03      	ldr	r2, [pc, #12]	; (1c770 <full_dfu_ipc_irq_handler+0x10>)
   1c764:	6013      	str	r3, [r2, #0]
   1c766:	07c2      	lsls	r2, r0, #31
   1c768:	bf44      	itt	mi
   1c76a:	4a02      	ldrmi	r2, [pc, #8]	; (1c774 <full_dfu_ipc_irq_handler+0x14>)
   1c76c:	7013      	strbmi	r3, [r2, #0]
   1c76e:	4770      	bx	lr
   1c770:	2000d500 	.word	0x2000d500
   1c774:	2000d6a7 	.word	0x2000d6a7

0001c778 <modem_ipc_wait_for_event>:
   1c778:	b538      	push	{r3, r4, r5, lr}
   1c77a:	2300      	movs	r3, #0
   1c77c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1c780:	4c0b      	ldr	r4, [pc, #44]	; (1c7b0 <modem_ipc_wait_for_event+0x38>)
   1c782:	6023      	str	r3, [r4, #0]
   1c784:	6823      	ldr	r3, [r4, #0]
   1c786:	b92b      	cbnz	r3, 1c794 <modem_ipc_wait_for_event+0x1c>
   1c788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1c78c:	f005 fcb9 	bl	22102 <nrf_modem_os_busywait>
   1c790:	3d01      	subs	r5, #1
   1c792:	d1f7      	bne.n	1c784 <modem_ipc_wait_for_event+0xc>
   1c794:	6823      	ldr	r3, [r4, #0]
   1c796:	b913      	cbnz	r3, 1c79e <modem_ipc_wait_for_event+0x26>
   1c798:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1c79c:	e006      	b.n	1c7ac <modem_ipc_wait_for_event+0x34>
   1c79e:	4b05      	ldr	r3, [pc, #20]	; (1c7b4 <modem_ipc_wait_for_event+0x3c>)
   1c7a0:	781b      	ldrb	r3, [r3, #0]
   1c7a2:	2b01      	cmp	r3, #1
   1c7a4:	bf14      	ite	ne
   1c7a6:	2000      	movne	r0, #0
   1c7a8:	f06f 0004 	mvneq.w	r0, #4
   1c7ac:	bd38      	pop	{r3, r4, r5, pc}
   1c7ae:	bf00      	nop
   1c7b0:	2000d500 	.word	0x2000d500
   1c7b4:	2000d6a7 	.word	0x2000d6a7

0001c7b8 <nrf_modem_full_dfu_setup>:
   1c7b8:	2200      	movs	r2, #0
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7be:	4d2b      	ldr	r5, [pc, #172]	; (1c86c <nrf_modem_full_dfu_setup+0xb4>)
   1c7c0:	4e2b      	ldr	r6, [pc, #172]	; (1c870 <nrf_modem_full_dfu_setup+0xb8>)
   1c7c2:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1c7c6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1c7ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1c7ce:	4b29      	ldr	r3, [pc, #164]	; (1c874 <nrf_modem_full_dfu_setup+0xbc>)
   1c7d0:	2400      	movs	r4, #0
   1c7d2:	601a      	str	r2, [r3, #0]
   1c7d4:	f100 031c 	add.w	r3, r0, #28
   1c7d8:	6033      	str	r3, [r6, #0]
   1c7da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c7de:	6043      	str	r3, [r0, #4]
   1c7e0:	231c      	movs	r3, #28
   1c7e2:	7203      	strb	r3, [r0, #8]
   1c7e4:	2320      	movs	r3, #32
   1c7e6:	2701      	movs	r7, #1
   1c7e8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1c7ec:	7243      	strb	r3, [r0, #9]
   1c7ee:	4b22      	ldr	r3, [pc, #136]	; (1c878 <nrf_modem_full_dfu_setup+0xc0>)
   1c7f0:	7004      	strb	r4, [r0, #0]
   1c7f2:	7044      	strb	r4, [r0, #1]
   1c7f4:	70c2      	strb	r2, [r0, #3]
   1c7f6:	7284      	strb	r4, [r0, #10]
   1c7f8:	72c4      	strb	r4, [r0, #11]
   1c7fa:	7087      	strb	r7, [r0, #2]
   1c7fc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1c800:	702c      	strb	r4, [r5, #0]
   1c802:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   1c806:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1c80a:	4b1c      	ldr	r3, [pc, #112]	; (1c87c <nrf_modem_full_dfu_setup+0xc4>)
   1c80c:	b093      	sub	sp, #76	; 0x4c
   1c80e:	4622      	mov	r2, r4
   1c810:	4620      	mov	r0, r4
   1c812:	491b      	ldr	r1, [pc, #108]	; (1c880 <nrf_modem_full_dfu_setup+0xc8>)
   1c814:	701c      	strb	r4, [r3, #0]
   1c816:	f7fd fa13 	bl	19c40 <nrfx_ipc_init>
   1c81a:	4621      	mov	r1, r4
   1c81c:	2240      	movs	r2, #64	; 0x40
   1c81e:	a801      	add	r0, sp, #4
   1c820:	f008 f961 	bl	24ae6 <memset>
   1c824:	2302      	movs	r3, #2
   1c826:	9302      	str	r3, [sp, #8]
   1c828:	2304      	movs	r3, #4
   1c82a:	930b      	str	r3, [sp, #44]	; 0x2c
   1c82c:	2305      	movs	r3, #5
   1c82e:	a801      	add	r0, sp, #4
   1c830:	9311      	str	r3, [sp, #68]	; 0x44
   1c832:	9709      	str	r7, [sp, #36]	; 0x24
   1c834:	f7fd fa1c 	bl	19c70 <nrfx_ipc_config_load>
   1c838:	4b12      	ldr	r3, [pc, #72]	; (1c884 <nrf_modem_full_dfu_setup+0xcc>)
   1c83a:	9400      	str	r4, [sp, #0]
   1c83c:	6836      	ldr	r6, [r6, #0]
   1c83e:	601c      	str	r4, [r3, #0]
   1c840:	681b      	ldr	r3, [r3, #0]
   1c842:	9300      	str	r3, [sp, #0]
   1c844:	9b00      	ldr	r3, [sp, #0]
   1c846:	f7ff ff97 	bl	1c778 <modem_ipc_wait_for_event>
   1c84a:	4604      	mov	r4, r0
   1c84c:	b130      	cbz	r0, 1c85c <nrf_modem_full_dfu_setup+0xa4>
   1c84e:	2303      	movs	r3, #3
   1c850:	702b      	strb	r3, [r5, #0]
   1c852:	f7fd fa33 	bl	19cbc <nrfx_ipc_uninit>
   1c856:	4620      	mov	r0, r4
   1c858:	b013      	add	sp, #76	; 0x4c
   1c85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c85c:	6832      	ldr	r2, [r6, #0]
   1c85e:	4b0a      	ldr	r3, [pc, #40]	; (1c888 <nrf_modem_full_dfu_setup+0xd0>)
   1c860:	429a      	cmp	r2, r3
   1c862:	d0f8      	beq.n	1c856 <nrf_modem_full_dfu_setup+0x9e>
   1c864:	f06f 0404 	mvn.w	r4, #4
   1c868:	e7f3      	b.n	1c852 <nrf_modem_full_dfu_setup+0x9a>
   1c86a:	bf00      	nop
   1c86c:	2000c928 	.word	0x2000c928
   1c870:	2000d504 	.word	0x2000d504
   1c874:	2000d508 	.word	0x2000d508
   1c878:	4002a000 	.word	0x4002a000
   1c87c:	2000d6a7 	.word	0x2000d6a7
   1c880:	0001c761 	.word	0x0001c761
   1c884:	40005610 	.word	0x40005610
   1c888:	a5000001 	.word	0xa5000001

0001c88c <packet_handler_create>:
   1c88c:	2801      	cmp	r0, #1
   1c88e:	b570      	push	{r4, r5, r6, lr}
   1c890:	4604      	mov	r4, r0
   1c892:	460e      	mov	r6, r1
   1c894:	4615      	mov	r5, r2
   1c896:	d00f      	beq.n	1c8b8 <packet_handler_create+0x2c>
   1c898:	1e84      	subs	r4, r0, #2
   1c89a:	2c01      	cmp	r4, #1
   1c89c:	d810      	bhi.n	1c8c0 <packet_handler_create+0x34>
   1c89e:	2010      	movs	r0, #16
   1c8a0:	f7f9 fb96 	bl	15fd0 <nrf_modem_os_alloc>
   1c8a4:	2400      	movs	r4, #0
   1c8a6:	b130      	cbz	r0, 1c8b6 <packet_handler_create+0x2a>
   1c8a8:	2218      	movs	r2, #24
   1c8aa:	4b08      	ldr	r3, [pc, #32]	; (1c8cc <packet_handler_create+0x40>)
   1c8ac:	6085      	str	r5, [r0, #8]
   1c8ae:	fb02 3404 	mla	r4, r2, r4, r3
   1c8b2:	e9c0 4600 	strd	r4, r6, [r0]
   1c8b6:	bd70      	pop	{r4, r5, r6, pc}
   1c8b8:	2014      	movs	r0, #20
   1c8ba:	f7f9 fb89 	bl	15fd0 <nrf_modem_os_alloc>
   1c8be:	e7f2      	b.n	1c8a6 <packet_handler_create+0x1a>
   1c8c0:	200c      	movs	r0, #12
   1c8c2:	f7f9 fb85 	bl	15fd0 <nrf_modem_os_alloc>
   1c8c6:	2402      	movs	r4, #2
   1c8c8:	e7ed      	b.n	1c8a6 <packet_handler_create+0x1a>
   1c8ca:	bf00      	nop
   1c8cc:	0002728c 	.word	0x0002728c

0001c8d0 <modem_off>:
   1c8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8d2:	2501      	movs	r5, #1
   1c8d4:	4c07      	ldr	r4, [pc, #28]	; (1c8f4 <modem_off+0x24>)
   1c8d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1c8da:	6065      	str	r5, [r4, #4]
   1c8dc:	f005 fc11 	bl	22102 <nrf_modem_os_busywait>
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	6063      	str	r3, [r4, #4]
   1c8e4:	9301      	str	r3, [sp, #4]
   1c8e6:	6025      	str	r5, [r4, #0]
   1c8e8:	6823      	ldr	r3, [r4, #0]
   1c8ea:	9301      	str	r3, [sp, #4]
   1c8ec:	9b01      	ldr	r3, [sp, #4]
   1c8ee:	b003      	add	sp, #12
   1c8f0:	bd30      	pop	{r4, r5, pc}
   1c8f2:	bf00      	nop
   1c8f4:	40005610 	.word	0x40005610

0001c8f8 <nrf_modem_init>:
   1c8f8:	b570      	push	{r4, r5, r6, lr}
   1c8fa:	460d      	mov	r5, r1
   1c8fc:	b300      	cbz	r0, 1c940 <nrf_modem_init+0x48>
   1c8fe:	4e15      	ldr	r6, [pc, #84]	; (1c954 <nrf_modem_init+0x5c>)
   1c900:	7832      	ldrb	r2, [r6, #0]
   1c902:	bb02      	cbnz	r2, 1c946 <nrf_modem_init+0x4e>
   1c904:	2901      	cmp	r1, #1
   1c906:	d113      	bne.n	1c930 <nrf_modem_init+0x38>
   1c908:	68c1      	ldr	r1, [r0, #12]
   1c90a:	6842      	ldr	r2, [r0, #4]
   1c90c:	440a      	add	r2, r1
   1c90e:	6941      	ldr	r1, [r0, #20]
   1c910:	440a      	add	r2, r1
   1c912:	69c1      	ldr	r1, [r0, #28]
   1c914:	440a      	add	r2, r1
   1c916:	f242 011b 	movw	r1, #8219	; 0x201b
   1c91a:	428a      	cmp	r2, r1
   1c91c:	d916      	bls.n	1c94c <nrf_modem_init+0x54>
   1c91e:	6800      	ldr	r0, [r0, #0]
   1c920:	f7ff ff4a 	bl	1c7b8 <nrf_modem_full_dfu_setup>
   1c924:	4604      	mov	r4, r0
   1c926:	b130      	cbz	r0, 1c936 <nrf_modem_init+0x3e>
   1c928:	f7ff ffd2 	bl	1c8d0 <modem_off>
   1c92c:	4620      	mov	r0, r4
   1c92e:	bd70      	pop	{r4, r5, r6, pc}
   1c930:	f007 f960 	bl	23bf4 <nrf_modem_platform_init>
   1c934:	e7f6      	b.n	1c924 <nrf_modem_init+0x2c>
   1c936:	4b08      	ldr	r3, [pc, #32]	; (1c958 <nrf_modem_init+0x60>)
   1c938:	701d      	strb	r5, [r3, #0]
   1c93a:	2301      	movs	r3, #1
   1c93c:	7033      	strb	r3, [r6, #0]
   1c93e:	e7f5      	b.n	1c92c <nrf_modem_init+0x34>
   1c940:	f06f 040d 	mvn.w	r4, #13
   1c944:	e7f2      	b.n	1c92c <nrf_modem_init+0x34>
   1c946:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1c94a:	e7ef      	b.n	1c92c <nrf_modem_init+0x34>
   1c94c:	f06f 040b 	mvn.w	r4, #11
   1c950:	e7ec      	b.n	1c92c <nrf_modem_init+0x34>
   1c952:	bf00      	nop
   1c954:	2000d6a8 	.word	0x2000d6a8
   1c958:	2000d6a9 	.word	0x2000d6a9

0001c95c <nrf_modem_platform_af_method_table_get>:
   1c95c:	2805      	cmp	r0, #5
   1c95e:	b508      	push	{r3, lr}
   1c960:	d016      	beq.n	1c990 <nrf_modem_platform_af_method_table_get+0x34>
   1c962:	f020 0008 	bic.w	r0, r0, #8
   1c966:	2802      	cmp	r0, #2
   1c968:	d117      	bne.n	1c99a <nrf_modem_platform_af_method_table_get+0x3e>
   1c96a:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1c96e:	d207      	bcs.n	1c980 <nrf_modem_platform_af_method_table_get+0x24>
   1c970:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1c974:	d213      	bcs.n	1c99e <nrf_modem_platform_af_method_table_get+0x42>
   1c976:	3a01      	subs	r2, #1
   1c978:	2a01      	cmp	r2, #1
   1c97a:	d804      	bhi.n	1c986 <nrf_modem_platform_af_method_table_get+0x2a>
   1c97c:	4809      	ldr	r0, [pc, #36]	; (1c9a4 <nrf_modem_platform_af_method_table_get+0x48>)
   1c97e:	bd08      	pop	{r3, pc}
   1c980:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1c984:	d00b      	beq.n	1c99e <nrf_modem_platform_af_method_table_get+0x42>
   1c986:	207b      	movs	r0, #123	; 0x7b
   1c988:	f005 fc48 	bl	2221c <nrf_modem_os_errno_set>
   1c98c:	2000      	movs	r0, #0
   1c98e:	e7f6      	b.n	1c97e <nrf_modem_platform_af_method_table_get+0x22>
   1c990:	2903      	cmp	r1, #3
   1c992:	4805      	ldr	r0, [pc, #20]	; (1c9a8 <nrf_modem_platform_af_method_table_get+0x4c>)
   1c994:	bf18      	it	ne
   1c996:	2000      	movne	r0, #0
   1c998:	e7f1      	b.n	1c97e <nrf_modem_platform_af_method_table_get+0x22>
   1c99a:	2016      	movs	r0, #22
   1c99c:	e7f4      	b.n	1c988 <nrf_modem_platform_af_method_table_get+0x2c>
   1c99e:	4803      	ldr	r0, [pc, #12]	; (1c9ac <nrf_modem_platform_af_method_table_get+0x50>)
   1c9a0:	e7ed      	b.n	1c97e <nrf_modem_platform_af_method_table_get+0x22>
   1c9a2:	bf00      	nop
   1c9a4:	000272d4 	.word	0x000272d4
   1c9a8:	00027324 	.word	0x00027324
   1c9ac:	000272fc 	.word	0x000272fc

0001c9b0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1c9b0:	4b03      	ldr	r3, [pc, #12]	; (1c9c0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1c9b2:	e000      	b.n	1c9b6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   1c9b4:	3318      	adds	r3, #24
	while (dev < __device_end) {
   1c9b6:	4a03      	ldr	r2, [pc, #12]	; (1c9c4 <z_device_state_init+0x14>)
   1c9b8:	4293      	cmp	r3, r2
   1c9ba:	d3fb      	bcc.n	1c9b4 <z_device_state_init+0x4>
	}
}
   1c9bc:	4770      	bx	lr
   1c9be:	bf00      	nop
   1c9c0:	00025060 	.word	0x00025060
   1c9c4:	000250d8 	.word	0x000250d8

0001c9c8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1c9c8:	b570      	push	{r4, r5, r6, lr}
   1c9ca:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c9cc:	4b11      	ldr	r3, [pc, #68]	; (1ca14 <z_sys_init_run_level+0x4c>)
   1c9ce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c9d2:	e009      	b.n	1c9e8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1c9d4:	4240      	negs	r0, r0
   1c9d6:	e017      	b.n	1ca08 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1c9d8:	68eb      	ldr	r3, [r5, #12]
   1c9da:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1c9dc:	68ea      	ldr	r2, [r5, #12]
   1c9de:	7853      	ldrb	r3, [r2, #1]
   1c9e0:	f043 0301 	orr.w	r3, r3, #1
   1c9e4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c9e6:	3408      	adds	r4, #8
   1c9e8:	1c73      	adds	r3, r6, #1
   1c9ea:	4a0a      	ldr	r2, [pc, #40]	; (1ca14 <z_sys_init_run_level+0x4c>)
   1c9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c9f0:	42a3      	cmp	r3, r4
   1c9f2:	d90d      	bls.n	1ca10 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1c9f4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1c9f6:	6823      	ldr	r3, [r4, #0]
   1c9f8:	4628      	mov	r0, r5
   1c9fa:	4798      	blx	r3
		if (dev != NULL) {
   1c9fc:	2d00      	cmp	r5, #0
   1c9fe:	d0f2      	beq.n	1c9e6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1ca00:	2800      	cmp	r0, #0
   1ca02:	d0eb      	beq.n	1c9dc <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1ca04:	2800      	cmp	r0, #0
   1ca06:	dbe5      	blt.n	1c9d4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1ca08:	28ff      	cmp	r0, #255	; 0xff
   1ca0a:	dde5      	ble.n	1c9d8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1ca0c:	20ff      	movs	r0, #255	; 0xff
   1ca0e:	e7e3      	b.n	1c9d8 <z_sys_init_run_level+0x10>
		}
	}
}
   1ca10:	bd70      	pop	{r4, r5, r6, pc}
   1ca12:	bf00      	nop
   1ca14:	0002734c 	.word	0x0002734c

0001ca18 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1ca18:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1ca1a:	4605      	mov	r5, r0
   1ca1c:	b328      	cbz	r0, 1ca6a <z_impl_device_get_binding+0x52>
   1ca1e:	7803      	ldrb	r3, [r0, #0]
   1ca20:	b32b      	cbz	r3, 1ca6e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ca22:	4c14      	ldr	r4, [pc, #80]	; (1ca74 <z_impl_device_get_binding+0x5c>)
   1ca24:	e000      	b.n	1ca28 <z_impl_device_get_binding+0x10>
   1ca26:	3418      	adds	r4, #24
   1ca28:	4b13      	ldr	r3, [pc, #76]	; (1ca78 <z_impl_device_get_binding+0x60>)
   1ca2a:	429c      	cmp	r4, r3
   1ca2c:	d008      	beq.n	1ca40 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ca2e:	4620      	mov	r0, r4
   1ca30:	f007 fa74 	bl	23f1c <z_device_ready>
   1ca34:	2800      	cmp	r0, #0
   1ca36:	d0f6      	beq.n	1ca26 <z_impl_device_get_binding+0xe>
   1ca38:	6823      	ldr	r3, [r4, #0]
   1ca3a:	42ab      	cmp	r3, r5
   1ca3c:	d1f3      	bne.n	1ca26 <z_impl_device_get_binding+0xe>
   1ca3e:	e012      	b.n	1ca66 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1ca40:	4c0c      	ldr	r4, [pc, #48]	; (1ca74 <z_impl_device_get_binding+0x5c>)
   1ca42:	e000      	b.n	1ca46 <z_impl_device_get_binding+0x2e>
   1ca44:	3418      	adds	r4, #24
   1ca46:	4b0c      	ldr	r3, [pc, #48]	; (1ca78 <z_impl_device_get_binding+0x60>)
   1ca48:	429c      	cmp	r4, r3
   1ca4a:	d00b      	beq.n	1ca64 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1ca4c:	4620      	mov	r0, r4
   1ca4e:	f007 fa65 	bl	23f1c <z_device_ready>
   1ca52:	2800      	cmp	r0, #0
   1ca54:	d0f6      	beq.n	1ca44 <z_impl_device_get_binding+0x2c>
   1ca56:	6821      	ldr	r1, [r4, #0]
   1ca58:	4628      	mov	r0, r5
   1ca5a:	f7f4 fb3c 	bl	110d6 <strcmp>
   1ca5e:	2800      	cmp	r0, #0
   1ca60:	d1f0      	bne.n	1ca44 <z_impl_device_get_binding+0x2c>
   1ca62:	e000      	b.n	1ca66 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1ca64:	2400      	movs	r4, #0
}
   1ca66:	4620      	mov	r0, r4
   1ca68:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1ca6a:	4604      	mov	r4, r0
   1ca6c:	e7fb      	b.n	1ca66 <z_impl_device_get_binding+0x4e>
   1ca6e:	2400      	movs	r4, #0
   1ca70:	e7f9      	b.n	1ca66 <z_impl_device_get_binding+0x4e>
   1ca72:	bf00      	nop
   1ca74:	00025060 	.word	0x00025060
   1ca78:	000250d8 	.word	0x000250d8

0001ca7c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ca7c:	4b01      	ldr	r3, [pc, #4]	; (1ca84 <z_impl_z_errno+0x8>)
   1ca7e:	6898      	ldr	r0, [r3, #8]
}
   1ca80:	3098      	adds	r0, #152	; 0x98
   1ca82:	4770      	bx	lr
   1ca84:	2000d50c 	.word	0x2000d50c

0001ca88 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1ca88:	2804      	cmp	r0, #4
   1ca8a:	d80c      	bhi.n	1caa6 <reason_to_str+0x1e>
   1ca8c:	e8df f000 	tbb	[pc, r0]
   1ca90:	07050d03 	.word	0x07050d03
   1ca94:	09          	.byte	0x09
   1ca95:	00          	.byte	0x00
   1ca96:	4806      	ldr	r0, [pc, #24]	; (1cab0 <reason_to_str+0x28>)
   1ca98:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   1ca9a:	4806      	ldr	r0, [pc, #24]	; (1cab4 <reason_to_str+0x2c>)
   1ca9c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   1ca9e:	4806      	ldr	r0, [pc, #24]	; (1cab8 <reason_to_str+0x30>)
   1caa0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1caa2:	4806      	ldr	r0, [pc, #24]	; (1cabc <reason_to_str+0x34>)
   1caa4:	4770      	bx	lr
	default:
		return "Unknown error";
   1caa6:	4806      	ldr	r0, [pc, #24]	; (1cac0 <reason_to_str+0x38>)
   1caa8:	4770      	bx	lr
		return "Unhandled interrupt";
   1caaa:	4806      	ldr	r0, [pc, #24]	; (1cac4 <reason_to_str+0x3c>)
	}
}
   1caac:	4770      	bx	lr
   1caae:	bf00      	nop
   1cab0:	000273b4 	.word	0x000273b4
   1cab4:	00027388 	.word	0x00027388
   1cab8:	00027398 	.word	0x00027398
   1cabc:	000273a4 	.word	0x000273a4
   1cac0:	00027364 	.word	0x00027364
   1cac4:	00027374 	.word	0x00027374

0001cac8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1cac8:	b130      	cbz	r0, 1cad8 <thread_name_get+0x10>
{
   1caca:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1cacc:	f007 fb0f 	bl	240ee <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1cad0:	b120      	cbz	r0, 1cadc <thread_name_get+0x14>
   1cad2:	7803      	ldrb	r3, [r0, #0]
   1cad4:	b123      	cbz	r3, 1cae0 <thread_name_get+0x18>
}
   1cad6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1cad8:	4802      	ldr	r0, [pc, #8]	; (1cae4 <thread_name_get+0x1c>)
}
   1cada:	4770      	bx	lr
		thread_name = "unknown";
   1cadc:	4801      	ldr	r0, [pc, #4]	; (1cae4 <thread_name_get+0x1c>)
   1cade:	e7fa      	b.n	1cad6 <thread_name_get+0xe>
   1cae0:	4800      	ldr	r0, [pc, #0]	; (1cae4 <thread_name_get+0x1c>)
	return thread_name;
   1cae2:	e7f8      	b.n	1cad6 <thread_name_get+0xe>
   1cae4:	000273c4 	.word	0x000273c4

0001cae8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1caec:	b082      	sub	sp, #8
   1caee:	4605      	mov	r5, r0
   1caf0:	460e      	mov	r6, r1
	__asm__ volatile(
   1caf2:	f04f 0320 	mov.w	r3, #32
   1caf6:	f3ef 8711 	mrs	r7, BASEPRI
   1cafa:	f383 8812 	msr	BASEPRI_MAX, r3
   1cafe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1cb02:	f001 f95b 	bl	1ddbc <z_impl_z_current_get>
   1cb06:	4604      	mov	r4, r0
   1cb08:	4b29      	ldr	r3, [pc, #164]	; (1cbb0 <z_fatal_error+0xc8>)
   1cb0a:	4a2a      	ldr	r2, [pc, #168]	; (1cbb4 <z_fatal_error+0xcc>)
   1cb0c:	1a9b      	subs	r3, r3, r2
   1cb0e:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1cb10:	f04f 0800 	mov.w	r8, #0
   1cb14:	2201      	movs	r2, #1
   1cb16:	f362 0802 	bfi	r8, r2, #0, #3
   1cb1a:	f36f 08c5 	bfc	r8, #3, #3
   1cb1e:	f363 188f 	bfi	r8, r3, #6, #10
   1cb22:	4628      	mov	r0, r5
   1cb24:	f7ff ffb0 	bl	1ca88 <reason_to_str>
   1cb28:	4602      	mov	r2, r0
   1cb2a:	f8ad 8000 	strh.w	r8, [sp]
   1cb2e:	2300      	movs	r3, #0
   1cb30:	4629      	mov	r1, r5
   1cb32:	4821      	ldr	r0, [pc, #132]	; (1cbb8 <z_fatal_error+0xd0>)
   1cb34:	f7f6 f9da 	bl	12eec <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1cb38:	b11e      	cbz	r6, 1cb42 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1cb3a:	69f3      	ldr	r3, [r6, #28]
   1cb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1cb40:	bb2b      	cbnz	r3, 1cb8e <z_fatal_error+0xa6>
   1cb42:	4b1b      	ldr	r3, [pc, #108]	; (1cbb0 <z_fatal_error+0xc8>)
   1cb44:	4a1b      	ldr	r2, [pc, #108]	; (1cbb4 <z_fatal_error+0xcc>)
   1cb46:	1a9b      	subs	r3, r3, r2
   1cb48:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1cb4a:	f04f 0800 	mov.w	r8, #0
   1cb4e:	2201      	movs	r2, #1
   1cb50:	f362 0802 	bfi	r8, r2, #0, #3
   1cb54:	f36f 08c5 	bfc	r8, #3, #3
   1cb58:	f363 188f 	bfi	r8, r3, #6, #10
   1cb5c:	4620      	mov	r0, r4
   1cb5e:	f7ff ffb3 	bl	1cac8 <thread_name_get>
   1cb62:	f7f6 f895 	bl	12c90 <z_log_strdup>
   1cb66:	4602      	mov	r2, r0
   1cb68:	4643      	mov	r3, r8
   1cb6a:	4621      	mov	r1, r4
   1cb6c:	4813      	ldr	r0, [pc, #76]	; (1cbbc <z_fatal_error+0xd4>)
   1cb6e:	f7f6 fa53 	bl	13018 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1cb72:	4631      	mov	r1, r6
   1cb74:	4628      	mov	r0, r5
   1cb76:	f7fc fa57 	bl	19028 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cb7a:	f387 8811 	msr	BASEPRI, r7
   1cb7e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cb82:	4620      	mov	r0, r4
   1cb84:	f7f7 fdf6 	bl	14774 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1cb88:	b002      	add	sp, #8
   1cb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb8e:	4b08      	ldr	r3, [pc, #32]	; (1cbb0 <z_fatal_error+0xc8>)
   1cb90:	4a08      	ldr	r2, [pc, #32]	; (1cbb4 <z_fatal_error+0xcc>)
   1cb92:	1a9b      	subs	r3, r3, r2
   1cb94:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1cb96:	f04f 0100 	mov.w	r1, #0
   1cb9a:	2201      	movs	r2, #1
   1cb9c:	f362 0102 	bfi	r1, r2, #0, #3
   1cba0:	f36f 01c5 	bfc	r1, #3, #3
   1cba4:	f363 118f 	bfi	r1, r3, #6, #10
   1cba8:	4805      	ldr	r0, [pc, #20]	; (1cbc0 <z_fatal_error+0xd8>)
   1cbaa:	f7f6 f9d9 	bl	12f60 <log_0>
   1cbae:	e7c8      	b.n	1cb42 <z_fatal_error+0x5a>
   1cbb0:	0002534c 	.word	0x0002534c
   1cbb4:	000252ec 	.word	0x000252ec
   1cbb8:	000273cc 	.word	0x000273cc
   1cbbc:	00027418 	.word	0x00027418
   1cbc0:	000273f4 	.word	0x000273f4

0001cbc4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1cbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbc6:	b089      	sub	sp, #36	; 0x24
   1cbc8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1cbca:	4d15      	ldr	r5, [pc, #84]	; (1cc20 <init_idle_thread+0x5c>)
   1cbcc:	23b8      	movs	r3, #184	; 0xb8
   1cbce:	fb03 5500 	mla	r5, r3, r0, r5
	k_thread_stack_t *stack = z_idle_stacks[i];
   1cbd2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1cbd6:	4e13      	ldr	r6, [pc, #76]	; (1cc24 <init_idle_thread+0x60>)
   1cbd8:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1cbdc:	af06      	add	r7, sp, #24
   1cbde:	4603      	mov	r3, r0
   1cbe0:	4a11      	ldr	r2, [pc, #68]	; (1cc28 <init_idle_thread+0x64>)
   1cbe2:	2108      	movs	r1, #8
   1cbe4:	4638      	mov	r0, r7
   1cbe6:	f002 fea1 	bl	1f92c <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1cbea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cbee:	480f      	ldr	r0, [pc, #60]	; (1cc2c <init_idle_thread+0x68>)
   1cbf0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1cbf4:	9705      	str	r7, [sp, #20]
   1cbf6:	2301      	movs	r3, #1
   1cbf8:	9304      	str	r3, [sp, #16]
   1cbfa:	230f      	movs	r3, #15
   1cbfc:	9303      	str	r3, [sp, #12]
   1cbfe:	2300      	movs	r3, #0
   1cc00:	9302      	str	r3, [sp, #8]
   1cc02:	9301      	str	r3, [sp, #4]
   1cc04:	9400      	str	r4, [sp, #0]
   1cc06:	4b0a      	ldr	r3, [pc, #40]	; (1cc30 <init_idle_thread+0x6c>)
   1cc08:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1cc0c:	4631      	mov	r1, r6
   1cc0e:	4628      	mov	r0, r5
   1cc10:	f000 f964 	bl	1cedc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cc14:	7b6b      	ldrb	r3, [r5, #13]
   1cc16:	f023 0304 	bic.w	r3, r3, #4
   1cc1a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1cc1c:	b009      	add	sp, #36	; 0x24
   1cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc20:	2000c940 	.word	0x2000c940
   1cc24:	2000eeb0 	.word	0x2000eeb0
   1cc28:	00027430 	.word	0x00027430
   1cc2c:	2000d50c 	.word	0x2000d50c
   1cc30:	0001d039 	.word	0x0001d039

0001cc34 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1cc34:	b570      	push	{r4, r5, r6, lr}
   1cc36:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1cc38:	f000 fff8 	bl	1dc2c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1cc3c:	4d1a      	ldr	r5, [pc, #104]	; (1cca8 <prepare_multithreading+0x74>)
   1cc3e:	4b1b      	ldr	r3, [pc, #108]	; (1ccac <prepare_multithreading+0x78>)
   1cc40:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1cc42:	4b1b      	ldr	r3, [pc, #108]	; (1ccb0 <prepare_multithreading+0x7c>)
   1cc44:	9305      	str	r3, [sp, #20]
   1cc46:	2301      	movs	r3, #1
   1cc48:	9304      	str	r3, [sp, #16]
   1cc4a:	2400      	movs	r4, #0
   1cc4c:	9403      	str	r4, [sp, #12]
   1cc4e:	9402      	str	r4, [sp, #8]
   1cc50:	9401      	str	r4, [sp, #4]
   1cc52:	9400      	str	r4, [sp, #0]
   1cc54:	4b17      	ldr	r3, [pc, #92]	; (1ccb4 <prepare_multithreading+0x80>)
   1cc56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1cc5a:	4917      	ldr	r1, [pc, #92]	; (1ccb8 <prepare_multithreading+0x84>)
   1cc5c:	4628      	mov	r0, r5
   1cc5e:	f000 f93d 	bl	1cedc <z_setup_new_thread>
   1cc62:	4606      	mov	r6, r0
   1cc64:	7b6b      	ldrb	r3, [r5, #13]
   1cc66:	f023 0304 	bic.w	r3, r3, #4
   1cc6a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1cc6c:	4628      	mov	r0, r5
   1cc6e:	f007 fc3d 	bl	244ec <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1cc72:	2c00      	cmp	r4, #0
   1cc74:	dd02      	ble.n	1cc7c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1cc76:	4630      	mov	r0, r6
   1cc78:	b006      	add	sp, #24
   1cc7a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7ff ffa1 	bl	1cbc4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1cc82:	4a0e      	ldr	r2, [pc, #56]	; (1ccbc <prepare_multithreading+0x88>)
   1cc84:	23b8      	movs	r3, #184	; 0xb8
   1cc86:	fb03 2204 	mla	r2, r3, r4, r2
   1cc8a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1cc8e:	4b07      	ldr	r3, [pc, #28]	; (1ccac <prepare_multithreading+0x78>)
   1cc90:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1cc94:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1cc96:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1cc98:	4a09      	ldr	r2, [pc, #36]	; (1ccc0 <prepare_multithreading+0x8c>)
   1cc9a:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   1cc9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   1cca2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1cca4:	3401      	adds	r4, #1
   1cca6:	e7e4      	b.n	1cc72 <prepare_multithreading+0x3e>
   1cca8:	2000c9f8 	.word	0x2000c9f8
   1ccac:	2000d50c 	.word	0x2000d50c
   1ccb0:	0002743c 	.word	0x0002743c
   1ccb4:	0001ccc5 	.word	0x0001ccc5
   1ccb8:	2000deb0 	.word	0x2000deb0
   1ccbc:	2000c940 	.word	0x2000c940
   1ccc0:	2000eff0 	.word	0x2000eff0

0001ccc4 <bg_thread_main>:
{
   1ccc4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ccc6:	4b0a      	ldr	r3, [pc, #40]	; (1ccf0 <bg_thread_main+0x2c>)
   1ccc8:	2201      	movs	r2, #1
   1ccca:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1cccc:	2002      	movs	r0, #2
   1ccce:	f7ff fe7b 	bl	1c9c8 <z_sys_init_run_level>
	boot_banner();
   1ccd2:	f001 fdc9 	bl	1e868 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1ccd6:	2003      	movs	r0, #3
   1ccd8:	f7ff fe76 	bl	1c9c8 <z_sys_init_run_level>
	z_init_static_threads();
   1ccdc:	f000 f962 	bl	1cfa4 <z_init_static_threads>
	main();
   1cce0:	f7f4 fe36 	bl	11950 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1cce4:	4a03      	ldr	r2, [pc, #12]	; (1ccf4 <bg_thread_main+0x30>)
   1cce6:	7b13      	ldrb	r3, [r2, #12]
   1cce8:	f023 0301 	bic.w	r3, r3, #1
   1ccec:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ccee:	bd08      	pop	{r3, pc}
   1ccf0:	2000d6aa 	.word	0x2000d6aa
   1ccf4:	2000c9f8 	.word	0x2000c9f8

0001ccf8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1ccf8:	b508      	push	{r3, lr}
   1ccfa:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1ccfc:	4a01      	ldr	r2, [pc, #4]	; (1cd04 <switch_to_main_thread+0xc>)
   1ccfe:	4802      	ldr	r0, [pc, #8]	; (1cd08 <switch_to_main_thread+0x10>)
   1cd00:	f7f7 f8d4 	bl	13eac <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1cd04:	0001ccc5 	.word	0x0001ccc5
   1cd08:	2000c9f8 	.word	0x2000c9f8

0001cd0c <z_bss_zero>:
{
   1cd0c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1cd0e:	4803      	ldr	r0, [pc, #12]	; (1cd1c <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   1cd10:	4a03      	ldr	r2, [pc, #12]	; (1cd20 <z_bss_zero+0x14>)
   1cd12:	1a12      	subs	r2, r2, r0
   1cd14:	2100      	movs	r1, #0
   1cd16:	f007 fee6 	bl	24ae6 <memset>
}
   1cd1a:	bd08      	pop	{r3, pc}
   1cd1c:	2000c7b8 	.word	0x2000c7b8
   1cd20:	2000d6ac 	.word	0x2000d6ac

0001cd24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1cd24:	b500      	push	{lr}
   1cd26:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1cd28:	f7f5 ff1c 	bl	12b64 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1cd2c:	4b1c      	ldr	r3, [pc, #112]	; (1cda0 <z_cstart+0x7c>)
	uint32_t msp =
   1cd2e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1cd32:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1cd36:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cd3a:	4c1a      	ldr	r4, [pc, #104]	; (1cda4 <z_cstart+0x80>)
   1cd3c:	23e0      	movs	r3, #224	; 0xe0
   1cd3e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1cd42:	2500      	movs	r5, #0
   1cd44:	77e5      	strb	r5, [r4, #31]
   1cd46:	7625      	strb	r5, [r4, #24]
   1cd48:	7665      	strb	r5, [r4, #25]
   1cd4a:	76a5      	strb	r5, [r4, #26]
   1cd4c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1cd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1cd56:	6263      	str	r3, [r4, #36]	; 0x24
   1cd58:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1cd5c:	f7f7 fcb0 	bl	146c0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1cd60:	f7f6 ff52 	bl	13c08 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1cd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cd68:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1cd6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1cd6c:	f7f7 fefa 	bl	14b64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1cd70:	f7f7 fd16 	bl	147a0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1cd74:	2401      	movs	r4, #1
   1cd76:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1cd7a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1cd7e:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1cd80:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1cd82:	4b09      	ldr	r3, [pc, #36]	; (1cda8 <z_cstart+0x84>)
   1cd84:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1cd88:	f7ff fe12 	bl	1c9b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1cd8c:	4628      	mov	r0, r5
   1cd8e:	f7ff fe1b 	bl	1c9c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1cd92:	4620      	mov	r0, r4
   1cd94:	f7ff fe18 	bl	1c9c8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1cd98:	f7ff ff4c 	bl	1cc34 <prepare_multithreading>
   1cd9c:	f7ff ffac 	bl	1ccf8 <switch_to_main_thread>
   1cda0:	2000eff0 	.word	0x2000eff0
   1cda4:	e000ed00 	.word	0xe000ed00
   1cda8:	2000d50c 	.word	0x2000d50c

0001cdac <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1cdac:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdae:	4c06      	ldr	r4, [pc, #24]	; (1cdc8 <statics_init+0x1c>)
   1cdb0:	e005      	b.n	1cdbe <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1cdb2:	68a2      	ldr	r2, [r4, #8]
   1cdb4:	6861      	ldr	r1, [r4, #4]
   1cdb6:	4620      	mov	r0, r4
   1cdb8:	f007 f8bd 	bl	23f36 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1cdbc:	3414      	adds	r4, #20
   1cdbe:	4b03      	ldr	r3, [pc, #12]	; (1cdcc <statics_init+0x20>)
   1cdc0:	429c      	cmp	r4, r3
   1cdc2:	d3f6      	bcc.n	1cdb2 <statics_init+0x6>
		}
	}
	return 0;
}
   1cdc4:	2000      	movs	r0, #0
   1cdc6:	bd10      	pop	{r4, pc}
   1cdc8:	2000c6a0 	.word	0x2000c6a0
   1cdcc:	2000c6dc 	.word	0x2000c6dc

0001cdd0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1cdd0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdd2:	4c06      	ldr	r4, [pc, #24]	; (1cdec <init_mem_slab_module+0x1c>)
	int rc = 0;
   1cdd4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1cdd6:	e000      	b.n	1cdda <init_mem_slab_module+0xa>
   1cdd8:	341c      	adds	r4, #28
   1cdda:	4b05      	ldr	r3, [pc, #20]	; (1cdf0 <init_mem_slab_module+0x20>)
   1cddc:	429c      	cmp	r4, r3
   1cdde:	d204      	bcs.n	1cdea <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1cde0:	4620      	mov	r0, r4
   1cde2:	f007 f921 	bl	24028 <create_free_list>
		if (rc < 0) {
   1cde6:	2800      	cmp	r0, #0
   1cde8:	daf6      	bge.n	1cdd8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   1cdea:	bd10      	pop	{r4, pc}
   1cdec:	2000c6a0 	.word	0x2000c6a0
   1cdf0:	2000c6a0 	.word	0x2000c6a0

0001cdf4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1cdf4:	b530      	push	{r4, r5, lr}
   1cdf6:	b083      	sub	sp, #12
   1cdf8:	460d      	mov	r5, r1
	__asm__ volatile(
   1cdfa:	f04f 0420 	mov.w	r4, #32
   1cdfe:	f3ef 8111 	mrs	r1, BASEPRI
   1ce02:	f384 8812 	msr	BASEPRI_MAX, r4
   1ce06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ce0a:	6944      	ldr	r4, [r0, #20]
   1ce0c:	b16c      	cbz	r4, 1ce2a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   1ce0e:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ce10:	6943      	ldr	r3, [r0, #20]
   1ce12:	681b      	ldr	r3, [r3, #0]
   1ce14:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ce16:	6983      	ldr	r3, [r0, #24]
   1ce18:	3301      	adds	r3, #1
   1ce1a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ce1c:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce1e:	f381 8811 	msr	BASEPRI, r1
   1ce22:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1ce26:	b003      	add	sp, #12
   1ce28:	bd30      	pop	{r4, r5, pc}
   1ce2a:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ce2e:	ea53 0402 	orrs.w	r4, r3, r2
   1ce32:	d104      	bne.n	1ce3e <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   1ce34:	2300      	movs	r3, #0
   1ce36:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1ce38:	f06f 000b 	mvn.w	r0, #11
   1ce3c:	e7ef      	b.n	1ce1e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ce3e:	9200      	str	r2, [sp, #0]
   1ce40:	9301      	str	r3, [sp, #4]
   1ce42:	4602      	mov	r2, r0
   1ce44:	4660      	mov	r0, ip
   1ce46:	f000 fdc5 	bl	1d9d4 <z_pend_curr>
		if (result == 0) {
   1ce4a:	2800      	cmp	r0, #0
   1ce4c:	d1eb      	bne.n	1ce26 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   1ce4e:	4b02      	ldr	r3, [pc, #8]	; (1ce58 <k_mem_slab_alloc+0x64>)
   1ce50:	689b      	ldr	r3, [r3, #8]
   1ce52:	695b      	ldr	r3, [r3, #20]
   1ce54:	602b      	str	r3, [r5, #0]
		return result;
   1ce56:	e7e6      	b.n	1ce26 <k_mem_slab_alloc+0x32>
   1ce58:	2000d50c 	.word	0x2000d50c

0001ce5c <z_thread_monitor_exit>:
	__asm__ volatile(
   1ce5c:	f04f 0320 	mov.w	r3, #32
   1ce60:	f3ef 8111 	mrs	r1, BASEPRI
   1ce64:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce68:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1ce6c:	4b0a      	ldr	r3, [pc, #40]	; (1ce98 <z_thread_monitor_exit+0x3c>)
   1ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ce70:	4283      	cmp	r3, r0
   1ce72:	d104      	bne.n	1ce7e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1ce74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1ce76:	4b08      	ldr	r3, [pc, #32]	; (1ce98 <z_thread_monitor_exit+0x3c>)
   1ce78:	629a      	str	r2, [r3, #40]	; 0x28
   1ce7a:	e007      	b.n	1ce8c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1ce7c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1ce7e:	b113      	cbz	r3, 1ce86 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1ce80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1ce82:	4282      	cmp	r2, r0
   1ce84:	d1fa      	bne.n	1ce7c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1ce86:	b10b      	cbz	r3, 1ce8c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1ce88:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1ce8a:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1ce8c:	f381 8811 	msr	BASEPRI, r1
   1ce90:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1ce94:	4770      	bx	lr
   1ce96:	bf00      	nop
   1ce98:	2000d50c 	.word	0x2000d50c

0001ce9c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1ce9c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1ce9e:	4604      	mov	r4, r0
   1cea0:	b140      	cbz	r0, 1ceb4 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1cea2:	2220      	movs	r2, #32
   1cea4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1cea8:	f007 fe50 	bl	24b4c <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ceac:	2000      	movs	r0, #0
   1ceae:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1ceb2:	bd10      	pop	{r4, pc}
		thread = _current;
   1ceb4:	4b01      	ldr	r3, [pc, #4]	; (1cebc <z_impl_k_thread_name_set+0x20>)
   1ceb6:	689c      	ldr	r4, [r3, #8]
   1ceb8:	e7f3      	b.n	1cea2 <z_impl_k_thread_name_set+0x6>
   1ceba:	bf00      	nop
   1cebc:	2000d50c 	.word	0x2000d50c

0001cec0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1cec0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cec2:	ea53 0102 	orrs.w	r1, r3, r2
   1cec6:	d102      	bne.n	1cece <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   1cec8:	f007 f913 	bl	240f2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1cecc:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cece:	4902      	ldr	r1, [pc, #8]	; (1ced8 <schedule_new_thread+0x18>)
   1ced0:	3018      	adds	r0, #24
   1ced2:	f001 f827 	bl	1df24 <z_add_timeout>
   1ced6:	e7f9      	b.n	1cecc <schedule_new_thread+0xc>
   1ced8:	00024525 	.word	0x00024525

0001cedc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cee0:	b085      	sub	sp, #20
   1cee2:	4604      	mov	r4, r0
   1cee4:	460f      	mov	r7, r1
   1cee6:	4615      	mov	r5, r2
   1cee8:	461e      	mov	r6, r3
   1ceea:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1ceee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1cef2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1cef6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1cefa:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1cefe:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1cf00:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1cf02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cf04:	2204      	movs	r2, #4
   1cf06:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cf08:	f007 f8f7 	bl	240fa <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1cf0c:	462a      	mov	r2, r5
   1cf0e:	4639      	mov	r1, r7
   1cf10:	4620      	mov	r0, r4
   1cf12:	f007 f8da 	bl	240ca <setup_thread_stack>
   1cf16:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cf18:	f8cd 8008 	str.w	r8, [sp, #8]
   1cf1c:	f8cd 9004 	str.w	r9, [sp, #4]
   1cf20:	f8cd a000 	str.w	sl, [sp]
   1cf24:	4633      	mov	r3, r6
   1cf26:	4602      	mov	r2, r0
   1cf28:	4639      	mov	r1, r7
   1cf2a:	4620      	mov	r0, r4
   1cf2c:	f7f6 ff9c 	bl	13e68 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1cf30:	2300      	movs	r3, #0
   1cf32:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1cf34:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1cf36:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1cf3a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1cf3e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1cf42:	f04f 0320 	mov.w	r3, #32
   1cf46:	f3ef 8211 	mrs	r2, BASEPRI
   1cf4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf4e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1cf52:	4b13      	ldr	r3, [pc, #76]	; (1cfa0 <z_setup_new_thread+0xc4>)
   1cf54:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1cf56:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1cf58:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1cf5a:	f382 8811 	msr	BASEPRI, r2
   1cf5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1cf62:	f1bb 0f00 	cmp.w	fp, #0
   1cf66:	d013      	beq.n	1cf90 <z_setup_new_thread+0xb4>
   1cf68:	221f      	movs	r2, #31
   1cf6a:	4659      	mov	r1, fp
   1cf6c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1cf70:	f007 fdec 	bl	24b4c <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1cf74:	2300      	movs	r3, #0
   1cf76:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1cf7a:	4b09      	ldr	r3, [pc, #36]	; (1cfa0 <z_setup_new_thread+0xc4>)
   1cf7c:	689b      	ldr	r3, [r3, #8]
   1cf7e:	b15b      	cbz	r3, 1cf98 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1cf80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1cf84:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1cf88:	4628      	mov	r0, r5
   1cf8a:	b005      	add	sp, #20
   1cf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1cf90:	2300      	movs	r3, #0
   1cf92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1cf96:	e7f0      	b.n	1cf7a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1cf98:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1cf9c:	e7f4      	b.n	1cf88 <z_setup_new_thread+0xac>
   1cf9e:	bf00      	nop
   1cfa0:	2000d50c 	.word	0x2000d50c

0001cfa4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1cfa4:	b530      	push	{r4, r5, lr}
   1cfa6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfa8:	4c21      	ldr	r4, [pc, #132]	; (1d030 <z_init_static_threads+0x8c>)
   1cfaa:	e014      	b.n	1cfd6 <z_init_static_threads+0x32>
		z_setup_new_thread(
   1cfac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cfae:	9305      	str	r3, [sp, #20]
   1cfb0:	6a23      	ldr	r3, [r4, #32]
   1cfb2:	9304      	str	r3, [sp, #16]
   1cfb4:	69e3      	ldr	r3, [r4, #28]
   1cfb6:	9303      	str	r3, [sp, #12]
   1cfb8:	69a3      	ldr	r3, [r4, #24]
   1cfba:	9302      	str	r3, [sp, #8]
   1cfbc:	6963      	ldr	r3, [r4, #20]
   1cfbe:	9301      	str	r3, [sp, #4]
   1cfc0:	6923      	ldr	r3, [r4, #16]
   1cfc2:	9300      	str	r3, [sp, #0]
   1cfc4:	68e3      	ldr	r3, [r4, #12]
   1cfc6:	68a2      	ldr	r2, [r4, #8]
   1cfc8:	6861      	ldr	r1, [r4, #4]
   1cfca:	6820      	ldr	r0, [r4, #0]
   1cfcc:	f7ff ff86 	bl	1cedc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1cfd0:	6823      	ldr	r3, [r4, #0]
   1cfd2:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfd4:	3430      	adds	r4, #48	; 0x30
   1cfd6:	4b17      	ldr	r3, [pc, #92]	; (1d034 <z_init_static_threads+0x90>)
   1cfd8:	429c      	cmp	r4, r3
   1cfda:	d3e7      	bcc.n	1cfac <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1cfdc:	f000 fba6 	bl	1d72c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfe0:	4c13      	ldr	r4, [pc, #76]	; (1d030 <z_init_static_threads+0x8c>)
   1cfe2:	e000      	b.n	1cfe6 <z_init_static_threads+0x42>
   1cfe4:	3430      	adds	r4, #48	; 0x30
   1cfe6:	4b13      	ldr	r3, [pc, #76]	; (1d034 <z_init_static_threads+0x90>)
   1cfe8:	429c      	cmp	r4, r3
   1cfea:	d21c      	bcs.n	1d026 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1cfec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1cfee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cff2:	d0f7      	beq.n	1cfe4 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   1cff4:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1cff6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1cffa:	17c1      	asrs	r1, r0, #31
		} else {
			return (t * to_hz + off) / from_hz;
   1cffc:	03c9      	lsls	r1, r1, #15
   1cffe:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   1d002:	03c0      	lsls	r0, r0, #15
   1d004:	f240 33e7 	movw	r3, #999	; 0x3e7
   1d008:	18c0      	adds	r0, r0, r3
   1d00a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d00e:	f04f 0300 	mov.w	r3, #0
   1d012:	f141 0100 	adc.w	r1, r1, #0
   1d016:	f7f3 fef3 	bl	10e00 <__aeabi_uldivmod>
   1d01a:	4602      	mov	r2, r0
   1d01c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1d01e:	4628      	mov	r0, r5
   1d020:	f7ff ff4e 	bl	1cec0 <schedule_new_thread>
   1d024:	e7de      	b.n	1cfe4 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1d026:	f000 fd8b 	bl	1db40 <k_sched_unlock>
}
   1d02a:	b007      	add	sp, #28
   1d02c:	bd30      	pop	{r4, r5, pc}
   1d02e:	bf00      	nop
   1d030:	2000c6a0 	.word	0x2000c6a0
   1d034:	2000c6a0 	.word	0x2000c6a0

0001d038 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1d038:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d03a:	f04f 0220 	mov.w	r2, #32
   1d03e:	f3ef 8311 	mrs	r3, BASEPRI
   1d042:	f382 8812 	msr	BASEPRI_MAX, r2
   1d046:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1d04a:	f007 fbc1 	bl	247d0 <z_get_next_timeout_expiry>
   1d04e:	4b04      	ldr	r3, [pc, #16]	; (1d060 <idle+0x28>)
   1d050:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1d052:	f7f6 fd17 	bl	13a84 <pm_system_suspend>
   1d056:	2800      	cmp	r0, #0
   1d058:	d1ef      	bne.n	1d03a <idle+0x2>
	arch_cpu_idle();
   1d05a:	f7f6 fddb 	bl	13c14 <arch_cpu_idle>
}
   1d05e:	e7ec      	b.n	1d03a <idle+0x2>
   1d060:	2000d50c 	.word	0x2000d50c

0001d064 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d068:	b083      	sub	sp, #12
   1d06a:	4604      	mov	r4, r0
   1d06c:	461d      	mov	r5, r3
   1d06e:	f04f 0320 	mov.w	r3, #32
   1d072:	f3ef 8711 	mrs	r7, BASEPRI
   1d076:	f383 8812 	msr	BASEPRI_MAX, r3
   1d07a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d07e:	68c1      	ldr	r1, [r0, #12]
   1d080:	b999      	cbnz	r1, 1d0aa <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1d082:	2900      	cmp	r1, #0
   1d084:	d14f      	bne.n	1d126 <z_impl_k_mutex_lock+0xc2>
   1d086:	4b3a      	ldr	r3, [pc, #232]	; (1d170 <z_impl_k_mutex_lock+0x10c>)
   1d088:	689b      	ldr	r3, [r3, #8]
   1d08a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d08e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1d090:	3101      	adds	r1, #1
   1d092:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1d094:	4b36      	ldr	r3, [pc, #216]	; (1d170 <z_impl_k_mutex_lock+0x10c>)
   1d096:	689b      	ldr	r3, [r3, #8]
   1d098:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1d09a:	f387 8811 	msr	BASEPRI, r7
   1d09e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1d0a2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1d0a4:	b003      	add	sp, #12
   1d0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d0aa:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d0ac:	6882      	ldr	r2, [r0, #8]
   1d0ae:	4b30      	ldr	r3, [pc, #192]	; (1d170 <z_impl_k_mutex_lock+0x10c>)
   1d0b0:	689b      	ldr	r3, [r3, #8]
   1d0b2:	429a      	cmp	r2, r3
   1d0b4:	d0e5      	beq.n	1d082 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d0b6:	ea55 0106 	orrs.w	r1, r5, r6
   1d0ba:	bf0c      	ite	eq
   1d0bc:	f04f 0801 	moveq.w	r8, #1
   1d0c0:	f04f 0800 	movne.w	r8, #0
   1d0c4:	d031      	beq.n	1d12a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1d0c6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d0ca:	4649      	mov	r1, r9
   1d0cc:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1d0d0:	f007 f846 	bl	24160 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d0d4:	4581      	cmp	r9, r0
   1d0d6:	dc2f      	bgt.n	1d138 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1d0d8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d0dc:	9600      	str	r6, [sp, #0]
   1d0de:	9501      	str	r5, [sp, #4]
   1d0e0:	4622      	mov	r2, r4
   1d0e2:	4639      	mov	r1, r7
   1d0e4:	4823      	ldr	r0, [pc, #140]	; (1d174 <z_impl_k_mutex_lock+0x110>)
   1d0e6:	f000 fc75 	bl	1d9d4 <z_pend_curr>
	if (got_mutex == 0) {
   1d0ea:	2800      	cmp	r0, #0
   1d0ec:	d0da      	beq.n	1d0a4 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1d0ee:	f04f 0320 	mov.w	r3, #32
   1d0f2:	f3ef 8511 	mrs	r5, BASEPRI
   1d0f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0fa:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d0fe:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d100:	42a3      	cmp	r3, r4
   1d102:	d01f      	beq.n	1d144 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d104:	b1f3      	cbz	r3, 1d144 <z_impl_k_mutex_lock+0xe0>
   1d106:	6921      	ldr	r1, [r4, #16]
   1d108:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1d10c:	f007 f828 	bl	24160 <new_prio_for_inheritance>
   1d110:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d112:	4620      	mov	r0, r4
   1d114:	f007 f82f 	bl	24176 <adjust_owner_prio>
   1d118:	b9b0      	cbnz	r0, 1d148 <z_impl_k_mutex_lock+0xe4>
   1d11a:	f1b9 0f00 	cmp.w	r9, #0
   1d11e:	d015      	beq.n	1d14c <z_impl_k_mutex_lock+0xe8>
   1d120:	f04f 0801 	mov.w	r8, #1
   1d124:	e012      	b.n	1d14c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1d126:	6923      	ldr	r3, [r4, #16]
   1d128:	e7b1      	b.n	1d08e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1d12a:	f387 8811 	msr	BASEPRI, r7
   1d12e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1d132:	f06f 000f 	mvn.w	r0, #15
   1d136:	e7b5      	b.n	1d0a4 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1d138:	4601      	mov	r1, r0
   1d13a:	4620      	mov	r0, r4
   1d13c:	f007 f81b 	bl	24176 <adjust_owner_prio>
   1d140:	4681      	mov	r9, r0
   1d142:	e7cb      	b.n	1d0dc <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d144:	6921      	ldr	r1, [r4, #16]
   1d146:	e7e4      	b.n	1d112 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d148:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1d14c:	f1b8 0f00 	cmp.w	r8, #0
   1d150:	d106      	bne.n	1d160 <z_impl_k_mutex_lock+0xfc>
   1d152:	f385 8811 	msr	BASEPRI, r5
   1d156:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1d15a:	f06f 000a 	mvn.w	r0, #10
   1d15e:	e7a1      	b.n	1d0a4 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1d160:	4629      	mov	r1, r5
   1d162:	4804      	ldr	r0, [pc, #16]	; (1d174 <z_impl_k_mutex_lock+0x110>)
   1d164:	f000 fac6 	bl	1d6f4 <z_reschedule>
	return -EAGAIN;
   1d168:	f06f 000a 	mvn.w	r0, #10
   1d16c:	e79a      	b.n	1d0a4 <z_impl_k_mutex_lock+0x40>
   1d16e:	bf00      	nop
   1d170:	2000d50c 	.word	0x2000d50c
   1d174:	2000d538 	.word	0x2000d538

0001d178 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1d178:	6882      	ldr	r2, [r0, #8]
   1d17a:	2a00      	cmp	r2, #0
   1d17c:	d035      	beq.n	1d1ea <z_impl_k_mutex_unlock+0x72>
{
   1d17e:	b538      	push	{r3, r4, r5, lr}
   1d180:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d182:	4b1d      	ldr	r3, [pc, #116]	; (1d1f8 <z_impl_k_mutex_unlock+0x80>)
   1d184:	689b      	ldr	r3, [r3, #8]
   1d186:	429a      	cmp	r2, r3
   1d188:	d132      	bne.n	1d1f0 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1d18a:	7bda      	ldrb	r2, [r3, #15]
   1d18c:	3a01      	subs	r2, #1
   1d18e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1d190:	68c3      	ldr	r3, [r0, #12]
   1d192:	2b01      	cmp	r3, #1
   1d194:	d905      	bls.n	1d1a2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1d196:	3b01      	subs	r3, #1
   1d198:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1d19a:	f000 fcd1 	bl	1db40 <k_sched_unlock>

	return 0;
   1d19e:	2000      	movs	r0, #0
}
   1d1a0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d1a2:	f04f 0320 	mov.w	r3, #32
   1d1a6:	f3ef 8511 	mrs	r5, BASEPRI
   1d1aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1ae:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1d1b2:	6901      	ldr	r1, [r0, #16]
   1d1b4:	f006 ffdf 	bl	24176 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1d1b8:	4620      	mov	r0, r4
   1d1ba:	f007 fa5e 	bl	2467a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1d1be:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1d1c0:	b160      	cbz	r0, 1d1dc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1d1c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d1c6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d1c8:	2300      	movs	r3, #0
   1d1ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1d1ce:	f007 f98d 	bl	244ec <z_ready_thread>
		z_reschedule(&lock, key);
   1d1d2:	4629      	mov	r1, r5
   1d1d4:	4809      	ldr	r0, [pc, #36]	; (1d1fc <z_impl_k_mutex_unlock+0x84>)
   1d1d6:	f000 fa8d 	bl	1d6f4 <z_reschedule>
   1d1da:	e7de      	b.n	1d19a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1d1dc:	2300      	movs	r3, #0
   1d1de:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1d1e0:	f385 8811 	msr	BASEPRI, r5
   1d1e4:	f3bf 8f6f 	isb	sy
   1d1e8:	e7d7      	b.n	1d19a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1d1ea:	f06f 0015 	mvn.w	r0, #21
}
   1d1ee:	4770      	bx	lr
		return -EPERM;
   1d1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1f4:	e7d4      	b.n	1d1a0 <z_impl_k_mutex_unlock+0x28>
   1d1f6:	bf00      	nop
   1d1f8:	2000d50c 	.word	0x2000d50c
   1d1fc:	2000d538 	.word	0x2000d538

0001d200 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1d200:	b510      	push	{r4, lr}
   1d202:	b082      	sub	sp, #8
   1d204:	4601      	mov	r1, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d206:	4684      	mov	ip, r0
	__asm__ volatile(
   1d208:	f04f 0020 	mov.w	r0, #32
   1d20c:	f3ef 8411 	mrs	r4, BASEPRI
   1d210:	f380 8812 	msr	BASEPRI_MAX, r0
   1d214:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1d218:	f85c 0b08 	ldr.w	r0, [ip], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1d21c:	b188      	cbz	r0, 1d242 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d21e:	6803      	ldr	r3, [r0, #0]
   1d220:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1d224:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1d226:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1d228:	4290      	cmp	r0, r2
   1d22a:	d008      	beq.n	1d23e <z_impl_k_queue_get+0x3e>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1d22c:	2101      	movs	r1, #1
   1d22e:	f007 f82a 	bl	24286 <z_queue_node_peek>
	__asm__ volatile(
   1d232:	f384 8811 	msr	BASEPRI, r4
   1d236:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1d23a:	b002      	add	sp, #8
   1d23c:	bd10      	pop	{r4, pc}
	list->tail = node;
   1d23e:	604b      	str	r3, [r1, #4]
}
   1d240:	e7f4      	b.n	1d22c <z_impl_k_queue_get+0x2c>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d242:	ea53 0102 	orrs.w	r1, r3, r2
   1d246:	d00b      	beq.n	1d260 <z_impl_k_queue_get+0x60>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1d248:	9200      	str	r2, [sp, #0]
   1d24a:	9301      	str	r3, [sp, #4]
   1d24c:	4662      	mov	r2, ip
   1d24e:	4621      	mov	r1, r4
   1d250:	4660      	mov	r0, ip
   1d252:	f000 fbbf 	bl	1d9d4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d256:	b948      	cbnz	r0, 1d26c <z_impl_k_queue_get+0x6c>
   1d258:	4b05      	ldr	r3, [pc, #20]	; (1d270 <z_impl_k_queue_get+0x70>)
   1d25a:	689b      	ldr	r3, [r3, #8]
   1d25c:	6958      	ldr	r0, [r3, #20]
   1d25e:	e7ec      	b.n	1d23a <z_impl_k_queue_get+0x3a>
   1d260:	f384 8811 	msr	BASEPRI, r4
   1d264:	f3bf 8f6f 	isb	sy
		return NULL;
   1d268:	2000      	movs	r0, #0
   1d26a:	e7e6      	b.n	1d23a <z_impl_k_queue_get+0x3a>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1d26c:	2000      	movs	r0, #0
   1d26e:	e7e4      	b.n	1d23a <z_impl_k_queue_get+0x3a>
   1d270:	2000d50c 	.word	0x2000d50c

0001d274 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1d274:	b538      	push	{r3, r4, r5, lr}
   1d276:	4604      	mov	r4, r0
	__asm__ volatile(
   1d278:	f04f 0320 	mov.w	r3, #32
   1d27c:	f3ef 8511 	mrs	r5, BASEPRI
   1d280:	f383 8812 	msr	BASEPRI_MAX, r3
   1d284:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1d288:	f007 f9f7 	bl	2467a <z_unpend_first_thread>

	if (thread != NULL) {
   1d28c:	b148      	cbz	r0, 1d2a2 <z_impl_k_sem_give+0x2e>
   1d28e:	2200      	movs	r2, #0
   1d290:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1d294:	f007 f92a 	bl	244ec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1d298:	4629      	mov	r1, r5
   1d29a:	4809      	ldr	r0, [pc, #36]	; (1d2c0 <z_impl_k_sem_give+0x4c>)
   1d29c:	f000 fa2a 	bl	1d6f4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1d2a0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d2a2:	68a3      	ldr	r3, [r4, #8]
   1d2a4:	68e2      	ldr	r2, [r4, #12]
   1d2a6:	4293      	cmp	r3, r2
   1d2a8:	d008      	beq.n	1d2bc <z_impl_k_sem_give+0x48>
   1d2aa:	2201      	movs	r2, #1
   1d2ac:	4413      	add	r3, r2
   1d2ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d2b0:	2102      	movs	r1, #2
   1d2b2:	f104 0010 	add.w	r0, r4, #16
   1d2b6:	f007 fb9d 	bl	249f4 <z_handle_obj_poll_events>
}
   1d2ba:	e7ed      	b.n	1d298 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1d2bc:	2200      	movs	r2, #0
   1d2be:	e7f5      	b.n	1d2ac <z_impl_k_sem_give+0x38>
   1d2c0:	2000d538 	.word	0x2000d538

0001d2c4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d2c4:	b510      	push	{r4, lr}
   1d2c6:	b082      	sub	sp, #8
   1d2c8:	f04f 0420 	mov.w	r4, #32
   1d2cc:	f3ef 8111 	mrs	r1, BASEPRI
   1d2d0:	f384 8812 	msr	BASEPRI_MAX, r4
   1d2d4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1d2d8:	6884      	ldr	r4, [r0, #8]
   1d2da:	b144      	cbz	r4, 1d2ee <z_impl_k_sem_take+0x2a>
		sem->count--;
   1d2dc:	3c01      	subs	r4, #1
   1d2de:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1d2e0:	f381 8811 	msr	BASEPRI, r1
   1d2e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d2e8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1d2ea:	b002      	add	sp, #8
   1d2ec:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d2ee:	ea53 0402 	orrs.w	r4, r3, r2
   1d2f2:	d006      	beq.n	1d302 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d2f4:	9200      	str	r2, [sp, #0]
   1d2f6:	9301      	str	r3, [sp, #4]
   1d2f8:	4602      	mov	r2, r0
   1d2fa:	4805      	ldr	r0, [pc, #20]	; (1d310 <z_impl_k_sem_take+0x4c>)
   1d2fc:	f000 fb6a 	bl	1d9d4 <z_pend_curr>
	return ret;
   1d300:	e7f3      	b.n	1d2ea <z_impl_k_sem_take+0x26>
   1d302:	f381 8811 	msr	BASEPRI, r1
   1d306:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d30a:	f06f 000f 	mvn.w	r0, #15
   1d30e:	e7ec      	b.n	1d2ea <z_impl_k_sem_take+0x26>
   1d310:	2000d538 	.word	0x2000d538

0001d314 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d316:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1d318:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d31a:	f013 0f02 	tst.w	r3, #2
   1d31e:	d15c      	bne.n	1d3da <submit_to_queue_locked+0xc6>
   1d320:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d322:	f013 0f04 	tst.w	r3, #4
   1d326:	d15d      	bne.n	1d3e4 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1d328:	680b      	ldr	r3, [r1, #0]
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d038      	beq.n	1d3a0 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
   1d32e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d330:	f013 0f01 	tst.w	r3, #1
   1d334:	d037      	beq.n	1d3a6 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1d336:	68a3      	ldr	r3, [r4, #8]
   1d338:	602b      	str	r3, [r5, #0]
			ret = 2;
   1d33a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1d33c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1d33e:	2e00      	cmp	r6, #0
   1d340:	d03f      	beq.n	1d3c2 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d342:	4b29      	ldr	r3, [pc, #164]	; (1d3e8 <submit_to_queue_locked+0xd4>)
   1d344:	689b      	ldr	r3, [r3, #8]
   1d346:	42b3      	cmp	r3, r6
   1d348:	d02f      	beq.n	1d3aa <submit_to_queue_locked+0x96>
   1d34a:	2300      	movs	r3, #0
   1d34c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1d34e:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1d352:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1d356:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d35a:	f013 0f01 	tst.w	r3, #1
   1d35e:	d033      	beq.n	1d3c8 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
   1d360:	b101      	cbz	r1, 1d364 <submit_to_queue_locked+0x50>
   1d362:	b3a2      	cbz	r2, 1d3ce <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
   1d364:	b100      	cbz	r0, 1d368 <submit_to_queue_locked+0x54>
   1d366:	b3a9      	cbz	r1, 1d3d4 <submit_to_queue_locked+0xc0>
	parent->next = child;
   1d368:	2300      	movs	r3, #0
   1d36a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1d36c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1d370:	b313      	cbz	r3, 1d3b8 <submit_to_queue_locked+0xa4>
	parent->next = child;
   1d372:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d374:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	if (queue != NULL) {
   1d378:	b12e      	cbz	r6, 1d386 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1d37a:	2200      	movs	r2, #0
   1d37c:	4611      	mov	r1, r2
   1d37e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1d382:	f007 f9b9 	bl	246f8 <z_sched_wake>
		ret = 1;
   1d386:	2001      	movs	r0, #1

		if (rc < 0) {
   1d388:	2800      	cmp	r0, #0
   1d38a:	db06      	blt.n	1d39a <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
   1d38c:	68e3      	ldr	r3, [r4, #12]
   1d38e:	f043 0304 	orr.w	r3, r3, #4
   1d392:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1d394:	682b      	ldr	r3, [r5, #0]
   1d396:	60a3      	str	r3, [r4, #8]
   1d398:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1d39a:	2800      	cmp	r0, #0
   1d39c:	dc21      	bgt.n	1d3e2 <submit_to_queue_locked+0xce>
   1d39e:	e01e      	b.n	1d3de <submit_to_queue_locked+0xca>
			*queuep = work->queue;
   1d3a0:	6883      	ldr	r3, [r0, #8]
   1d3a2:	600b      	str	r3, [r1, #0]
   1d3a4:	e7c3      	b.n	1d32e <submit_to_queue_locked+0x1a>
		ret = 1;
   1d3a6:	2701      	movs	r7, #1
   1d3a8:	e7c8      	b.n	1d33c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d3aa:	f006 fe9a 	bl	240e2 <k_is_in_isr>
   1d3ae:	b908      	cbnz	r0, 1d3b4 <submit_to_queue_locked+0xa0>
   1d3b0:	2301      	movs	r3, #1
   1d3b2:	e7cb      	b.n	1d34c <submit_to_queue_locked+0x38>
   1d3b4:	2300      	movs	r3, #0
   1d3b6:	e7c9      	b.n	1d34c <submit_to_queue_locked+0x38>
   1d3b8:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1d3bc:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1d3c0:	e7da      	b.n	1d378 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1d3c2:	f06f 0015 	mvn.w	r0, #21
   1d3c6:	e7df      	b.n	1d388 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
   1d3c8:	f06f 0012 	mvn.w	r0, #18
   1d3cc:	e7dc      	b.n	1d388 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1d3ce:	f06f 000f 	mvn.w	r0, #15
   1d3d2:	e7d9      	b.n	1d388 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1d3d4:	f06f 000f 	mvn.w	r0, #15
   1d3d8:	e7d6      	b.n	1d388 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1d3da:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1d3de:	2300      	movs	r3, #0
   1d3e0:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1d3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1d3e4:	2000      	movs	r0, #0
   1d3e6:	e7fa      	b.n	1d3de <submit_to_queue_locked+0xca>
   1d3e8:	2000d50c 	.word	0x2000d50c

0001d3ec <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d3ec:	b508      	push	{r3, lr}
   1d3ee:	4684      	mov	ip, r0
   1d3f0:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d3f2:	ea53 0102 	orrs.w	r1, r3, r2
   1d3f6:	d00c      	beq.n	1d412 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   1d3f8:	68c1      	ldr	r1, [r0, #12]
   1d3fa:	f041 0108 	orr.w	r1, r1, #8
   1d3fe:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1d400:	f8dc 1000 	ldr.w	r1, [ip]
   1d404:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d406:	4905      	ldr	r1, [pc, #20]	; (1d41c <schedule_for_queue_locked+0x30>)
   1d408:	3010      	adds	r0, #16
   1d40a:	f000 fd8b 	bl	1df24 <z_add_timeout>

	return ret;
   1d40e:	2001      	movs	r0, #1
}
   1d410:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   1d412:	4661      	mov	r1, ip
   1d414:	f7ff ff7e 	bl	1d314 <submit_to_queue_locked>
   1d418:	e7fa      	b.n	1d410 <schedule_for_queue_locked+0x24>
   1d41a:	bf00      	nop
   1d41c:	000242e3 	.word	0x000242e3

0001d420 <finalize_cancel_locked>:
{
   1d420:	b570      	push	{r4, r5, r6, lr}
   1d422:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1d424:	68c3      	ldr	r3, [r0, #12]
   1d426:	f023 0302 	bic.w	r3, r3, #2
   1d42a:	60c3      	str	r3, [r0, #12]
	return list->head;
   1d42c:	4b1a      	ldr	r3, [pc, #104]	; (1d498 <finalize_cancel_locked+0x78>)
   1d42e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d430:	b1fb      	cbz	r3, 1d472 <finalize_cancel_locked+0x52>
   1d432:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d434:	b103      	cbz	r3, 1d438 <finalize_cancel_locked+0x18>
	return node->next;
   1d436:	681c      	ldr	r4, [r3, #0]
   1d438:	2600      	movs	r6, #0
   1d43a:	e01f      	b.n	1d47c <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1d43c:	461a      	mov	r2, r3
Z_GENLIST_REMOVE(slist, snode)
   1d43e:	b166      	cbz	r6, 1d45a <finalize_cancel_locked+0x3a>
	return node->next;
   1d440:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
   1d442:	6031      	str	r1, [r6, #0]
	return list->tail;
   1d444:	4914      	ldr	r1, [pc, #80]	; (1d498 <finalize_cancel_locked+0x78>)
   1d446:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d448:	428b      	cmp	r3, r1
   1d44a:	d00f      	beq.n	1d46c <finalize_cancel_locked+0x4c>
	parent->next = child;
   1d44c:	2100      	movs	r1, #0
   1d44e:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
   1d450:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
   1d454:	f7ff ff0e 	bl	1d274 <z_impl_k_sem_give>
}
   1d458:	e015      	b.n	1d486 <finalize_cancel_locked+0x66>
	return node->next;
   1d45a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1d45c:	490e      	ldr	r1, [pc, #56]	; (1d498 <finalize_cancel_locked+0x78>)
   1d45e:	6008      	str	r0, [r1, #0]
	return list->tail;
   1d460:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d462:	428b      	cmp	r3, r1
   1d464:	d1f2      	bne.n	1d44c <finalize_cancel_locked+0x2c>
	list->tail = node;
   1d466:	490c      	ldr	r1, [pc, #48]	; (1d498 <finalize_cancel_locked+0x78>)
   1d468:	6048      	str	r0, [r1, #4]
}
   1d46a:	e7ef      	b.n	1d44c <finalize_cancel_locked+0x2c>
	list->tail = node;
   1d46c:	490a      	ldr	r1, [pc, #40]	; (1d498 <finalize_cancel_locked+0x78>)
   1d46e:	604e      	str	r6, [r1, #4]
}
   1d470:	e7ec      	b.n	1d44c <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d472:	461c      	mov	r4, r3
   1d474:	e7e0      	b.n	1d438 <finalize_cancel_locked+0x18>
   1d476:	4622      	mov	r2, r4
   1d478:	4623      	mov	r3, r4
   1d47a:	4614      	mov	r4, r2
   1d47c:	b153      	cbz	r3, 1d494 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
   1d47e:	685a      	ldr	r2, [r3, #4]
   1d480:	42aa      	cmp	r2, r5
   1d482:	d0db      	beq.n	1d43c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1d484:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d486:	2c00      	cmp	r4, #0
   1d488:	d0f5      	beq.n	1d476 <finalize_cancel_locked+0x56>
   1d48a:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d48c:	2c00      	cmp	r4, #0
   1d48e:	d0f3      	beq.n	1d478 <finalize_cancel_locked+0x58>
	return node->next;
   1d490:	6822      	ldr	r2, [r4, #0]
   1d492:	e7f1      	b.n	1d478 <finalize_cancel_locked+0x58>
}
   1d494:	bd70      	pop	{r4, r5, r6, pc}
   1d496:	bf00      	nop
   1d498:	2000d538 	.word	0x2000d538

0001d49c <work_queue_main>:
{
   1d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d49e:	b085      	sub	sp, #20
   1d4a0:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1d4a2:	e016      	b.n	1d4d2 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1d4a4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1d4a8:	f023 0204 	bic.w	r2, r3, #4
   1d4ac:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   1d4b0:	f013 0f04 	tst.w	r3, #4
   1d4b4:	d159      	bne.n	1d56a <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1d4b6:	2300      	movs	r3, #0
   1d4b8:	9302      	str	r3, [sp, #8]
   1d4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d4be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d4c2:	e9cd 2300 	strd	r2, r3, [sp]
   1d4c6:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1d4ca:	4631      	mov	r1, r6
   1d4cc:	482e      	ldr	r0, [pc, #184]	; (1d588 <work_queue_main+0xec>)
   1d4ce:	f000 fcb3 	bl	1de38 <z_sched_wait>
	__asm__ volatile(
   1d4d2:	f04f 0320 	mov.w	r3, #32
   1d4d6:	f3ef 8611 	mrs	r6, BASEPRI
   1d4da:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4de:	f3bf 8f6f 	isb	sy
	return list->head;
   1d4e2:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1d4e6:	2c00      	cmp	r4, #0
   1d4e8:	d0dc      	beq.n	1d4a4 <work_queue_main+0x8>
	return node->next;
   1d4ea:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1d4ec:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1d4f0:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4f4:	4294      	cmp	r4, r2
   1d4f6:	d035      	beq.n	1d564 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
   1d4f8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1d4fc:	f043 0302 	orr.w	r3, r3, #2
   1d500:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1d504:	68e3      	ldr	r3, [r4, #12]
   1d506:	f043 0301 	orr.w	r3, r3, #1
   1d50a:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   1d50c:	f023 0304 	bic.w	r3, r3, #4
   1d510:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1d512:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1d514:	2c00      	cmp	r4, #0
   1d516:	d0ce      	beq.n	1d4b6 <work_queue_main+0x1a>
	__asm__ volatile(
   1d518:	f386 8811 	msr	BASEPRI, r6
   1d51c:	f3bf 8f6f 	isb	sy
		handler(work);
   1d520:	4620      	mov	r0, r4
   1d522:	4798      	blx	r3
	__asm__ volatile(
   1d524:	f04f 0320 	mov.w	r3, #32
   1d528:	f3ef 8611 	mrs	r6, BASEPRI
   1d52c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d530:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1d534:	68e3      	ldr	r3, [r4, #12]
   1d536:	f023 0301 	bic.w	r3, r3, #1
   1d53a:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d53c:	f013 0f02 	tst.w	r3, #2
   1d540:	d11e      	bne.n	1d580 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   1d542:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1d546:	f023 0302 	bic.w	r3, r3, #2
   1d54a:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1d54e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1d552:	f386 8811 	msr	BASEPRI, r6
   1d556:	f3bf 8f6f 	isb	sy
		if (yield) {
   1d55a:	2b00      	cmp	r3, #0
   1d55c:	d1b9      	bne.n	1d4d2 <work_queue_main+0x36>
	z_impl_k_yield();
   1d55e:	f000 fb71 	bl	1dc44 <z_impl_k_yield>
}
   1d562:	e7b6      	b.n	1d4d2 <work_queue_main+0x36>
	list->tail = node;
   1d564:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1d568:	e7c6      	b.n	1d4f8 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1d56a:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1d56e:	2200      	movs	r2, #0
   1d570:	2101      	movs	r1, #1
   1d572:	4638      	mov	r0, r7
   1d574:	f007 f8c0 	bl	246f8 <z_sched_wake>
   1d578:	2800      	cmp	r0, #0
   1d57a:	d1f8      	bne.n	1d56e <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
   1d57c:	2300      	movs	r3, #0
   1d57e:	e7c9      	b.n	1d514 <work_queue_main+0x78>
			finalize_cancel_locked(work);
   1d580:	4620      	mov	r0, r4
   1d582:	f7ff ff4d 	bl	1d420 <finalize_cancel_locked>
   1d586:	e7dc      	b.n	1d542 <work_queue_main+0xa6>
   1d588:	2000d538 	.word	0x2000d538

0001d58c <k_work_submit>:
{
   1d58c:	b508      	push	{r3, lr}
   1d58e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d590:	4801      	ldr	r0, [pc, #4]	; (1d598 <k_work_submit+0xc>)
   1d592:	f006 fec9 	bl	24328 <k_work_submit_to_queue>
}
   1d596:	bd08      	pop	{r3, pc}
   1d598:	2000cab8 	.word	0x2000cab8

0001d59c <k_work_queue_start>:
{
   1d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d59e:	b089      	sub	sp, #36	; 0x24
   1d5a0:	4604      	mov	r4, r0
   1d5a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1d5a4:	2000      	movs	r0, #0
   1d5a6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1d5aa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1d5ae:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1d5b2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1d5b6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1d5ba:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1d5be:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1d5c2:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1d5c6:	b1fd      	cbz	r5, 1d608 <k_work_queue_start+0x6c>
   1d5c8:	7928      	ldrb	r0, [r5, #4]
   1d5ca:	b9f8      	cbnz	r0, 1d60c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d5cc:	2001      	movs	r0, #1
	*flagp = flags;
   1d5ce:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d5d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1d5d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d5da:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d5de:	2000      	movs	r0, #0
   1d5e0:	9004      	str	r0, [sp, #16]
   1d5e2:	9303      	str	r3, [sp, #12]
   1d5e4:	9002      	str	r0, [sp, #8]
   1d5e6:	9001      	str	r0, [sp, #4]
   1d5e8:	9400      	str	r4, [sp, #0]
   1d5ea:	4b0a      	ldr	r3, [pc, #40]	; (1d614 <k_work_queue_start+0x78>)
   1d5ec:	4620      	mov	r0, r4
   1d5ee:	f006 fd8f 	bl	24110 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d5f2:	b125      	cbz	r5, 1d5fe <k_work_queue_start+0x62>
   1d5f4:	6829      	ldr	r1, [r5, #0]
   1d5f6:	b111      	cbz	r1, 1d5fe <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1d5f8:	4620      	mov	r0, r4
   1d5fa:	f7ff fc4f 	bl	1ce9c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d5fe:	4620      	mov	r0, r4
   1d600:	f006 fd77 	bl	240f2 <z_impl_k_thread_start>
}
   1d604:	b009      	add	sp, #36	; 0x24
   1d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d608:	2001      	movs	r0, #1
   1d60a:	e7e0      	b.n	1d5ce <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d60c:	f240 1001 	movw	r0, #257	; 0x101
   1d610:	e7dd      	b.n	1d5ce <k_work_queue_start+0x32>
   1d612:	bf00      	nop
   1d614:	0001d49d 	.word	0x0001d49d

0001d618 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d618:	b508      	push	{r3, lr}
   1d61a:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d61c:	4801      	ldr	r0, [pc, #4]	; (1d624 <k_work_schedule+0xc>)
   1d61e:	f006 feaf 	bl	24380 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1d622:	bd08      	pop	{r3, pc}
   1d624:	2000cab8 	.word	0x2000cab8

0001d628 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d628:	b508      	push	{r3, lr}
   1d62a:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d62c:	4801      	ldr	r0, [pc, #4]	; (1d634 <k_work_reschedule+0xc>)
   1d62e:	f006 fec1 	bl	243b4 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1d632:	bd08      	pop	{r3, pc}
   1d634:	2000cab8 	.word	0x2000cab8

0001d638 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d63c:	bf08      	it	eq
   1d63e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1d642:	d100      	bne.n	1d646 <add_thread_timeout+0xe>
   1d644:	4770      	bx	lr
{
   1d646:	b508      	push	{r3, lr}
   1d648:	4902      	ldr	r1, [pc, #8]	; (1d654 <add_thread_timeout+0x1c>)
   1d64a:	3018      	adds	r0, #24
   1d64c:	f000 fc6a 	bl	1df24 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   1d650:	bd08      	pop	{r3, pc}
   1d652:	bf00      	nop
   1d654:	00024525 	.word	0x00024525

0001d658 <z_reset_time_slice>:
{
   1d658:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1d65a:	4b08      	ldr	r3, [pc, #32]	; (1d67c <z_reset_time_slice+0x24>)
   1d65c:	681b      	ldr	r3, [r3, #0]
   1d65e:	b903      	cbnz	r3, 1d662 <z_reset_time_slice+0xa>
}
   1d660:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d662:	f7f8 fb69 	bl	15d38 <sys_clock_elapsed>
   1d666:	4603      	mov	r3, r0
   1d668:	4a04      	ldr	r2, [pc, #16]	; (1d67c <z_reset_time_slice+0x24>)
   1d66a:	6810      	ldr	r0, [r2, #0]
   1d66c:	4403      	add	r3, r0
   1d66e:	4a04      	ldr	r2, [pc, #16]	; (1d680 <z_reset_time_slice+0x28>)
   1d670:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d672:	2100      	movs	r1, #0
   1d674:	f007 f8c3 	bl	247fe <z_set_timeout_expiry>
}
   1d678:	e7f2      	b.n	1d660 <z_reset_time_slice+0x8>
   1d67a:	bf00      	nop
   1d67c:	2000d548 	.word	0x2000d548
   1d680:	2000d50c 	.word	0x2000d50c

0001d684 <k_sched_time_slice_set>:
{
   1d684:	b570      	push	{r4, r5, r6, lr}
   1d686:	4604      	mov	r4, r0
   1d688:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   1d68a:	2300      	movs	r3, #0
	__asm__ volatile(
   1d68c:	f04f 0220 	mov.w	r2, #32
   1d690:	f3ef 8611 	mrs	r6, BASEPRI
   1d694:	f382 8812 	msr	BASEPRI_MAX, r2
   1d698:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d69c:	e00c      	b.n	1d6b8 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
   1d69e:	2802      	cmp	r0, #2
   1d6a0:	bfb8      	it	lt
   1d6a2:	2002      	movlt	r0, #2
   1d6a4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1d6a6:	4b10      	ldr	r3, [pc, #64]	; (1d6e8 <k_sched_time_slice_set+0x64>)
   1d6a8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1d6aa:	f7ff ffd5 	bl	1d658 <z_reset_time_slice>
	__asm__ volatile(
   1d6ae:	f386 8811 	msr	BASEPRI, r6
   1d6b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d6b6:	2301      	movs	r3, #1
   1d6b8:	b9a3      	cbnz	r3, 1d6e4 <k_sched_time_slice_set+0x60>
		_current_cpu->slice_ticks = 0;
   1d6ba:	4b0c      	ldr	r3, [pc, #48]	; (1d6ec <k_sched_time_slice_set+0x68>)
   1d6bc:	2200      	movs	r2, #0
   1d6be:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d6c0:	0c61      	lsrs	r1, r4, #17
   1d6c2:	03e3      	lsls	r3, r4, #15
   1d6c4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d6c8:	1818      	adds	r0, r3, r0
   1d6ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d6ce:	f04f 0300 	mov.w	r3, #0
   1d6d2:	f141 0100 	adc.w	r1, r1, #0
   1d6d6:	f7f3 fb93 	bl	10e00 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d6da:	4b05      	ldr	r3, [pc, #20]	; (1d6f0 <k_sched_time_slice_set+0x6c>)
   1d6dc:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d6de:	2c00      	cmp	r4, #0
   1d6e0:	dcdd      	bgt.n	1d69e <k_sched_time_slice_set+0x1a>
   1d6e2:	e7e0      	b.n	1d6a6 <k_sched_time_slice_set+0x22>
}
   1d6e4:	bd70      	pop	{r4, r5, r6, pc}
   1d6e6:	bf00      	nop
   1d6e8:	2000d544 	.word	0x2000d544
   1d6ec:	2000d50c 	.word	0x2000d50c
   1d6f0:	2000d548 	.word	0x2000d548

0001d6f4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1d6f4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1d6f6:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d6f8:	b921      	cbnz	r1, 1d704 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d6fa:	f3ef 8305 	mrs	r3, IPSR
   1d6fe:	b913      	cbnz	r3, 1d706 <z_reschedule+0x12>
   1d700:	2101      	movs	r1, #1
   1d702:	e000      	b.n	1d706 <z_reschedule+0x12>
   1d704:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1d706:	f011 0f01 	tst.w	r1, #1
   1d70a:	d007      	beq.n	1d71c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1d70c:	4b06      	ldr	r3, [pc, #24]	; (1d728 <z_reschedule+0x34>)
   1d70e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1d710:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1d712:	429a      	cmp	r2, r3
   1d714:	d002      	beq.n	1d71c <z_reschedule+0x28>
	ret = arch_swap(key);
   1d716:	f7f6 fb4d 	bl	13db4 <arch_swap>
		z_swap(lock, key);
   1d71a:	e003      	b.n	1d724 <z_reschedule+0x30>
   1d71c:	f380 8811 	msr	BASEPRI, r0
   1d720:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d724:	bd08      	pop	{r3, pc}
   1d726:	bf00      	nop
   1d728:	2000d50c 	.word	0x2000d50c

0001d72c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1d72c:	2300      	movs	r3, #0
	__asm__ volatile(
   1d72e:	f04f 0220 	mov.w	r2, #32
   1d732:	f3ef 8111 	mrs	r1, BASEPRI
   1d736:	f382 8812 	msr	BASEPRI_MAX, r2
   1d73a:	f3bf 8f6f 	isb	sy
   1d73e:	e009      	b.n	1d754 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   1d740:	4b06      	ldr	r3, [pc, #24]	; (1d75c <k_sched_lock+0x30>)
   1d742:	689a      	ldr	r2, [r3, #8]
   1d744:	7bd3      	ldrb	r3, [r2, #15]
   1d746:	3b01      	subs	r3, #1
   1d748:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d74a:	f381 8811 	msr	BASEPRI, r1
   1d74e:	f3bf 8f6f 	isb	sy
   1d752:	2301      	movs	r3, #1
   1d754:	2b00      	cmp	r3, #0
   1d756:	d0f3      	beq.n	1d740 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1d758:	4770      	bx	lr
   1d75a:	bf00      	nop
   1d75c:	2000d50c 	.word	0x2000d50c

0001d760 <update_cache>:
{
   1d760:	b538      	push	{r3, r4, r5, lr}
   1d762:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1d764:	480f      	ldr	r0, [pc, #60]	; (1d7a4 <update_cache+0x44>)
   1d766:	f006 feba 	bl	244de <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d76a:	4605      	mov	r5, r0
   1d76c:	b170      	cbz	r0, 1d78c <update_cache+0x2c>
	if (preempt_ok != 0) {
   1d76e:	b984      	cbnz	r4, 1d792 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1d770:	4b0d      	ldr	r3, [pc, #52]	; (1d7a8 <update_cache+0x48>)
   1d772:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1d774:	7b5a      	ldrb	r2, [r3, #13]
   1d776:	f012 0f1f 	tst.w	r2, #31
   1d77a:	d10a      	bne.n	1d792 <update_cache+0x32>
	return node->next != NULL;
   1d77c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d77e:	b942      	cbnz	r2, 1d792 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d780:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1d782:	2a7f      	cmp	r2, #127	; 0x7f
   1d784:	d905      	bls.n	1d792 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1d786:	4a08      	ldr	r2, [pc, #32]	; (1d7a8 <update_cache+0x48>)
   1d788:	61d3      	str	r3, [r2, #28]
   1d78a:	e00a      	b.n	1d7a2 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d78c:	4b06      	ldr	r3, [pc, #24]	; (1d7a8 <update_cache+0x48>)
   1d78e:	68dd      	ldr	r5, [r3, #12]
   1d790:	e7ed      	b.n	1d76e <update_cache+0xe>
		if (thread != _current) {
   1d792:	4b05      	ldr	r3, [pc, #20]	; (1d7a8 <update_cache+0x48>)
   1d794:	689b      	ldr	r3, [r3, #8]
   1d796:	42ab      	cmp	r3, r5
   1d798:	d001      	beq.n	1d79e <update_cache+0x3e>
			z_reset_time_slice();
   1d79a:	f7ff ff5d 	bl	1d658 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d79e:	4b02      	ldr	r3, [pc, #8]	; (1d7a8 <update_cache+0x48>)
   1d7a0:	61dd      	str	r5, [r3, #28]
}
   1d7a2:	bd38      	pop	{r3, r4, r5, pc}
   1d7a4:	2000d52c 	.word	0x2000d52c
   1d7a8:	2000d50c 	.word	0x2000d50c

0001d7ac <move_thread_to_end_of_prio_q>:
{
   1d7ac:	b538      	push	{r3, r4, r5, lr}
   1d7ae:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1d7b0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1d7b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d7b6:	2b00      	cmp	r3, #0
   1d7b8:	db28      	blt.n	1d80c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d7ba:	7b6b      	ldrb	r3, [r5, #13]
   1d7bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d7c0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1d7c2:	4b1a      	ldr	r3, [pc, #104]	; (1d82c <move_thread_to_end_of_prio_q+0x80>)
   1d7c4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d7c8:	429c      	cmp	r4, r3
   1d7ca:	d02d      	beq.n	1d828 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d7cc:	b16c      	cbz	r4, 1d7ea <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d7ce:	4621      	mov	r1, r4
   1d7d0:	4628      	mov	r0, r5
   1d7d2:	f006 fe19 	bl	24408 <z_sched_prio_cmp>
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	dc20      	bgt.n	1d81c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d7da:	b134      	cbz	r4, 1d7ea <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1d7dc:	4b13      	ldr	r3, [pc, #76]	; (1d82c <move_thread_to_end_of_prio_q+0x80>)
   1d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d7e0:	429c      	cmp	r4, r3
   1d7e2:	d002      	beq.n	1d7ea <move_thread_to_end_of_prio_q+0x3e>
   1d7e4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d7e6:	2c00      	cmp	r4, #0
   1d7e8:	d1f0      	bne.n	1d7cc <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1d7ea:	4b10      	ldr	r3, [pc, #64]	; (1d82c <move_thread_to_end_of_prio_q+0x80>)
   1d7ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1d7ee:	f103 0120 	add.w	r1, r3, #32
   1d7f2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1d7f4:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1d7f6:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1d7f8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1d7fa:	4b0c      	ldr	r3, [pc, #48]	; (1d82c <move_thread_to_end_of_prio_q+0x80>)
   1d7fc:	6898      	ldr	r0, [r3, #8]
   1d7fe:	42a8      	cmp	r0, r5
   1d800:	bf14      	ite	ne
   1d802:	2000      	movne	r0, #0
   1d804:	2001      	moveq	r0, #1
   1d806:	f7ff ffab 	bl	1d760 <update_cache>
}
   1d80a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d80c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d810:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d812:	4601      	mov	r1, r0
   1d814:	4806      	ldr	r0, [pc, #24]	; (1d830 <move_thread_to_end_of_prio_q+0x84>)
   1d816:	f006 fe36 	bl	24486 <z_priq_dumb_remove>
}
   1d81a:	e7ce      	b.n	1d7ba <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d81c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1d81e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1d820:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1d822:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d824:	6065      	str	r5, [r4, #4]
}
   1d826:	e7e8      	b.n	1d7fa <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d828:	2400      	movs	r4, #0
   1d82a:	e7cf      	b.n	1d7cc <move_thread_to_end_of_prio_q+0x20>
   1d82c:	2000d50c 	.word	0x2000d50c
   1d830:	2000d52c 	.word	0x2000d52c

0001d834 <z_time_slice>:
{
   1d834:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d836:	f04f 0320 	mov.w	r3, #32
   1d83a:	f3ef 8411 	mrs	r4, BASEPRI
   1d83e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d842:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d846:	4b21      	ldr	r3, [pc, #132]	; (1d8cc <z_time_slice+0x98>)
   1d848:	689b      	ldr	r3, [r3, #8]
   1d84a:	4a21      	ldr	r2, [pc, #132]	; (1d8d0 <z_time_slice+0x9c>)
   1d84c:	6812      	ldr	r2, [r2, #0]
   1d84e:	4293      	cmp	r3, r2
   1d850:	d017      	beq.n	1d882 <z_time_slice+0x4e>
	pending_current = NULL;
   1d852:	4a1f      	ldr	r2, [pc, #124]	; (1d8d0 <z_time_slice+0x9c>)
   1d854:	2100      	movs	r1, #0
   1d856:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d858:	4a1e      	ldr	r2, [pc, #120]	; (1d8d4 <z_time_slice+0xa0>)
   1d85a:	6812      	ldr	r2, [r2, #0]
   1d85c:	b372      	cbz	r2, 1d8bc <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d85e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1d860:	2a7f      	cmp	r2, #127	; 0x7f
   1d862:	d815      	bhi.n	1d890 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
   1d864:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1d866:	f012 0f1f 	tst.w	r2, #31
   1d86a:	d11b      	bne.n	1d8a4 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d86c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1d870:	4a19      	ldr	r2, [pc, #100]	; (1d8d8 <z_time_slice+0xa4>)
   1d872:	6812      	ldr	r2, [r2, #0]
   1d874:	4291      	cmp	r1, r2
   1d876:	db17      	blt.n	1d8a8 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1d878:	4a18      	ldr	r2, [pc, #96]	; (1d8dc <z_time_slice+0xa8>)
   1d87a:	4293      	cmp	r3, r2
   1d87c:	d016      	beq.n	1d8ac <z_time_slice+0x78>
   1d87e:	2201      	movs	r2, #1
   1d880:	e007      	b.n	1d892 <z_time_slice+0x5e>
		z_reset_time_slice();
   1d882:	f7ff fee9 	bl	1d658 <z_reset_time_slice>
	__asm__ volatile(
   1d886:	f384 8811 	msr	BASEPRI, r4
   1d88a:	f3bf 8f6f 	isb	sy
		return;
   1d88e:	e01c      	b.n	1d8ca <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
   1d890:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
   1d892:	b19a      	cbz	r2, 1d8bc <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
   1d894:	4a0d      	ldr	r2, [pc, #52]	; (1d8cc <z_time_slice+0x98>)
   1d896:	6912      	ldr	r2, [r2, #16]
   1d898:	4282      	cmp	r2, r0
   1d89a:	dd09      	ble.n	1d8b0 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
   1d89c:	1a10      	subs	r0, r2, r0
   1d89e:	4b0b      	ldr	r3, [pc, #44]	; (1d8cc <z_time_slice+0x98>)
   1d8a0:	6118      	str	r0, [r3, #16]
   1d8a2:	e00e      	b.n	1d8c2 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
   1d8a4:	2200      	movs	r2, #0
   1d8a6:	e7f4      	b.n	1d892 <z_time_slice+0x5e>
   1d8a8:	2200      	movs	r2, #0
   1d8aa:	e7f2      	b.n	1d892 <z_time_slice+0x5e>
   1d8ac:	2200      	movs	r2, #0
   1d8ae:	e7f0      	b.n	1d892 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
   1d8b0:	4618      	mov	r0, r3
   1d8b2:	f7ff ff7b 	bl	1d7ac <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1d8b6:	f7ff fecf 	bl	1d658 <z_reset_time_slice>
   1d8ba:	e002      	b.n	1d8c2 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
   1d8bc:	4b03      	ldr	r3, [pc, #12]	; (1d8cc <z_time_slice+0x98>)
   1d8be:	2200      	movs	r2, #0
   1d8c0:	611a      	str	r2, [r3, #16]
   1d8c2:	f384 8811 	msr	BASEPRI, r4
   1d8c6:	f3bf 8f6f 	isb	sy
}
   1d8ca:	bd10      	pop	{r4, pc}
   1d8cc:	2000d50c 	.word	0x2000d50c
   1d8d0:	2000d540 	.word	0x2000d540
   1d8d4:	2000d548 	.word	0x2000d548
   1d8d8:	2000d544 	.word	0x2000d544
   1d8dc:	2000c940 	.word	0x2000c940

0001d8e0 <ready_thread>:
{
   1d8e0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1d8e2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d8e4:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1d8e8:	2a00      	cmp	r2, #0
   1d8ea:	db2d      	blt.n	1d948 <ready_thread+0x68>
   1d8ec:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d8ee:	f013 0f1f 	tst.w	r3, #31
   1d8f2:	d105      	bne.n	1d900 <ready_thread+0x20>
	return node->next != NULL;
   1d8f4:	6982      	ldr	r2, [r0, #24]
   1d8f6:	b10a      	cbz	r2, 1d8fc <ready_thread+0x1c>
   1d8f8:	2200      	movs	r2, #0
   1d8fa:	e002      	b.n	1d902 <ready_thread+0x22>
   1d8fc:	2201      	movs	r2, #1
   1d8fe:	e000      	b.n	1d902 <ready_thread+0x22>
   1d900:	2200      	movs	r2, #0
   1d902:	b30a      	cbz	r2, 1d948 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d904:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d908:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1d90a:	4b14      	ldr	r3, [pc, #80]	; (1d95c <ready_thread+0x7c>)
   1d90c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d910:	429d      	cmp	r5, r3
   1d912:	d020      	beq.n	1d956 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d914:	b16d      	cbz	r5, 1d932 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d916:	4629      	mov	r1, r5
   1d918:	4620      	mov	r0, r4
   1d91a:	f006 fd75 	bl	24408 <z_sched_prio_cmp>
   1d91e:	2800      	cmp	r0, #0
   1d920:	dc13      	bgt.n	1d94a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d922:	b135      	cbz	r5, 1d932 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1d924:	4b0d      	ldr	r3, [pc, #52]	; (1d95c <ready_thread+0x7c>)
   1d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d928:	429d      	cmp	r5, r3
   1d92a:	d002      	beq.n	1d932 <ready_thread+0x52>
   1d92c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d92e:	2d00      	cmp	r5, #0
   1d930:	d1f0      	bne.n	1d914 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1d932:	4b0a      	ldr	r3, [pc, #40]	; (1d95c <ready_thread+0x7c>)
   1d934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1d936:	f103 0120 	add.w	r1, r3, #32
   1d93a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1d93c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1d93e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d940:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1d942:	2000      	movs	r0, #0
   1d944:	f7ff ff0c 	bl	1d760 <update_cache>
}
   1d948:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1d94a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1d94c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1d94e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1d950:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d952:	606c      	str	r4, [r5, #4]
}
   1d954:	e7f5      	b.n	1d942 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d956:	2500      	movs	r5, #0
   1d958:	e7dc      	b.n	1d914 <ready_thread+0x34>
   1d95a:	bf00      	nop
   1d95c:	2000d50c 	.word	0x2000d50c

0001d960 <z_sched_start>:
{
   1d960:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d962:	f04f 0320 	mov.w	r3, #32
   1d966:	f3ef 8411 	mrs	r4, BASEPRI
   1d96a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d96e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1d972:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1d974:	f013 0f04 	tst.w	r3, #4
   1d978:	d104      	bne.n	1d984 <z_sched_start+0x24>
	__asm__ volatile(
   1d97a:	f384 8811 	msr	BASEPRI, r4
   1d97e:	f3bf 8f6f 	isb	sy
}
   1d982:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d984:	f023 0304 	bic.w	r3, r3, #4
   1d988:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1d98a:	f7ff ffa9 	bl	1d8e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d98e:	4621      	mov	r1, r4
   1d990:	4801      	ldr	r0, [pc, #4]	; (1d998 <z_sched_start+0x38>)
   1d992:	f7ff feaf 	bl	1d6f4 <z_reschedule>
   1d996:	e7f4      	b.n	1d982 <z_sched_start+0x22>
   1d998:	2000d544 	.word	0x2000d544

0001d99c <unready_thread>:
{
   1d99c:	b510      	push	{r4, lr}
   1d99e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1d9a0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1d9a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d9a6:	2b00      	cmp	r3, #0
   1d9a8:	db08      	blt.n	1d9bc <unready_thread+0x20>
	update_cache(thread == _current);
   1d9aa:	4b08      	ldr	r3, [pc, #32]	; (1d9cc <unready_thread+0x30>)
   1d9ac:	6898      	ldr	r0, [r3, #8]
   1d9ae:	42a0      	cmp	r0, r4
   1d9b0:	bf14      	ite	ne
   1d9b2:	2000      	movne	r0, #0
   1d9b4:	2001      	moveq	r0, #1
   1d9b6:	f7ff fed3 	bl	1d760 <update_cache>
}
   1d9ba:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d9bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d9c0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d9c2:	4601      	mov	r1, r0
   1d9c4:	4802      	ldr	r0, [pc, #8]	; (1d9d0 <unready_thread+0x34>)
   1d9c6:	f006 fd5e 	bl	24486 <z_priq_dumb_remove>
}
   1d9ca:	e7ee      	b.n	1d9aa <unready_thread+0xe>
   1d9cc:	2000d50c 	.word	0x2000d50c
   1d9d0:	2000d52c 	.word	0x2000d52c

0001d9d4 <z_pend_curr>:
{
   1d9d4:	b510      	push	{r4, lr}
   1d9d6:	460c      	mov	r4, r1
   1d9d8:	4611      	mov	r1, r2
	pending_current = _current;
   1d9da:	4b06      	ldr	r3, [pc, #24]	; (1d9f4 <z_pend_curr+0x20>)
   1d9dc:	6898      	ldr	r0, [r3, #8]
   1d9de:	4b06      	ldr	r3, [pc, #24]	; (1d9f8 <z_pend_curr+0x24>)
   1d9e0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1d9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d9e6:	f006 fdff 	bl	245e8 <pend>
   1d9ea:	4620      	mov	r0, r4
   1d9ec:	f7f6 f9e2 	bl	13db4 <arch_swap>
}
   1d9f0:	bd10      	pop	{r4, pc}
   1d9f2:	bf00      	nop
   1d9f4:	2000d50c 	.word	0x2000d50c
   1d9f8:	2000d540 	.word	0x2000d540

0001d9fc <z_set_prio>:
{
   1d9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da00:	4604      	mov	r4, r0
   1da02:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   1da04:	2300      	movs	r3, #0
	__asm__ volatile(
   1da06:	f04f 0220 	mov.w	r2, #32
   1da0a:	f3ef 8811 	mrs	r8, BASEPRI
   1da0e:	f382 8812 	msr	BASEPRI_MAX, r2
   1da12:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1da16:	461f      	mov	r7, r3
   1da18:	e008      	b.n	1da2c <z_set_prio+0x30>
		if (need_sched) {
   1da1a:	f012 0701 	ands.w	r7, r2, #1
   1da1e:	d111      	bne.n	1da44 <z_set_prio+0x48>
			thread->base.prio = prio;
   1da20:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
   1da22:	f388 8811 	msr	BASEPRI, r8
   1da26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1da2a:	2301      	movs	r3, #1
   1da2c:	461a      	mov	r2, r3
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d13d      	bne.n	1daae <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1da32:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1da34:	f013 0f1f 	tst.w	r3, #31
   1da38:	d1ef      	bne.n	1da1a <z_set_prio+0x1e>
	return node->next != NULL;
   1da3a:	69a1      	ldr	r1, [r4, #24]
   1da3c:	2900      	cmp	r1, #0
   1da3e:	d1ec      	bne.n	1da1a <z_set_prio+0x1e>
   1da40:	2201      	movs	r2, #1
   1da42:	e7ea      	b.n	1da1a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1da44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1da48:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1da4a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1dab4 <z_set_prio+0xb8>
   1da4e:	4621      	mov	r1, r4
   1da50:	4648      	mov	r0, r9
   1da52:	f006 fd18 	bl	24486 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1da56:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1da58:	7b63      	ldrb	r3, [r4, #13]
   1da5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1da5e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1da60:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1da64:	454d      	cmp	r5, r9
   1da66:	d020      	beq.n	1daaa <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1da68:	b16d      	cbz	r5, 1da86 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1da6a:	4629      	mov	r1, r5
   1da6c:	4620      	mov	r0, r4
   1da6e:	f006 fccb 	bl	24408 <z_sched_prio_cmp>
   1da72:	2800      	cmp	r0, #0
   1da74:	dc13      	bgt.n	1da9e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1da76:	b135      	cbz	r5, 1da86 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1da78:	4b0f      	ldr	r3, [pc, #60]	; (1dab8 <z_set_prio+0xbc>)
   1da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da7c:	429d      	cmp	r5, r3
   1da7e:	d002      	beq.n	1da86 <z_set_prio+0x8a>
   1da80:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1da82:	2d00      	cmp	r5, #0
   1da84:	d1f0      	bne.n	1da68 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1da86:	4b0c      	ldr	r3, [pc, #48]	; (1dab8 <z_set_prio+0xbc>)
   1da88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1da8a:	f103 0120 	add.w	r1, r3, #32
   1da8e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1da90:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1da92:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1da94:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1da96:	2001      	movs	r0, #1
   1da98:	f7ff fe62 	bl	1d760 <update_cache>
   1da9c:	e7c1      	b.n	1da22 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1da9e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1daa0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1daa2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1daa4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1daa6:	606c      	str	r4, [r5, #4]
}
   1daa8:	e7f5      	b.n	1da96 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1daaa:	2500      	movs	r5, #0
   1daac:	e7dc      	b.n	1da68 <z_set_prio+0x6c>
}
   1daae:	4638      	mov	r0, r7
   1dab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dab4:	2000d52c 	.word	0x2000d52c
   1dab8:	2000d50c 	.word	0x2000d50c

0001dabc <z_impl_k_thread_suspend>:
{
   1dabc:	b538      	push	{r3, r4, r5, lr}
   1dabe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1dac0:	3018      	adds	r0, #24
   1dac2:	f006 fe67 	bl	24794 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1dac6:	2300      	movs	r3, #0
	__asm__ volatile(
   1dac8:	f04f 0220 	mov.w	r2, #32
   1dacc:	f3ef 8511 	mrs	r5, BASEPRI
   1dad0:	f382 8812 	msr	BASEPRI_MAX, r2
   1dad4:	f3bf 8f6f 	isb	sy
   1dad8:	e010      	b.n	1dafc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1dada:	7b63      	ldrb	r3, [r4, #13]
   1dadc:	f043 0310 	orr.w	r3, r3, #16
   1dae0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1dae2:	4b15      	ldr	r3, [pc, #84]	; (1db38 <z_impl_k_thread_suspend+0x7c>)
   1dae4:	6898      	ldr	r0, [r3, #8]
   1dae6:	42a0      	cmp	r0, r4
   1dae8:	bf14      	ite	ne
   1daea:	2000      	movne	r0, #0
   1daec:	2001      	moveq	r0, #1
   1daee:	f7ff fe37 	bl	1d760 <update_cache>
	__asm__ volatile(
   1daf2:	f385 8811 	msr	BASEPRI, r5
   1daf6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1dafa:	2301      	movs	r3, #1
   1dafc:	b963      	cbnz	r3, 1db18 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1dafe:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1db00:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1db04:	2b00      	cmp	r3, #0
   1db06:	dae8      	bge.n	1dada <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1db08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1db0c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1db0e:	4621      	mov	r1, r4
   1db10:	480a      	ldr	r0, [pc, #40]	; (1db3c <z_impl_k_thread_suspend+0x80>)
   1db12:	f006 fcb8 	bl	24486 <z_priq_dumb_remove>
}
   1db16:	e7e0      	b.n	1dada <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1db18:	4b07      	ldr	r3, [pc, #28]	; (1db38 <z_impl_k_thread_suspend+0x7c>)
   1db1a:	689b      	ldr	r3, [r3, #8]
   1db1c:	42a3      	cmp	r3, r4
   1db1e:	d000      	beq.n	1db22 <z_impl_k_thread_suspend+0x66>
}
   1db20:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1db22:	f04f 0320 	mov.w	r3, #32
   1db26:	f3ef 8011 	mrs	r0, BASEPRI
   1db2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1db2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1db32:	f006 fc93 	bl	2445c <z_reschedule_irqlock>
   1db36:	e7f3      	b.n	1db20 <z_impl_k_thread_suspend+0x64>
   1db38:	2000d50c 	.word	0x2000d50c
   1db3c:	2000d52c 	.word	0x2000d52c

0001db40 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1db40:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1db42:	2300      	movs	r3, #0
   1db44:	f04f 0220 	mov.w	r2, #32
   1db48:	f3ef 8411 	mrs	r4, BASEPRI
   1db4c:	f382 8812 	msr	BASEPRI_MAX, r2
   1db50:	f3bf 8f6f 	isb	sy
   1db54:	e00c      	b.n	1db70 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1db56:	4b0d      	ldr	r3, [pc, #52]	; (1db8c <k_sched_unlock+0x4c>)
   1db58:	689a      	ldr	r2, [r3, #8]
   1db5a:	7bd3      	ldrb	r3, [r2, #15]
   1db5c:	3301      	adds	r3, #1
   1db5e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1db60:	2000      	movs	r0, #0
   1db62:	f7ff fdfd 	bl	1d760 <update_cache>
	__asm__ volatile(
   1db66:	f384 8811 	msr	BASEPRI, r4
   1db6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1db6e:	2301      	movs	r3, #1
   1db70:	2b00      	cmp	r3, #0
   1db72:	d0f0      	beq.n	1db56 <k_sched_unlock+0x16>
	__asm__ volatile(
   1db74:	f04f 0320 	mov.w	r3, #32
   1db78:	f3ef 8011 	mrs	r0, BASEPRI
   1db7c:	f383 8812 	msr	BASEPRI_MAX, r3
   1db80:	f3bf 8f6f 	isb	sy
   1db84:	f006 fc6a 	bl	2445c <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1db88:	bd10      	pop	{r4, pc}
   1db8a:	bf00      	nop
   1db8c:	2000d50c 	.word	0x2000d50c

0001db90 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1db92:	7b43      	ldrb	r3, [r0, #13]
   1db94:	f013 0f08 	tst.w	r3, #8
   1db98:	d145      	bne.n	1dc26 <end_thread+0x96>
   1db9a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1db9c:	f043 0308 	orr.w	r3, r3, #8
   1dba0:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1dba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dba6:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1dba8:	f013 0f80 	tst.w	r3, #128	; 0x80
   1dbac:	d12d      	bne.n	1dc0a <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1dbae:	68ab      	ldr	r3, [r5, #8]
   1dbb0:	b15b      	cbz	r3, 1dbca <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1dbb2:	4628      	mov	r0, r5
   1dbb4:	f006 fc26 	bl	24404 <pended_on_thread>
   1dbb8:	4629      	mov	r1, r5
   1dbba:	f006 fc64 	bl	24486 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dbbe:	7b6b      	ldrb	r3, [r5, #13]
   1dbc0:	f023 0302 	bic.w	r3, r3, #2
   1dbc4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1dbc6:	2300      	movs	r3, #0
   1dbc8:	60ab      	str	r3, [r5, #8]
   1dbca:	f105 0018 	add.w	r0, r5, #24
   1dbce:	f006 fde1 	bl	24794 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1dbd2:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
   1dbd6:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dbd8:	42bc      	cmp	r4, r7
   1dbda:	d01e      	beq.n	1dc1a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1dbdc:	b1ec      	cbz	r4, 1dc1a <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1dbde:	4620      	mov	r0, r4
   1dbe0:	f006 fc10 	bl	24404 <pended_on_thread>
   1dbe4:	4621      	mov	r1, r4
   1dbe6:	f006 fc4e 	bl	24486 <z_priq_dumb_remove>
   1dbea:	7b63      	ldrb	r3, [r4, #13]
   1dbec:	f023 0302 	bic.w	r3, r3, #2
   1dbf0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1dbf2:	2600      	movs	r6, #0
   1dbf4:	60a6      	str	r6, [r4, #8]
   1dbf6:	f104 0018 	add.w	r0, r4, #24
   1dbfa:	f006 fdcb 	bl	24794 <z_abort_timeout>
   1dbfe:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1dc02:	4620      	mov	r0, r4
   1dc04:	f7ff fe6c 	bl	1d8e0 <ready_thread>
   1dc08:	e7e5      	b.n	1dbd6 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dc0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc0e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1dc10:	4601      	mov	r1, r0
   1dc12:	4805      	ldr	r0, [pc, #20]	; (1dc28 <end_thread+0x98>)
   1dc14:	f006 fc37 	bl	24486 <z_priq_dumb_remove>
}
   1dc18:	e7c9      	b.n	1dbae <end_thread+0x1e>
		update_cache(1);
   1dc1a:	2001      	movs	r0, #1
   1dc1c:	f7ff fda0 	bl	1d760 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1dc20:	4628      	mov	r0, r5
   1dc22:	f7ff f91b 	bl	1ce5c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1dc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dc28:	2000d52c 	.word	0x2000d52c

0001dc2c <z_sched_init>:
{
   1dc2c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1dc2e:	4804      	ldr	r0, [pc, #16]	; (1dc40 <z_sched_init+0x14>)
   1dc30:	f006 fd5e 	bl	246f0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1dc34:	2100      	movs	r1, #0
   1dc36:	4608      	mov	r0, r1
   1dc38:	f7ff fd24 	bl	1d684 <k_sched_time_slice_set>
}
   1dc3c:	bd08      	pop	{r3, pc}
   1dc3e:	bf00      	nop
   1dc40:	2000d528 	.word	0x2000d528

0001dc44 <z_impl_k_yield>:
{
   1dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc46:	f04f 0320 	mov.w	r3, #32
   1dc4a:	f3ef 8611 	mrs	r6, BASEPRI
   1dc4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc52:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1dc56:	4c1c      	ldr	r4, [pc, #112]	; (1dcc8 <z_impl_k_yield+0x84>)
   1dc58:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dc5a:	7b4b      	ldrb	r3, [r1, #13]
   1dc5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc60:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1dc62:	f104 0720 	add.w	r7, r4, #32
   1dc66:	4638      	mov	r0, r7
   1dc68:	f006 fc0d 	bl	24486 <z_priq_dumb_remove>
	queue_thread(_current);
   1dc6c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1dc6e:	7b6b      	ldrb	r3, [r5, #13]
   1dc70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1dc74:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1dc76:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc78:	42bc      	cmp	r4, r7
   1dc7a:	d023      	beq.n	1dcc4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dc7c:	b16c      	cbz	r4, 1dc9a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dc7e:	4621      	mov	r1, r4
   1dc80:	4628      	mov	r0, r5
   1dc82:	f006 fbc1 	bl	24408 <z_sched_prio_cmp>
   1dc86:	2800      	cmp	r0, #0
   1dc88:	dc16      	bgt.n	1dcb8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dc8a:	b134      	cbz	r4, 1dc9a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1dc8c:	4b0e      	ldr	r3, [pc, #56]	; (1dcc8 <z_impl_k_yield+0x84>)
   1dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dc90:	429c      	cmp	r4, r3
   1dc92:	d002      	beq.n	1dc9a <z_impl_k_yield+0x56>
   1dc94:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dc96:	2c00      	cmp	r4, #0
   1dc98:	d1f0      	bne.n	1dc7c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1dc9a:	4b0b      	ldr	r3, [pc, #44]	; (1dcc8 <z_impl_k_yield+0x84>)
   1dc9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1dc9e:	f103 0120 	add.w	r1, r3, #32
   1dca2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1dca4:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1dca6:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1dca8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1dcaa:	2001      	movs	r0, #1
   1dcac:	f7ff fd58 	bl	1d760 <update_cache>
   1dcb0:	4630      	mov	r0, r6
   1dcb2:	f7f6 f87f 	bl	13db4 <arch_swap>
}
   1dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1dcb8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1dcba:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1dcbc:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1dcbe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1dcc0:	6065      	str	r5, [r4, #4]
}
   1dcc2:	e7f2      	b.n	1dcaa <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dcc4:	2400      	movs	r4, #0
   1dcc6:	e7d9      	b.n	1dc7c <z_impl_k_yield+0x38>
   1dcc8:	2000d50c 	.word	0x2000d50c

0001dccc <z_tick_sleep>:
{
   1dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   1dcd0:	ea50 0301 	orrs.w	r3, r0, r1
   1dcd4:	d038      	beq.n	1dd48 <z_tick_sleep+0x7c>
   1dcd6:	4604      	mov	r4, r0
   1dcd8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   1dcda:	f06f 0301 	mvn.w	r3, #1
   1dcde:	1a1b      	subs	r3, r3, r0
   1dce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dce4:	eb62 0201 	sbc.w	r2, r2, r1
   1dce8:	2b01      	cmp	r3, #1
   1dcea:	f172 0300 	sbcs.w	r3, r2, #0
   1dcee:	db2f      	blt.n	1dd50 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1dcf0:	f06f 0501 	mvn.w	r5, #1
   1dcf4:	1a2d      	subs	r5, r5, r0
   1dcf6:	f04f 0320 	mov.w	r3, #32
   1dcfa:	f3ef 8811 	mrs	r8, BASEPRI
   1dcfe:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd02:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1dd06:	4f14      	ldr	r7, [pc, #80]	; (1dd58 <z_tick_sleep+0x8c>)
   1dd08:	68b8      	ldr	r0, [r7, #8]
   1dd0a:	4b14      	ldr	r3, [pc, #80]	; (1dd5c <z_tick_sleep+0x90>)
   1dd0c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1dd0e:	f7ff fe45 	bl	1d99c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1dd12:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1dd14:	4622      	mov	r2, r4
   1dd16:	4633      	mov	r3, r6
   1dd18:	4911      	ldr	r1, [pc, #68]	; (1dd60 <z_tick_sleep+0x94>)
   1dd1a:	3018      	adds	r0, #24
   1dd1c:	f000 f902 	bl	1df24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1dd20:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1dd22:	7b53      	ldrb	r3, [r2, #13]
   1dd24:	f043 0310 	orr.w	r3, r3, #16
   1dd28:	7353      	strb	r3, [r2, #13]
   1dd2a:	4640      	mov	r0, r8
   1dd2c:	f7f6 f842 	bl	13db4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1dd30:	f006 fd90 	bl	24854 <sys_clock_tick_get_32>
   1dd34:	1a28      	subs	r0, r5, r0
   1dd36:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1dd3a:	2801      	cmp	r0, #1
   1dd3c:	f173 0300 	sbcs.w	r3, r3, #0
   1dd40:	da00      	bge.n	1dd44 <z_tick_sleep+0x78>
	return 0;
   1dd42:	2000      	movs	r0, #0
}
   1dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1dd48:	f7ff ff7c 	bl	1dc44 <z_impl_k_yield>
		return 0;
   1dd4c:	2000      	movs	r0, #0
   1dd4e:	e7f9      	b.n	1dd44 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1dd50:	f006 fd80 	bl	24854 <sys_clock_tick_get_32>
   1dd54:	1905      	adds	r5, r0, r4
   1dd56:	e7ce      	b.n	1dcf6 <z_tick_sleep+0x2a>
   1dd58:	2000d50c 	.word	0x2000d50c
   1dd5c:	2000d540 	.word	0x2000d540
   1dd60:	00024525 	.word	0x00024525

0001dd64 <z_impl_k_sleep>:
{
   1dd64:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dd66:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1dd6a:	bf08      	it	eq
   1dd6c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1dd70:	d01a      	beq.n	1dda8 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1dd72:	f7ff ffab 	bl	1dccc <z_tick_sleep>
   1dd76:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1dd78:	17c2      	asrs	r2, r0, #31
			return (t * to_hz + off) / from_hz;
   1dd7a:	0151      	lsls	r1, r2, #5
   1dd7c:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   1dd80:	0143      	lsls	r3, r0, #5
   1dd82:	1a1b      	subs	r3, r3, r0
   1dd84:	eb61 0102 	sbc.w	r1, r1, r2
   1dd88:	0088      	lsls	r0, r1, #2
   1dd8a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   1dd8e:	009b      	lsls	r3, r3, #2
   1dd90:	eb13 030c 	adds.w	r3, r3, ip
   1dd94:	eb42 0000 	adc.w	r0, r2, r0
   1dd98:	00c0      	lsls	r0, r0, #3
   1dd9a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   1dd9e:	f3c3 3310 	ubfx	r3, r3, #12, #17
   1dda2:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   1dda6:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   1dda8:	4b03      	ldr	r3, [pc, #12]	; (1ddb8 <z_impl_k_sleep+0x54>)
   1ddaa:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ddac:	f7ff fe86 	bl	1dabc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1ddb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ddb4:	e7f7      	b.n	1dda6 <z_impl_k_sleep+0x42>
   1ddb6:	bf00      	nop
   1ddb8:	2000d50c 	.word	0x2000d50c

0001ddbc <z_impl_z_current_get>:
}
   1ddbc:	4b01      	ldr	r3, [pc, #4]	; (1ddc4 <z_impl_z_current_get+0x8>)
   1ddbe:	6898      	ldr	r0, [r3, #8]
   1ddc0:	4770      	bx	lr
   1ddc2:	bf00      	nop
   1ddc4:	2000d50c 	.word	0x2000d50c

0001ddc8 <z_impl_k_is_preempt_thread>:
   1ddc8:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1ddcc:	b933      	cbnz	r3, 1dddc <z_impl_k_is_preempt_thread+0x14>
   1ddce:	4b05      	ldr	r3, [pc, #20]	; (1dde4 <z_impl_k_is_preempt_thread+0x1c>)
   1ddd0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1ddd2:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1ddd4:	2b7f      	cmp	r3, #127	; 0x7f
   1ddd6:	d803      	bhi.n	1dde0 <z_impl_k_is_preempt_thread+0x18>
   1ddd8:	2001      	movs	r0, #1
   1ddda:	4770      	bx	lr
   1dddc:	2000      	movs	r0, #0
   1ddde:	4770      	bx	lr
   1dde0:	2000      	movs	r0, #0
}
   1dde2:	4770      	bx	lr
   1dde4:	2000d50c 	.word	0x2000d50c

0001dde8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1dde8:	b538      	push	{r3, r4, r5, lr}
   1ddea:	f04f 0320 	mov.w	r3, #32
   1ddee:	f3ef 8511 	mrs	r5, BASEPRI
   1ddf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ddf6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ddfa:	7b43      	ldrb	r3, [r0, #13]
   1ddfc:	f013 0f08 	tst.w	r3, #8
   1de00:	d004      	beq.n	1de0c <z_thread_abort+0x24>
	__asm__ volatile(
   1de02:	f385 8811 	msr	BASEPRI, r5
   1de06:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1de0a:	bd38      	pop	{r3, r4, r5, pc}
   1de0c:	4604      	mov	r4, r0
	end_thread(thread);
   1de0e:	f7ff febf 	bl	1db90 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1de12:	4b08      	ldr	r3, [pc, #32]	; (1de34 <z_thread_abort+0x4c>)
   1de14:	689b      	ldr	r3, [r3, #8]
   1de16:	42a3      	cmp	r3, r4
   1de18:	d004      	beq.n	1de24 <z_thread_abort+0x3c>
   1de1a:	f385 8811 	msr	BASEPRI, r5
   1de1e:	f3bf 8f6f 	isb	sy
   1de22:	e7f2      	b.n	1de0a <z_thread_abort+0x22>
   1de24:	f3ef 8305 	mrs	r3, IPSR
   1de28:	2b00      	cmp	r3, #0
   1de2a:	d1f6      	bne.n	1de1a <z_thread_abort+0x32>
   1de2c:	4628      	mov	r0, r5
   1de2e:	f7f5 ffc1 	bl	13db4 <arch_swap>
	return ret;
   1de32:	e7f2      	b.n	1de1a <z_thread_abort+0x32>
   1de34:	2000d50c 	.word	0x2000d50c

0001de38 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1de38:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   1de3c:	b083      	sub	sp, #12
   1de3e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1de40:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   1de44:	e9cd bc00 	strd	fp, ip, [sp]
   1de48:	f7ff fdc4 	bl	1d9d4 <z_pend_curr>

	if (data != NULL) {
   1de4c:	b11c      	cbz	r4, 1de56 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   1de4e:	4b03      	ldr	r3, [pc, #12]	; (1de5c <z_sched_wait+0x24>)
   1de50:	689b      	ldr	r3, [r3, #8]
   1de52:	695b      	ldr	r3, [r3, #20]
   1de54:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1de56:	b003      	add	sp, #12
   1de58:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   1de5c:	2000d50c 	.word	0x2000d50c

0001de60 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1de60:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1de62:	4806      	ldr	r0, [pc, #24]	; (1de7c <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1de64:	4a06      	ldr	r2, [pc, #24]	; (1de80 <z_data_copy+0x20>)
   1de66:	1a12      	subs	r2, r2, r0
   1de68:	4906      	ldr	r1, [pc, #24]	; (1de84 <z_data_copy+0x24>)
   1de6a:	f006 fe2f 	bl	24acc <memcpy>
   1de6e:	4a06      	ldr	r2, [pc, #24]	; (1de88 <z_data_copy+0x28>)
   1de70:	4906      	ldr	r1, [pc, #24]	; (1de8c <z_data_copy+0x2c>)
   1de72:	4807      	ldr	r0, [pc, #28]	; (1de90 <z_data_copy+0x30>)
   1de74:	f006 fe2a 	bl	24acc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1de78:	bd08      	pop	{r3, pc}
   1de7a:	bf00      	nop
   1de7c:	2000c500 	.word	0x2000c500
   1de80:	2000c7b8 	.word	0x2000c7b8
   1de84:	00027720 	.word	0x00027720
   1de88:	00000000 	.word	0x00000000
   1de8c:	00027708 	.word	0x00027708
   1de90:	2000c500 	.word	0x2000c500

0001de94 <first>:
	return list->head == list;
   1de94:	4b03      	ldr	r3, [pc, #12]	; (1dea4 <first+0x10>)
   1de96:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de98:	4298      	cmp	r0, r3
   1de9a:	d000      	beq.n	1de9e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1de9c:	4770      	bx	lr
   1de9e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1dea0:	e7fc      	b.n	1de9c <first+0x8>
   1dea2:	bf00      	nop
   1dea4:	2000c5c0 	.word	0x2000c5c0

0001dea8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dea8:	b130      	cbz	r0, 1deb8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1deaa:	4a04      	ldr	r2, [pc, #16]	; (1debc <next+0x14>)
   1deac:	6852      	ldr	r2, [r2, #4]
   1deae:	4290      	cmp	r0, r2
   1deb0:	d001      	beq.n	1deb6 <next+0xe>
   1deb2:	6800      	ldr	r0, [r0, #0]
   1deb4:	4770      	bx	lr
   1deb6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1deb8:	4770      	bx	lr
   1deba:	bf00      	nop
   1debc:	2000c5c0 	.word	0x2000c5c0

0001dec0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1dec0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1dec2:	4b04      	ldr	r3, [pc, #16]	; (1ded4 <elapsed+0x14>)
   1dec4:	681b      	ldr	r3, [r3, #0]
   1dec6:	b10b      	cbz	r3, 1decc <elapsed+0xc>
   1dec8:	2000      	movs	r0, #0
}
   1deca:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1decc:	f7f7 ff34 	bl	15d38 <sys_clock_elapsed>
   1ded0:	e7fb      	b.n	1deca <elapsed+0xa>
   1ded2:	bf00      	nop
   1ded4:	2000d54c 	.word	0x2000d54c

0001ded8 <next_timeout>:

static int32_t next_timeout(void)
{
   1ded8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1deda:	f7ff ffdb 	bl	1de94 <first>
   1dede:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1dee0:	f7ff ffee 	bl	1dec0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1dee4:	b18c      	cbz	r4, 1df0a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1dee6:	6923      	ldr	r3, [r4, #16]
   1dee8:	6962      	ldr	r2, [r4, #20]
   1deea:	1a1b      	subs	r3, r3, r0
   1deec:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1def0:	2b01      	cmp	r3, #1
   1def2:	f172 0100 	sbcs.w	r1, r2, #0
   1def6:	db11      	blt.n	1df1c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1def8:	4618      	mov	r0, r3
   1defa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1defe:	f172 0300 	sbcs.w	r3, r2, #0
   1df02:	db04      	blt.n	1df0e <next_timeout+0x36>
   1df04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1df08:	e001      	b.n	1df0e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1df0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1df0e:	4b04      	ldr	r3, [pc, #16]	; (1df20 <next_timeout+0x48>)
   1df10:	691b      	ldr	r3, [r3, #16]
   1df12:	b113      	cbz	r3, 1df1a <next_timeout+0x42>
   1df14:	4283      	cmp	r3, r0
   1df16:	da00      	bge.n	1df1a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1df18:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1df1a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1df1c:	2000      	movs	r0, #0
   1df1e:	e7f6      	b.n	1df0e <next_timeout+0x36>
   1df20:	2000d50c 	.word	0x2000d50c

0001df24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1df24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1df28:	bf08      	it	eq
   1df2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1df2e:	d07f      	beq.n	1e030 <z_add_timeout+0x10c>
{
   1df30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df34:	4604      	mov	r4, r0
   1df36:	4691      	mov	r9, r2
   1df38:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1df3a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1df3c:	2300      	movs	r3, #0
	__asm__ volatile(
   1df3e:	f04f 0220 	mov.w	r2, #32
   1df42:	f3ef 8711 	mrs	r7, BASEPRI
   1df46:	f382 8812 	msr	BASEPRI_MAX, r2
   1df4a:	f3bf 8f6f 	isb	sy
   1df4e:	e021      	b.n	1df94 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1df50:	f7ff ffb6 	bl	1dec0 <elapsed>
   1df54:	eb19 0800 	adds.w	r8, r9, r0
   1df58:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1df5c:	f118 0301 	adds.w	r3, r8, #1
   1df60:	f140 0000 	adc.w	r0, r0, #0
   1df64:	6123      	str	r3, [r4, #16]
   1df66:	6160      	str	r0, [r4, #20]
   1df68:	e038      	b.n	1dfdc <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1df6a:	1a51      	subs	r1, r2, r1
   1df6c:	eb66 0303 	sbc.w	r3, r6, r3
   1df70:	6101      	str	r1, [r0, #16]
   1df72:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   1df74:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   1df76:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1df78:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1df7a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1df7c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1df7e:	2800      	cmp	r0, #0
   1df80:	d040      	beq.n	1e004 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1df82:	f7ff ff87 	bl	1de94 <first>
   1df86:	4284      	cmp	r4, r0
   1df88:	d043      	beq.n	1e012 <z_add_timeout+0xee>
	__asm__ volatile(
   1df8a:	f387 8811 	msr	BASEPRI, r7
   1df8e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1df92:	2301      	movs	r3, #1
   1df94:	2b00      	cmp	r3, #0
   1df96:	d149      	bne.n	1e02c <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1df98:	f06f 0201 	mvn.w	r2, #1
   1df9c:	ebb2 0209 	subs.w	r2, r2, r9
   1dfa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dfa4:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1dfa8:	2b00      	cmp	r3, #0
   1dfaa:	dbd1      	blt.n	1df50 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1dfac:	4b21      	ldr	r3, [pc, #132]	; (1e034 <z_add_timeout+0x110>)
   1dfae:	681a      	ldr	r2, [r3, #0]
   1dfb0:	685b      	ldr	r3, [r3, #4]
   1dfb2:	eb19 0202 	adds.w	r2, r9, r2
   1dfb6:	eb43 0305 	adc.w	r3, r3, r5
   1dfba:	f06f 0801 	mvn.w	r8, #1
   1dfbe:	ebb8 0802 	subs.w	r8, r8, r2
   1dfc2:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
   1dfc6:	4641      	mov	r1, r8
   1dfc8:	461a      	mov	r2, r3
   1dfca:	f1b8 0f01 	cmp.w	r8, #1
   1dfce:	f173 0300 	sbcs.w	r3, r3, #0
   1dfd2:	da01      	bge.n	1dfd8 <z_add_timeout+0xb4>
   1dfd4:	2101      	movs	r1, #1
   1dfd6:	2200      	movs	r2, #0
   1dfd8:	6121      	str	r1, [r4, #16]
   1dfda:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1dfdc:	f7ff ff5a 	bl	1de94 <first>
   1dfe0:	2800      	cmp	r0, #0
   1dfe2:	d0cc      	beq.n	1df7e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
   1dfe4:	6902      	ldr	r2, [r0, #16]
   1dfe6:	6946      	ldr	r6, [r0, #20]
   1dfe8:	6921      	ldr	r1, [r4, #16]
   1dfea:	6963      	ldr	r3, [r4, #20]
   1dfec:	4291      	cmp	r1, r2
   1dfee:	eb73 0c06 	sbcs.w	ip, r3, r6
   1dff2:	dbba      	blt.n	1df6a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   1dff4:	1a89      	subs	r1, r1, r2
   1dff6:	eb63 0306 	sbc.w	r3, r3, r6
   1dffa:	6121      	str	r1, [r4, #16]
   1dffc:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1dffe:	f7ff ff53 	bl	1dea8 <next>
   1e002:	e7ed      	b.n	1dfe0 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
   1e004:	4b0c      	ldr	r3, [pc, #48]	; (1e038 <z_add_timeout+0x114>)
   1e006:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1e008:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   1e00a:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1e00c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1e00e:	605c      	str	r4, [r3, #4]
}
   1e010:	e7b7      	b.n	1df82 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e012:	f7ff ff61 	bl	1ded8 <next_timeout>

			if (next_time == 0 ||
   1e016:	4603      	mov	r3, r0
   1e018:	b118      	cbz	r0, 1e022 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
   1e01a:	4a08      	ldr	r2, [pc, #32]	; (1e03c <z_add_timeout+0x118>)
   1e01c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1e01e:	4282      	cmp	r2, r0
   1e020:	d0b3      	beq.n	1df8a <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
   1e022:	2100      	movs	r1, #0
   1e024:	4618      	mov	r0, r3
   1e026:	f7f7 fe53 	bl	15cd0 <sys_clock_set_timeout>
   1e02a:	e7ae      	b.n	1df8a <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e030:	4770      	bx	lr
   1e032:	bf00      	nop
   1e034:	2000cab0 	.word	0x2000cab0
   1e038:	2000c5c0 	.word	0x2000c5c0
   1e03c:	2000d50c 	.word	0x2000d50c

0001e040 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1e040:	b570      	push	{r4, r5, r6, lr}
   1e042:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e044:	f7ff fbf6 	bl	1d834 <z_time_slice>
	__asm__ volatile(
   1e048:	f04f 0320 	mov.w	r3, #32
   1e04c:	f3ef 8511 	mrs	r5, BASEPRI
   1e050:	f383 8812 	msr	BASEPRI_MAX, r3
   1e054:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1e058:	4b28      	ldr	r3, [pc, #160]	; (1e0fc <sys_clock_announce+0xbc>)
   1e05a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e05c:	e020      	b.n	1e0a0 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1e05e:	4828      	ldr	r0, [pc, #160]	; (1e100 <sys_clock_announce+0xc0>)
   1e060:	6801      	ldr	r1, [r0, #0]
   1e062:	6846      	ldr	r6, [r0, #4]
   1e064:	1889      	adds	r1, r1, r2
   1e066:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
   1e06a:	6001      	str	r1, [r0, #0]
   1e06c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
   1e06e:	1a9b      	subs	r3, r3, r2
   1e070:	4a22      	ldr	r2, [pc, #136]	; (1e0fc <sys_clock_announce+0xbc>)
   1e072:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1e074:	2200      	movs	r2, #0
   1e076:	2300      	movs	r3, #0
   1e078:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1e07c:	4620      	mov	r0, r4
   1e07e:	f006 fb72 	bl	24766 <remove_timeout>
	__asm__ volatile(
   1e082:	f385 8811 	msr	BASEPRI, r5
   1e086:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1e08a:	68a3      	ldr	r3, [r4, #8]
   1e08c:	4620      	mov	r0, r4
   1e08e:	4798      	blx	r3
	__asm__ volatile(
   1e090:	f04f 0320 	mov.w	r3, #32
   1e094:	f3ef 8511 	mrs	r5, BASEPRI
   1e098:	f383 8812 	msr	BASEPRI_MAX, r3
   1e09c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e0a0:	f7ff fef8 	bl	1de94 <first>
   1e0a4:	4604      	mov	r4, r0
   1e0a6:	b140      	cbz	r0, 1e0ba <sys_clock_announce+0x7a>
   1e0a8:	6902      	ldr	r2, [r0, #16]
   1e0aa:	6941      	ldr	r1, [r0, #20]
   1e0ac:	4b13      	ldr	r3, [pc, #76]	; (1e0fc <sys_clock_announce+0xbc>)
   1e0ae:	681b      	ldr	r3, [r3, #0]
   1e0b0:	17d8      	asrs	r0, r3, #31
   1e0b2:	4293      	cmp	r3, r2
   1e0b4:	eb70 0101 	sbcs.w	r1, r0, r1
   1e0b8:	dad1      	bge.n	1e05e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1e0ba:	b144      	cbz	r4, 1e0ce <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1e0bc:	4b0f      	ldr	r3, [pc, #60]	; (1e0fc <sys_clock_announce+0xbc>)
   1e0be:	6819      	ldr	r1, [r3, #0]
   1e0c0:	6923      	ldr	r3, [r4, #16]
   1e0c2:	6962      	ldr	r2, [r4, #20]
   1e0c4:	1a5b      	subs	r3, r3, r1
   1e0c6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   1e0ca:	6123      	str	r3, [r4, #16]
   1e0cc:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   1e0ce:	4a0c      	ldr	r2, [pc, #48]	; (1e100 <sys_clock_announce+0xc0>)
   1e0d0:	4e0a      	ldr	r6, [pc, #40]	; (1e0fc <sys_clock_announce+0xbc>)
   1e0d2:	6830      	ldr	r0, [r6, #0]
   1e0d4:	6813      	ldr	r3, [r2, #0]
   1e0d6:	6851      	ldr	r1, [r2, #4]
   1e0d8:	181b      	adds	r3, r3, r0
   1e0da:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   1e0de:	6013      	str	r3, [r2, #0]
   1e0e0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   1e0e2:	2400      	movs	r4, #0
   1e0e4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1e0e6:	f7ff fef7 	bl	1ded8 <next_timeout>
   1e0ea:	4621      	mov	r1, r4
   1e0ec:	f7f7 fdf0 	bl	15cd0 <sys_clock_set_timeout>
	__asm__ volatile(
   1e0f0:	f385 8811 	msr	BASEPRI, r5
   1e0f4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e0f8:	bd70      	pop	{r4, r5, r6, pc}
   1e0fa:	bf00      	nop
   1e0fc:	2000d54c 	.word	0x2000d54c
   1e100:	2000cab0 	.word	0x2000cab0

0001e104 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1e104:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1e106:	2300      	movs	r3, #0
	__asm__ volatile(
   1e108:	f04f 0220 	mov.w	r2, #32
   1e10c:	f3ef 8411 	mrs	r4, BASEPRI
   1e110:	f382 8812 	msr	BASEPRI_MAX, r2
   1e114:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1e118:	4618      	mov	r0, r3
   1e11a:	4619      	mov	r1, r3
   1e11c:	e00c      	b.n	1e138 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
   1e11e:	f7f7 fe0b 	bl	15d38 <sys_clock_elapsed>
   1e122:	4a07      	ldr	r2, [pc, #28]	; (1e140 <sys_clock_tick_get+0x3c>)
   1e124:	6813      	ldr	r3, [r2, #0]
   1e126:	6851      	ldr	r1, [r2, #4]
   1e128:	18c0      	adds	r0, r0, r3
   1e12a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1e12e:	f384 8811 	msr	BASEPRI, r4
   1e132:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e136:	2301      	movs	r3, #1
   1e138:	2b00      	cmp	r3, #0
   1e13a:	d0f0      	beq.n	1e11e <sys_clock_tick_get+0x1a>
	}
	return t;
}
   1e13c:	bd10      	pop	{r4, pc}
   1e13e:	bf00      	nop
   1e140:	2000cab0 	.word	0x2000cab0

0001e144 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1e144:	b570      	push	{r4, r5, r6, lr}
   1e146:	4604      	mov	r4, r0
	__asm__ volatile(
   1e148:	f04f 0320 	mov.w	r3, #32
   1e14c:	f3ef 8611 	mrs	r6, BASEPRI
   1e150:	f383 8812 	msr	BASEPRI_MAX, r3
   1e154:	f3bf 8f6f 	isb	sy
   1e158:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e15a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1e15c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1e15e:	ea52 0103 	orrs.w	r1, r2, r3
   1e162:	d005      	beq.n	1e170 <z_timer_expiration_handler+0x2c>
   1e164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e168:	bf08      	it	eq
   1e16a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1e16e:	d127      	bne.n	1e1c0 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1e170:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e172:	3301      	adds	r3, #1
   1e174:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1e176:	6a23      	ldr	r3, [r4, #32]
   1e178:	b173      	cbz	r3, 1e198 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1e17a:	f386 8811 	msr	BASEPRI, r6
   1e17e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1e182:	6a23      	ldr	r3, [r4, #32]
   1e184:	4620      	mov	r0, r4
   1e186:	4798      	blx	r3
	__asm__ volatile(
   1e188:	f04f 0320 	mov.w	r3, #32
   1e18c:	f3ef 8511 	mrs	r5, BASEPRI
   1e190:	f383 8812 	msr	BASEPRI_MAX, r3
   1e194:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e198:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1e19c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e19e:	42a3      	cmp	r3, r4
   1e1a0:	d014      	beq.n	1e1cc <z_timer_expiration_handler+0x88>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1e1a2:	b19c      	cbz	r4, 1e1cc <z_timer_expiration_handler+0x88>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1e1a4:	4620      	mov	r0, r4
   1e1a6:	f006 f939 	bl	2441c <z_unpend_thread_no_timeout>
   1e1aa:	2300      	movs	r3, #0
   1e1ac:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1e1b0:	f385 8811 	msr	BASEPRI, r5
   1e1b4:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1e1b8:	4620      	mov	r0, r4
   1e1ba:	f006 f997 	bl	244ec <z_ready_thread>
}
   1e1be:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e1c0:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1e1c4:	4904      	ldr	r1, [pc, #16]	; (1e1d8 <z_timer_expiration_handler+0x94>)
   1e1c6:	f7ff fead 	bl	1df24 <z_add_timeout>
   1e1ca:	e7d1      	b.n	1e170 <z_timer_expiration_handler+0x2c>
   1e1cc:	f385 8811 	msr	BASEPRI, r5
   1e1d0:	f3bf 8f6f 	isb	sy
		return;
   1e1d4:	e7f3      	b.n	1e1be <z_timer_expiration_handler+0x7a>
   1e1d6:	bf00      	nop
   1e1d8:	0001e145 	.word	0x0001e145

0001e1dc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1e0:	461d      	mov	r5, r3
   1e1e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e1e6:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e1ec:	bf08      	it	eq
   1e1ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1e1f2:	d02f      	beq.n	1e254 <z_impl_k_timer_start+0x78>
   1e1f4:	4604      	mov	r4, r0
   1e1f6:	4616      	mov	r6, r2
   1e1f8:	4613      	mov	r3, r2
   1e1fa:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e1fc:	4642      	mov	r2, r8
   1e1fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1e202:	bf08      	it	eq
   1e204:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
   1e208:	d00d      	beq.n	1e226 <z_impl_k_timer_start+0x4a>
   1e20a:	ea58 0c07 	orrs.w	ip, r8, r7
   1e20e:	d00a      	beq.n	1e226 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   1e210:	f06f 0c01 	mvn.w	ip, #1
   1e214:	ebbc 0c08 	subs.w	ip, ip, r8
   1e218:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1e21c:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e220:	f1bc 0f00 	cmp.w	ip, #0
   1e224:	db18      	blt.n	1e258 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e226:	f06f 0201 	mvn.w	r2, #1
   1e22a:	1ad2      	subs	r2, r2, r3
   1e22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e230:	eb62 0201 	sbc.w	r2, r2, r1
   1e234:	2a00      	cmp	r2, #0
   1e236:	db1c      	blt.n	1e272 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1e238:	4620      	mov	r0, r4
   1e23a:	f006 faab 	bl	24794 <z_abort_timeout>
	timer->period = period;
   1e23e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
   1e242:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
   1e244:	2300      	movs	r3, #0
   1e246:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e248:	4632      	mov	r2, r6
   1e24a:	462b      	mov	r3, r5
   1e24c:	490d      	ldr	r1, [pc, #52]	; (1e284 <z_impl_k_timer_start+0xa8>)
   1e24e:	4620      	mov	r0, r4
   1e250:	f7ff fe68 	bl	1df24 <z_add_timeout>
		     duration);
}
   1e254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1e258:	3a01      	subs	r2, #1
   1e25a:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
   1e25e:	4690      	mov	r8, r2
   1e260:	4607      	mov	r7, r0
   1e262:	2a01      	cmp	r2, #1
   1e264:	f170 0200 	sbcs.w	r2, r0, #0
   1e268:	dadd      	bge.n	1e226 <z_impl_k_timer_start+0x4a>
   1e26a:	f04f 0801 	mov.w	r8, #1
   1e26e:	2700      	movs	r7, #0
   1e270:	e7d9      	b.n	1e226 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e272:	1e5e      	subs	r6, r3, #1
   1e274:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
   1e278:	460d      	mov	r5, r1
   1e27a:	2900      	cmp	r1, #0
   1e27c:	dadc      	bge.n	1e238 <z_impl_k_timer_start+0x5c>
   1e27e:	2600      	movs	r6, #0
   1e280:	4635      	mov	r5, r6
   1e282:	e7d9      	b.n	1e238 <z_impl_k_timer_start+0x5c>
   1e284:	0001e145 	.word	0x0001e145

0001e288 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e28c:	b087      	sub	sp, #28
   1e28e:	4682      	mov	sl, r0
   1e290:	460f      	mov	r7, r1
   1e292:	4693      	mov	fp, r2
   1e294:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1e296:	2500      	movs	r5, #0
	int events_registered = 0;
   1e298:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1e29a:	e02f      	b.n	1e2fc <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
   1e29c:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1e29e:	689b      	ldr	r3, [r3, #8]
   1e2a0:	b1cb      	cbz	r3, 1e2d6 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1e2a2:	f04f 0902 	mov.w	r9, #2
			return true;
   1e2a6:	2301      	movs	r3, #1
   1e2a8:	e015      	b.n	1e2d6 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   1e2aa:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1e2ac:	681b      	ldr	r3, [r3, #0]
   1e2ae:	b193      	cbz	r3, 1e2d6 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1e2b0:	f04f 0904 	mov.w	r9, #4
			return true;
   1e2b4:	2301      	movs	r3, #1
   1e2b6:	e00e      	b.n	1e2d6 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
   1e2b8:	6923      	ldr	r3, [r4, #16]
   1e2ba:	689b      	ldr	r3, [r3, #8]
   1e2bc:	b15b      	cbz	r3, 1e2d6 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
   1e2be:	f04f 0901 	mov.w	r9, #1
			return true;
   1e2c2:	464b      	mov	r3, r9
   1e2c4:	e007      	b.n	1e2d6 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
   1e2c6:	6923      	ldr	r3, [r4, #16]
   1e2c8:	6a1b      	ldr	r3, [r3, #32]
   1e2ca:	b123      	cbz	r3, 1e2d6 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1e2cc:	f04f 0910 	mov.w	r9, #16
			return true;
   1e2d0:	2301      	movs	r3, #1
   1e2d2:	e000      	b.n	1e2d6 <register_events+0x4e>
	switch (event->type) {
   1e2d4:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
   1e2d6:	2b00      	cmp	r3, #0
   1e2d8:	d03a      	beq.n	1e350 <register_events+0xc8>
	event->poller = NULL;
   1e2da:	2100      	movs	r1, #0
   1e2dc:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1e2de:	68e3      	ldr	r3, [r4, #12]
   1e2e0:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1e2e4:	ea49 0202 	orr.w	r2, r9, r2
   1e2e8:	f362 3352 	bfi	r3, r2, #13, #6
   1e2ec:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
   1e2ee:	f88b 1000 	strb.w	r1, [fp]
   1e2f2:	f386 8811 	msr	BASEPRI, r6
   1e2f6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e2fa:	3501      	adds	r5, #1
   1e2fc:	42bd      	cmp	r5, r7
   1e2fe:	f280 81b9 	bge.w	1e674 <register_events+0x3ec>
	__asm__ volatile(
   1e302:	f04f 0320 	mov.w	r3, #32
   1e306:	f3ef 8611 	mrs	r6, BASEPRI
   1e30a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e30e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   1e312:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1e316:	ea4f 0884 	mov.w	r8, r4, lsl #2
   1e31a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
   1e31e:	7b63      	ldrb	r3, [r4, #13]
   1e320:	f003 031f 	and.w	r3, r3, #31
   1e324:	3b01      	subs	r3, #1
   1e326:	2b07      	cmp	r3, #7
   1e328:	d8d4      	bhi.n	1e2d4 <register_events+0x4c>
   1e32a:	a201      	add	r2, pc, #4	; (adr r2, 1e330 <register_events+0xa8>)
   1e32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e330:	0001e2b9 	.word	0x0001e2b9
   1e334:	0001e29d 	.word	0x0001e29d
   1e338:	0001e2d5 	.word	0x0001e2d5
   1e33c:	0001e2ab 	.word	0x0001e2ab
   1e340:	0001e2d5 	.word	0x0001e2d5
   1e344:	0001e2d5 	.word	0x0001e2d5
   1e348:	0001e2d5 	.word	0x0001e2d5
   1e34c:	0001e2c7 	.word	0x0001e2c7
		} else if (!just_check && poller->is_polling) {
   1e350:	9b00      	ldr	r3, [sp, #0]
   1e352:	2b00      	cmp	r3, #0
   1e354:	d1cd      	bne.n	1e2f2 <register_events+0x6a>
   1e356:	f89b 3000 	ldrb.w	r3, [fp]
   1e35a:	2b00      	cmp	r3, #0
   1e35c:	d0c9      	beq.n	1e2f2 <register_events+0x6a>
	switch (event->type) {
   1e35e:	7b63      	ldrb	r3, [r4, #13]
   1e360:	f003 031f 	and.w	r3, r3, #31
   1e364:	3b01      	subs	r3, #1
   1e366:	2b07      	cmp	r3, #7
   1e368:	d848      	bhi.n	1e3fc <register_events+0x174>
   1e36a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e36e:	00cb      	.short	0x00cb
   1e370:	00470008 	.word	0x00470008
   1e374:	0047006d 	.word	0x0047006d
   1e378:	00470047 	.word	0x00470047
   1e37c:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
   1e37e:	6923      	ldr	r3, [r4, #16]
   1e380:	9304      	str	r3, [sp, #16]
   1e382:	f103 0210 	add.w	r2, r3, #16
   1e386:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1e388:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e38a:	429a      	cmp	r2, r3
   1e38c:	d02f      	beq.n	1e3ee <register_events+0x166>
   1e38e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1e390:	2b00      	cmp	r3, #0
   1e392:	d02c      	beq.n	1e3ee <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e394:	6898      	ldr	r0, [r3, #8]
   1e396:	f006 fabe 	bl	24916 <poller_thread>
   1e39a:	9005      	str	r0, [sp, #20]
   1e39c:	4658      	mov	r0, fp
   1e39e:	f006 faba 	bl	24916 <poller_thread>
   1e3a2:	4601      	mov	r1, r0
   1e3a4:	9003      	str	r0, [sp, #12]
   1e3a6:	9805      	ldr	r0, [sp, #20]
   1e3a8:	f006 f82e 	bl	24408 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e3ac:	2800      	cmp	r0, #0
   1e3ae:	dc1e      	bgt.n	1e3ee <register_events+0x166>
	return list->head == list;
   1e3b0:	9b04      	ldr	r3, [sp, #16]
   1e3b2:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e3b4:	9a02      	ldr	r2, [sp, #8]
   1e3b6:	429a      	cmp	r2, r3
   1e3b8:	d030      	beq.n	1e41c <register_events+0x194>
   1e3ba:	9404      	str	r4, [sp, #16]
   1e3bc:	9505      	str	r5, [sp, #20]
   1e3be:	9d02      	ldr	r5, [sp, #8]
   1e3c0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e3c2:	2c00      	cmp	r4, #0
   1e3c4:	d030      	beq.n	1e428 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e3c6:	68a0      	ldr	r0, [r4, #8]
   1e3c8:	f006 faa5 	bl	24916 <poller_thread>
   1e3cc:	4601      	mov	r1, r0
   1e3ce:	9803      	ldr	r0, [sp, #12]
   1e3d0:	f006 f81a 	bl	24408 <z_sched_prio_cmp>
   1e3d4:	2800      	cmp	r0, #0
   1e3d6:	dc17      	bgt.n	1e408 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e3d8:	2c00      	cmp	r4, #0
   1e3da:	d028      	beq.n	1e42e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
   1e3dc:	686b      	ldr	r3, [r5, #4]
   1e3de:	429c      	cmp	r4, r3
   1e3e0:	d02f      	beq.n	1e442 <register_events+0x1ba>
   1e3e2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e3e4:	2c00      	cmp	r4, #0
   1e3e6:	d1ec      	bne.n	1e3c2 <register_events+0x13a>
   1e3e8:	9c04      	ldr	r4, [sp, #16]
   1e3ea:	9d05      	ldr	r5, [sp, #20]
   1e3ec:	e021      	b.n	1e432 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
   1e3ee:	9a02      	ldr	r2, [sp, #8]
   1e3f0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e3f2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e3f6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e3f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e3fa:	6054      	str	r4, [r2, #4]
	event->poller = poller;
   1e3fc:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
   1e400:	9b01      	ldr	r3, [sp, #4]
   1e402:	3301      	adds	r3, #1
   1e404:	9301      	str	r3, [sp, #4]
   1e406:	e774      	b.n	1e2f2 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
   1e408:	9d05      	ldr	r5, [sp, #20]
   1e40a:	4622      	mov	r2, r4
   1e40c:	9c04      	ldr	r4, [sp, #16]
   1e40e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1e410:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e412:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   1e416:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e418:	6054      	str	r4, [r2, #4]
			return;
   1e41a:	e7ef      	b.n	1e3fc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e41c:	2300      	movs	r3, #0
   1e41e:	9404      	str	r4, [sp, #16]
   1e420:	9505      	str	r5, [sp, #20]
   1e422:	9d02      	ldr	r5, [sp, #8]
   1e424:	461c      	mov	r4, r3
   1e426:	e7cc      	b.n	1e3c2 <register_events+0x13a>
   1e428:	9c04      	ldr	r4, [sp, #16]
   1e42a:	9d05      	ldr	r5, [sp, #20]
   1e42c:	e001      	b.n	1e432 <register_events+0x1aa>
   1e42e:	9c04      	ldr	r4, [sp, #16]
   1e430:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1e432:	9a02      	ldr	r2, [sp, #8]
   1e434:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e436:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e43a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e43c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e43e:	6054      	str	r4, [r2, #4]
}
   1e440:	e7dc      	b.n	1e3fc <register_events+0x174>
   1e442:	9c04      	ldr	r4, [sp, #16]
   1e444:	9d05      	ldr	r5, [sp, #20]
   1e446:	e7f4      	b.n	1e432 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
   1e448:	6923      	ldr	r3, [r4, #16]
   1e44a:	9304      	str	r3, [sp, #16]
   1e44c:	f103 0210 	add.w	r2, r3, #16
   1e450:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1e452:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e454:	429a      	cmp	r2, r3
   1e456:	d02d      	beq.n	1e4b4 <register_events+0x22c>
   1e458:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1e45a:	b35b      	cbz	r3, 1e4b4 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e45c:	6898      	ldr	r0, [r3, #8]
   1e45e:	f006 fa5a 	bl	24916 <poller_thread>
   1e462:	9005      	str	r0, [sp, #20]
   1e464:	4658      	mov	r0, fp
   1e466:	f006 fa56 	bl	24916 <poller_thread>
   1e46a:	4601      	mov	r1, r0
   1e46c:	9003      	str	r0, [sp, #12]
   1e46e:	9805      	ldr	r0, [sp, #20]
   1e470:	f005 ffca 	bl	24408 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e474:	2800      	cmp	r0, #0
   1e476:	dc1d      	bgt.n	1e4b4 <register_events+0x22c>
	return list->head == list;
   1e478:	9b04      	ldr	r3, [sp, #16]
   1e47a:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e47c:	9a02      	ldr	r2, [sp, #8]
   1e47e:	429a      	cmp	r2, r3
   1e480:	d02a      	beq.n	1e4d8 <register_events+0x250>
   1e482:	9404      	str	r4, [sp, #16]
   1e484:	9505      	str	r5, [sp, #20]
   1e486:	9d02      	ldr	r5, [sp, #8]
   1e488:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e48a:	2c00      	cmp	r4, #0
   1e48c:	d02a      	beq.n	1e4e4 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e48e:	68a0      	ldr	r0, [r4, #8]
   1e490:	f006 fa41 	bl	24916 <poller_thread>
   1e494:	4601      	mov	r1, r0
   1e496:	9803      	ldr	r0, [sp, #12]
   1e498:	f005 ffb6 	bl	24408 <z_sched_prio_cmp>
   1e49c:	2800      	cmp	r0, #0
   1e49e:	dc11      	bgt.n	1e4c4 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e4a0:	b31c      	cbz	r4, 1e4ea <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
   1e4a2:	686b      	ldr	r3, [r5, #4]
   1e4a4:	429c      	cmp	r4, r3
   1e4a6:	d02a      	beq.n	1e4fe <register_events+0x276>
   1e4a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e4aa:	2c00      	cmp	r4, #0
   1e4ac:	d1ed      	bne.n	1e48a <register_events+0x202>
   1e4ae:	9c04      	ldr	r4, [sp, #16]
   1e4b0:	9d05      	ldr	r5, [sp, #20]
   1e4b2:	e01c      	b.n	1e4ee <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
   1e4b4:	9a02      	ldr	r2, [sp, #8]
   1e4b6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e4b8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e4bc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e4be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e4c0:	6054      	str	r4, [r2, #4]
		return;
   1e4c2:	e79b      	b.n	1e3fc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   1e4c4:	9d05      	ldr	r5, [sp, #20]
   1e4c6:	4622      	mov	r2, r4
   1e4c8:	9c04      	ldr	r4, [sp, #16]
   1e4ca:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1e4cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e4ce:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   1e4d2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e4d4:	6054      	str	r4, [r2, #4]
			return;
   1e4d6:	e791      	b.n	1e3fc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e4d8:	2300      	movs	r3, #0
   1e4da:	9404      	str	r4, [sp, #16]
   1e4dc:	9505      	str	r5, [sp, #20]
   1e4de:	9d02      	ldr	r5, [sp, #8]
   1e4e0:	461c      	mov	r4, r3
   1e4e2:	e7d2      	b.n	1e48a <register_events+0x202>
   1e4e4:	9c04      	ldr	r4, [sp, #16]
   1e4e6:	9d05      	ldr	r5, [sp, #20]
   1e4e8:	e001      	b.n	1e4ee <register_events+0x266>
   1e4ea:	9c04      	ldr	r4, [sp, #16]
   1e4ec:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1e4ee:	9a02      	ldr	r2, [sp, #8]
   1e4f0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e4f2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e4f6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e4f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e4fa:	6054      	str	r4, [r2, #4]
}
   1e4fc:	e77e      	b.n	1e3fc <register_events+0x174>
   1e4fe:	9c04      	ldr	r4, [sp, #16]
   1e500:	9d05      	ldr	r5, [sp, #20]
   1e502:	e7f4      	b.n	1e4ee <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
   1e504:	6922      	ldr	r2, [r4, #16]
   1e506:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1e508:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e50a:	429a      	cmp	r2, r3
   1e50c:	d02c      	beq.n	1e568 <register_events+0x2e0>
   1e50e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1e510:	b353      	cbz	r3, 1e568 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e512:	6898      	ldr	r0, [r3, #8]
   1e514:	f006 f9ff 	bl	24916 <poller_thread>
   1e518:	9004      	str	r0, [sp, #16]
   1e51a:	4658      	mov	r0, fp
   1e51c:	f006 f9fb 	bl	24916 <poller_thread>
   1e520:	4601      	mov	r1, r0
   1e522:	9003      	str	r0, [sp, #12]
   1e524:	9804      	ldr	r0, [sp, #16]
   1e526:	f005 ff6f 	bl	24408 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e52a:	2800      	cmp	r0, #0
   1e52c:	dc1c      	bgt.n	1e568 <register_events+0x2e0>
	return list->head == list;
   1e52e:	9b02      	ldr	r3, [sp, #8]
   1e530:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e532:	4293      	cmp	r3, r2
   1e534:	d02a      	beq.n	1e58c <register_events+0x304>
   1e536:	9404      	str	r4, [sp, #16]
   1e538:	9505      	str	r5, [sp, #20]
   1e53a:	9d02      	ldr	r5, [sp, #8]
   1e53c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e53e:	2c00      	cmp	r4, #0
   1e540:	d02a      	beq.n	1e598 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e542:	68a0      	ldr	r0, [r4, #8]
   1e544:	f006 f9e7 	bl	24916 <poller_thread>
   1e548:	4601      	mov	r1, r0
   1e54a:	9803      	ldr	r0, [sp, #12]
   1e54c:	f005 ff5c 	bl	24408 <z_sched_prio_cmp>
   1e550:	2800      	cmp	r0, #0
   1e552:	dc11      	bgt.n	1e578 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e554:	b31c      	cbz	r4, 1e59e <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
   1e556:	686b      	ldr	r3, [r5, #4]
   1e558:	429c      	cmp	r4, r3
   1e55a:	d02a      	beq.n	1e5b2 <register_events+0x32a>
   1e55c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e55e:	2c00      	cmp	r4, #0
   1e560:	d1ed      	bne.n	1e53e <register_events+0x2b6>
   1e562:	9c04      	ldr	r4, [sp, #16]
   1e564:	9d05      	ldr	r5, [sp, #20]
   1e566:	e01c      	b.n	1e5a2 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
   1e568:	9a02      	ldr	r2, [sp, #8]
   1e56a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e56c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e570:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e572:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e574:	6054      	str	r4, [r2, #4]
		return;
   1e576:	e741      	b.n	1e3fc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   1e578:	9d05      	ldr	r5, [sp, #20]
   1e57a:	4622      	mov	r2, r4
   1e57c:	9c04      	ldr	r4, [sp, #16]
   1e57e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1e580:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e582:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   1e586:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e588:	6054      	str	r4, [r2, #4]
			return;
   1e58a:	e737      	b.n	1e3fc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e58c:	2300      	movs	r3, #0
   1e58e:	9404      	str	r4, [sp, #16]
   1e590:	9505      	str	r5, [sp, #20]
   1e592:	9d02      	ldr	r5, [sp, #8]
   1e594:	461c      	mov	r4, r3
   1e596:	e7d2      	b.n	1e53e <register_events+0x2b6>
   1e598:	9c04      	ldr	r4, [sp, #16]
   1e59a:	9d05      	ldr	r5, [sp, #20]
   1e59c:	e001      	b.n	1e5a2 <register_events+0x31a>
   1e59e:	9c04      	ldr	r4, [sp, #16]
   1e5a0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1e5a2:	9a02      	ldr	r2, [sp, #8]
   1e5a4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e5a6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e5aa:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e5ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e5ae:	6054      	str	r4, [r2, #4]
}
   1e5b0:	e724      	b.n	1e3fc <register_events+0x174>
   1e5b2:	9c04      	ldr	r4, [sp, #16]
   1e5b4:	9d05      	ldr	r5, [sp, #20]
   1e5b6:	e7f4      	b.n	1e5a2 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
   1e5b8:	6923      	ldr	r3, [r4, #16]
   1e5ba:	9304      	str	r3, [sp, #16]
   1e5bc:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1e5c0:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1e5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e5c4:	429a      	cmp	r2, r3
   1e5c6:	d02d      	beq.n	1e624 <register_events+0x39c>
   1e5c8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1e5ca:	b35b      	cbz	r3, 1e624 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e5cc:	6898      	ldr	r0, [r3, #8]
   1e5ce:	f006 f9a2 	bl	24916 <poller_thread>
   1e5d2:	9005      	str	r0, [sp, #20]
   1e5d4:	4658      	mov	r0, fp
   1e5d6:	f006 f99e 	bl	24916 <poller_thread>
   1e5da:	4601      	mov	r1, r0
   1e5dc:	9003      	str	r0, [sp, #12]
   1e5de:	9805      	ldr	r0, [sp, #20]
   1e5e0:	f005 ff12 	bl	24408 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e5e4:	2800      	cmp	r0, #0
   1e5e6:	dc1d      	bgt.n	1e624 <register_events+0x39c>
	return list->head == list;
   1e5e8:	9b04      	ldr	r3, [sp, #16]
   1e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5ec:	9a02      	ldr	r2, [sp, #8]
   1e5ee:	429a      	cmp	r2, r3
   1e5f0:	d02a      	beq.n	1e648 <register_events+0x3c0>
   1e5f2:	9404      	str	r4, [sp, #16]
   1e5f4:	9505      	str	r5, [sp, #20]
   1e5f6:	9d02      	ldr	r5, [sp, #8]
   1e5f8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e5fa:	2c00      	cmp	r4, #0
   1e5fc:	d02a      	beq.n	1e654 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e5fe:	68a0      	ldr	r0, [r4, #8]
   1e600:	f006 f989 	bl	24916 <poller_thread>
   1e604:	4601      	mov	r1, r0
   1e606:	9803      	ldr	r0, [sp, #12]
   1e608:	f005 fefe 	bl	24408 <z_sched_prio_cmp>
   1e60c:	2800      	cmp	r0, #0
   1e60e:	dc11      	bgt.n	1e634 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e610:	b31c      	cbz	r4, 1e65a <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
   1e612:	686b      	ldr	r3, [r5, #4]
   1e614:	429c      	cmp	r4, r3
   1e616:	d02a      	beq.n	1e66e <register_events+0x3e6>
   1e618:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e61a:	2c00      	cmp	r4, #0
   1e61c:	d1ed      	bne.n	1e5fa <register_events+0x372>
   1e61e:	9c04      	ldr	r4, [sp, #16]
   1e620:	9d05      	ldr	r5, [sp, #20]
   1e622:	e01c      	b.n	1e65e <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
   1e624:	9a02      	ldr	r2, [sp, #8]
   1e626:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e628:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e62c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e62e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e630:	6054      	str	r4, [r2, #4]
		return;
   1e632:	e6e3      	b.n	1e3fc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   1e634:	9d05      	ldr	r5, [sp, #20]
   1e636:	4622      	mov	r2, r4
   1e638:	9c04      	ldr	r4, [sp, #16]
   1e63a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1e63c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e63e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   1e642:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e644:	6054      	str	r4, [r2, #4]
			return;
   1e646:	e6d9      	b.n	1e3fc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e648:	2300      	movs	r3, #0
   1e64a:	9404      	str	r4, [sp, #16]
   1e64c:	9505      	str	r5, [sp, #20]
   1e64e:	9d02      	ldr	r5, [sp, #8]
   1e650:	461c      	mov	r4, r3
   1e652:	e7d2      	b.n	1e5fa <register_events+0x372>
   1e654:	9c04      	ldr	r4, [sp, #16]
   1e656:	9d05      	ldr	r5, [sp, #20]
   1e658:	e001      	b.n	1e65e <register_events+0x3d6>
   1e65a:	9c04      	ldr	r4, [sp, #16]
   1e65c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1e65e:	9a02      	ldr	r2, [sp, #8]
   1e660:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1e662:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1e666:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e668:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e66a:	6054      	str	r4, [r2, #4]
}
   1e66c:	e6c6      	b.n	1e3fc <register_events+0x174>
   1e66e:	9c04      	ldr	r4, [sp, #16]
   1e670:	9d05      	ldr	r5, [sp, #20]
   1e672:	e7f4      	b.n	1e65e <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1e674:	9801      	ldr	r0, [sp, #4]
   1e676:	b007      	add	sp, #28
   1e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e67c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e680:	b082      	sub	sp, #8
   1e682:	4605      	mov	r5, r0
   1e684:	4690      	mov	r8, r2
   1e686:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e688:	4b4f      	ldr	r3, [pc, #316]	; (1e7c8 <z_impl_k_poll+0x14c>)
   1e68a:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
   1e68c:	2301      	movs	r3, #1
   1e68e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e692:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1e696:	ea57 0302 	orrs.w	r3, r7, r2
   1e69a:	bf0c      	ite	eq
   1e69c:	2301      	moveq	r3, #1
   1e69e:	2300      	movne	r3, #0
   1e6a0:	f106 0260 	add.w	r2, r6, #96	; 0x60
   1e6a4:	f7ff fdf0 	bl	1e288 <register_events>
   1e6a8:	4604      	mov	r4, r0
   1e6aa:	f04f 0320 	mov.w	r3, #32
   1e6ae:	f3ef 8111 	mrs	r1, BASEPRI
   1e6b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6b6:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e6ba:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   1e6be:	b1b3      	cbz	r3, 1e6ee <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1e6c0:	2300      	movs	r3, #0
   1e6c2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e6c6:	ea57 0308 	orrs.w	r3, r7, r8
   1e6ca:	d043      	beq.n	1e754 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e6cc:	f8cd 8000 	str.w	r8, [sp]
   1e6d0:	9701      	str	r7, [sp, #4]
   1e6d2:	4a3e      	ldr	r2, [pc, #248]	; (1e7cc <z_impl_k_poll+0x150>)
   1e6d4:	483e      	ldr	r0, [pc, #248]	; (1e7d0 <z_impl_k_poll+0x154>)
   1e6d6:	f7ff f97d 	bl	1d9d4 <z_pend_curr>
   1e6da:	f04f 0320 	mov.w	r3, #32
   1e6de:	f3ef 8611 	mrs	r6, BASEPRI
   1e6e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6e6:	f3bf 8f6f 	isb	sy
   1e6ea:	46b4      	mov	ip, r6
	while (num_events--) {
   1e6ec:	e04c      	b.n	1e788 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   1e6ee:	460e      	mov	r6, r1
	while (num_events--) {
   1e6f0:	e00c      	b.n	1e70c <z_impl_k_poll+0x90>
	__asm__ volatile(
   1e6f2:	f386 8811 	msr	BASEPRI, r6
   1e6f6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e6fa:	f04f 0320 	mov.w	r3, #32
   1e6fe:	f3ef 8611 	mrs	r6, BASEPRI
   1e702:	f383 8812 	msr	BASEPRI_MAX, r3
   1e706:	f3bf 8f6f 	isb	sy
   1e70a:	4604      	mov	r4, r0
   1e70c:	1e60      	subs	r0, r4, #1
   1e70e:	b1dc      	cbz	r4, 1e748 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
   1e710:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1e714:	009f      	lsls	r7, r3, #2
   1e716:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e71a:	2200      	movs	r2, #0
   1e71c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e71e:	7b5a      	ldrb	r2, [r3, #13]
   1e720:	f002 021f 	and.w	r2, r2, #31
   1e724:	2a08      	cmp	r2, #8
   1e726:	d8e4      	bhi.n	1e6f2 <z_impl_k_poll+0x76>
   1e728:	2401      	movs	r4, #1
   1e72a:	fa04 f202 	lsl.w	r2, r4, r2
   1e72e:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e732:	d0de      	beq.n	1e6f2 <z_impl_k_poll+0x76>
	return node->next != NULL;
   1e734:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e736:	2a00      	cmp	r2, #0
   1e738:	d0db      	beq.n	1e6f2 <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1e73a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1e73c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1e73e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1e740:	2200      	movs	r2, #0
   1e742:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1e744:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
   1e746:	e7d4      	b.n	1e6f2 <z_impl_k_poll+0x76>
	__asm__ volatile(
   1e748:	f381 8811 	msr	BASEPRI, r1
   1e74c:	f3bf 8f6f 	isb	sy
		return 0;
   1e750:	4620      	mov	r0, r4
   1e752:	e036      	b.n	1e7c2 <z_impl_k_poll+0x146>
   1e754:	f381 8811 	msr	BASEPRI, r1
   1e758:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e75c:	f06f 000a 	mvn.w	r0, #10
   1e760:	e02f      	b.n	1e7c2 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
   1e762:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
   1e764:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   1e766:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   1e768:	2200      	movs	r2, #0
   1e76a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
   1e76c:	605a      	str	r2, [r3, #4]
   1e76e:	f38c 8811 	msr	BASEPRI, ip
   1e772:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e776:	f04f 0320 	mov.w	r3, #32
   1e77a:	f3ef 8c11 	mrs	ip, BASEPRI
   1e77e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e782:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1e786:	4674      	mov	r4, lr
   1e788:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   1e78c:	b1ac      	cbz	r4, 1e7ba <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
   1e78e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
   1e792:	009c      	lsls	r4, r3, #2
   1e794:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e798:	2200      	movs	r2, #0
   1e79a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e79c:	7b5a      	ldrb	r2, [r3, #13]
   1e79e:	f002 021f 	and.w	r2, r2, #31
   1e7a2:	2a08      	cmp	r2, #8
   1e7a4:	d8e3      	bhi.n	1e76e <z_impl_k_poll+0xf2>
   1e7a6:	2101      	movs	r1, #1
   1e7a8:	fa01 f202 	lsl.w	r2, r1, r2
   1e7ac:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e7b0:	d0dd      	beq.n	1e76e <z_impl_k_poll+0xf2>
	return node->next != NULL;
   1e7b2:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e7b4:	2a00      	cmp	r2, #0
   1e7b6:	d1d4      	bne.n	1e762 <z_impl_k_poll+0xe6>
   1e7b8:	e7d9      	b.n	1e76e <z_impl_k_poll+0xf2>
	__asm__ volatile(
   1e7ba:	f386 8811 	msr	BASEPRI, r6
   1e7be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1e7c2:	b002      	add	sp, #8
   1e7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7c8:	2000d50c 	.word	0x2000d50c
   1e7cc:	2000c5c8 	.word	0x2000c5c8
   1e7d0:	2000d550 	.word	0x2000d550

0001e7d4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e7d4:	b538      	push	{r3, r4, r5, lr}
   1e7d6:	4603      	mov	r3, r0
	__asm__ volatile(
   1e7d8:	f04f 0220 	mov.w	r2, #32
   1e7dc:	f3ef 8511 	mrs	r5, BASEPRI
   1e7e0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e7e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e7e8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e7ea:	2201      	movs	r2, #1
   1e7ec:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1e7ee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e7f0:	4283      	cmp	r3, r0
   1e7f2:	d011      	beq.n	1e818 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1e7f4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1e7f6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1e7f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e7fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e7fc:	2300      	movs	r3, #0
   1e7fe:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1e800:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1e802:	b148      	cbz	r0, 1e818 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e804:	2101      	movs	r1, #1
   1e806:	f006 f8d3 	bl	249b0 <signal_poll_event>
   1e80a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1e80c:	4629      	mov	r1, r5
   1e80e:	4805      	ldr	r0, [pc, #20]	; (1e824 <z_impl_k_poll_signal_raise+0x50>)
   1e810:	f7fe ff70 	bl	1d6f4 <z_reschedule>
	return rc;
}
   1e814:	4620      	mov	r0, r4
   1e816:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e818:	f385 8811 	msr	BASEPRI, r5
   1e81c:	f3bf 8f6f 	isb	sy
		return 0;
   1e820:	2400      	movs	r4, #0
   1e822:	e7f7      	b.n	1e814 <z_impl_k_poll_signal_raise+0x40>
   1e824:	2000d550 	.word	0x2000d550

0001e828 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1e828:	b508      	push	{r3, lr}
   1e82a:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1e82c:	4601      	mov	r1, r0
   1e82e:	4802      	ldr	r0, [pc, #8]	; (1e838 <k_aligned_alloc+0x10>)
   1e830:	f006 f8f0 	bl	24a14 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   1e834:	bd08      	pop	{r3, pc}
   1e836:	bf00      	nop
   1e838:	2000c6a0 	.word	0x2000c6a0

0001e83c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e83c:	b538      	push	{r3, r4, r5, lr}
   1e83e:	4604      	mov	r4, r0
   1e840:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e842:	f005 fc4e 	bl	240e2 <k_is_in_isr>
   1e846:	b948      	cbnz	r0, 1e85c <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e848:	4b05      	ldr	r3, [pc, #20]	; (1e860 <z_thread_aligned_alloc+0x24>)
   1e84a:	689b      	ldr	r3, [r3, #8]
   1e84c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1e850:	b118      	cbz	r0, 1e85a <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1e852:	462a      	mov	r2, r5
   1e854:	4621      	mov	r1, r4
   1e856:	f006 f8dd 	bl	24a14 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1e85a:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1e85c:	4801      	ldr	r0, [pc, #4]	; (1e864 <z_thread_aligned_alloc+0x28>)
   1e85e:	e7f7      	b.n	1e850 <z_thread_aligned_alloc+0x14>
   1e860:	2000d50c 	.word	0x2000d50c
   1e864:	2000c6a0 	.word	0x2000c6a0

0001e868 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1e868:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1e86a:	4a03      	ldr	r2, [pc, #12]	; (1e878 <boot_banner+0x10>)
   1e86c:	4903      	ldr	r1, [pc, #12]	; (1e87c <boot_banner+0x14>)
   1e86e:	4804      	ldr	r0, [pc, #16]	; (1e880 <boot_banner+0x18>)
   1e870:	f001 f84e 	bl	1f910 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1e874:	bd08      	pop	{r3, pc}
   1e876:	bf00      	nop
   1e878:	00027214 	.word	0x00027214
   1e87c:	00027448 	.word	0x00027448
   1e880:	00027458 	.word	0x00027458

0001e884 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1e884:	b510      	push	{r4, lr}
   1e886:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1e888:	4b08      	ldr	r3, [pc, #32]	; (1e8ac <k_sys_work_q_init+0x28>)
   1e88a:	9302      	str	r3, [sp, #8]
   1e88c:	2400      	movs	r4, #0
   1e88e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1e892:	ab02      	add	r3, sp, #8
   1e894:	9300      	str	r3, [sp, #0]
   1e896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e89a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e89e:	4904      	ldr	r1, [pc, #16]	; (1e8b0 <k_sys_work_q_init+0x2c>)
   1e8a0:	4804      	ldr	r0, [pc, #16]	; (1e8b4 <k_sys_work_q_init+0x30>)
   1e8a2:	f7fe fe7b 	bl	1d59c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1e8a6:	4620      	mov	r0, r4
   1e8a8:	b004      	add	sp, #16
   1e8aa:	bd10      	pop	{r4, pc}
   1e8ac:	00027480 	.word	0x00027480
   1e8b0:	2000fff0 	.word	0x2000fff0
   1e8b4:	2000cab8 	.word	0x2000cab8

0001e8b8 <_free_r>:
   1e8b8:	b538      	push	{r3, r4, r5, lr}
   1e8ba:	4605      	mov	r5, r0
   1e8bc:	2900      	cmp	r1, #0
   1e8be:	d041      	beq.n	1e944 <_free_r+0x8c>
   1e8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e8c4:	1f0c      	subs	r4, r1, #4
   1e8c6:	2b00      	cmp	r3, #0
   1e8c8:	bfb8      	it	lt
   1e8ca:	18e4      	addlt	r4, r4, r3
   1e8cc:	f000 faba 	bl	1ee44 <__malloc_lock>
   1e8d0:	4a1d      	ldr	r2, [pc, #116]	; (1e948 <_free_r+0x90>)
   1e8d2:	6813      	ldr	r3, [r2, #0]
   1e8d4:	b933      	cbnz	r3, 1e8e4 <_free_r+0x2c>
   1e8d6:	6063      	str	r3, [r4, #4]
   1e8d8:	6014      	str	r4, [r2, #0]
   1e8da:	4628      	mov	r0, r5
   1e8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e8e0:	f000 bab6 	b.w	1ee50 <__malloc_unlock>
   1e8e4:	42a3      	cmp	r3, r4
   1e8e6:	d908      	bls.n	1e8fa <_free_r+0x42>
   1e8e8:	6820      	ldr	r0, [r4, #0]
   1e8ea:	1821      	adds	r1, r4, r0
   1e8ec:	428b      	cmp	r3, r1
   1e8ee:	bf01      	itttt	eq
   1e8f0:	6819      	ldreq	r1, [r3, #0]
   1e8f2:	685b      	ldreq	r3, [r3, #4]
   1e8f4:	1809      	addeq	r1, r1, r0
   1e8f6:	6021      	streq	r1, [r4, #0]
   1e8f8:	e7ed      	b.n	1e8d6 <_free_r+0x1e>
   1e8fa:	461a      	mov	r2, r3
   1e8fc:	685b      	ldr	r3, [r3, #4]
   1e8fe:	b10b      	cbz	r3, 1e904 <_free_r+0x4c>
   1e900:	42a3      	cmp	r3, r4
   1e902:	d9fa      	bls.n	1e8fa <_free_r+0x42>
   1e904:	6811      	ldr	r1, [r2, #0]
   1e906:	1850      	adds	r0, r2, r1
   1e908:	42a0      	cmp	r0, r4
   1e90a:	d10b      	bne.n	1e924 <_free_r+0x6c>
   1e90c:	6820      	ldr	r0, [r4, #0]
   1e90e:	4401      	add	r1, r0
   1e910:	1850      	adds	r0, r2, r1
   1e912:	6011      	str	r1, [r2, #0]
   1e914:	4283      	cmp	r3, r0
   1e916:	d1e0      	bne.n	1e8da <_free_r+0x22>
   1e918:	6818      	ldr	r0, [r3, #0]
   1e91a:	685b      	ldr	r3, [r3, #4]
   1e91c:	4401      	add	r1, r0
   1e91e:	6053      	str	r3, [r2, #4]
   1e920:	6011      	str	r1, [r2, #0]
   1e922:	e7da      	b.n	1e8da <_free_r+0x22>
   1e924:	d902      	bls.n	1e92c <_free_r+0x74>
   1e926:	230c      	movs	r3, #12
   1e928:	602b      	str	r3, [r5, #0]
   1e92a:	e7d6      	b.n	1e8da <_free_r+0x22>
   1e92c:	6820      	ldr	r0, [r4, #0]
   1e92e:	1821      	adds	r1, r4, r0
   1e930:	428b      	cmp	r3, r1
   1e932:	bf02      	ittt	eq
   1e934:	6819      	ldreq	r1, [r3, #0]
   1e936:	685b      	ldreq	r3, [r3, #4]
   1e938:	1809      	addeq	r1, r1, r0
   1e93a:	6063      	str	r3, [r4, #4]
   1e93c:	bf08      	it	eq
   1e93e:	6021      	streq	r1, [r4, #0]
   1e940:	6054      	str	r4, [r2, #4]
   1e942:	e7ca      	b.n	1e8da <_free_r+0x22>
   1e944:	bd38      	pop	{r3, r4, r5, pc}
   1e946:	bf00      	nop
   1e948:	2000d550 	.word	0x2000d550

0001e94c <_malloc_r>:
   1e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e94e:	1ccd      	adds	r5, r1, #3
   1e950:	4606      	mov	r6, r0
   1e952:	f025 0503 	bic.w	r5, r5, #3
   1e956:	3508      	adds	r5, #8
   1e958:	2d0c      	cmp	r5, #12
   1e95a:	bf38      	it	cc
   1e95c:	250c      	movcc	r5, #12
   1e95e:	2d00      	cmp	r5, #0
   1e960:	db01      	blt.n	1e966 <_malloc_r+0x1a>
   1e962:	42a9      	cmp	r1, r5
   1e964:	d903      	bls.n	1e96e <_malloc_r+0x22>
   1e966:	230c      	movs	r3, #12
   1e968:	6033      	str	r3, [r6, #0]
   1e96a:	2000      	movs	r0, #0
   1e96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e96e:	f000 fa69 	bl	1ee44 <__malloc_lock>
   1e972:	4921      	ldr	r1, [pc, #132]	; (1e9f8 <_malloc_r+0xac>)
   1e974:	680a      	ldr	r2, [r1, #0]
   1e976:	4614      	mov	r4, r2
   1e978:	b99c      	cbnz	r4, 1e9a2 <_malloc_r+0x56>
   1e97a:	4f20      	ldr	r7, [pc, #128]	; (1e9fc <_malloc_r+0xb0>)
   1e97c:	683b      	ldr	r3, [r7, #0]
   1e97e:	b923      	cbnz	r3, 1e98a <_malloc_r+0x3e>
   1e980:	4621      	mov	r1, r4
   1e982:	4630      	mov	r0, r6
   1e984:	f000 f83c 	bl	1ea00 <_sbrk_r>
   1e988:	6038      	str	r0, [r7, #0]
   1e98a:	4629      	mov	r1, r5
   1e98c:	4630      	mov	r0, r6
   1e98e:	f000 f837 	bl	1ea00 <_sbrk_r>
   1e992:	1c43      	adds	r3, r0, #1
   1e994:	d123      	bne.n	1e9de <_malloc_r+0x92>
   1e996:	230c      	movs	r3, #12
   1e998:	4630      	mov	r0, r6
   1e99a:	6033      	str	r3, [r6, #0]
   1e99c:	f000 fa58 	bl	1ee50 <__malloc_unlock>
   1e9a0:	e7e3      	b.n	1e96a <_malloc_r+0x1e>
   1e9a2:	6823      	ldr	r3, [r4, #0]
   1e9a4:	1b5b      	subs	r3, r3, r5
   1e9a6:	d417      	bmi.n	1e9d8 <_malloc_r+0x8c>
   1e9a8:	2b0b      	cmp	r3, #11
   1e9aa:	d903      	bls.n	1e9b4 <_malloc_r+0x68>
   1e9ac:	6023      	str	r3, [r4, #0]
   1e9ae:	441c      	add	r4, r3
   1e9b0:	6025      	str	r5, [r4, #0]
   1e9b2:	e004      	b.n	1e9be <_malloc_r+0x72>
   1e9b4:	6863      	ldr	r3, [r4, #4]
   1e9b6:	42a2      	cmp	r2, r4
   1e9b8:	bf0c      	ite	eq
   1e9ba:	600b      	streq	r3, [r1, #0]
   1e9bc:	6053      	strne	r3, [r2, #4]
   1e9be:	4630      	mov	r0, r6
   1e9c0:	f000 fa46 	bl	1ee50 <__malloc_unlock>
   1e9c4:	f104 000b 	add.w	r0, r4, #11
   1e9c8:	1d23      	adds	r3, r4, #4
   1e9ca:	f020 0007 	bic.w	r0, r0, #7
   1e9ce:	1ac2      	subs	r2, r0, r3
   1e9d0:	d0cc      	beq.n	1e96c <_malloc_r+0x20>
   1e9d2:	1a1b      	subs	r3, r3, r0
   1e9d4:	50a3      	str	r3, [r4, r2]
   1e9d6:	e7c9      	b.n	1e96c <_malloc_r+0x20>
   1e9d8:	4622      	mov	r2, r4
   1e9da:	6864      	ldr	r4, [r4, #4]
   1e9dc:	e7cc      	b.n	1e978 <_malloc_r+0x2c>
   1e9de:	1cc4      	adds	r4, r0, #3
   1e9e0:	f024 0403 	bic.w	r4, r4, #3
   1e9e4:	42a0      	cmp	r0, r4
   1e9e6:	d0e3      	beq.n	1e9b0 <_malloc_r+0x64>
   1e9e8:	1a21      	subs	r1, r4, r0
   1e9ea:	4630      	mov	r0, r6
   1e9ec:	f000 f808 	bl	1ea00 <_sbrk_r>
   1e9f0:	3001      	adds	r0, #1
   1e9f2:	d1dd      	bne.n	1e9b0 <_malloc_r+0x64>
   1e9f4:	e7cf      	b.n	1e996 <_malloc_r+0x4a>
   1e9f6:	bf00      	nop
   1e9f8:	2000d550 	.word	0x2000d550
   1e9fc:	2000d554 	.word	0x2000d554

0001ea00 <_sbrk_r>:
   1ea00:	b538      	push	{r3, r4, r5, lr}
   1ea02:	2300      	movs	r3, #0
   1ea04:	4d05      	ldr	r5, [pc, #20]	; (1ea1c <_sbrk_r+0x1c>)
   1ea06:	4604      	mov	r4, r0
   1ea08:	4608      	mov	r0, r1
   1ea0a:	602b      	str	r3, [r5, #0]
   1ea0c:	f7f6 f8d2 	bl	14bb4 <_sbrk>
   1ea10:	1c43      	adds	r3, r0, #1
   1ea12:	d102      	bne.n	1ea1a <_sbrk_r+0x1a>
   1ea14:	682b      	ldr	r3, [r5, #0]
   1ea16:	b103      	cbz	r3, 1ea1a <_sbrk_r+0x1a>
   1ea18:	6023      	str	r3, [r4, #0]
   1ea1a:	bd38      	pop	{r3, r4, r5, pc}
   1ea1c:	2000d558 	.word	0x2000d558

0001ea20 <sniprintf>:
   1ea20:	b40c      	push	{r2, r3}
   1ea22:	4b18      	ldr	r3, [pc, #96]	; (1ea84 <sniprintf+0x64>)
   1ea24:	b530      	push	{r4, r5, lr}
   1ea26:	1e0c      	subs	r4, r1, #0
   1ea28:	b09d      	sub	sp, #116	; 0x74
   1ea2a:	681d      	ldr	r5, [r3, #0]
   1ea2c:	da08      	bge.n	1ea40 <sniprintf+0x20>
   1ea2e:	238b      	movs	r3, #139	; 0x8b
   1ea30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea34:	602b      	str	r3, [r5, #0]
   1ea36:	b01d      	add	sp, #116	; 0x74
   1ea38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1ea3c:	b002      	add	sp, #8
   1ea3e:	4770      	bx	lr
   1ea40:	f44f 7302 	mov.w	r3, #520	; 0x208
   1ea44:	9002      	str	r0, [sp, #8]
   1ea46:	9006      	str	r0, [sp, #24]
   1ea48:	a902      	add	r1, sp, #8
   1ea4a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ea4e:	bf14      	ite	ne
   1ea50:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   1ea54:	4623      	moveq	r3, r4
   1ea56:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1ea58:	4628      	mov	r0, r5
   1ea5a:	9304      	str	r3, [sp, #16]
   1ea5c:	9307      	str	r3, [sp, #28]
   1ea5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ea62:	f8ad 3016 	strh.w	r3, [sp, #22]
   1ea66:	ab21      	add	r3, sp, #132	; 0x84
   1ea68:	9301      	str	r3, [sp, #4]
   1ea6a:	f000 f9f7 	bl	1ee5c <_svfiprintf_r>
   1ea6e:	1c43      	adds	r3, r0, #1
   1ea70:	bfbc      	itt	lt
   1ea72:	238b      	movlt	r3, #139	; 0x8b
   1ea74:	602b      	strlt	r3, [r5, #0]
   1ea76:	2c00      	cmp	r4, #0
   1ea78:	d0dd      	beq.n	1ea36 <sniprintf+0x16>
   1ea7a:	9b02      	ldr	r3, [sp, #8]
   1ea7c:	2200      	movs	r2, #0
   1ea7e:	701a      	strb	r2, [r3, #0]
   1ea80:	e7d9      	b.n	1ea36 <sniprintf+0x16>
   1ea82:	bf00      	nop
   1ea84:	2000c5d0 	.word	0x2000c5d0

0001ea88 <_strtol_l.constprop.0>:
   1ea88:	2b01      	cmp	r3, #1
   1ea8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea8e:	4680      	mov	r8, r0
   1ea90:	d001      	beq.n	1ea96 <_strtol_l.constprop.0+0xe>
   1ea92:	2b24      	cmp	r3, #36	; 0x24
   1ea94:	d906      	bls.n	1eaa4 <_strtol_l.constprop.0+0x1c>
   1ea96:	f001 ff62 	bl	2095e <__errno>
   1ea9a:	2316      	movs	r3, #22
   1ea9c:	6003      	str	r3, [r0, #0]
   1ea9e:	2000      	movs	r0, #0
   1eaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eaa4:	460d      	mov	r5, r1
   1eaa6:	4f35      	ldr	r7, [pc, #212]	; (1eb7c <_strtol_l.constprop.0+0xf4>)
   1eaa8:	4628      	mov	r0, r5
   1eaaa:	f815 4b01 	ldrb.w	r4, [r5], #1
   1eaae:	5de6      	ldrb	r6, [r4, r7]
   1eab0:	f016 0608 	ands.w	r6, r6, #8
   1eab4:	d1f8      	bne.n	1eaa8 <_strtol_l.constprop.0+0x20>
   1eab6:	2c2d      	cmp	r4, #45	; 0x2d
   1eab8:	d12f      	bne.n	1eb1a <_strtol_l.constprop.0+0x92>
   1eaba:	782c      	ldrb	r4, [r5, #0]
   1eabc:	2601      	movs	r6, #1
   1eabe:	1c85      	adds	r5, r0, #2
   1eac0:	2b00      	cmp	r3, #0
   1eac2:	d057      	beq.n	1eb74 <_strtol_l.constprop.0+0xec>
   1eac4:	2b10      	cmp	r3, #16
   1eac6:	d109      	bne.n	1eadc <_strtol_l.constprop.0+0x54>
   1eac8:	2c30      	cmp	r4, #48	; 0x30
   1eaca:	d107      	bne.n	1eadc <_strtol_l.constprop.0+0x54>
   1eacc:	7828      	ldrb	r0, [r5, #0]
   1eace:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ead2:	2858      	cmp	r0, #88	; 0x58
   1ead4:	d149      	bne.n	1eb6a <_strtol_l.constprop.0+0xe2>
   1ead6:	786c      	ldrb	r4, [r5, #1]
   1ead8:	2310      	movs	r3, #16
   1eada:	3502      	adds	r5, #2
   1eadc:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
   1eae0:	2700      	movs	r7, #0
   1eae2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1eae6:	4638      	mov	r0, r7
   1eae8:	fbbe f9f3 	udiv	r9, lr, r3
   1eaec:	fb03 ea19 	mls	sl, r3, r9, lr
   1eaf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1eaf4:	f1bc 0f09 	cmp.w	ip, #9
   1eaf8:	d814      	bhi.n	1eb24 <_strtol_l.constprop.0+0x9c>
   1eafa:	4664      	mov	r4, ip
   1eafc:	42a3      	cmp	r3, r4
   1eafe:	dd22      	ble.n	1eb46 <_strtol_l.constprop.0+0xbe>
   1eb00:	2f00      	cmp	r7, #0
   1eb02:	db1d      	blt.n	1eb40 <_strtol_l.constprop.0+0xb8>
   1eb04:	4581      	cmp	r9, r0
   1eb06:	d31b      	bcc.n	1eb40 <_strtol_l.constprop.0+0xb8>
   1eb08:	d101      	bne.n	1eb0e <_strtol_l.constprop.0+0x86>
   1eb0a:	45a2      	cmp	sl, r4
   1eb0c:	db18      	blt.n	1eb40 <_strtol_l.constprop.0+0xb8>
   1eb0e:	fb00 4003 	mla	r0, r0, r3, r4
   1eb12:	2701      	movs	r7, #1
   1eb14:	f815 4b01 	ldrb.w	r4, [r5], #1
   1eb18:	e7ea      	b.n	1eaf0 <_strtol_l.constprop.0+0x68>
   1eb1a:	2c2b      	cmp	r4, #43	; 0x2b
   1eb1c:	bf04      	itt	eq
   1eb1e:	782c      	ldrbeq	r4, [r5, #0]
   1eb20:	1c85      	addeq	r5, r0, #2
   1eb22:	e7cd      	b.n	1eac0 <_strtol_l.constprop.0+0x38>
   1eb24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1eb28:	f1bc 0f19 	cmp.w	ip, #25
   1eb2c:	d801      	bhi.n	1eb32 <_strtol_l.constprop.0+0xaa>
   1eb2e:	3c37      	subs	r4, #55	; 0x37
   1eb30:	e7e4      	b.n	1eafc <_strtol_l.constprop.0+0x74>
   1eb32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1eb36:	f1bc 0f19 	cmp.w	ip, #25
   1eb3a:	d804      	bhi.n	1eb46 <_strtol_l.constprop.0+0xbe>
   1eb3c:	3c57      	subs	r4, #87	; 0x57
   1eb3e:	e7dd      	b.n	1eafc <_strtol_l.constprop.0+0x74>
   1eb40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1eb44:	e7e6      	b.n	1eb14 <_strtol_l.constprop.0+0x8c>
   1eb46:	2f00      	cmp	r7, #0
   1eb48:	da07      	bge.n	1eb5a <_strtol_l.constprop.0+0xd2>
   1eb4a:	2322      	movs	r3, #34	; 0x22
   1eb4c:	4670      	mov	r0, lr
   1eb4e:	f8c8 3000 	str.w	r3, [r8]
   1eb52:	2a00      	cmp	r2, #0
   1eb54:	d0a4      	beq.n	1eaa0 <_strtol_l.constprop.0+0x18>
   1eb56:	1e69      	subs	r1, r5, #1
   1eb58:	e005      	b.n	1eb66 <_strtol_l.constprop.0+0xde>
   1eb5a:	b106      	cbz	r6, 1eb5e <_strtol_l.constprop.0+0xd6>
   1eb5c:	4240      	negs	r0, r0
   1eb5e:	2a00      	cmp	r2, #0
   1eb60:	d09e      	beq.n	1eaa0 <_strtol_l.constprop.0+0x18>
   1eb62:	2f00      	cmp	r7, #0
   1eb64:	d1f7      	bne.n	1eb56 <_strtol_l.constprop.0+0xce>
   1eb66:	6011      	str	r1, [r2, #0]
   1eb68:	e79a      	b.n	1eaa0 <_strtol_l.constprop.0+0x18>
   1eb6a:	2430      	movs	r4, #48	; 0x30
   1eb6c:	2b00      	cmp	r3, #0
   1eb6e:	d1b5      	bne.n	1eadc <_strtol_l.constprop.0+0x54>
   1eb70:	2308      	movs	r3, #8
   1eb72:	e7b3      	b.n	1eadc <_strtol_l.constprop.0+0x54>
   1eb74:	2c30      	cmp	r4, #48	; 0x30
   1eb76:	d0a9      	beq.n	1eacc <_strtol_l.constprop.0+0x44>
   1eb78:	230a      	movs	r3, #10
   1eb7a:	e7af      	b.n	1eadc <_strtol_l.constprop.0+0x54>
   1eb7c:	000275b3 	.word	0x000275b3

0001eb80 <strtol>:
   1eb80:	4613      	mov	r3, r2
   1eb82:	460a      	mov	r2, r1
   1eb84:	4601      	mov	r1, r0
   1eb86:	4802      	ldr	r0, [pc, #8]	; (1eb90 <strtol+0x10>)
   1eb88:	6800      	ldr	r0, [r0, #0]
   1eb8a:	f7ff bf7d 	b.w	1ea88 <_strtol_l.constprop.0>
   1eb8e:	bf00      	nop
   1eb90:	2000c5d0 	.word	0x2000c5d0

0001eb94 <_strtoll_l.constprop.0>:
   1eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb98:	b085      	sub	sp, #20
   1eb9a:	4688      	mov	r8, r1
   1eb9c:	461e      	mov	r6, r3
   1eb9e:	460d      	mov	r5, r1
   1eba0:	9201      	str	r2, [sp, #4]
   1eba2:	4a46      	ldr	r2, [pc, #280]	; (1ecbc <_strtoll_l.constprop.0+0x128>)
   1eba4:	9003      	str	r0, [sp, #12]
   1eba6:	462b      	mov	r3, r5
   1eba8:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ebac:	5ca7      	ldrb	r7, [r4, r2]
   1ebae:	f017 0708 	ands.w	r7, r7, #8
   1ebb2:	d1f8      	bne.n	1eba6 <_strtoll_l.constprop.0+0x12>
   1ebb4:	2c2d      	cmp	r4, #45	; 0x2d
   1ebb6:	d148      	bne.n	1ec4a <_strtoll_l.constprop.0+0xb6>
   1ebb8:	782c      	ldrb	r4, [r5, #0]
   1ebba:	2701      	movs	r7, #1
   1ebbc:	1c9d      	adds	r5, r3, #2
   1ebbe:	2e00      	cmp	r6, #0
   1ebc0:	d078      	beq.n	1ecb4 <_strtoll_l.constprop.0+0x120>
   1ebc2:	2e10      	cmp	r6, #16
   1ebc4:	d109      	bne.n	1ebda <_strtoll_l.constprop.0+0x46>
   1ebc6:	2c30      	cmp	r4, #48	; 0x30
   1ebc8:	d107      	bne.n	1ebda <_strtoll_l.constprop.0+0x46>
   1ebca:	782b      	ldrb	r3, [r5, #0]
   1ebcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ebd0:	2b58      	cmp	r3, #88	; 0x58
   1ebd2:	d16a      	bne.n	1ecaa <_strtoll_l.constprop.0+0x116>
   1ebd4:	786c      	ldrb	r4, [r5, #1]
   1ebd6:	2610      	movs	r6, #16
   1ebd8:	3502      	adds	r5, #2
   1ebda:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   1ebde:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   1ebe2:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1ebe6:	4632      	mov	r2, r6
   1ebe8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1ebec:	4658      	mov	r0, fp
   1ebee:	464b      	mov	r3, r9
   1ebf0:	4651      	mov	r1, sl
   1ebf2:	f7f2 f905 	bl	10e00 <__aeabi_uldivmod>
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	468c      	mov	ip, r1
   1ebfa:	9202      	str	r2, [sp, #8]
   1ebfc:	4619      	mov	r1, r3
   1ebfe:	4602      	mov	r2, r0
   1ec00:	4618      	mov	r0, r3
   1ec02:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   1ec06:	f1be 0f09 	cmp.w	lr, #9
   1ec0a:	d823      	bhi.n	1ec54 <_strtoll_l.constprop.0+0xc0>
   1ec0c:	4674      	mov	r4, lr
   1ec0e:	42a6      	cmp	r6, r4
   1ec10:	dd31      	ble.n	1ec76 <_strtoll_l.constprop.0+0xe2>
   1ec12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec16:	d015      	beq.n	1ec44 <_strtoll_l.constprop.0+0xb0>
   1ec18:	4282      	cmp	r2, r0
   1ec1a:	eb7c 0301 	sbcs.w	r3, ip, r1
   1ec1e:	d327      	bcc.n	1ec70 <_strtoll_l.constprop.0+0xdc>
   1ec20:	458c      	cmp	ip, r1
   1ec22:	bf08      	it	eq
   1ec24:	4282      	cmpeq	r2, r0
   1ec26:	d102      	bne.n	1ec2e <_strtoll_l.constprop.0+0x9a>
   1ec28:	9b02      	ldr	r3, [sp, #8]
   1ec2a:	42a3      	cmp	r3, r4
   1ec2c:	db20      	blt.n	1ec70 <_strtoll_l.constprop.0+0xdc>
   1ec2e:	4371      	muls	r1, r6
   1ec30:	fb00 1109 	mla	r1, r0, r9, r1
   1ec34:	fba6 0300 	umull	r0, r3, r6, r0
   1ec38:	4419      	add	r1, r3
   1ec3a:	1820      	adds	r0, r4, r0
   1ec3c:	f04f 0301 	mov.w	r3, #1
   1ec40:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   1ec44:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ec48:	e7db      	b.n	1ec02 <_strtoll_l.constprop.0+0x6e>
   1ec4a:	2c2b      	cmp	r4, #43	; 0x2b
   1ec4c:	bf04      	itt	eq
   1ec4e:	782c      	ldrbeq	r4, [r5, #0]
   1ec50:	1c9d      	addeq	r5, r3, #2
   1ec52:	e7b4      	b.n	1ebbe <_strtoll_l.constprop.0+0x2a>
   1ec54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1ec58:	f1be 0f19 	cmp.w	lr, #25
   1ec5c:	d801      	bhi.n	1ec62 <_strtoll_l.constprop.0+0xce>
   1ec5e:	3c37      	subs	r4, #55	; 0x37
   1ec60:	e7d5      	b.n	1ec0e <_strtoll_l.constprop.0+0x7a>
   1ec62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   1ec66:	f1be 0f19 	cmp.w	lr, #25
   1ec6a:	d804      	bhi.n	1ec76 <_strtoll_l.constprop.0+0xe2>
   1ec6c:	3c57      	subs	r4, #87	; 0x57
   1ec6e:	e7ce      	b.n	1ec0e <_strtoll_l.constprop.0+0x7a>
   1ec70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec74:	e7e6      	b.n	1ec44 <_strtoll_l.constprop.0+0xb0>
   1ec76:	1c5a      	adds	r2, r3, #1
   1ec78:	d109      	bne.n	1ec8e <_strtoll_l.constprop.0+0xfa>
   1ec7a:	2322      	movs	r3, #34	; 0x22
   1ec7c:	9a03      	ldr	r2, [sp, #12]
   1ec7e:	4658      	mov	r0, fp
   1ec80:	4651      	mov	r1, sl
   1ec82:	6013      	str	r3, [r2, #0]
   1ec84:	9b01      	ldr	r3, [sp, #4]
   1ec86:	b953      	cbnz	r3, 1ec9e <_strtoll_l.constprop.0+0x10a>
   1ec88:	b005      	add	sp, #20
   1ec8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec8e:	b117      	cbz	r7, 1ec96 <_strtoll_l.constprop.0+0x102>
   1ec90:	4240      	negs	r0, r0
   1ec92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ec96:	9a01      	ldr	r2, [sp, #4]
   1ec98:	2a00      	cmp	r2, #0
   1ec9a:	d0f5      	beq.n	1ec88 <_strtoll_l.constprop.0+0xf4>
   1ec9c:	b10b      	cbz	r3, 1eca2 <_strtoll_l.constprop.0+0x10e>
   1ec9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1eca2:	9b01      	ldr	r3, [sp, #4]
   1eca4:	f8c3 8000 	str.w	r8, [r3]
   1eca8:	e7ee      	b.n	1ec88 <_strtoll_l.constprop.0+0xf4>
   1ecaa:	2430      	movs	r4, #48	; 0x30
   1ecac:	2e00      	cmp	r6, #0
   1ecae:	d194      	bne.n	1ebda <_strtoll_l.constprop.0+0x46>
   1ecb0:	2608      	movs	r6, #8
   1ecb2:	e792      	b.n	1ebda <_strtoll_l.constprop.0+0x46>
   1ecb4:	2c30      	cmp	r4, #48	; 0x30
   1ecb6:	d088      	beq.n	1ebca <_strtoll_l.constprop.0+0x36>
   1ecb8:	260a      	movs	r6, #10
   1ecba:	e78e      	b.n	1ebda <_strtoll_l.constprop.0+0x46>
   1ecbc:	000275b3 	.word	0x000275b3

0001ecc0 <strtoll>:
   1ecc0:	4613      	mov	r3, r2
   1ecc2:	460a      	mov	r2, r1
   1ecc4:	4601      	mov	r1, r0
   1ecc6:	4802      	ldr	r0, [pc, #8]	; (1ecd0 <strtoll+0x10>)
   1ecc8:	6800      	ldr	r0, [r0, #0]
   1ecca:	f7ff bf63 	b.w	1eb94 <_strtoll_l.constprop.0>
   1ecce:	bf00      	nop
   1ecd0:	2000c5d0 	.word	0x2000c5d0

0001ecd4 <_strtoul_l.constprop.0>:
   1ecd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecd8:	4686      	mov	lr, r0
   1ecda:	460d      	mov	r5, r1
   1ecdc:	4f35      	ldr	r7, [pc, #212]	; (1edb4 <_strtoul_l.constprop.0+0xe0>)
   1ecde:	4628      	mov	r0, r5
   1ece0:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ece4:	5de6      	ldrb	r6, [r4, r7]
   1ece6:	f016 0608 	ands.w	r6, r6, #8
   1ecea:	d1f8      	bne.n	1ecde <_strtoul_l.constprop.0+0xa>
   1ecec:	2c2d      	cmp	r4, #45	; 0x2d
   1ecee:	d12f      	bne.n	1ed50 <_strtoul_l.constprop.0+0x7c>
   1ecf0:	782c      	ldrb	r4, [r5, #0]
   1ecf2:	2601      	movs	r6, #1
   1ecf4:	1c85      	adds	r5, r0, #2
   1ecf6:	2b00      	cmp	r3, #0
   1ecf8:	d057      	beq.n	1edaa <_strtoul_l.constprop.0+0xd6>
   1ecfa:	2b10      	cmp	r3, #16
   1ecfc:	d109      	bne.n	1ed12 <_strtoul_l.constprop.0+0x3e>
   1ecfe:	2c30      	cmp	r4, #48	; 0x30
   1ed00:	d107      	bne.n	1ed12 <_strtoul_l.constprop.0+0x3e>
   1ed02:	7828      	ldrb	r0, [r5, #0]
   1ed04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1ed08:	2858      	cmp	r0, #88	; 0x58
   1ed0a:	d149      	bne.n	1eda0 <_strtoul_l.constprop.0+0xcc>
   1ed0c:	786c      	ldrb	r4, [r5, #1]
   1ed0e:	2310      	movs	r3, #16
   1ed10:	3502      	adds	r5, #2
   1ed12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1ed16:	2700      	movs	r7, #0
   1ed18:	fbb8 f8f3 	udiv	r8, r8, r3
   1ed1c:	fb03 f908 	mul.w	r9, r3, r8
   1ed20:	4638      	mov	r0, r7
   1ed22:	ea6f 0909 	mvn.w	r9, r9
   1ed26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1ed2a:	f1bc 0f09 	cmp.w	ip, #9
   1ed2e:	d814      	bhi.n	1ed5a <_strtoul_l.constprop.0+0x86>
   1ed30:	4664      	mov	r4, ip
   1ed32:	42a3      	cmp	r3, r4
   1ed34:	dd22      	ble.n	1ed7c <_strtoul_l.constprop.0+0xa8>
   1ed36:	2f00      	cmp	r7, #0
   1ed38:	db1d      	blt.n	1ed76 <_strtoul_l.constprop.0+0xa2>
   1ed3a:	4580      	cmp	r8, r0
   1ed3c:	d31b      	bcc.n	1ed76 <_strtoul_l.constprop.0+0xa2>
   1ed3e:	d101      	bne.n	1ed44 <_strtoul_l.constprop.0+0x70>
   1ed40:	45a1      	cmp	r9, r4
   1ed42:	db18      	blt.n	1ed76 <_strtoul_l.constprop.0+0xa2>
   1ed44:	fb00 4003 	mla	r0, r0, r3, r4
   1ed48:	2701      	movs	r7, #1
   1ed4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ed4e:	e7ea      	b.n	1ed26 <_strtoul_l.constprop.0+0x52>
   1ed50:	2c2b      	cmp	r4, #43	; 0x2b
   1ed52:	bf04      	itt	eq
   1ed54:	782c      	ldrbeq	r4, [r5, #0]
   1ed56:	1c85      	addeq	r5, r0, #2
   1ed58:	e7cd      	b.n	1ecf6 <_strtoul_l.constprop.0+0x22>
   1ed5a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1ed5e:	f1bc 0f19 	cmp.w	ip, #25
   1ed62:	d801      	bhi.n	1ed68 <_strtoul_l.constprop.0+0x94>
   1ed64:	3c37      	subs	r4, #55	; 0x37
   1ed66:	e7e4      	b.n	1ed32 <_strtoul_l.constprop.0+0x5e>
   1ed68:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1ed6c:	f1bc 0f19 	cmp.w	ip, #25
   1ed70:	d804      	bhi.n	1ed7c <_strtoul_l.constprop.0+0xa8>
   1ed72:	3c57      	subs	r4, #87	; 0x57
   1ed74:	e7dd      	b.n	1ed32 <_strtoul_l.constprop.0+0x5e>
   1ed76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1ed7a:	e7e6      	b.n	1ed4a <_strtoul_l.constprop.0+0x76>
   1ed7c:	2f00      	cmp	r7, #0
   1ed7e:	da07      	bge.n	1ed90 <_strtoul_l.constprop.0+0xbc>
   1ed80:	2322      	movs	r3, #34	; 0x22
   1ed82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed86:	f8ce 3000 	str.w	r3, [lr]
   1ed8a:	b932      	cbnz	r2, 1ed9a <_strtoul_l.constprop.0+0xc6>
   1ed8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed90:	b106      	cbz	r6, 1ed94 <_strtoul_l.constprop.0+0xc0>
   1ed92:	4240      	negs	r0, r0
   1ed94:	2a00      	cmp	r2, #0
   1ed96:	d0f9      	beq.n	1ed8c <_strtoul_l.constprop.0+0xb8>
   1ed98:	b107      	cbz	r7, 1ed9c <_strtoul_l.constprop.0+0xc8>
   1ed9a:	1e69      	subs	r1, r5, #1
   1ed9c:	6011      	str	r1, [r2, #0]
   1ed9e:	e7f5      	b.n	1ed8c <_strtoul_l.constprop.0+0xb8>
   1eda0:	2430      	movs	r4, #48	; 0x30
   1eda2:	2b00      	cmp	r3, #0
   1eda4:	d1b5      	bne.n	1ed12 <_strtoul_l.constprop.0+0x3e>
   1eda6:	2308      	movs	r3, #8
   1eda8:	e7b3      	b.n	1ed12 <_strtoul_l.constprop.0+0x3e>
   1edaa:	2c30      	cmp	r4, #48	; 0x30
   1edac:	d0a9      	beq.n	1ed02 <_strtoul_l.constprop.0+0x2e>
   1edae:	230a      	movs	r3, #10
   1edb0:	e7af      	b.n	1ed12 <_strtoul_l.constprop.0+0x3e>
   1edb2:	bf00      	nop
   1edb4:	000275b3 	.word	0x000275b3

0001edb8 <strtoul>:
   1edb8:	4613      	mov	r3, r2
   1edba:	460a      	mov	r2, r1
   1edbc:	4601      	mov	r1, r0
   1edbe:	4802      	ldr	r0, [pc, #8]	; (1edc8 <strtoul+0x10>)
   1edc0:	6800      	ldr	r0, [r0, #0]
   1edc2:	f7ff bf87 	b.w	1ecd4 <_strtoul_l.constprop.0>
   1edc6:	bf00      	nop
   1edc8:	2000c5d0 	.word	0x2000c5d0

0001edcc <vsniprintf>:
   1edcc:	b507      	push	{r0, r1, r2, lr}
   1edce:	9300      	str	r3, [sp, #0]
   1edd0:	4613      	mov	r3, r2
   1edd2:	460a      	mov	r2, r1
   1edd4:	4601      	mov	r1, r0
   1edd6:	4803      	ldr	r0, [pc, #12]	; (1ede4 <vsniprintf+0x18>)
   1edd8:	6800      	ldr	r0, [r0, #0]
   1edda:	f005 fef0 	bl	24bbe <_vsniprintf_r>
   1edde:	b003      	add	sp, #12
   1ede0:	f85d fb04 	ldr.w	pc, [sp], #4
   1ede4:	2000c5d0 	.word	0x2000c5d0

0001ede8 <_vsiscanf_r>:
   1ede8:	b570      	push	{r4, r5, r6, lr}
   1edea:	461e      	mov	r6, r3
   1edec:	b09a      	sub	sp, #104	; 0x68
   1edee:	f44f 7301 	mov.w	r3, #516	; 0x204
   1edf2:	4604      	mov	r4, r0
   1edf4:	4608      	mov	r0, r1
   1edf6:	4615      	mov	r5, r2
   1edf8:	f8ad 300c 	strh.w	r3, [sp, #12]
   1edfc:	9100      	str	r1, [sp, #0]
   1edfe:	9104      	str	r1, [sp, #16]
   1ee00:	f7f2 f973 	bl	110ea <strlen>
   1ee04:	4b09      	ldr	r3, [pc, #36]	; (1ee2c <_vsiscanf_r+0x44>)
   1ee06:	462a      	mov	r2, r5
   1ee08:	4669      	mov	r1, sp
   1ee0a:	9001      	str	r0, [sp, #4]
   1ee0c:	9309      	str	r3, [sp, #36]	; 0x24
   1ee0e:	2300      	movs	r3, #0
   1ee10:	9005      	str	r0, [sp, #20]
   1ee12:	4620      	mov	r0, r4
   1ee14:	930d      	str	r3, [sp, #52]	; 0x34
   1ee16:	9312      	str	r3, [sp, #72]	; 0x48
   1ee18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ee1c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ee20:	4633      	mov	r3, r6
   1ee22:	f000 f91b 	bl	1f05c <__ssvfiscanf_r>
   1ee26:	b01a      	add	sp, #104	; 0x68
   1ee28:	bd70      	pop	{r4, r5, r6, pc}
   1ee2a:	bf00      	nop
   1ee2c:	00024af7 	.word	0x00024af7

0001ee30 <vsiscanf>:
   1ee30:	4613      	mov	r3, r2
   1ee32:	460a      	mov	r2, r1
   1ee34:	4601      	mov	r1, r0
   1ee36:	4802      	ldr	r0, [pc, #8]	; (1ee40 <vsiscanf+0x10>)
   1ee38:	6800      	ldr	r0, [r0, #0]
   1ee3a:	f7ff bfd5 	b.w	1ede8 <_vsiscanf_r>
   1ee3e:	bf00      	nop
   1ee40:	2000c5d0 	.word	0x2000c5d0

0001ee44 <__malloc_lock>:
   1ee44:	4801      	ldr	r0, [pc, #4]	; (1ee4c <__malloc_lock+0x8>)
   1ee46:	f001 bd7e 	b.w	20946 <__retarget_lock_acquire_recursive>
   1ee4a:	bf00      	nop
   1ee4c:	2000c6dc 	.word	0x2000c6dc

0001ee50 <__malloc_unlock>:
   1ee50:	4801      	ldr	r0, [pc, #4]	; (1ee58 <__malloc_unlock+0x8>)
   1ee52:	f001 bd80 	b.w	20956 <__retarget_lock_release_recursive>
   1ee56:	bf00      	nop
   1ee58:	2000c6dc 	.word	0x2000c6dc

0001ee5c <_svfiprintf_r>:
   1ee5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee60:	4698      	mov	r8, r3
   1ee62:	898b      	ldrh	r3, [r1, #12]
   1ee64:	b09d      	sub	sp, #116	; 0x74
   1ee66:	4607      	mov	r7, r0
   1ee68:	061b      	lsls	r3, r3, #24
   1ee6a:	460d      	mov	r5, r1
   1ee6c:	4614      	mov	r4, r2
   1ee6e:	d50e      	bpl.n	1ee8e <_svfiprintf_r+0x32>
   1ee70:	690b      	ldr	r3, [r1, #16]
   1ee72:	b963      	cbnz	r3, 1ee8e <_svfiprintf_r+0x32>
   1ee74:	2140      	movs	r1, #64	; 0x40
   1ee76:	f7ff fd69 	bl	1e94c <_malloc_r>
   1ee7a:	6028      	str	r0, [r5, #0]
   1ee7c:	6128      	str	r0, [r5, #16]
   1ee7e:	b920      	cbnz	r0, 1ee8a <_svfiprintf_r+0x2e>
   1ee80:	230c      	movs	r3, #12
   1ee82:	603b      	str	r3, [r7, #0]
   1ee84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ee88:	e0d1      	b.n	1f02e <_svfiprintf_r+0x1d2>
   1ee8a:	2340      	movs	r3, #64	; 0x40
   1ee8c:	616b      	str	r3, [r5, #20]
   1ee8e:	2300      	movs	r3, #0
   1ee90:	f8cd 800c 	str.w	r8, [sp, #12]
   1ee94:	f04f 0901 	mov.w	r9, #1
   1ee98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1f048 <_svfiprintf_r+0x1ec>
   1ee9c:	9309      	str	r3, [sp, #36]	; 0x24
   1ee9e:	2320      	movs	r3, #32
   1eea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1eea4:	2330      	movs	r3, #48	; 0x30
   1eea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1eeaa:	4623      	mov	r3, r4
   1eeac:	469a      	mov	sl, r3
   1eeae:	f813 2b01 	ldrb.w	r2, [r3], #1
   1eeb2:	b10a      	cbz	r2, 1eeb8 <_svfiprintf_r+0x5c>
   1eeb4:	2a25      	cmp	r2, #37	; 0x25
   1eeb6:	d1f9      	bne.n	1eeac <_svfiprintf_r+0x50>
   1eeb8:	ebba 0b04 	subs.w	fp, sl, r4
   1eebc:	d00b      	beq.n	1eed6 <_svfiprintf_r+0x7a>
   1eebe:	465b      	mov	r3, fp
   1eec0:	4622      	mov	r2, r4
   1eec2:	4629      	mov	r1, r5
   1eec4:	4638      	mov	r0, r7
   1eec6:	f005 fea5 	bl	24c14 <__ssputs_r>
   1eeca:	3001      	adds	r0, #1
   1eecc:	f000 80aa 	beq.w	1f024 <_svfiprintf_r+0x1c8>
   1eed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eed2:	445a      	add	r2, fp
   1eed4:	9209      	str	r2, [sp, #36]	; 0x24
   1eed6:	f89a 3000 	ldrb.w	r3, [sl]
   1eeda:	2b00      	cmp	r3, #0
   1eedc:	f000 80a2 	beq.w	1f024 <_svfiprintf_r+0x1c8>
   1eee0:	2300      	movs	r3, #0
   1eee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eee6:	f10a 0a01 	add.w	sl, sl, #1
   1eeea:	9304      	str	r3, [sp, #16]
   1eeec:	9307      	str	r3, [sp, #28]
   1eeee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1eef2:	931a      	str	r3, [sp, #104]	; 0x68
   1eef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1eef8:	4654      	mov	r4, sl
   1eefa:	2205      	movs	r2, #5
   1eefc:	4852      	ldr	r0, [pc, #328]	; (1f048 <_svfiprintf_r+0x1ec>)
   1eefe:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ef02:	f005 fdc5 	bl	24a90 <memchr>
   1ef06:	9a04      	ldr	r2, [sp, #16]
   1ef08:	b9d8      	cbnz	r0, 1ef42 <_svfiprintf_r+0xe6>
   1ef0a:	06d0      	lsls	r0, r2, #27
   1ef0c:	bf44      	itt	mi
   1ef0e:	2320      	movmi	r3, #32
   1ef10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1ef14:	0711      	lsls	r1, r2, #28
   1ef16:	bf44      	itt	mi
   1ef18:	232b      	movmi	r3, #43	; 0x2b
   1ef1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1ef1e:	f89a 3000 	ldrb.w	r3, [sl]
   1ef22:	2b2a      	cmp	r3, #42	; 0x2a
   1ef24:	d015      	beq.n	1ef52 <_svfiprintf_r+0xf6>
   1ef26:	9a07      	ldr	r2, [sp, #28]
   1ef28:	4654      	mov	r4, sl
   1ef2a:	2000      	movs	r0, #0
   1ef2c:	f04f 0c0a 	mov.w	ip, #10
   1ef30:	4621      	mov	r1, r4
   1ef32:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ef36:	3b30      	subs	r3, #48	; 0x30
   1ef38:	2b09      	cmp	r3, #9
   1ef3a:	d94e      	bls.n	1efda <_svfiprintf_r+0x17e>
   1ef3c:	b1b0      	cbz	r0, 1ef6c <_svfiprintf_r+0x110>
   1ef3e:	9207      	str	r2, [sp, #28]
   1ef40:	e014      	b.n	1ef6c <_svfiprintf_r+0x110>
   1ef42:	eba0 0308 	sub.w	r3, r0, r8
   1ef46:	46a2      	mov	sl, r4
   1ef48:	fa09 f303 	lsl.w	r3, r9, r3
   1ef4c:	4313      	orrs	r3, r2
   1ef4e:	9304      	str	r3, [sp, #16]
   1ef50:	e7d2      	b.n	1eef8 <_svfiprintf_r+0x9c>
   1ef52:	9b03      	ldr	r3, [sp, #12]
   1ef54:	1d19      	adds	r1, r3, #4
   1ef56:	681b      	ldr	r3, [r3, #0]
   1ef58:	2b00      	cmp	r3, #0
   1ef5a:	9103      	str	r1, [sp, #12]
   1ef5c:	bfbb      	ittet	lt
   1ef5e:	425b      	neglt	r3, r3
   1ef60:	f042 0202 	orrlt.w	r2, r2, #2
   1ef64:	9307      	strge	r3, [sp, #28]
   1ef66:	9307      	strlt	r3, [sp, #28]
   1ef68:	bfb8      	it	lt
   1ef6a:	9204      	strlt	r2, [sp, #16]
   1ef6c:	7823      	ldrb	r3, [r4, #0]
   1ef6e:	2b2e      	cmp	r3, #46	; 0x2e
   1ef70:	d10c      	bne.n	1ef8c <_svfiprintf_r+0x130>
   1ef72:	7863      	ldrb	r3, [r4, #1]
   1ef74:	2b2a      	cmp	r3, #42	; 0x2a
   1ef76:	d135      	bne.n	1efe4 <_svfiprintf_r+0x188>
   1ef78:	9b03      	ldr	r3, [sp, #12]
   1ef7a:	3402      	adds	r4, #2
   1ef7c:	1d1a      	adds	r2, r3, #4
   1ef7e:	681b      	ldr	r3, [r3, #0]
   1ef80:	2b00      	cmp	r3, #0
   1ef82:	9203      	str	r2, [sp, #12]
   1ef84:	bfb8      	it	lt
   1ef86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1ef8a:	9305      	str	r3, [sp, #20]
   1ef8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 1f04c <_svfiprintf_r+0x1f0>
   1ef90:	2203      	movs	r2, #3
   1ef92:	7821      	ldrb	r1, [r4, #0]
   1ef94:	4650      	mov	r0, sl
   1ef96:	f005 fd7b 	bl	24a90 <memchr>
   1ef9a:	b140      	cbz	r0, 1efae <_svfiprintf_r+0x152>
   1ef9c:	2340      	movs	r3, #64	; 0x40
   1ef9e:	eba0 000a 	sub.w	r0, r0, sl
   1efa2:	3401      	adds	r4, #1
   1efa4:	fa03 f000 	lsl.w	r0, r3, r0
   1efa8:	9b04      	ldr	r3, [sp, #16]
   1efaa:	4303      	orrs	r3, r0
   1efac:	9304      	str	r3, [sp, #16]
   1efae:	f814 1b01 	ldrb.w	r1, [r4], #1
   1efb2:	2206      	movs	r2, #6
   1efb4:	4826      	ldr	r0, [pc, #152]	; (1f050 <_svfiprintf_r+0x1f4>)
   1efb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1efba:	f005 fd69 	bl	24a90 <memchr>
   1efbe:	2800      	cmp	r0, #0
   1efc0:	d038      	beq.n	1f034 <_svfiprintf_r+0x1d8>
   1efc2:	4b24      	ldr	r3, [pc, #144]	; (1f054 <_svfiprintf_r+0x1f8>)
   1efc4:	bb1b      	cbnz	r3, 1f00e <_svfiprintf_r+0x1b2>
   1efc6:	9b03      	ldr	r3, [sp, #12]
   1efc8:	3307      	adds	r3, #7
   1efca:	f023 0307 	bic.w	r3, r3, #7
   1efce:	3308      	adds	r3, #8
   1efd0:	9303      	str	r3, [sp, #12]
   1efd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1efd4:	4433      	add	r3, r6
   1efd6:	9309      	str	r3, [sp, #36]	; 0x24
   1efd8:	e767      	b.n	1eeaa <_svfiprintf_r+0x4e>
   1efda:	fb0c 3202 	mla	r2, ip, r2, r3
   1efde:	460c      	mov	r4, r1
   1efe0:	2001      	movs	r0, #1
   1efe2:	e7a5      	b.n	1ef30 <_svfiprintf_r+0xd4>
   1efe4:	2300      	movs	r3, #0
   1efe6:	3401      	adds	r4, #1
   1efe8:	f04f 0c0a 	mov.w	ip, #10
   1efec:	4619      	mov	r1, r3
   1efee:	9305      	str	r3, [sp, #20]
   1eff0:	4620      	mov	r0, r4
   1eff2:	f810 2b01 	ldrb.w	r2, [r0], #1
   1eff6:	3a30      	subs	r2, #48	; 0x30
   1eff8:	2a09      	cmp	r2, #9
   1effa:	d903      	bls.n	1f004 <_svfiprintf_r+0x1a8>
   1effc:	2b00      	cmp	r3, #0
   1effe:	d0c5      	beq.n	1ef8c <_svfiprintf_r+0x130>
   1f000:	9105      	str	r1, [sp, #20]
   1f002:	e7c3      	b.n	1ef8c <_svfiprintf_r+0x130>
   1f004:	fb0c 2101 	mla	r1, ip, r1, r2
   1f008:	4604      	mov	r4, r0
   1f00a:	2301      	movs	r3, #1
   1f00c:	e7f0      	b.n	1eff0 <_svfiprintf_r+0x194>
   1f00e:	ab03      	add	r3, sp, #12
   1f010:	462a      	mov	r2, r5
   1f012:	a904      	add	r1, sp, #16
   1f014:	4638      	mov	r0, r7
   1f016:	9300      	str	r3, [sp, #0]
   1f018:	4b0f      	ldr	r3, [pc, #60]	; (1f058 <_svfiprintf_r+0x1fc>)
   1f01a:	e000      	b.n	1f01e <_svfiprintf_r+0x1c2>
   1f01c:	bf00      	nop
   1f01e:	1c42      	adds	r2, r0, #1
   1f020:	4606      	mov	r6, r0
   1f022:	d1d6      	bne.n	1efd2 <_svfiprintf_r+0x176>
   1f024:	89ab      	ldrh	r3, [r5, #12]
   1f026:	065b      	lsls	r3, r3, #25
   1f028:	f53f af2c 	bmi.w	1ee84 <_svfiprintf_r+0x28>
   1f02c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f02e:	b01d      	add	sp, #116	; 0x74
   1f030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f034:	ab03      	add	r3, sp, #12
   1f036:	462a      	mov	r2, r5
   1f038:	a904      	add	r1, sp, #16
   1f03a:	4638      	mov	r0, r7
   1f03c:	9300      	str	r3, [sp, #0]
   1f03e:	4b06      	ldr	r3, [pc, #24]	; (1f058 <_svfiprintf_r+0x1fc>)
   1f040:	f000 f988 	bl	1f354 <_printf_i>
   1f044:	e7eb      	b.n	1f01e <_svfiprintf_r+0x1c2>
   1f046:	bf00      	nop
   1f048:	000276b3 	.word	0x000276b3
   1f04c:	000276b9 	.word	0x000276b9
   1f050:	000276bd 	.word	0x000276bd
   1f054:	00000000 	.word	0x00000000
   1f058:	00024c15 	.word	0x00024c15

0001f05c <__ssvfiscanf_r>:
   1f05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f060:	460c      	mov	r4, r1
   1f062:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   1f066:	2100      	movs	r1, #0
   1f068:	4606      	mov	r6, r0
   1f06a:	f10d 0804 	add.w	r8, sp, #4
   1f06e:	4fa8      	ldr	r7, [pc, #672]	; (1f310 <__ssvfiscanf_r+0x2b4>)
   1f070:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 1f314 <__ssvfiscanf_r+0x2b8>
   1f074:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1f078:	9300      	str	r3, [sp, #0]
   1f07a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1f07e:	49a6      	ldr	r1, [pc, #664]	; (1f318 <__ssvfiscanf_r+0x2bc>)
   1f080:	91a0      	str	r1, [sp, #640]	; 0x280
   1f082:	49a6      	ldr	r1, [pc, #664]	; (1f31c <__ssvfiscanf_r+0x2c0>)
   1f084:	91a1      	str	r1, [sp, #644]	; 0x284
   1f086:	7813      	ldrb	r3, [r2, #0]
   1f088:	2b00      	cmp	r3, #0
   1f08a:	f000 815e 	beq.w	1f34a <__ssvfiscanf_r+0x2ee>
   1f08e:	5dd9      	ldrb	r1, [r3, r7]
   1f090:	1c55      	adds	r5, r2, #1
   1f092:	f011 0108 	ands.w	r1, r1, #8
   1f096:	d019      	beq.n	1f0cc <__ssvfiscanf_r+0x70>
   1f098:	6863      	ldr	r3, [r4, #4]
   1f09a:	2b00      	cmp	r3, #0
   1f09c:	dd0f      	ble.n	1f0be <__ssvfiscanf_r+0x62>
   1f09e:	6823      	ldr	r3, [r4, #0]
   1f0a0:	781a      	ldrb	r2, [r3, #0]
   1f0a2:	5cba      	ldrb	r2, [r7, r2]
   1f0a4:	0712      	lsls	r2, r2, #28
   1f0a6:	d401      	bmi.n	1f0ac <__ssvfiscanf_r+0x50>
   1f0a8:	462a      	mov	r2, r5
   1f0aa:	e7ec      	b.n	1f086 <__ssvfiscanf_r+0x2a>
   1f0ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1f0ae:	3301      	adds	r3, #1
   1f0b0:	3201      	adds	r2, #1
   1f0b2:	6023      	str	r3, [r4, #0]
   1f0b4:	9245      	str	r2, [sp, #276]	; 0x114
   1f0b6:	6862      	ldr	r2, [r4, #4]
   1f0b8:	3a01      	subs	r2, #1
   1f0ba:	6062      	str	r2, [r4, #4]
   1f0bc:	e7ec      	b.n	1f098 <__ssvfiscanf_r+0x3c>
   1f0be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1f0c0:	4621      	mov	r1, r4
   1f0c2:	4630      	mov	r0, r6
   1f0c4:	4798      	blx	r3
   1f0c6:	2800      	cmp	r0, #0
   1f0c8:	d0e9      	beq.n	1f09e <__ssvfiscanf_r+0x42>
   1f0ca:	e7ed      	b.n	1f0a8 <__ssvfiscanf_r+0x4c>
   1f0cc:	2b25      	cmp	r3, #37	; 0x25
   1f0ce:	d012      	beq.n	1f0f6 <__ssvfiscanf_r+0x9a>
   1f0d0:	469a      	mov	sl, r3
   1f0d2:	6863      	ldr	r3, [r4, #4]
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	f340 8094 	ble.w	1f202 <__ssvfiscanf_r+0x1a6>
   1f0da:	6822      	ldr	r2, [r4, #0]
   1f0dc:	7813      	ldrb	r3, [r2, #0]
   1f0de:	4553      	cmp	r3, sl
   1f0e0:	f040 8133 	bne.w	1f34a <__ssvfiscanf_r+0x2ee>
   1f0e4:	6863      	ldr	r3, [r4, #4]
   1f0e6:	3201      	adds	r2, #1
   1f0e8:	3b01      	subs	r3, #1
   1f0ea:	6022      	str	r2, [r4, #0]
   1f0ec:	6063      	str	r3, [r4, #4]
   1f0ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1f0f0:	3301      	adds	r3, #1
   1f0f2:	9345      	str	r3, [sp, #276]	; 0x114
   1f0f4:	e7d8      	b.n	1f0a8 <__ssvfiscanf_r+0x4c>
   1f0f6:	9141      	str	r1, [sp, #260]	; 0x104
   1f0f8:	9143      	str	r1, [sp, #268]	; 0x10c
   1f0fa:	7853      	ldrb	r3, [r2, #1]
   1f0fc:	2b2a      	cmp	r3, #42	; 0x2a
   1f0fe:	bf04      	itt	eq
   1f100:	2310      	moveq	r3, #16
   1f102:	1c95      	addeq	r5, r2, #2
   1f104:	f04f 020a 	mov.w	r2, #10
   1f108:	bf08      	it	eq
   1f10a:	9341      	streq	r3, [sp, #260]	; 0x104
   1f10c:	46aa      	mov	sl, r5
   1f10e:	f81a 1b01 	ldrb.w	r1, [sl], #1
   1f112:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1f116:	2b09      	cmp	r3, #9
   1f118:	d91d      	bls.n	1f156 <__ssvfiscanf_r+0xfa>
   1f11a:	2203      	movs	r2, #3
   1f11c:	487d      	ldr	r0, [pc, #500]	; (1f314 <__ssvfiscanf_r+0x2b8>)
   1f11e:	f005 fcb7 	bl	24a90 <memchr>
   1f122:	b140      	cbz	r0, 1f136 <__ssvfiscanf_r+0xda>
   1f124:	2301      	movs	r3, #1
   1f126:	eba0 0009 	sub.w	r0, r0, r9
   1f12a:	4655      	mov	r5, sl
   1f12c:	fa03 f000 	lsl.w	r0, r3, r0
   1f130:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1f132:	4318      	orrs	r0, r3
   1f134:	9041      	str	r0, [sp, #260]	; 0x104
   1f136:	f815 3b01 	ldrb.w	r3, [r5], #1
   1f13a:	2b78      	cmp	r3, #120	; 0x78
   1f13c:	d806      	bhi.n	1f14c <__ssvfiscanf_r+0xf0>
   1f13e:	2b57      	cmp	r3, #87	; 0x57
   1f140:	d810      	bhi.n	1f164 <__ssvfiscanf_r+0x108>
   1f142:	2b25      	cmp	r3, #37	; 0x25
   1f144:	d0c4      	beq.n	1f0d0 <__ssvfiscanf_r+0x74>
   1f146:	d857      	bhi.n	1f1f8 <__ssvfiscanf_r+0x19c>
   1f148:	2b00      	cmp	r3, #0
   1f14a:	d065      	beq.n	1f218 <__ssvfiscanf_r+0x1bc>
   1f14c:	2303      	movs	r3, #3
   1f14e:	9347      	str	r3, [sp, #284]	; 0x11c
   1f150:	230a      	movs	r3, #10
   1f152:	9342      	str	r3, [sp, #264]	; 0x108
   1f154:	e072      	b.n	1f23c <__ssvfiscanf_r+0x1e0>
   1f156:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1f158:	4655      	mov	r5, sl
   1f15a:	fb02 1103 	mla	r1, r2, r3, r1
   1f15e:	3930      	subs	r1, #48	; 0x30
   1f160:	9143      	str	r1, [sp, #268]	; 0x10c
   1f162:	e7d3      	b.n	1f10c <__ssvfiscanf_r+0xb0>
   1f164:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1f168:	2a20      	cmp	r2, #32
   1f16a:	d8ef      	bhi.n	1f14c <__ssvfiscanf_r+0xf0>
   1f16c:	a101      	add	r1, pc, #4	; (adr r1, 1f174 <__ssvfiscanf_r+0x118>)
   1f16e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1f172:	bf00      	nop
   1f174:	0001f227 	.word	0x0001f227
   1f178:	0001f14d 	.word	0x0001f14d
   1f17c:	0001f14d 	.word	0x0001f14d
   1f180:	0001f285 	.word	0x0001f285
   1f184:	0001f14d 	.word	0x0001f14d
   1f188:	0001f14d 	.word	0x0001f14d
   1f18c:	0001f14d 	.word	0x0001f14d
   1f190:	0001f14d 	.word	0x0001f14d
   1f194:	0001f14d 	.word	0x0001f14d
   1f198:	0001f14d 	.word	0x0001f14d
   1f19c:	0001f14d 	.word	0x0001f14d
   1f1a0:	0001f29b 	.word	0x0001f29b
   1f1a4:	0001f271 	.word	0x0001f271
   1f1a8:	0001f1ff 	.word	0x0001f1ff
   1f1ac:	0001f1ff 	.word	0x0001f1ff
   1f1b0:	0001f1ff 	.word	0x0001f1ff
   1f1b4:	0001f14d 	.word	0x0001f14d
   1f1b8:	0001f275 	.word	0x0001f275
   1f1bc:	0001f14d 	.word	0x0001f14d
   1f1c0:	0001f14d 	.word	0x0001f14d
   1f1c4:	0001f14d 	.word	0x0001f14d
   1f1c8:	0001f14d 	.word	0x0001f14d
   1f1cc:	0001f2ab 	.word	0x0001f2ab
   1f1d0:	0001f27d 	.word	0x0001f27d
   1f1d4:	0001f21f 	.word	0x0001f21f
   1f1d8:	0001f14d 	.word	0x0001f14d
   1f1dc:	0001f14d 	.word	0x0001f14d
   1f1e0:	0001f2a7 	.word	0x0001f2a7
   1f1e4:	0001f14d 	.word	0x0001f14d
   1f1e8:	0001f271 	.word	0x0001f271
   1f1ec:	0001f14d 	.word	0x0001f14d
   1f1f0:	0001f14d 	.word	0x0001f14d
   1f1f4:	0001f227 	.word	0x0001f227
   1f1f8:	3b45      	subs	r3, #69	; 0x45
   1f1fa:	2b02      	cmp	r3, #2
   1f1fc:	d8a6      	bhi.n	1f14c <__ssvfiscanf_r+0xf0>
   1f1fe:	2305      	movs	r3, #5
   1f200:	e01b      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f202:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1f204:	4621      	mov	r1, r4
   1f206:	4630      	mov	r0, r6
   1f208:	4798      	blx	r3
   1f20a:	2800      	cmp	r0, #0
   1f20c:	f43f af65 	beq.w	1f0da <__ssvfiscanf_r+0x7e>
   1f210:	9844      	ldr	r0, [sp, #272]	; 0x110
   1f212:	2800      	cmp	r0, #0
   1f214:	f040 808f 	bne.w	1f336 <__ssvfiscanf_r+0x2da>
   1f218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f21c:	e091      	b.n	1f342 <__ssvfiscanf_r+0x2e6>
   1f21e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1f220:	f042 0220 	orr.w	r2, r2, #32
   1f224:	9241      	str	r2, [sp, #260]	; 0x104
   1f226:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1f228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1f22c:	9241      	str	r2, [sp, #260]	; 0x104
   1f22e:	2210      	movs	r2, #16
   1f230:	2b6f      	cmp	r3, #111	; 0x6f
   1f232:	9242      	str	r2, [sp, #264]	; 0x108
   1f234:	bf34      	ite	cc
   1f236:	2303      	movcc	r3, #3
   1f238:	2304      	movcs	r3, #4
   1f23a:	9347      	str	r3, [sp, #284]	; 0x11c
   1f23c:	6863      	ldr	r3, [r4, #4]
   1f23e:	2b00      	cmp	r3, #0
   1f240:	dd43      	ble.n	1f2ca <__ssvfiscanf_r+0x26e>
   1f242:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1f244:	0659      	lsls	r1, r3, #25
   1f246:	d404      	bmi.n	1f252 <__ssvfiscanf_r+0x1f6>
   1f248:	6823      	ldr	r3, [r4, #0]
   1f24a:	781a      	ldrb	r2, [r3, #0]
   1f24c:	5cba      	ldrb	r2, [r7, r2]
   1f24e:	0712      	lsls	r2, r2, #28
   1f250:	d442      	bmi.n	1f2d8 <__ssvfiscanf_r+0x27c>
   1f252:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1f254:	2b02      	cmp	r3, #2
   1f256:	dc51      	bgt.n	1f2fc <__ssvfiscanf_r+0x2a0>
   1f258:	466b      	mov	r3, sp
   1f25a:	4622      	mov	r2, r4
   1f25c:	a941      	add	r1, sp, #260	; 0x104
   1f25e:	4630      	mov	r0, r6
   1f260:	f000 f99e 	bl	1f5a0 <_scanf_chars>
   1f264:	2801      	cmp	r0, #1
   1f266:	d070      	beq.n	1f34a <__ssvfiscanf_r+0x2ee>
   1f268:	2802      	cmp	r0, #2
   1f26a:	f47f af1d 	bne.w	1f0a8 <__ssvfiscanf_r+0x4c>
   1f26e:	e7cf      	b.n	1f210 <__ssvfiscanf_r+0x1b4>
   1f270:	220a      	movs	r2, #10
   1f272:	e7dd      	b.n	1f230 <__ssvfiscanf_r+0x1d4>
   1f274:	2300      	movs	r3, #0
   1f276:	9342      	str	r3, [sp, #264]	; 0x108
   1f278:	2303      	movs	r3, #3
   1f27a:	e7de      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f27c:	2308      	movs	r3, #8
   1f27e:	9342      	str	r3, [sp, #264]	; 0x108
   1f280:	2304      	movs	r3, #4
   1f282:	e7da      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f284:	4629      	mov	r1, r5
   1f286:	4640      	mov	r0, r8
   1f288:	f005 fde9 	bl	24e5e <__sccl>
   1f28c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1f28e:	4605      	mov	r5, r0
   1f290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f294:	9341      	str	r3, [sp, #260]	; 0x104
   1f296:	2301      	movs	r3, #1
   1f298:	e7cf      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f29a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1f29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f2a0:	9341      	str	r3, [sp, #260]	; 0x104
   1f2a2:	2300      	movs	r3, #0
   1f2a4:	e7c9      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f2a6:	2302      	movs	r3, #2
   1f2a8:	e7c7      	b.n	1f23a <__ssvfiscanf_r+0x1de>
   1f2aa:	9841      	ldr	r0, [sp, #260]	; 0x104
   1f2ac:	06c3      	lsls	r3, r0, #27
   1f2ae:	f53f aefb 	bmi.w	1f0a8 <__ssvfiscanf_r+0x4c>
   1f2b2:	9b00      	ldr	r3, [sp, #0]
   1f2b4:	f010 0f01 	tst.w	r0, #1
   1f2b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1f2ba:	f103 0104 	add.w	r1, r3, #4
   1f2be:	9100      	str	r1, [sp, #0]
   1f2c0:	681b      	ldr	r3, [r3, #0]
   1f2c2:	bf14      	ite	ne
   1f2c4:	801a      	strhne	r2, [r3, #0]
   1f2c6:	601a      	streq	r2, [r3, #0]
   1f2c8:	e6ee      	b.n	1f0a8 <__ssvfiscanf_r+0x4c>
   1f2ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1f2cc:	4621      	mov	r1, r4
   1f2ce:	4630      	mov	r0, r6
   1f2d0:	4798      	blx	r3
   1f2d2:	2800      	cmp	r0, #0
   1f2d4:	d0b5      	beq.n	1f242 <__ssvfiscanf_r+0x1e6>
   1f2d6:	e79b      	b.n	1f210 <__ssvfiscanf_r+0x1b4>
   1f2d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1f2da:	3201      	adds	r2, #1
   1f2dc:	9245      	str	r2, [sp, #276]	; 0x114
   1f2de:	6862      	ldr	r2, [r4, #4]
   1f2e0:	3a01      	subs	r2, #1
   1f2e2:	2a00      	cmp	r2, #0
   1f2e4:	6062      	str	r2, [r4, #4]
   1f2e6:	dd02      	ble.n	1f2ee <__ssvfiscanf_r+0x292>
   1f2e8:	3301      	adds	r3, #1
   1f2ea:	6023      	str	r3, [r4, #0]
   1f2ec:	e7ac      	b.n	1f248 <__ssvfiscanf_r+0x1ec>
   1f2ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1f2f0:	4621      	mov	r1, r4
   1f2f2:	4630      	mov	r0, r6
   1f2f4:	4798      	blx	r3
   1f2f6:	2800      	cmp	r0, #0
   1f2f8:	d0a6      	beq.n	1f248 <__ssvfiscanf_r+0x1ec>
   1f2fa:	e789      	b.n	1f210 <__ssvfiscanf_r+0x1b4>
   1f2fc:	2b04      	cmp	r3, #4
   1f2fe:	dc0f      	bgt.n	1f320 <__ssvfiscanf_r+0x2c4>
   1f300:	466b      	mov	r3, sp
   1f302:	4622      	mov	r2, r4
   1f304:	a941      	add	r1, sp, #260	; 0x104
   1f306:	4630      	mov	r0, r6
   1f308:	f000 f9a4 	bl	1f654 <_scanf_i>
   1f30c:	e7aa      	b.n	1f264 <__ssvfiscanf_r+0x208>
   1f30e:	bf00      	nop
   1f310:	000275b3 	.word	0x000275b3
   1f314:	000276b9 	.word	0x000276b9
   1f318:	00024ccb 	.word	0x00024ccb
   1f31c:	00024d45 	.word	0x00024d45
   1f320:	4b0b      	ldr	r3, [pc, #44]	; (1f350 <__ssvfiscanf_r+0x2f4>)
   1f322:	2b00      	cmp	r3, #0
   1f324:	f43f aec0 	beq.w	1f0a8 <__ssvfiscanf_r+0x4c>
   1f328:	466b      	mov	r3, sp
   1f32a:	4622      	mov	r2, r4
   1f32c:	a941      	add	r1, sp, #260	; 0x104
   1f32e:	4630      	mov	r0, r6
   1f330:	e000      	b.n	1f334 <__ssvfiscanf_r+0x2d8>
   1f332:	bf00      	nop
   1f334:	e796      	b.n	1f264 <__ssvfiscanf_r+0x208>
   1f336:	89a3      	ldrh	r3, [r4, #12]
   1f338:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f33c:	bf18      	it	ne
   1f33e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1f342:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   1f346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f34a:	9844      	ldr	r0, [sp, #272]	; 0x110
   1f34c:	e7f9      	b.n	1f342 <__ssvfiscanf_r+0x2e6>
   1f34e:	bf00      	nop
   1f350:	00000000 	.word	0x00000000

0001f354 <_printf_i>:
   1f354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f358:	7e0f      	ldrb	r7, [r1, #24]
   1f35a:	4691      	mov	r9, r2
   1f35c:	4680      	mov	r8, r0
   1f35e:	460c      	mov	r4, r1
   1f360:	2f78      	cmp	r7, #120	; 0x78
   1f362:	469a      	mov	sl, r3
   1f364:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f366:	f101 0243 	add.w	r2, r1, #67	; 0x43
   1f36a:	d807      	bhi.n	1f37c <_printf_i+0x28>
   1f36c:	2f62      	cmp	r7, #98	; 0x62
   1f36e:	d80a      	bhi.n	1f386 <_printf_i+0x32>
   1f370:	2f00      	cmp	r7, #0
   1f372:	f000 80d8 	beq.w	1f526 <_printf_i+0x1d2>
   1f376:	2f58      	cmp	r7, #88	; 0x58
   1f378:	f000 80a3 	beq.w	1f4c2 <_printf_i+0x16e>
   1f37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1f380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1f384:	e03a      	b.n	1f3fc <_printf_i+0xa8>
   1f386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1f38a:	2b15      	cmp	r3, #21
   1f38c:	d8f6      	bhi.n	1f37c <_printf_i+0x28>
   1f38e:	a101      	add	r1, pc, #4	; (adr r1, 1f394 <_printf_i+0x40>)
   1f390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1f394:	0001f3ed 	.word	0x0001f3ed
   1f398:	0001f401 	.word	0x0001f401
   1f39c:	0001f37d 	.word	0x0001f37d
   1f3a0:	0001f37d 	.word	0x0001f37d
   1f3a4:	0001f37d 	.word	0x0001f37d
   1f3a8:	0001f37d 	.word	0x0001f37d
   1f3ac:	0001f401 	.word	0x0001f401
   1f3b0:	0001f37d 	.word	0x0001f37d
   1f3b4:	0001f37d 	.word	0x0001f37d
   1f3b8:	0001f37d 	.word	0x0001f37d
   1f3bc:	0001f37d 	.word	0x0001f37d
   1f3c0:	0001f50d 	.word	0x0001f50d
   1f3c4:	0001f431 	.word	0x0001f431
   1f3c8:	0001f4ef 	.word	0x0001f4ef
   1f3cc:	0001f37d 	.word	0x0001f37d
   1f3d0:	0001f37d 	.word	0x0001f37d
   1f3d4:	0001f52f 	.word	0x0001f52f
   1f3d8:	0001f37d 	.word	0x0001f37d
   1f3dc:	0001f431 	.word	0x0001f431
   1f3e0:	0001f37d 	.word	0x0001f37d
   1f3e4:	0001f37d 	.word	0x0001f37d
   1f3e8:	0001f4f7 	.word	0x0001f4f7
   1f3ec:	682b      	ldr	r3, [r5, #0]
   1f3ee:	1d1a      	adds	r2, r3, #4
   1f3f0:	681b      	ldr	r3, [r3, #0]
   1f3f2:	602a      	str	r2, [r5, #0]
   1f3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
   1f3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1f3fc:	2301      	movs	r3, #1
   1f3fe:	e0a3      	b.n	1f548 <_printf_i+0x1f4>
   1f400:	6820      	ldr	r0, [r4, #0]
   1f402:	6829      	ldr	r1, [r5, #0]
   1f404:	0606      	lsls	r6, r0, #24
   1f406:	f101 0304 	add.w	r3, r1, #4
   1f40a:	d50a      	bpl.n	1f422 <_printf_i+0xce>
   1f40c:	680e      	ldr	r6, [r1, #0]
   1f40e:	602b      	str	r3, [r5, #0]
   1f410:	2e00      	cmp	r6, #0
   1f412:	da03      	bge.n	1f41c <_printf_i+0xc8>
   1f414:	232d      	movs	r3, #45	; 0x2d
   1f416:	4276      	negs	r6, r6
   1f418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1f41c:	485e      	ldr	r0, [pc, #376]	; (1f598 <_printf_i+0x244>)
   1f41e:	230a      	movs	r3, #10
   1f420:	e019      	b.n	1f456 <_printf_i+0x102>
   1f422:	680e      	ldr	r6, [r1, #0]
   1f424:	f010 0f40 	tst.w	r0, #64	; 0x40
   1f428:	602b      	str	r3, [r5, #0]
   1f42a:	bf18      	it	ne
   1f42c:	b236      	sxthne	r6, r6
   1f42e:	e7ef      	b.n	1f410 <_printf_i+0xbc>
   1f430:	682b      	ldr	r3, [r5, #0]
   1f432:	6820      	ldr	r0, [r4, #0]
   1f434:	1d19      	adds	r1, r3, #4
   1f436:	6029      	str	r1, [r5, #0]
   1f438:	0601      	lsls	r1, r0, #24
   1f43a:	d501      	bpl.n	1f440 <_printf_i+0xec>
   1f43c:	681e      	ldr	r6, [r3, #0]
   1f43e:	e002      	b.n	1f446 <_printf_i+0xf2>
   1f440:	0646      	lsls	r6, r0, #25
   1f442:	d5fb      	bpl.n	1f43c <_printf_i+0xe8>
   1f444:	881e      	ldrh	r6, [r3, #0]
   1f446:	2f6f      	cmp	r7, #111	; 0x6f
   1f448:	4853      	ldr	r0, [pc, #332]	; (1f598 <_printf_i+0x244>)
   1f44a:	bf0c      	ite	eq
   1f44c:	2308      	moveq	r3, #8
   1f44e:	230a      	movne	r3, #10
   1f450:	2100      	movs	r1, #0
   1f452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1f456:	6865      	ldr	r5, [r4, #4]
   1f458:	2d00      	cmp	r5, #0
   1f45a:	60a5      	str	r5, [r4, #8]
   1f45c:	bfa2      	ittt	ge
   1f45e:	6821      	ldrge	r1, [r4, #0]
   1f460:	f021 0104 	bicge.w	r1, r1, #4
   1f464:	6021      	strge	r1, [r4, #0]
   1f466:	b90e      	cbnz	r6, 1f46c <_printf_i+0x118>
   1f468:	2d00      	cmp	r5, #0
   1f46a:	d04d      	beq.n	1f508 <_printf_i+0x1b4>
   1f46c:	4615      	mov	r5, r2
   1f46e:	fbb6 f1f3 	udiv	r1, r6, r3
   1f472:	fb03 6711 	mls	r7, r3, r1, r6
   1f476:	5dc7      	ldrb	r7, [r0, r7]
   1f478:	f805 7d01 	strb.w	r7, [r5, #-1]!
   1f47c:	4637      	mov	r7, r6
   1f47e:	460e      	mov	r6, r1
   1f480:	42bb      	cmp	r3, r7
   1f482:	d9f4      	bls.n	1f46e <_printf_i+0x11a>
   1f484:	2b08      	cmp	r3, #8
   1f486:	d10b      	bne.n	1f4a0 <_printf_i+0x14c>
   1f488:	6823      	ldr	r3, [r4, #0]
   1f48a:	07de      	lsls	r6, r3, #31
   1f48c:	d508      	bpl.n	1f4a0 <_printf_i+0x14c>
   1f48e:	6923      	ldr	r3, [r4, #16]
   1f490:	6861      	ldr	r1, [r4, #4]
   1f492:	4299      	cmp	r1, r3
   1f494:	bfde      	ittt	le
   1f496:	2330      	movle	r3, #48	; 0x30
   1f498:	f805 3c01 	strble.w	r3, [r5, #-1]
   1f49c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   1f4a0:	1b52      	subs	r2, r2, r5
   1f4a2:	6122      	str	r2, [r4, #16]
   1f4a4:	464b      	mov	r3, r9
   1f4a6:	aa03      	add	r2, sp, #12
   1f4a8:	4621      	mov	r1, r4
   1f4aa:	4640      	mov	r0, r8
   1f4ac:	f8cd a000 	str.w	sl, [sp]
   1f4b0:	f005 fc65 	bl	24d7e <_printf_common>
   1f4b4:	3001      	adds	r0, #1
   1f4b6:	d14c      	bne.n	1f552 <_printf_i+0x1fe>
   1f4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f4bc:	b004      	add	sp, #16
   1f4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f4c2:	4835      	ldr	r0, [pc, #212]	; (1f598 <_printf_i+0x244>)
   1f4c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   1f4c8:	6829      	ldr	r1, [r5, #0]
   1f4ca:	6823      	ldr	r3, [r4, #0]
   1f4cc:	f851 6b04 	ldr.w	r6, [r1], #4
   1f4d0:	6029      	str	r1, [r5, #0]
   1f4d2:	061d      	lsls	r5, r3, #24
   1f4d4:	d514      	bpl.n	1f500 <_printf_i+0x1ac>
   1f4d6:	07df      	lsls	r7, r3, #31
   1f4d8:	bf44      	itt	mi
   1f4da:	f043 0320 	orrmi.w	r3, r3, #32
   1f4de:	6023      	strmi	r3, [r4, #0]
   1f4e0:	b91e      	cbnz	r6, 1f4ea <_printf_i+0x196>
   1f4e2:	6823      	ldr	r3, [r4, #0]
   1f4e4:	f023 0320 	bic.w	r3, r3, #32
   1f4e8:	6023      	str	r3, [r4, #0]
   1f4ea:	2310      	movs	r3, #16
   1f4ec:	e7b0      	b.n	1f450 <_printf_i+0xfc>
   1f4ee:	6823      	ldr	r3, [r4, #0]
   1f4f0:	f043 0320 	orr.w	r3, r3, #32
   1f4f4:	6023      	str	r3, [r4, #0]
   1f4f6:	2378      	movs	r3, #120	; 0x78
   1f4f8:	4828      	ldr	r0, [pc, #160]	; (1f59c <_printf_i+0x248>)
   1f4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1f4fe:	e7e3      	b.n	1f4c8 <_printf_i+0x174>
   1f500:	0659      	lsls	r1, r3, #25
   1f502:	bf48      	it	mi
   1f504:	b2b6      	uxthmi	r6, r6
   1f506:	e7e6      	b.n	1f4d6 <_printf_i+0x182>
   1f508:	4615      	mov	r5, r2
   1f50a:	e7bb      	b.n	1f484 <_printf_i+0x130>
   1f50c:	682b      	ldr	r3, [r5, #0]
   1f50e:	6826      	ldr	r6, [r4, #0]
   1f510:	1d18      	adds	r0, r3, #4
   1f512:	6961      	ldr	r1, [r4, #20]
   1f514:	6028      	str	r0, [r5, #0]
   1f516:	0635      	lsls	r5, r6, #24
   1f518:	681b      	ldr	r3, [r3, #0]
   1f51a:	d501      	bpl.n	1f520 <_printf_i+0x1cc>
   1f51c:	6019      	str	r1, [r3, #0]
   1f51e:	e002      	b.n	1f526 <_printf_i+0x1d2>
   1f520:	0670      	lsls	r0, r6, #25
   1f522:	d5fb      	bpl.n	1f51c <_printf_i+0x1c8>
   1f524:	8019      	strh	r1, [r3, #0]
   1f526:	2300      	movs	r3, #0
   1f528:	4615      	mov	r5, r2
   1f52a:	6123      	str	r3, [r4, #16]
   1f52c:	e7ba      	b.n	1f4a4 <_printf_i+0x150>
   1f52e:	682b      	ldr	r3, [r5, #0]
   1f530:	2100      	movs	r1, #0
   1f532:	1d1a      	adds	r2, r3, #4
   1f534:	602a      	str	r2, [r5, #0]
   1f536:	681d      	ldr	r5, [r3, #0]
   1f538:	6862      	ldr	r2, [r4, #4]
   1f53a:	4628      	mov	r0, r5
   1f53c:	f005 faa8 	bl	24a90 <memchr>
   1f540:	b108      	cbz	r0, 1f546 <_printf_i+0x1f2>
   1f542:	1b40      	subs	r0, r0, r5
   1f544:	6060      	str	r0, [r4, #4]
   1f546:	6863      	ldr	r3, [r4, #4]
   1f548:	6123      	str	r3, [r4, #16]
   1f54a:	2300      	movs	r3, #0
   1f54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1f550:	e7a8      	b.n	1f4a4 <_printf_i+0x150>
   1f552:	6923      	ldr	r3, [r4, #16]
   1f554:	462a      	mov	r2, r5
   1f556:	4649      	mov	r1, r9
   1f558:	4640      	mov	r0, r8
   1f55a:	47d0      	blx	sl
   1f55c:	3001      	adds	r0, #1
   1f55e:	d0ab      	beq.n	1f4b8 <_printf_i+0x164>
   1f560:	6823      	ldr	r3, [r4, #0]
   1f562:	079b      	lsls	r3, r3, #30
   1f564:	d413      	bmi.n	1f58e <_printf_i+0x23a>
   1f566:	68e0      	ldr	r0, [r4, #12]
   1f568:	9b03      	ldr	r3, [sp, #12]
   1f56a:	4298      	cmp	r0, r3
   1f56c:	bfb8      	it	lt
   1f56e:	4618      	movlt	r0, r3
   1f570:	e7a4      	b.n	1f4bc <_printf_i+0x168>
   1f572:	2301      	movs	r3, #1
   1f574:	4632      	mov	r2, r6
   1f576:	4649      	mov	r1, r9
   1f578:	4640      	mov	r0, r8
   1f57a:	47d0      	blx	sl
   1f57c:	3001      	adds	r0, #1
   1f57e:	d09b      	beq.n	1f4b8 <_printf_i+0x164>
   1f580:	3501      	adds	r5, #1
   1f582:	68e3      	ldr	r3, [r4, #12]
   1f584:	9903      	ldr	r1, [sp, #12]
   1f586:	1a5b      	subs	r3, r3, r1
   1f588:	42ab      	cmp	r3, r5
   1f58a:	dcf2      	bgt.n	1f572 <_printf_i+0x21e>
   1f58c:	e7eb      	b.n	1f566 <_printf_i+0x212>
   1f58e:	2500      	movs	r5, #0
   1f590:	f104 0619 	add.w	r6, r4, #25
   1f594:	e7f5      	b.n	1f582 <_printf_i+0x22e>
   1f596:	bf00      	nop
   1f598:	000276c4 	.word	0x000276c4
   1f59c:	000276d5 	.word	0x000276d5

0001f5a0 <_scanf_chars>:
   1f5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f5a4:	4615      	mov	r5, r2
   1f5a6:	688a      	ldr	r2, [r1, #8]
   1f5a8:	4680      	mov	r8, r0
   1f5aa:	460c      	mov	r4, r1
   1f5ac:	b932      	cbnz	r2, 1f5bc <_scanf_chars+0x1c>
   1f5ae:	698a      	ldr	r2, [r1, #24]
   1f5b0:	2a00      	cmp	r2, #0
   1f5b2:	bf0c      	ite	eq
   1f5b4:	2201      	moveq	r2, #1
   1f5b6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1f5ba:	608a      	str	r2, [r1, #8]
   1f5bc:	6822      	ldr	r2, [r4, #0]
   1f5be:	2700      	movs	r7, #0
   1f5c0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1f650 <_scanf_chars+0xb0>
   1f5c4:	06d1      	lsls	r1, r2, #27
   1f5c6:	bf5f      	itttt	pl
   1f5c8:	681a      	ldrpl	r2, [r3, #0]
   1f5ca:	1d11      	addpl	r1, r2, #4
   1f5cc:	6019      	strpl	r1, [r3, #0]
   1f5ce:	6816      	ldrpl	r6, [r2, #0]
   1f5d0:	69a0      	ldr	r0, [r4, #24]
   1f5d2:	b188      	cbz	r0, 1f5f8 <_scanf_chars+0x58>
   1f5d4:	2801      	cmp	r0, #1
   1f5d6:	d107      	bne.n	1f5e8 <_scanf_chars+0x48>
   1f5d8:	682b      	ldr	r3, [r5, #0]
   1f5da:	781a      	ldrb	r2, [r3, #0]
   1f5dc:	6963      	ldr	r3, [r4, #20]
   1f5de:	5c9b      	ldrb	r3, [r3, r2]
   1f5e0:	b953      	cbnz	r3, 1f5f8 <_scanf_chars+0x58>
   1f5e2:	2f00      	cmp	r7, #0
   1f5e4:	d031      	beq.n	1f64a <_scanf_chars+0xaa>
   1f5e6:	e022      	b.n	1f62e <_scanf_chars+0x8e>
   1f5e8:	2802      	cmp	r0, #2
   1f5ea:	d120      	bne.n	1f62e <_scanf_chars+0x8e>
   1f5ec:	682b      	ldr	r3, [r5, #0]
   1f5ee:	781b      	ldrb	r3, [r3, #0]
   1f5f0:	f813 3009 	ldrb.w	r3, [r3, r9]
   1f5f4:	071b      	lsls	r3, r3, #28
   1f5f6:	d41a      	bmi.n	1f62e <_scanf_chars+0x8e>
   1f5f8:	6823      	ldr	r3, [r4, #0]
   1f5fa:	3701      	adds	r7, #1
   1f5fc:	06da      	lsls	r2, r3, #27
   1f5fe:	bf5e      	ittt	pl
   1f600:	682b      	ldrpl	r3, [r5, #0]
   1f602:	781b      	ldrbpl	r3, [r3, #0]
   1f604:	f806 3b01 	strbpl.w	r3, [r6], #1
   1f608:	682a      	ldr	r2, [r5, #0]
   1f60a:	686b      	ldr	r3, [r5, #4]
   1f60c:	3201      	adds	r2, #1
   1f60e:	3b01      	subs	r3, #1
   1f610:	602a      	str	r2, [r5, #0]
   1f612:	68a2      	ldr	r2, [r4, #8]
   1f614:	606b      	str	r3, [r5, #4]
   1f616:	3a01      	subs	r2, #1
   1f618:	60a2      	str	r2, [r4, #8]
   1f61a:	b142      	cbz	r2, 1f62e <_scanf_chars+0x8e>
   1f61c:	2b00      	cmp	r3, #0
   1f61e:	dcd7      	bgt.n	1f5d0 <_scanf_chars+0x30>
   1f620:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1f624:	4629      	mov	r1, r5
   1f626:	4640      	mov	r0, r8
   1f628:	4798      	blx	r3
   1f62a:	2800      	cmp	r0, #0
   1f62c:	d0d0      	beq.n	1f5d0 <_scanf_chars+0x30>
   1f62e:	6823      	ldr	r3, [r4, #0]
   1f630:	f013 0310 	ands.w	r3, r3, #16
   1f634:	d105      	bne.n	1f642 <_scanf_chars+0xa2>
   1f636:	68e2      	ldr	r2, [r4, #12]
   1f638:	3201      	adds	r2, #1
   1f63a:	60e2      	str	r2, [r4, #12]
   1f63c:	69a2      	ldr	r2, [r4, #24]
   1f63e:	b102      	cbz	r2, 1f642 <_scanf_chars+0xa2>
   1f640:	7033      	strb	r3, [r6, #0]
   1f642:	6923      	ldr	r3, [r4, #16]
   1f644:	2000      	movs	r0, #0
   1f646:	443b      	add	r3, r7
   1f648:	6123      	str	r3, [r4, #16]
   1f64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f64e:	bf00      	nop
   1f650:	000275b3 	.word	0x000275b3

0001f654 <_scanf_i>:
   1f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f658:	4698      	mov	r8, r3
   1f65a:	b087      	sub	sp, #28
   1f65c:	4b75      	ldr	r3, [pc, #468]	; (1f834 <_scanf_i+0x1e0>)
   1f65e:	460c      	mov	r4, r1
   1f660:	4682      	mov	sl, r0
   1f662:	4616      	mov	r6, r2
   1f664:	4627      	mov	r7, r4
   1f666:	f04f 0b00 	mov.w	fp, #0
   1f66a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1f66e:	ab03      	add	r3, sp, #12
   1f670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1f674:	4b70      	ldr	r3, [pc, #448]	; (1f838 <_scanf_i+0x1e4>)
   1f676:	69a1      	ldr	r1, [r4, #24]
   1f678:	4a70      	ldr	r2, [pc, #448]	; (1f83c <_scanf_i+0x1e8>)
   1f67a:	2903      	cmp	r1, #3
   1f67c:	bf18      	it	ne
   1f67e:	461a      	movne	r2, r3
   1f680:	68a3      	ldr	r3, [r4, #8]
   1f682:	9201      	str	r2, [sp, #4]
   1f684:	1e5a      	subs	r2, r3, #1
   1f686:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1f68a:	bf89      	itett	hi
   1f68c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1f690:	f04f 0900 	movls.w	r9, #0
   1f694:	eb03 0905 	addhi.w	r9, r3, r5
   1f698:	f240 135d 	movwhi	r3, #349	; 0x15d
   1f69c:	bf88      	it	hi
   1f69e:	60a3      	strhi	r3, [r4, #8]
   1f6a0:	f857 3b1c 	ldr.w	r3, [r7], #28
   1f6a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1f6a8:	463d      	mov	r5, r7
   1f6aa:	6023      	str	r3, [r4, #0]
   1f6ac:	6831      	ldr	r1, [r6, #0]
   1f6ae:	ab03      	add	r3, sp, #12
   1f6b0:	2202      	movs	r2, #2
   1f6b2:	7809      	ldrb	r1, [r1, #0]
   1f6b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1f6b8:	f005 f9ea 	bl	24a90 <memchr>
   1f6bc:	b328      	cbz	r0, 1f70a <_scanf_i+0xb6>
   1f6be:	f1bb 0f01 	cmp.w	fp, #1
   1f6c2:	d159      	bne.n	1f778 <_scanf_i+0x124>
   1f6c4:	6862      	ldr	r2, [r4, #4]
   1f6c6:	b92a      	cbnz	r2, 1f6d4 <_scanf_i+0x80>
   1f6c8:	6822      	ldr	r2, [r4, #0]
   1f6ca:	2308      	movs	r3, #8
   1f6cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1f6d0:	6063      	str	r3, [r4, #4]
   1f6d2:	6022      	str	r2, [r4, #0]
   1f6d4:	6822      	ldr	r2, [r4, #0]
   1f6d6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1f6da:	6022      	str	r2, [r4, #0]
   1f6dc:	68a2      	ldr	r2, [r4, #8]
   1f6de:	1e51      	subs	r1, r2, #1
   1f6e0:	60a1      	str	r1, [r4, #8]
   1f6e2:	b192      	cbz	r2, 1f70a <_scanf_i+0xb6>
   1f6e4:	6832      	ldr	r2, [r6, #0]
   1f6e6:	1c51      	adds	r1, r2, #1
   1f6e8:	6031      	str	r1, [r6, #0]
   1f6ea:	7812      	ldrb	r2, [r2, #0]
   1f6ec:	f805 2b01 	strb.w	r2, [r5], #1
   1f6f0:	6872      	ldr	r2, [r6, #4]
   1f6f2:	3a01      	subs	r2, #1
   1f6f4:	2a00      	cmp	r2, #0
   1f6f6:	6072      	str	r2, [r6, #4]
   1f6f8:	dc07      	bgt.n	1f70a <_scanf_i+0xb6>
   1f6fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1f6fe:	4631      	mov	r1, r6
   1f700:	4650      	mov	r0, sl
   1f702:	4790      	blx	r2
   1f704:	2800      	cmp	r0, #0
   1f706:	f040 8085 	bne.w	1f814 <_scanf_i+0x1c0>
   1f70a:	f10b 0b01 	add.w	fp, fp, #1
   1f70e:	f1bb 0f03 	cmp.w	fp, #3
   1f712:	d1cb      	bne.n	1f6ac <_scanf_i+0x58>
   1f714:	6863      	ldr	r3, [r4, #4]
   1f716:	b90b      	cbnz	r3, 1f71c <_scanf_i+0xc8>
   1f718:	230a      	movs	r3, #10
   1f71a:	6063      	str	r3, [r4, #4]
   1f71c:	6863      	ldr	r3, [r4, #4]
   1f71e:	f04f 0b00 	mov.w	fp, #0
   1f722:	4947      	ldr	r1, [pc, #284]	; (1f840 <_scanf_i+0x1ec>)
   1f724:	6960      	ldr	r0, [r4, #20]
   1f726:	1ac9      	subs	r1, r1, r3
   1f728:	f005 fb99 	bl	24e5e <__sccl>
   1f72c:	68a3      	ldr	r3, [r4, #8]
   1f72e:	6822      	ldr	r2, [r4, #0]
   1f730:	2b00      	cmp	r3, #0
   1f732:	d03d      	beq.n	1f7b0 <_scanf_i+0x15c>
   1f734:	6831      	ldr	r1, [r6, #0]
   1f736:	6960      	ldr	r0, [r4, #20]
   1f738:	f891 c000 	ldrb.w	ip, [r1]
   1f73c:	f810 000c 	ldrb.w	r0, [r0, ip]
   1f740:	2800      	cmp	r0, #0
   1f742:	d035      	beq.n	1f7b0 <_scanf_i+0x15c>
   1f744:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1f748:	d124      	bne.n	1f794 <_scanf_i+0x140>
   1f74a:	0510      	lsls	r0, r2, #20
   1f74c:	d522      	bpl.n	1f794 <_scanf_i+0x140>
   1f74e:	f10b 0b01 	add.w	fp, fp, #1
   1f752:	f1b9 0f00 	cmp.w	r9, #0
   1f756:	d003      	beq.n	1f760 <_scanf_i+0x10c>
   1f758:	3301      	adds	r3, #1
   1f75a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1f75e:	60a3      	str	r3, [r4, #8]
   1f760:	6873      	ldr	r3, [r6, #4]
   1f762:	3b01      	subs	r3, #1
   1f764:	2b00      	cmp	r3, #0
   1f766:	6073      	str	r3, [r6, #4]
   1f768:	dd1b      	ble.n	1f7a2 <_scanf_i+0x14e>
   1f76a:	6833      	ldr	r3, [r6, #0]
   1f76c:	3301      	adds	r3, #1
   1f76e:	6033      	str	r3, [r6, #0]
   1f770:	68a3      	ldr	r3, [r4, #8]
   1f772:	3b01      	subs	r3, #1
   1f774:	60a3      	str	r3, [r4, #8]
   1f776:	e7d9      	b.n	1f72c <_scanf_i+0xd8>
   1f778:	f1bb 0f02 	cmp.w	fp, #2
   1f77c:	d1ae      	bne.n	1f6dc <_scanf_i+0x88>
   1f77e:	6822      	ldr	r2, [r4, #0]
   1f780:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1f784:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1f788:	d1bf      	bne.n	1f70a <_scanf_i+0xb6>
   1f78a:	2310      	movs	r3, #16
   1f78c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1f790:	6063      	str	r3, [r4, #4]
   1f792:	e7a2      	b.n	1f6da <_scanf_i+0x86>
   1f794:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1f798:	6022      	str	r2, [r4, #0]
   1f79a:	780b      	ldrb	r3, [r1, #0]
   1f79c:	f805 3b01 	strb.w	r3, [r5], #1
   1f7a0:	e7de      	b.n	1f760 <_scanf_i+0x10c>
   1f7a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1f7a6:	4631      	mov	r1, r6
   1f7a8:	4650      	mov	r0, sl
   1f7aa:	4798      	blx	r3
   1f7ac:	2800      	cmp	r0, #0
   1f7ae:	d0df      	beq.n	1f770 <_scanf_i+0x11c>
   1f7b0:	6823      	ldr	r3, [r4, #0]
   1f7b2:	05db      	lsls	r3, r3, #23
   1f7b4:	d50d      	bpl.n	1f7d2 <_scanf_i+0x17e>
   1f7b6:	42bd      	cmp	r5, r7
   1f7b8:	d909      	bls.n	1f7ce <_scanf_i+0x17a>
   1f7ba:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1f7be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1f7c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1f7c6:	4632      	mov	r2, r6
   1f7c8:	464d      	mov	r5, r9
   1f7ca:	4650      	mov	r0, sl
   1f7cc:	4798      	blx	r3
   1f7ce:	42bd      	cmp	r5, r7
   1f7d0:	d02d      	beq.n	1f82e <_scanf_i+0x1da>
   1f7d2:	6822      	ldr	r2, [r4, #0]
   1f7d4:	f012 0210 	ands.w	r2, r2, #16
   1f7d8:	d113      	bne.n	1f802 <_scanf_i+0x1ae>
   1f7da:	4639      	mov	r1, r7
   1f7dc:	702a      	strb	r2, [r5, #0]
   1f7de:	4650      	mov	r0, sl
   1f7e0:	6863      	ldr	r3, [r4, #4]
   1f7e2:	9e01      	ldr	r6, [sp, #4]
   1f7e4:	47b0      	blx	r6
   1f7e6:	6821      	ldr	r1, [r4, #0]
   1f7e8:	f8d8 3000 	ldr.w	r3, [r8]
   1f7ec:	f011 0f20 	tst.w	r1, #32
   1f7f0:	d013      	beq.n	1f81a <_scanf_i+0x1c6>
   1f7f2:	1d1a      	adds	r2, r3, #4
   1f7f4:	f8c8 2000 	str.w	r2, [r8]
   1f7f8:	681b      	ldr	r3, [r3, #0]
   1f7fa:	6018      	str	r0, [r3, #0]
   1f7fc:	68e3      	ldr	r3, [r4, #12]
   1f7fe:	3301      	adds	r3, #1
   1f800:	60e3      	str	r3, [r4, #12]
   1f802:	1bed      	subs	r5, r5, r7
   1f804:	2000      	movs	r0, #0
   1f806:	44ab      	add	fp, r5
   1f808:	6925      	ldr	r5, [r4, #16]
   1f80a:	445d      	add	r5, fp
   1f80c:	6125      	str	r5, [r4, #16]
   1f80e:	b007      	add	sp, #28
   1f810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f814:	f04f 0b00 	mov.w	fp, #0
   1f818:	e7ca      	b.n	1f7b0 <_scanf_i+0x15c>
   1f81a:	1d1a      	adds	r2, r3, #4
   1f81c:	f011 0f01 	tst.w	r1, #1
   1f820:	f8c8 2000 	str.w	r2, [r8]
   1f824:	681b      	ldr	r3, [r3, #0]
   1f826:	bf14      	ite	ne
   1f828:	8018      	strhne	r0, [r3, #0]
   1f82a:	6018      	streq	r0, [r3, #0]
   1f82c:	e7e6      	b.n	1f7fc <_scanf_i+0x1a8>
   1f82e:	2001      	movs	r0, #1
   1f830:	e7ed      	b.n	1f80e <_scanf_i+0x1ba>
   1f832:	bf00      	nop
   1f834:	00025400 	.word	0x00025400
   1f838:	00024bbb 	.word	0x00024bbb
   1f83c:	00024bb7 	.word	0x00024bb7
   1f840:	000276ff 	.word	0x000276ff

0001f844 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1f844:	b40c      	push	{r2, r3}
   1f846:	b500      	push	{lr}
   1f848:	b083      	sub	sp, #12
   1f84a:	4603      	mov	r3, r0
   1f84c:	4608      	mov	r0, r1
   1f84e:	aa04      	add	r2, sp, #16
   1f850:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
   1f854:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1f856:	68db      	ldr	r3, [r3, #12]
   1f858:	4798      	blx	r3
	va_end(args);

	return res;
}
   1f85a:	b003      	add	sp, #12
   1f85c:	f85d eb04 	ldr.w	lr, [sp], #4
   1f860:	b002      	add	sp, #8
   1f862:	4770      	bx	lr

0001f864 <z_free_fd>:

void z_free_fd(int fd)
{
   1f864:	b508      	push	{r3, lr}
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
   1f866:	f7f2 fa07 	bl	11c78 <z_fd_unref>
}
   1f86a:	bd08      	pop	{r3, pc}

0001f86c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f86c:	4602      	mov	r2, r0
   1f86e:	b1b0      	cbz	r0, 1f89e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f870:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f872:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f876:	2b02      	cmp	r3, #2
   1f878:	d00b      	beq.n	1f892 <sys_notify_validate+0x26>
   1f87a:	2b03      	cmp	r3, #3
   1f87c:	d004      	beq.n	1f888 <sys_notify_validate+0x1c>
   1f87e:	2b01      	cmp	r3, #1
   1f880:	d004      	beq.n	1f88c <sys_notify_validate+0x20>
   1f882:	f06f 0015 	mvn.w	r0, #21
   1f886:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1f888:	6803      	ldr	r3, [r0, #0]
   1f88a:	b15b      	cbz	r3, 1f8a4 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1f88c:	2000      	movs	r0, #0
   1f88e:	6090      	str	r0, [r2, #8]
   1f890:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f892:	6803      	ldr	r3, [r0, #0]
   1f894:	2b00      	cmp	r3, #0
   1f896:	d1f9      	bne.n	1f88c <sys_notify_validate+0x20>
			rv = -EINVAL;
   1f898:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1f89c:	4770      	bx	lr
		return -EINVAL;
   1f89e:	f06f 0015 	mvn.w	r0, #21
   1f8a2:	4770      	bx	lr
			rv = -EINVAL;
   1f8a4:	f06f 0015 	mvn.w	r0, #21
   1f8a8:	4770      	bx	lr

0001f8aa <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1f8aa:	b510      	push	{r4, lr}
   1f8ac:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f8ae:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f8b0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1f8b4:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f8b6:	2a02      	cmp	r2, #2
   1f8b8:	d004      	beq.n	1f8c4 <sys_notify_finalize+0x1a>
   1f8ba:	2a03      	cmp	r2, #3
   1f8bc:	d105      	bne.n	1f8ca <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f8be:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f8c0:	2000      	movs	r0, #0
		break;
   1f8c2:	e004      	b.n	1f8ce <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1f8c4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f8c6:	2400      	movs	r4, #0
		break;
   1f8c8:	e001      	b.n	1f8ce <sys_notify_finalize+0x24>
	switch (method) {
   1f8ca:	2400      	movs	r4, #0
   1f8cc:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f8ce:	2200      	movs	r2, #0
   1f8d0:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f8d2:	b108      	cbz	r0, 1f8d8 <sys_notify_finalize+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1f8d4:	f7fe ff7e 	bl	1e7d4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f8d8:	4620      	mov	r0, r4
   1f8da:	bd10      	pop	{r4, pc}

0001f8dc <arch_printk_char_out>:
}
   1f8dc:	2000      	movs	r0, #0
   1f8de:	4770      	bx	lr

0001f8e0 <str_out>:
{
   1f8e0:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f8e2:	680c      	ldr	r4, [r1, #0]
   1f8e4:	b154      	cbz	r4, 1f8fc <str_out+0x1c>
   1f8e6:	688a      	ldr	r2, [r1, #8]
   1f8e8:	684b      	ldr	r3, [r1, #4]
   1f8ea:	429a      	cmp	r2, r3
   1f8ec:	da06      	bge.n	1f8fc <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1f8ee:	3b01      	subs	r3, #1
   1f8f0:	429a      	cmp	r2, r3
   1f8f2:	d008      	beq.n	1f906 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1f8f4:	1c53      	adds	r3, r2, #1
   1f8f6:	608b      	str	r3, [r1, #8]
   1f8f8:	54a0      	strb	r0, [r4, r2]
   1f8fa:	e002      	b.n	1f902 <str_out+0x22>
		ctx->count++;
   1f8fc:	688b      	ldr	r3, [r1, #8]
   1f8fe:	3301      	adds	r3, #1
   1f900:	608b      	str	r3, [r1, #8]
}
   1f902:	bc10      	pop	{r4}
   1f904:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1f906:	1c53      	adds	r3, r2, #1
   1f908:	608b      	str	r3, [r1, #8]
   1f90a:	2300      	movs	r3, #0
   1f90c:	54a3      	strb	r3, [r4, r2]
   1f90e:	e7f8      	b.n	1f902 <str_out+0x22>

0001f910 <printk>:
{
   1f910:	b40f      	push	{r0, r1, r2, r3}
   1f912:	b500      	push	{lr}
   1f914:	b083      	sub	sp, #12
   1f916:	a904      	add	r1, sp, #16
   1f918:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f91c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1f91e:	f7f2 fa6b 	bl	11df8 <vprintk>
}
   1f922:	b003      	add	sp, #12
   1f924:	f85d eb04 	ldr.w	lr, [sp], #4
   1f928:	b004      	add	sp, #16
   1f92a:	4770      	bx	lr

0001f92c <snprintk>:
{
   1f92c:	b40c      	push	{r2, r3}
   1f92e:	b500      	push	{lr}
   1f930:	b083      	sub	sp, #12
   1f932:	ab04      	add	r3, sp, #16
   1f934:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f938:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f93a:	f7f2 fa6d 	bl	11e18 <vsnprintk>
}
   1f93e:	b003      	add	sp, #12
   1f940:	f85d eb04 	ldr.w	lr, [sp], #4
   1f944:	b002      	add	sp, #8
   1f946:	4770      	bx	lr

0001f948 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f948:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f94c:	8b01      	ldrh	r1, [r0, #24]
   1f94e:	f021 0107 	bic.w	r1, r1, #7
   1f952:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f954:	8301      	strh	r1, [r0, #24]
}
   1f956:	4770      	bx	lr

0001f958 <notify_monitors>:
{
   1f958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f95c:	4606      	mov	r6, r0
   1f95e:	460f      	mov	r7, r1
   1f960:	4690      	mov	r8, r2
	return list->head;
   1f962:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f964:	b119      	cbz	r1, 1f96e <notify_monitors+0x16>
   1f966:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f968:	b131      	cbz	r1, 1f978 <notify_monitors+0x20>
	return node->next;
   1f96a:	680c      	ldr	r4, [r1, #0]
   1f96c:	e004      	b.n	1f978 <notify_monitors+0x20>
   1f96e:	460c      	mov	r4, r1
   1f970:	e002      	b.n	1f978 <notify_monitors+0x20>
   1f972:	4623      	mov	r3, r4
   1f974:	4621      	mov	r1, r4
   1f976:	461c      	mov	r4, r3
   1f978:	b159      	cbz	r1, 1f992 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1f97a:	684d      	ldr	r5, [r1, #4]
   1f97c:	4643      	mov	r3, r8
   1f97e:	463a      	mov	r2, r7
   1f980:	4630      	mov	r0, r6
   1f982:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1f984:	2c00      	cmp	r4, #0
   1f986:	d0f4      	beq.n	1f972 <notify_monitors+0x1a>
   1f988:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f98a:	2c00      	cmp	r4, #0
   1f98c:	d0f2      	beq.n	1f974 <notify_monitors+0x1c>
	return node->next;
   1f98e:	6823      	ldr	r3, [r4, #0]
   1f990:	e7f0      	b.n	1f974 <notify_monitors+0x1c>
}
   1f992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f996 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f996:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f998:	f013 0307 	ands.w	r3, r3, #7
   1f99c:	d103      	bne.n	1f9a6 <process_recheck+0x10>
	return list->head;
   1f99e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f9a0:	b10a      	cbz	r2, 1f9a6 <process_recheck+0x10>
		evt = EVT_START;
   1f9a2:	2003      	movs	r0, #3
   1f9a4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f9a6:	2b02      	cmp	r3, #2
   1f9a8:	d003      	beq.n	1f9b2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1f9aa:	2b01      	cmp	r3, #1
   1f9ac:	d006      	beq.n	1f9bc <process_recheck+0x26>
	int evt = EVT_NOP;
   1f9ae:	2000      	movs	r0, #0
   1f9b0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1f9b2:	8b42      	ldrh	r2, [r0, #26]
   1f9b4:	2a00      	cmp	r2, #0
   1f9b6:	d1f8      	bne.n	1f9aa <process_recheck+0x14>
		evt = EVT_STOP;
   1f9b8:	2004      	movs	r0, #4
   1f9ba:	4770      	bx	lr
   1f9bc:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f9be:	b10b      	cbz	r3, 1f9c4 <process_recheck+0x2e>
		evt = EVT_RESET;
   1f9c0:	2005      	movs	r0, #5
}
   1f9c2:	4770      	bx	lr
	int evt = EVT_NOP;
   1f9c4:	2000      	movs	r0, #0
   1f9c6:	4770      	bx	lr

0001f9c8 <process_complete>:
{
   1f9c8:	b510      	push	{r4, lr}
   1f9ca:	4604      	mov	r4, r0
   1f9cc:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f9ce:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1f9d0:	2a00      	cmp	r2, #0
   1f9d2:	db07      	blt.n	1f9e4 <process_complete+0x1c>
   1f9d4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1f9d8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1f9da:	2a01      	cmp	r2, #1
   1f9dc:	d90e      	bls.n	1f9fc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1f9de:	2b04      	cmp	r3, #4
   1f9e0:	d033      	beq.n	1fa4a <process_complete+0x82>
}
   1f9e2:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   1f9e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   1f9e8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1f9ec:	2300      	movs	r3, #0
   1f9ee:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1f9f0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1f9f2:	2101      	movs	r1, #1
   1f9f4:	4620      	mov	r0, r4
   1f9f6:	f7ff ffa7 	bl	1f948 <set_state>
   1f9fa:	e7f2      	b.n	1f9e2 <process_complete+0x1a>
		*clients = mgr->clients;
   1f9fc:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fa00:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1fa04:	2200      	movs	r2, #0
   1fa06:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1fa08:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1fa0a:	2b06      	cmp	r3, #6
   1fa0c:	d118      	bne.n	1fa40 <process_complete+0x78>
	return list->head;
   1fa0e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fa12:	b13b      	cbz	r3, 1fa24 <process_complete+0x5c>
				mgr->refs += 1U;
   1fa14:	8b62      	ldrh	r2, [r4, #26]
   1fa16:	3201      	adds	r2, #1
   1fa18:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa1a:	2b00      	cmp	r3, #0
   1fa1c:	d0f9      	beq.n	1fa12 <process_complete+0x4a>
	return node->next;
   1fa1e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fa20:	2b00      	cmp	r3, #0
   1fa22:	d1f6      	bne.n	1fa12 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   1fa24:	2102      	movs	r1, #2
   1fa26:	4620      	mov	r0, r4
   1fa28:	f7ff ff8e 	bl	1f948 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fa2c:	4620      	mov	r0, r4
   1fa2e:	f7ff ffb2 	bl	1f996 <process_recheck>
   1fa32:	2800      	cmp	r0, #0
   1fa34:	d0d5      	beq.n	1f9e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fa36:	8b23      	ldrh	r3, [r4, #24]
   1fa38:	f043 0320 	orr.w	r3, r3, #32
   1fa3c:	8323      	strh	r3, [r4, #24]
   1fa3e:	e7d0      	b.n	1f9e2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1fa40:	2100      	movs	r1, #0
   1fa42:	4620      	mov	r0, r4
   1fa44:	f7ff ff80 	bl	1f948 <set_state>
   1fa48:	e7f0      	b.n	1fa2c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   1fa4a:	2100      	movs	r1, #0
   1fa4c:	f7ff ff7c 	bl	1f948 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fa50:	4620      	mov	r0, r4
   1fa52:	f7ff ffa0 	bl	1f996 <process_recheck>
   1fa56:	2800      	cmp	r0, #0
   1fa58:	d0c3      	beq.n	1f9e2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fa5a:	8b23      	ldrh	r3, [r4, #24]
   1fa5c:	f043 0320 	orr.w	r3, r3, #32
   1fa60:	8323      	strh	r3, [r4, #24]
}
   1fa62:	e7be      	b.n	1f9e2 <process_complete+0x1a>

0001fa64 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1fa64:	b158      	cbz	r0, 1fa7e <validate_args+0x1a>
{
   1fa66:	b510      	push	{r4, lr}
   1fa68:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fa6a:	b159      	cbz	r1, 1fa84 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1fa6c:	1d08      	adds	r0, r1, #4
   1fa6e:	f7ff fefd 	bl	1f86c <sys_notify_validate>
	if ((rv == 0)
   1fa72:	b918      	cbnz	r0, 1fa7c <validate_args+0x18>
	    && ((cli->notify.flags
   1fa74:	68a3      	ldr	r3, [r4, #8]
   1fa76:	f033 0303 	bics.w	r3, r3, #3
   1fa7a:	d106      	bne.n	1fa8a <validate_args+0x26>
}
   1fa7c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fa7e:	f06f 0015 	mvn.w	r0, #21
}
   1fa82:	4770      	bx	lr
		return -EINVAL;
   1fa84:	f06f 0015 	mvn.w	r0, #21
   1fa88:	e7f8      	b.n	1fa7c <validate_args+0x18>
		rv = -EINVAL;
   1fa8a:	f06f 0015 	mvn.w	r0, #21
   1fa8e:	e7f5      	b.n	1fa7c <validate_args+0x18>

0001fa90 <notify_one>:
{
   1fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa94:	4607      	mov	r7, r0
   1fa96:	460c      	mov	r4, r1
   1fa98:	4616      	mov	r6, r2
   1fa9a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fa9c:	4619      	mov	r1, r3
   1fa9e:	1d20      	adds	r0, r4, #4
   1faa0:	f7ff ff03 	bl	1f8aa <sys_notify_finalize>
	if (cb) {
   1faa4:	b128      	cbz	r0, 1fab2 <notify_one+0x22>
   1faa6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1faa8:	462b      	mov	r3, r5
   1faaa:	4632      	mov	r2, r6
   1faac:	4621      	mov	r1, r4
   1faae:	4638      	mov	r0, r7
   1fab0:	47c0      	blx	r8
}
   1fab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fab6 <notify_all>:
{
   1fab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faba:	4680      	mov	r8, r0
   1fabc:	460c      	mov	r4, r1
   1fabe:	4617      	mov	r7, r2
   1fac0:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   1fac2:	e004      	b.n	1face <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   1fac4:	4633      	mov	r3, r6
   1fac6:	463a      	mov	r2, r7
   1fac8:	4640      	mov	r0, r8
   1faca:	f7ff ffe1 	bl	1fa90 <notify_one>
	return list->head;
   1face:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1fad0:	b131      	cbz	r1, 1fae0 <notify_all+0x2a>
	return node->next;
   1fad2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1fad4:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fad6:	6863      	ldr	r3, [r4, #4]
   1fad8:	428b      	cmp	r3, r1
   1fada:	d1f3      	bne.n	1fac4 <notify_all+0xe>
	list->tail = node;
   1fadc:	6065      	str	r5, [r4, #4]
}
   1fade:	e7f1      	b.n	1fac4 <notify_all+0xe>
}
   1fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fae4 <transition_complete>:
{
   1fae4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1fae6:	f04f 0c20 	mov.w	ip, #32
   1faea:	f3ef 8211 	mrs	r2, BASEPRI
   1faee:	f38c 8812 	msr	BASEPRI_MAX, ip
   1faf2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1faf6:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1faf8:	2101      	movs	r1, #1
   1fafa:	f7f2 f9a3 	bl	11e44 <process_event>
}
   1fafe:	bd08      	pop	{r3, pc}

0001fb00 <onoff_manager_init>:
	if ((mgr == NULL)
   1fb00:	4603      	mov	r3, r0
   1fb02:	b170      	cbz	r0, 1fb22 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   1fb04:	b181      	cbz	r1, 1fb28 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   1fb06:	680a      	ldr	r2, [r1, #0]
   1fb08:	b18a      	cbz	r2, 1fb2e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1fb0a:	684a      	ldr	r2, [r1, #4]
   1fb0c:	b192      	cbz	r2, 1fb34 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1fb0e:	2000      	movs	r0, #0
   1fb10:	6018      	str	r0, [r3, #0]
   1fb12:	6058      	str	r0, [r3, #4]
   1fb14:	6098      	str	r0, [r3, #8]
   1fb16:	60d8      	str	r0, [r3, #12]
   1fb18:	6118      	str	r0, [r3, #16]
   1fb1a:	6158      	str	r0, [r3, #20]
   1fb1c:	6198      	str	r0, [r3, #24]
   1fb1e:	6119      	str	r1, [r3, #16]
	return 0;
   1fb20:	4770      	bx	lr
		return -EINVAL;
   1fb22:	f06f 0015 	mvn.w	r0, #21
   1fb26:	4770      	bx	lr
   1fb28:	f06f 0015 	mvn.w	r0, #21
   1fb2c:	4770      	bx	lr
   1fb2e:	f06f 0015 	mvn.w	r0, #21
   1fb32:	4770      	bx	lr
   1fb34:	f06f 0015 	mvn.w	r0, #21
}
   1fb38:	4770      	bx	lr

0001fb3a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb3c:	4604      	mov	r4, r0
   1fb3e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fb40:	f7ff ff90 	bl	1fa64 <validate_args>

	if (rv < 0) {
   1fb44:	1e06      	subs	r6, r0, #0
   1fb46:	db37      	blt.n	1fbb8 <onoff_request+0x7e>
   1fb48:	f04f 0320 	mov.w	r3, #32
   1fb4c:	f3ef 8211 	mrs	r2, BASEPRI
   1fb50:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb54:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fb58:	8b25      	ldrh	r5, [r4, #24]
   1fb5a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fb5e:	8b63      	ldrh	r3, [r4, #26]
   1fb60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fb64:	428b      	cmp	r3, r1
   1fb66:	d02f      	beq.n	1fbc8 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1fb68:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1fb6a:	2d02      	cmp	r5, #2
   1fb6c:	d00c      	beq.n	1fb88 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1fb6e:	b18d      	cbz	r5, 1fb94 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1fb70:	2d04      	cmp	r5, #4
   1fb72:	d00f      	beq.n	1fb94 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fb74:	2d06      	cmp	r5, #6
   1fb76:	d00d      	beq.n	1fb94 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1fb78:	2d05      	cmp	r5, #5
   1fb7a:	d01f      	beq.n	1fbbc <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1fb7c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1fb80:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fb82:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fb84:	4608      	mov	r0, r1
   1fb86:	e00a      	b.n	1fb9e <onoff_request+0x64>
		mgr->refs += 1U;
   1fb88:	3301      	adds	r3, #1
   1fb8a:	8363      	strh	r3, [r4, #26]
		notify = true;
   1fb8c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1fb8e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1fb90:	4618      	mov	r0, r3
   1fb92:	e004      	b.n	1fb9e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1fb94:	fab5 f385 	clz	r3, r5
   1fb98:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1fb9a:	2100      	movs	r1, #0
		add_client = true;
   1fb9c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1fb9e:	b128      	cbz	r0, 1fbac <onoff_request+0x72>
	parent->next = child;
   1fba0:	2000      	movs	r0, #0
   1fba2:	6038      	str	r0, [r7, #0]
	return list->tail;
   1fba4:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1fba6:	b1a8      	cbz	r0, 1fbd4 <onoff_request+0x9a>
	parent->next = child;
   1fba8:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1fbaa:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1fbac:	b9ab      	cbnz	r3, 1fbda <onoff_request+0xa0>
	__asm__ volatile(
   1fbae:	f382 8811 	msr	BASEPRI, r2
   1fbb2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1fbb6:	b9a9      	cbnz	r1, 1fbe4 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1fbb8:	4630      	mov	r0, r6
   1fbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1fbbc:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1fbc0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fbc2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fbc4:	4608      	mov	r0, r1
   1fbc6:	e7ea      	b.n	1fb9e <onoff_request+0x64>
		rv = -EAGAIN;
   1fbc8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1fbcc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fbce:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fbd0:	4608      	mov	r0, r1
   1fbd2:	e7e4      	b.n	1fb9e <onoff_request+0x64>
   1fbd4:	6067      	str	r7, [r4, #4]
	list->head = node;
   1fbd6:	6027      	str	r7, [r4, #0]
}
   1fbd8:	e7e8      	b.n	1fbac <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1fbda:	2102      	movs	r1, #2
   1fbdc:	4620      	mov	r0, r4
   1fbde:	f7f2 f931 	bl	11e44 <process_event>
   1fbe2:	e7e9      	b.n	1fbb8 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1fbe4:	2300      	movs	r3, #0
   1fbe6:	462a      	mov	r2, r5
   1fbe8:	4639      	mov	r1, r7
   1fbea:	4620      	mov	r0, r4
   1fbec:	f7ff ff50 	bl	1fa90 <notify_one>
   1fbf0:	e7e2      	b.n	1fbb8 <onoff_request+0x7e>

0001fbf2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fbf2:	b508      	push	{r3, lr}
   1fbf4:	4604      	mov	r4, r0
   1fbf6:	4608      	mov	r0, r1
   1fbf8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1fbfa:	461a      	mov	r2, r3
   1fbfc:	47a0      	blx	r4
	return z_impl_z_current_get();
   1fbfe:	f7fe f8dd 	bl	1ddbc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1fc02:	f7f4 fdb7 	bl	14774 <z_impl_k_thread_abort>

0001fc06 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fc06:	00c9      	lsls	r1, r1, #3
   1fc08:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1fc0a:	4408      	add	r0, r1
   1fc0c:	4770      	bx	lr

0001fc0e <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1fc0e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1fc12:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fc16:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1fc18:	4299      	cmp	r1, r3
   1fc1a:	d00c      	beq.n	1fc36 <free_list_remove_bidx+0x28>
   1fc1c:	4484      	add	ip, r0
   1fc1e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1fc22:	3204      	adds	r2, #4
   1fc24:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1fc28:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1fc2a:	3206      	adds	r2, #6
   1fc2c:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1fc2e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1fc30:	3304      	adds	r3, #4
   1fc32:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1fc34:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   1fc36:	2301      	movs	r3, #1
   1fc38:	fa03 f102 	lsl.w	r1, r3, r2
   1fc3c:	68c3      	ldr	r3, [r0, #12]
   1fc3e:	ea23 0301 	bic.w	r3, r3, r1
   1fc42:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1fc44:	3204      	adds	r2, #4
   1fc46:	2300      	movs	r3, #0
   1fc48:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1fc4c:	4770      	bx	lr

0001fc4e <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1fc4e:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1fc50:	1d13      	adds	r3, r2, #4
   1fc52:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1fc56:	b97c      	cbnz	r4, 1fc78 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   1fc58:	2301      	movs	r3, #1
   1fc5a:	fa03 f402 	lsl.w	r4, r3, r2
   1fc5e:	68c3      	ldr	r3, [r0, #12]
   1fc60:	4323      	orrs	r3, r4
   1fc62:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1fc64:	3204      	adds	r2, #4
   1fc66:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1fc6a:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1fc6c:	1d1a      	adds	r2, r3, #4
   1fc6e:	b289      	uxth	r1, r1
   1fc70:	5281      	strh	r1, [r0, r2]
   1fc72:	3306      	adds	r3, #6
   1fc74:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1fc76:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   1fc78:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1fc7a:	3204      	adds	r2, #4
   1fc7c:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1fc7e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fc82:	f10c 0e04 	add.w	lr, ip, #4
   1fc86:	f820 300e 	strh.w	r3, [r0, lr]
   1fc8a:	f10c 0c06 	add.w	ip, ip, #6
   1fc8e:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   1fc92:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1fc94:	3306      	adds	r3, #6
   1fc96:	b289      	uxth	r1, r1
   1fc98:	52c1      	strh	r1, [r0, r3]
   1fc9a:	5281      	strh	r1, [r0, r2]
   1fc9c:	e7eb      	b.n	1fc76 <free_list_add_bidx+0x28>

0001fc9e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1fc9e:	b500      	push	{lr}
	void *cmem = &buf[c];
   1fca0:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1fca2:	3302      	adds	r3, #2
   1fca4:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1fca8:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1fcac:	1a89      	subs	r1, r1, r2
   1fcae:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcb2:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   1fcb6:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcba:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   1fcbe:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   1fcc0:	3302      	adds	r3, #2
   1fcc2:	f820 e003 	strh.w	lr, [r0, r3]
   1fcc6:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   1fcca:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1fccc:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   1fcd0:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1fcd4:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcd8 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1fcd8:	b500      	push	{lr}
	void *cmem = &buf[c];
   1fcda:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   1fcdc:	3102      	adds	r1, #2
   1fcde:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   1fce2:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   1fce6:	f10c 0c02 	add.w	ip, ip, #2
   1fcea:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fcee:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fcf0:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcf4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   1fcf8:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   1fcfc:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   1fd00:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   1fd04:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1fd08:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd0c <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fd0c:	3904      	subs	r1, #4
   1fd0e:	1a08      	subs	r0, r1, r0
}
   1fd10:	08c0      	lsrs	r0, r0, #3
   1fd12:	4770      	bx	lr

0001fd14 <free_list_remove>:
{
   1fd14:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1fd16:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fd1a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fd1c:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fd1e:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   1fd22:	f1c2 021f 	rsb	r2, r2, #31
   1fd26:	f7ff ff72 	bl	1fc0e <free_list_remove_bidx>
}
   1fd2a:	bd08      	pop	{r3, pc}

0001fd2c <free_list_add>:
{
   1fd2c:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   1fd2e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fd32:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1fd34:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   1fd36:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1fd3a:	f1c2 021f 	rsb	r2, r2, #31
   1fd3e:	f7ff ff86 	bl	1fc4e <free_list_add_bidx>
}
   1fd42:	bd08      	pop	{r3, pc}

0001fd44 <free_chunk>:
{
   1fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd46:	4604      	mov	r4, r0
   1fd48:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1fd4a:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   1fd4c:	1cb7      	adds	r7, r6, #2
   1fd4e:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   1fd50:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   1fd54:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1fd58:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fd5a:	f013 0f01 	tst.w	r3, #1
   1fd5e:	d00c      	beq.n	1fd7a <free_chunk+0x36>
   1fd60:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd62:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   1fd64:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   1fd68:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fd6a:	f013 0f01 	tst.w	r3, #1
   1fd6e:	d00e      	beq.n	1fd8e <free_chunk+0x4a>
	free_list_add(h, c);
   1fd70:	4629      	mov	r1, r5
   1fd72:	4620      	mov	r0, r4
   1fd74:	f7ff ffda 	bl	1fd2c <free_list_add>
}
   1fd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   1fd7a:	f7ff ffcb 	bl	1fd14 <free_list_remove>
   1fd7e:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   1fd80:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1fd84:	4629      	mov	r1, r5
   1fd86:	4620      	mov	r0, r4
   1fd88:	f7ff ffa6 	bl	1fcd8 <merge_chunks>
   1fd8c:	e7e8      	b.n	1fd60 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   1fd8e:	4620      	mov	r0, r4
   1fd90:	f7ff ffc0 	bl	1fd14 <free_list_remove>
   1fd94:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1fd96:	462a      	mov	r2, r5
   1fd98:	1a69      	subs	r1, r5, r1
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	f7ff ff9c 	bl	1fcd8 <merge_chunks>
   1fda0:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fda2:	1aed      	subs	r5, r5, r3
   1fda4:	e7e4      	b.n	1fd70 <free_chunk+0x2c>

0001fda6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fda6:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   1fda8:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fdac:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1fdb0:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1fdb4:	b1cd      	cbz	r5, 1fdea <alloc_chunk+0x44>
   1fdb6:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1fdba:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   1fdbe:	1d14      	adds	r4, r2, #4
   1fdc0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1fdc4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   1fdc8:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   1fdcc:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   1fdce:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   1fdd2:	d914      	bls.n	1fdfe <alloc_chunk+0x58>
   1fdd4:	4484      	add	ip, r0
   1fdd6:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   1fdda:	1d16      	adds	r6, r2, #4
   1fddc:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1fde0:	f1be 0e01 	subs.w	lr, lr, #1
   1fde4:	d001      	beq.n	1fdea <alloc_chunk+0x44>
   1fde6:	42a5      	cmp	r5, r4
   1fde8:	d1e9      	bne.n	1fdbe <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1fdea:	68c4      	ldr	r4, [r0, #12]
   1fdec:	f1c3 0220 	rsb	r2, r3, #32
   1fdf0:	2301      	movs	r3, #1
   1fdf2:	4093      	lsls	r3, r2
   1fdf4:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1fdf6:	401c      	ands	r4, r3
   1fdf8:	d105      	bne.n	1fe06 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fdfa:	4620      	mov	r0, r4
   1fdfc:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   1fdfe:	4621      	mov	r1, r4
   1fe00:	f7ff ff05 	bl	1fc0e <free_list_remove_bidx>
				return c;
   1fe04:	e7f9      	b.n	1fdfa <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   1fe06:	fa94 f2a4 	rbit	r2, r4
   1fe0a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fe0e:	1d13      	adds	r3, r2, #4
   1fe10:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1fe14:	4621      	mov	r1, r4
   1fe16:	f7ff fefa 	bl	1fc0e <free_list_remove_bidx>
		return c;
   1fe1a:	e7ee      	b.n	1fdfa <alloc_chunk+0x54>

0001fe1c <sys_heap_free>:
	if (mem == NULL) {
   1fe1c:	b179      	cbz	r1, 1fe3e <sys_heap_free+0x22>
{
   1fe1e:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1fe20:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1fe22:	4620      	mov	r0, r4
   1fe24:	f7ff ff72 	bl	1fd0c <mem_to_chunkid>
   1fe28:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1fe2a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fe2e:	8853      	ldrh	r3, [r2, #2]
   1fe30:	f023 0301 	bic.w	r3, r3, #1
   1fe34:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   1fe36:	4620      	mov	r0, r4
   1fe38:	f7ff ff84 	bl	1fd44 <free_chunk>
}
   1fe3c:	bd10      	pop	{r4, pc}
   1fe3e:	4770      	bx	lr

0001fe40 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1fe42:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fe44:	b341      	cbz	r1, 1fe98 <sys_heap_alloc+0x58>
   1fe46:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1fe48:	68aa      	ldr	r2, [r5, #8]
   1fe4a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1fe4e:	d925      	bls.n	1fe9c <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fe50:	330b      	adds	r3, #11
   1fe52:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fe54:	4621      	mov	r1, r4
   1fe56:	4628      	mov	r0, r5
   1fe58:	f7ff ffa5 	bl	1fda6 <alloc_chunk>
	if (c == 0U) {
   1fe5c:	4607      	mov	r7, r0
   1fe5e:	b1f8      	cbz	r0, 1fea0 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   1fe60:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   1fe62:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   1fe66:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1fe68:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1fe6c:	d309      	bcc.n	1fe82 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   1fe6e:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fe70:	885a      	ldrh	r2, [r3, #2]
   1fe72:	f042 0201 	orr.w	r2, r2, #1
   1fe76:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   1fe78:	4639      	mov	r1, r7
   1fe7a:	4628      	mov	r0, r5
   1fe7c:	f7ff fec3 	bl	1fc06 <chunk_mem>
}
   1fe80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   1fe82:	4404      	add	r4, r0
   1fe84:	4622      	mov	r2, r4
   1fe86:	4601      	mov	r1, r0
   1fe88:	4628      	mov	r0, r5
   1fe8a:	f7ff ff08 	bl	1fc9e <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fe8e:	4621      	mov	r1, r4
   1fe90:	4628      	mov	r0, r5
   1fe92:	f7ff ff4b 	bl	1fd2c <free_list_add>
   1fe96:	e7ea      	b.n	1fe6e <sys_heap_alloc+0x2e>
		return NULL;
   1fe98:	2000      	movs	r0, #0
   1fe9a:	e7f1      	b.n	1fe80 <sys_heap_alloc+0x40>
   1fe9c:	2000      	movs	r0, #0
   1fe9e:	e7ef      	b.n	1fe80 <sys_heap_alloc+0x40>
		return NULL;
   1fea0:	2000      	movs	r0, #0
   1fea2:	e7ed      	b.n	1fe80 <sys_heap_alloc+0x40>

0001fea4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fea8:	460d      	mov	r5, r1
   1feaa:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1feac:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1feae:	424b      	negs	r3, r1
   1feb0:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   1feb4:	ea31 0303 	bics.w	r3, r1, r3
   1feb8:	d03e      	beq.n	1ff38 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   1feba:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   1febe:	f1b8 0f03 	cmp.w	r8, #3
   1fec2:	d844      	bhi.n	1ff4e <sys_heap_aligned_alloc+0xaa>
   1fec4:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fec6:	2c00      	cmp	r4, #0
   1fec8:	d057      	beq.n	1ff7a <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1feca:	68b3      	ldr	r3, [r6, #8]
   1fecc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fed0:	d955      	bls.n	1ff7e <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1fed2:	1929      	adds	r1, r5, r4
   1fed4:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fed6:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fed8:	08c9      	lsrs	r1, r1, #3
   1feda:	4630      	mov	r0, r6
   1fedc:	f7ff ff63 	bl	1fda6 <alloc_chunk>

	if (c0 == 0) {
   1fee0:	4607      	mov	r7, r0
   1fee2:	2800      	cmp	r0, #0
   1fee4:	d04d      	beq.n	1ff82 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1fee6:	4601      	mov	r1, r0
   1fee8:	4630      	mov	r0, r6
   1feea:	f7ff fe8c 	bl	1fc06 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1feee:	4440      	add	r0, r8
   1fef0:	4428      	add	r0, r5
   1fef2:	3801      	subs	r0, #1
   1fef4:	426d      	negs	r5, r5
   1fef6:	4005      	ands	r5, r0
   1fef8:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fefc:	442c      	add	r4, r5
   1fefe:	3407      	adds	r4, #7
   1ff00:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   1ff04:	4629      	mov	r1, r5
   1ff06:	4630      	mov	r0, r6
   1ff08:	f7ff ff00 	bl	1fd0c <mem_to_chunkid>
   1ff0c:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1ff0e:	1ba4      	subs	r4, r4, r6
   1ff10:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1ff12:	4287      	cmp	r7, r0
   1ff14:	d31d      	bcc.n	1ff52 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   1ff16:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   1ff1a:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   1ff1e:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   1ff20:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1ff24:	429c      	cmp	r4, r3
   1ff26:	d31e      	bcc.n	1ff66 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   1ff28:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ff2a:	8873      	ldrh	r3, [r6, #2]
   1ff2c:	f043 0301 	orr.w	r3, r3, #1
   1ff30:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1ff32:	4628      	mov	r0, r5
   1ff34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   1ff38:	2904      	cmp	r1, #4
   1ff3a:	d903      	bls.n	1ff44 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   1ff3c:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   1ff40:	2204      	movs	r2, #4
   1ff42:	e7c0      	b.n	1fec6 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   1ff44:	4611      	mov	r1, r2
   1ff46:	f7ff ff7b 	bl	1fe40 <sys_heap_alloc>
   1ff4a:	4605      	mov	r5, r0
   1ff4c:	e7f1      	b.n	1ff32 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   1ff4e:	2204      	movs	r2, #4
   1ff50:	e7b9      	b.n	1fec6 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   1ff52:	4602      	mov	r2, r0
   1ff54:	4639      	mov	r1, r7
   1ff56:	4630      	mov	r0, r6
   1ff58:	f7ff fea1 	bl	1fc9e <split_chunks>
		free_list_add(h, c0);
   1ff5c:	4639      	mov	r1, r7
   1ff5e:	4630      	mov	r0, r6
   1ff60:	f7ff fee4 	bl	1fd2c <free_list_add>
   1ff64:	e7d7      	b.n	1ff16 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   1ff66:	4622      	mov	r2, r4
   1ff68:	4641      	mov	r1, r8
   1ff6a:	4630      	mov	r0, r6
   1ff6c:	f7ff fe97 	bl	1fc9e <split_chunks>
		free_list_add(h, c_end);
   1ff70:	4621      	mov	r1, r4
   1ff72:	4630      	mov	r0, r6
   1ff74:	f7ff feda 	bl	1fd2c <free_list_add>
   1ff78:	e7d6      	b.n	1ff28 <sys_heap_aligned_alloc+0x84>
		return NULL;
   1ff7a:	2500      	movs	r5, #0
   1ff7c:	e7d9      	b.n	1ff32 <sys_heap_aligned_alloc+0x8e>
   1ff7e:	2500      	movs	r5, #0
   1ff80:	e7d7      	b.n	1ff32 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   1ff82:	2500      	movs	r5, #0
   1ff84:	e7d5      	b.n	1ff32 <sys_heap_aligned_alloc+0x8e>

0001ff86 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ff86:	b570      	push	{r4, r5, r6, lr}
   1ff88:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1ff8a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ff8c:	1dc8      	adds	r0, r1, #7
   1ff8e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ff92:	440a      	add	r2, r1
   1ff94:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ff98:	1a12      	subs	r2, r2, r0
   1ff9a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1ff9c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1ff9e:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   1ffa0:	2300      	movs	r3, #0
   1ffa2:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   1ffa4:	fab5 f185 	clz	r1, r5
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ffa8:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ffac:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1ffb0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ffb2:	1dce      	adds	r6, r1, #7
   1ffb4:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1ffb6:	e005      	b.n	1ffc4 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   1ffb8:	f103 0c04 	add.w	ip, r3, #4
   1ffbc:	2400      	movs	r4, #0
   1ffbe:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1ffc2:	3301      	adds	r3, #1
   1ffc4:	4573      	cmp	r3, lr
   1ffc6:	dbf7      	blt.n	1ffb8 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ffc8:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   1ffca:	b2a4      	uxth	r4, r4
   1ffcc:	8044      	strh	r4, [r0, #2]
   1ffce:	f04f 0c00 	mov.w	ip, #0
   1ffd2:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1ffd6:	f044 0401 	orr.w	r4, r4, #1
   1ffda:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ffdc:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ffde:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   1ffe2:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   1ffe6:	1ca5      	adds	r5, r4, #2
   1ffe8:	f820 e005 	strh.w	lr, [r0, r5]
   1ffec:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1ffee:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   1fff2:	1c95      	adds	r5, r2, #2
   1fff4:	f820 c005 	strh.w	ip, [r0, r5]
   1fff8:	4402      	add	r2, r0
   1fffa:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fffc:	8853      	ldrh	r3, [r2, #2]
   1fffe:	f043 0301 	orr.w	r3, r3, #1
   20002:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   20004:	f7ff fe92 	bl	1fd2c <free_list_add>
}
   20008:	bd70      	pop	{r4, r5, r6, pc}

0002000a <outs>:
{
   2000a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2000e:	4607      	mov	r7, r0
   20010:	460e      	mov	r6, r1
   20012:	4614      	mov	r4, r2
   20014:	4698      	mov	r8, r3
	size_t count = 0;
   20016:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20018:	e006      	b.n	20028 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   2001a:	4631      	mov	r1, r6
   2001c:	f814 0b01 	ldrb.w	r0, [r4], #1
   20020:	47b8      	blx	r7
		if (rc < 0) {
   20022:	2800      	cmp	r0, #0
   20024:	db09      	blt.n	2003a <outs+0x30>
		++count;
   20026:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20028:	4544      	cmp	r4, r8
   2002a:	d3f6      	bcc.n	2001a <outs+0x10>
   2002c:	f1b8 0f00 	cmp.w	r8, #0
   20030:	d102      	bne.n	20038 <outs+0x2e>
   20032:	7823      	ldrb	r3, [r4, #0]
   20034:	2b00      	cmp	r3, #0
   20036:	d1f0      	bne.n	2001a <outs+0x10>
	return (int)count;
   20038:	4628      	mov	r0, r5
}
   2003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002003e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MQTT_SIMPLE_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MQTT_SIMPLE_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   2003e:	4770      	bx	lr

00020040 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   20040:	b084      	sub	sp, #16
   20042:	ab04      	add	r3, sp, #16
   20044:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   20048:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2004c:	2b06      	cmp	r3, #6
   2004e:	d001      	beq.n	20054 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   20050:	b004      	add	sp, #16
   20052:	4770      	bx	lr
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   20054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   20058:	2201      	movs	r2, #1
   2005a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2005e:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   20062:	bf20      	wfe
    while (true)
   20064:	e7fd      	b.n	20062 <pm_power_state_set+0x22>

00020066 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   20066:	b084      	sub	sp, #16
   20068:	ab04      	add	r3, sp, #16
   2006a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2006e:	2300      	movs	r3, #0
   20070:	f383 8811 	msr	BASEPRI, r3
   20074:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20078:	b004      	add	sp, #16
   2007a:	4770      	bx	lr

0002007c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2007c:	2300      	movs	r3, #0
   2007e:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   20080:	6003      	str	r3, [r0, #0]
}
   20082:	4770      	bx	lr

00020084 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   20084:	6803      	ldr	r3, [r0, #0]
   20086:	b12b      	cbz	r3, 20094 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   20088:	6843      	ldr	r3, [r0, #4]
   2008a:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   2008c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2008e:	2300      	movs	r3, #0
   20090:	600b      	str	r3, [r1, #0]
}
   20092:	4770      	bx	lr
		list->head = msg;
   20094:	6001      	str	r1, [r0, #0]
   20096:	e7f9      	b.n	2008c <log_list_add_tail+0x8>

00020098 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   20098:	6800      	ldr	r0, [r0, #0]
   2009a:	4770      	bx	lr

0002009c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2009c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2009e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   200a0:	b108      	cbz	r0, 200a6 <log_list_head_get+0xa>
		list->head = list->head->next;
   200a2:	6802      	ldr	r2, [r0, #0]
   200a4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   200a6:	4770      	bx	lr

000200a8 <dummy_timestamp>:
}
   200a8:	2000      	movs	r0, #0
   200aa:	4770      	bx	lr

000200ac <msg_filter_check>:
}
   200ac:	2001      	movs	r0, #1
   200ae:	4770      	bx	lr

000200b0 <default_get_timestamp>:
{
   200b0:	b508      	push	{r3, lr}
   200b2:	f002 f81b 	bl	220ec <sys_clock_cycle_get_32>
}
   200b6:	bd08      	pop	{r3, pc}

000200b8 <z_log_get_tag>:
}
   200b8:	2000      	movs	r0, #0
   200ba:	4770      	bx	lr

000200bc <block_on_alloc>:
}
   200bc:	2000      	movs	r0, #0
   200be:	4770      	bx	lr

000200c0 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   200c0:	2901      	cmp	r1, #1
   200c2:	d902      	bls.n	200ca <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   200c4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   200c6:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   200c8:	e006      	b.n	200d8 <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
   200ca:	3104      	adds	r1, #4
   200cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   200d0:	6888      	ldr	r0, [r1, #8]
   200d2:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   200d4:	3907      	subs	r1, #7
		cont = cont->next;
   200d6:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
   200d8:	2906      	cmp	r1, #6
   200da:	d8fb      	bhi.n	200d4 <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
   200dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   200e0:	6848      	ldr	r0, [r1, #4]
}
   200e2:	4770      	bx	lr

000200e4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   200e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   200e8:	461c      	mov	r4, r3
   200ea:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   200ee:	8903      	ldrh	r3, [r0, #8]
   200f0:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   200f4:	42a3      	cmp	r3, r4
   200f6:	d91f      	bls.n	20138 <log_msg_hexdump_data_op+0x54>
   200f8:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   200fa:	6811      	ldr	r1, [r2, #0]
   200fc:	4421      	add	r1, r4
   200fe:	4299      	cmp	r1, r3
   20100:	d901      	bls.n	20106 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   20102:	1b19      	subs	r1, r3, r4
   20104:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   20106:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20108:	2b0c      	cmp	r3, #12
   2010a:	d919      	bls.n	20140 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   2010c:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   20110:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20112:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   20114:	42a3      	cmp	r3, r4
   20116:	d91e      	bls.n	20156 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20118:	42bb      	cmp	r3, r7
   2011a:	bf28      	it	cs
   2011c:	463b      	movcs	r3, r7
   2011e:	461d      	mov	r5, r3

		if (put_op) {
   20120:	f1b9 0f00 	cmp.w	r9, #0
   20124:	d010      	beq.n	20148 <log_msg_hexdump_data_op+0x64>
   20126:	461a      	mov	r2, r3
   20128:	4641      	mov	r1, r8
   2012a:	eb0c 0004 	add.w	r0, ip, r4
   2012e:	f004 fccd 	bl	24acc <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   20132:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   20134:	44a8      	add	r8, r5
   20136:	e021      	b.n	2017c <log_msg_hexdump_data_op+0x98>
		*length = 0;
   20138:	2300      	movs	r3, #0
   2013a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2013c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   20140:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   20144:	2600      	movs	r6, #0
   20146:	e7e5      	b.n	20114 <log_msg_hexdump_data_op+0x30>
   20148:	461a      	mov	r2, r3
   2014a:	eb0c 0104 	add.w	r1, ip, r4
   2014e:	4640      	mov	r0, r8
   20150:	f004 fcbc 	bl	24acc <memcpy>
   20154:	e7ed      	b.n	20132 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   20156:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   20158:	b91e      	cbnz	r6, 20162 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   2015a:	6946      	ldr	r6, [r0, #20]
   2015c:	e001      	b.n	20162 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   2015e:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   20160:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   20162:	2c1b      	cmp	r4, #27
   20164:	d8fb      	bhi.n	2015e <log_msg_hexdump_data_op+0x7a>
   20166:	e009      	b.n	2017c <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   20168:	1931      	adds	r1, r6, r4
   2016a:	462a      	mov	r2, r5
   2016c:	3104      	adds	r1, #4
   2016e:	4640      	mov	r0, r8
   20170:	f004 fcac 	bl	24acc <memcpy>
		cont = cont->next;
   20174:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   20176:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   20178:	44a8      	add	r8, r5
		offset = 0;
   2017a:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   2017c:	2f00      	cmp	r7, #0
   2017e:	d0dd      	beq.n	2013c <log_msg_hexdump_data_op+0x58>
   20180:	2e00      	cmp	r6, #0
   20182:	d0db      	beq.n	2013c <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   20184:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20188:	42bd      	cmp	r5, r7
   2018a:	bf28      	it	cs
   2018c:	463d      	movcs	r5, r7
		if (put_op) {
   2018e:	f1b9 0f00 	cmp.w	r9, #0
   20192:	d0e9      	beq.n	20168 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   20194:	1930      	adds	r0, r6, r4
   20196:	462a      	mov	r2, r5
   20198:	4641      	mov	r1, r8
   2019a:	3004      	adds	r0, #4
   2019c:	f004 fc96 	bl	24acc <memcpy>
   201a0:	e7e8      	b.n	20174 <log_msg_hexdump_data_op+0x90>

000201a2 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   201a2:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   201a4:	e8d0 3fef 	ldaex	r3, [r0]
   201a8:	3301      	adds	r3, #1
   201aa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   201ae:	2a00      	cmp	r2, #0
   201b0:	d1f8      	bne.n	201a4 <log_msg_get+0x2>
}
   201b2:	4770      	bx	lr

000201b4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   201b4:	7a40      	ldrb	r0, [r0, #9]
}
   201b6:	0900      	lsrs	r0, r0, #4
   201b8:	4770      	bx	lr

000201ba <log_msg_arg_get>:
{
   201ba:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   201bc:	7a43      	ldrb	r3, [r0, #9]
   201be:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   201c2:	d20a      	bcs.n	201da <log_msg_arg_get+0x20>
   201c4:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   201c6:	2a03      	cmp	r2, #3
   201c8:	d804      	bhi.n	201d4 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   201ca:	3104      	adds	r1, #4
   201cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   201d0:	6840      	ldr	r0, [r0, #4]
   201d2:	e003      	b.n	201dc <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   201d4:	f7ff ff74 	bl	200c0 <cont_arg_get>
   201d8:	e000      	b.n	201dc <log_msg_arg_get+0x22>
		return 0;
   201da:	2000      	movs	r0, #0
}
   201dc:	bd08      	pop	{r3, pc}

000201de <log_msg_str_get>:
}
   201de:	6900      	ldr	r0, [r0, #16]
   201e0:	4770      	bx	lr

000201e2 <log_msg_put>:
{
   201e2:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   201e4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   201e6:	e8d3 2fef 	ldaex	r2, [r3]
   201ea:	3a01      	subs	r2, #1
   201ec:	e8c3 2fe1 	stlex	r1, r2, [r3]
   201f0:	2900      	cmp	r1, #0
   201f2:	d1f8      	bne.n	201e6 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   201f4:	6843      	ldr	r3, [r0, #4]
   201f6:	b103      	cbz	r3, 201fa <log_msg_put+0x18>
}
   201f8:	bd08      	pop	{r3, pc}
		msg_free(msg);
   201fa:	f7f3 f811 	bl	13220 <msg_free>
}
   201fe:	e7fb      	b.n	201f8 <log_msg_put+0x16>

00020200 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   20200:	b510      	push	{r4, lr}
   20202:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   20204:	2400      	movs	r4, #0
   20206:	9400      	str	r4, [sp, #0]
   20208:	f7ff ff6c 	bl	200e4 <log_msg_hexdump_data_op>
}
   2020c:	b002      	add	sp, #8
   2020e:	bd10      	pop	{r4, pc}

00020210 <buffer_write>:
{
   20210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20212:	4607      	mov	r7, r0
   20214:	460d      	mov	r5, r1
   20216:	4614      	mov	r4, r2
   20218:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   2021a:	4632      	mov	r2, r6
   2021c:	4621      	mov	r1, r4
   2021e:	4628      	mov	r0, r5
   20220:	47b8      	blx	r7
		buf += processed;
   20222:	4405      	add	r5, r0
	} while (len != 0);
   20224:	1a24      	subs	r4, r4, r0
   20226:	d1f8      	bne.n	2021a <buffer_write+0xa>
}
   20228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002022a <color_prefix>:
{
   2022a:	b508      	push	{r3, lr}
   2022c:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   2022e:	2201      	movs	r2, #1
   20230:	f7f3 f88e 	bl	13350 <color_print>
}
   20234:	bd08      	pop	{r3, pc}

00020236 <color_postfix>:
{
   20236:	b508      	push	{r3, lr}
   20238:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   2023a:	2200      	movs	r2, #0
   2023c:	f7f3 f888 	bl	13350 <color_print>
}
   20240:	bd08      	pop	{r3, pc}

00020242 <postfix_print>:
{
   20242:	b538      	push	{r3, r4, r5, lr}
   20244:	4605      	mov	r5, r0
   20246:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   20248:	f001 0101 	and.w	r1, r1, #1
   2024c:	f7ff fff3 	bl	20236 <color_postfix>
	newline_print(output, flags);
   20250:	4621      	mov	r1, r4
   20252:	4628      	mov	r0, r5
   20254:	f7f3 f892 	bl	1337c <newline_print>
}
   20258:	bd38      	pop	{r3, r4, r5, pc}

0002025a <std_print>:
{
   2025a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2025e:	b08e      	sub	sp, #56	; 0x38
   20260:	af0e      	add	r7, sp, #56	; 0x38
   20262:	4606      	mov	r6, r0
   20264:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   20266:	f7ff ffba 	bl	201de <log_msg_str_get>
   2026a:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2026c:	4630      	mov	r0, r6
   2026e:	f7ff ffa1 	bl	201b4 <log_msg_nargs_get>
   20272:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   20274:	0083      	lsls	r3, r0, #2
   20276:	3307      	adds	r3, #7
   20278:	f023 0307 	bic.w	r3, r3, #7
   2027c:	ebad 0d03 	sub.w	sp, sp, r3
   20280:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   20282:	2400      	movs	r4, #0
   20284:	e006      	b.n	20294 <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
   20286:	4621      	mov	r1, r4
   20288:	4630      	mov	r0, r6
   2028a:	f7ff ff96 	bl	201ba <log_msg_arg_get>
   2028e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   20292:	3401      	adds	r4, #1
   20294:	4544      	cmp	r4, r8
   20296:	d3f6      	bcc.n	20286 <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
   20298:	4630      	mov	r0, r6
   2029a:	f7ff ff8b 	bl	201b4 <log_msg_nargs_get>
   2029e:	280f      	cmp	r0, #15
   202a0:	d815      	bhi.n	202ce <std_print+0x74>
   202a2:	e8df f010 	tbh	[pc, r0, lsl #1]
   202a6:	0010      	.short	0x0010
   202a8:	001d0017 	.word	0x001d0017
   202ac:	002d0024 	.word	0x002d0024
   202b0:	00450038 	.word	0x00450038
   202b4:	00650054 	.word	0x00650054
   202b8:	008d0078 	.word	0x008d0078
   202bc:	00bd00a4 	.word	0x00bd00a4
   202c0:	00f500d8 	.word	0x00f500d8
   202c4:	0114      	.short	0x0114
		print_formatted(output, str);
   202c6:	4651      	mov	r1, sl
   202c8:	4648      	mov	r0, r9
   202ca:	f7f2 ffe9 	bl	132a0 <print_formatted>
}
   202ce:	46bd      	mov	sp, r7
   202d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   202d4:	682a      	ldr	r2, [r5, #0]
   202d6:	4651      	mov	r1, sl
   202d8:	4648      	mov	r0, r9
   202da:	f7f2 ffe1 	bl	132a0 <print_formatted>
		break;
   202de:	e7f6      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   202e0:	686b      	ldr	r3, [r5, #4]
   202e2:	682a      	ldr	r2, [r5, #0]
   202e4:	4651      	mov	r1, sl
   202e6:	4648      	mov	r0, r9
   202e8:	f7f2 ffda 	bl	132a0 <print_formatted>
		break;
   202ec:	e7ef      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   202ee:	686b      	ldr	r3, [r5, #4]
   202f0:	682a      	ldr	r2, [r5, #0]
   202f2:	68a9      	ldr	r1, [r5, #8]
   202f4:	9100      	str	r1, [sp, #0]
   202f6:	4651      	mov	r1, sl
   202f8:	4648      	mov	r0, r9
   202fa:	f7f2 ffd1 	bl	132a0 <print_formatted>
		break;
   202fe:	e7e6      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20300:	686b      	ldr	r3, [r5, #4]
   20302:	682a      	ldr	r2, [r5, #0]
   20304:	68e9      	ldr	r1, [r5, #12]
   20306:	9101      	str	r1, [sp, #4]
   20308:	68a9      	ldr	r1, [r5, #8]
   2030a:	9100      	str	r1, [sp, #0]
   2030c:	4651      	mov	r1, sl
   2030e:	4648      	mov	r0, r9
   20310:	f7f2 ffc6 	bl	132a0 <print_formatted>
		break;
   20314:	e7db      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20316:	686b      	ldr	r3, [r5, #4]
   20318:	682a      	ldr	r2, [r5, #0]
   2031a:	6929      	ldr	r1, [r5, #16]
   2031c:	9102      	str	r1, [sp, #8]
   2031e:	68e9      	ldr	r1, [r5, #12]
   20320:	9101      	str	r1, [sp, #4]
   20322:	68a9      	ldr	r1, [r5, #8]
   20324:	9100      	str	r1, [sp, #0]
   20326:	4651      	mov	r1, sl
   20328:	4648      	mov	r0, r9
   2032a:	f7f2 ffb9 	bl	132a0 <print_formatted>
		break;
   2032e:	e7ce      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20330:	686b      	ldr	r3, [r5, #4]
   20332:	682a      	ldr	r2, [r5, #0]
   20334:	6969      	ldr	r1, [r5, #20]
   20336:	9103      	str	r1, [sp, #12]
   20338:	6929      	ldr	r1, [r5, #16]
   2033a:	9102      	str	r1, [sp, #8]
   2033c:	68e9      	ldr	r1, [r5, #12]
   2033e:	9101      	str	r1, [sp, #4]
   20340:	68a9      	ldr	r1, [r5, #8]
   20342:	9100      	str	r1, [sp, #0]
   20344:	4651      	mov	r1, sl
   20346:	4648      	mov	r0, r9
   20348:	f7f2 ffaa 	bl	132a0 <print_formatted>
		break;
   2034c:	e7bf      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2034e:	686b      	ldr	r3, [r5, #4]
   20350:	682a      	ldr	r2, [r5, #0]
   20352:	69a9      	ldr	r1, [r5, #24]
   20354:	9104      	str	r1, [sp, #16]
   20356:	6969      	ldr	r1, [r5, #20]
   20358:	9103      	str	r1, [sp, #12]
   2035a:	6929      	ldr	r1, [r5, #16]
   2035c:	9102      	str	r1, [sp, #8]
   2035e:	68e9      	ldr	r1, [r5, #12]
   20360:	9101      	str	r1, [sp, #4]
   20362:	68a9      	ldr	r1, [r5, #8]
   20364:	9100      	str	r1, [sp, #0]
   20366:	4651      	mov	r1, sl
   20368:	4648      	mov	r0, r9
   2036a:	f7f2 ff99 	bl	132a0 <print_formatted>
		break;
   2036e:	e7ae      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20370:	686b      	ldr	r3, [r5, #4]
   20372:	682a      	ldr	r2, [r5, #0]
   20374:	69e9      	ldr	r1, [r5, #28]
   20376:	9105      	str	r1, [sp, #20]
   20378:	69a9      	ldr	r1, [r5, #24]
   2037a:	9104      	str	r1, [sp, #16]
   2037c:	6969      	ldr	r1, [r5, #20]
   2037e:	9103      	str	r1, [sp, #12]
   20380:	6929      	ldr	r1, [r5, #16]
   20382:	9102      	str	r1, [sp, #8]
   20384:	68e9      	ldr	r1, [r5, #12]
   20386:	9101      	str	r1, [sp, #4]
   20388:	68a9      	ldr	r1, [r5, #8]
   2038a:	9100      	str	r1, [sp, #0]
   2038c:	4651      	mov	r1, sl
   2038e:	4648      	mov	r0, r9
   20390:	f7f2 ff86 	bl	132a0 <print_formatted>
		break;
   20394:	e79b      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20396:	686b      	ldr	r3, [r5, #4]
   20398:	682a      	ldr	r2, [r5, #0]
   2039a:	6a29      	ldr	r1, [r5, #32]
   2039c:	9106      	str	r1, [sp, #24]
   2039e:	69e9      	ldr	r1, [r5, #28]
   203a0:	9105      	str	r1, [sp, #20]
   203a2:	69a9      	ldr	r1, [r5, #24]
   203a4:	9104      	str	r1, [sp, #16]
   203a6:	6969      	ldr	r1, [r5, #20]
   203a8:	9103      	str	r1, [sp, #12]
   203aa:	6929      	ldr	r1, [r5, #16]
   203ac:	9102      	str	r1, [sp, #8]
   203ae:	68e9      	ldr	r1, [r5, #12]
   203b0:	9101      	str	r1, [sp, #4]
   203b2:	68a9      	ldr	r1, [r5, #8]
   203b4:	9100      	str	r1, [sp, #0]
   203b6:	4651      	mov	r1, sl
   203b8:	4648      	mov	r0, r9
   203ba:	f7f2 ff71 	bl	132a0 <print_formatted>
		break;
   203be:	e786      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   203c0:	686b      	ldr	r3, [r5, #4]
   203c2:	682a      	ldr	r2, [r5, #0]
   203c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   203c6:	9107      	str	r1, [sp, #28]
   203c8:	6a29      	ldr	r1, [r5, #32]
   203ca:	9106      	str	r1, [sp, #24]
   203cc:	69e9      	ldr	r1, [r5, #28]
   203ce:	9105      	str	r1, [sp, #20]
   203d0:	69a9      	ldr	r1, [r5, #24]
   203d2:	9104      	str	r1, [sp, #16]
   203d4:	6969      	ldr	r1, [r5, #20]
   203d6:	9103      	str	r1, [sp, #12]
   203d8:	6929      	ldr	r1, [r5, #16]
   203da:	9102      	str	r1, [sp, #8]
   203dc:	68e9      	ldr	r1, [r5, #12]
   203de:	9101      	str	r1, [sp, #4]
   203e0:	68a9      	ldr	r1, [r5, #8]
   203e2:	9100      	str	r1, [sp, #0]
   203e4:	4651      	mov	r1, sl
   203e6:	4648      	mov	r0, r9
   203e8:	f7f2 ff5a 	bl	132a0 <print_formatted>
		break;
   203ec:	e76f      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   203ee:	686b      	ldr	r3, [r5, #4]
   203f0:	682a      	ldr	r2, [r5, #0]
   203f2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   203f4:	9108      	str	r1, [sp, #32]
   203f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   203f8:	9107      	str	r1, [sp, #28]
   203fa:	6a29      	ldr	r1, [r5, #32]
   203fc:	9106      	str	r1, [sp, #24]
   203fe:	69e9      	ldr	r1, [r5, #28]
   20400:	9105      	str	r1, [sp, #20]
   20402:	69a9      	ldr	r1, [r5, #24]
   20404:	9104      	str	r1, [sp, #16]
   20406:	6969      	ldr	r1, [r5, #20]
   20408:	9103      	str	r1, [sp, #12]
   2040a:	6929      	ldr	r1, [r5, #16]
   2040c:	9102      	str	r1, [sp, #8]
   2040e:	68e9      	ldr	r1, [r5, #12]
   20410:	9101      	str	r1, [sp, #4]
   20412:	68a9      	ldr	r1, [r5, #8]
   20414:	9100      	str	r1, [sp, #0]
   20416:	4651      	mov	r1, sl
   20418:	4648      	mov	r0, r9
   2041a:	f7f2 ff41 	bl	132a0 <print_formatted>
		break;
   2041e:	e756      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20420:	686b      	ldr	r3, [r5, #4]
   20422:	682a      	ldr	r2, [r5, #0]
   20424:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20426:	9109      	str	r1, [sp, #36]	; 0x24
   20428:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2042a:	9108      	str	r1, [sp, #32]
   2042c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2042e:	9107      	str	r1, [sp, #28]
   20430:	6a29      	ldr	r1, [r5, #32]
   20432:	9106      	str	r1, [sp, #24]
   20434:	69e9      	ldr	r1, [r5, #28]
   20436:	9105      	str	r1, [sp, #20]
   20438:	69a9      	ldr	r1, [r5, #24]
   2043a:	9104      	str	r1, [sp, #16]
   2043c:	6969      	ldr	r1, [r5, #20]
   2043e:	9103      	str	r1, [sp, #12]
   20440:	6929      	ldr	r1, [r5, #16]
   20442:	9102      	str	r1, [sp, #8]
   20444:	68e9      	ldr	r1, [r5, #12]
   20446:	9101      	str	r1, [sp, #4]
   20448:	68a9      	ldr	r1, [r5, #8]
   2044a:	9100      	str	r1, [sp, #0]
   2044c:	4651      	mov	r1, sl
   2044e:	4648      	mov	r0, r9
   20450:	f7f2 ff26 	bl	132a0 <print_formatted>
		break;
   20454:	e73b      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20456:	686b      	ldr	r3, [r5, #4]
   20458:	682a      	ldr	r2, [r5, #0]
   2045a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2045c:	910a      	str	r1, [sp, #40]	; 0x28
   2045e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20460:	9109      	str	r1, [sp, #36]	; 0x24
   20462:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20464:	9108      	str	r1, [sp, #32]
   20466:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20468:	9107      	str	r1, [sp, #28]
   2046a:	6a29      	ldr	r1, [r5, #32]
   2046c:	9106      	str	r1, [sp, #24]
   2046e:	69e9      	ldr	r1, [r5, #28]
   20470:	9105      	str	r1, [sp, #20]
   20472:	69a9      	ldr	r1, [r5, #24]
   20474:	9104      	str	r1, [sp, #16]
   20476:	6969      	ldr	r1, [r5, #20]
   20478:	9103      	str	r1, [sp, #12]
   2047a:	6929      	ldr	r1, [r5, #16]
   2047c:	9102      	str	r1, [sp, #8]
   2047e:	68e9      	ldr	r1, [r5, #12]
   20480:	9101      	str	r1, [sp, #4]
   20482:	68a9      	ldr	r1, [r5, #8]
   20484:	9100      	str	r1, [sp, #0]
   20486:	4651      	mov	r1, sl
   20488:	4648      	mov	r0, r9
   2048a:	f7f2 ff09 	bl	132a0 <print_formatted>
		break;
   2048e:	e71e      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20490:	686b      	ldr	r3, [r5, #4]
   20492:	682a      	ldr	r2, [r5, #0]
   20494:	6b69      	ldr	r1, [r5, #52]	; 0x34
   20496:	910b      	str	r1, [sp, #44]	; 0x2c
   20498:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2049a:	910a      	str	r1, [sp, #40]	; 0x28
   2049c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2049e:	9109      	str	r1, [sp, #36]	; 0x24
   204a0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   204a2:	9108      	str	r1, [sp, #32]
   204a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   204a6:	9107      	str	r1, [sp, #28]
   204a8:	6a29      	ldr	r1, [r5, #32]
   204aa:	9106      	str	r1, [sp, #24]
   204ac:	69e9      	ldr	r1, [r5, #28]
   204ae:	9105      	str	r1, [sp, #20]
   204b0:	69a9      	ldr	r1, [r5, #24]
   204b2:	9104      	str	r1, [sp, #16]
   204b4:	6969      	ldr	r1, [r5, #20]
   204b6:	9103      	str	r1, [sp, #12]
   204b8:	6929      	ldr	r1, [r5, #16]
   204ba:	9102      	str	r1, [sp, #8]
   204bc:	68e9      	ldr	r1, [r5, #12]
   204be:	9101      	str	r1, [sp, #4]
   204c0:	68a9      	ldr	r1, [r5, #8]
   204c2:	9100      	str	r1, [sp, #0]
   204c4:	4651      	mov	r1, sl
   204c6:	4648      	mov	r0, r9
   204c8:	f7f2 feea 	bl	132a0 <print_formatted>
		break;
   204cc:	e6ff      	b.n	202ce <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   204ce:	686b      	ldr	r3, [r5, #4]
   204d0:	682a      	ldr	r2, [r5, #0]
   204d2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   204d4:	910c      	str	r1, [sp, #48]	; 0x30
   204d6:	6b69      	ldr	r1, [r5, #52]	; 0x34
   204d8:	910b      	str	r1, [sp, #44]	; 0x2c
   204da:	6b29      	ldr	r1, [r5, #48]	; 0x30
   204dc:	910a      	str	r1, [sp, #40]	; 0x28
   204de:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   204e0:	9109      	str	r1, [sp, #36]	; 0x24
   204e2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   204e4:	9108      	str	r1, [sp, #32]
   204e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   204e8:	9107      	str	r1, [sp, #28]
   204ea:	6a29      	ldr	r1, [r5, #32]
   204ec:	9106      	str	r1, [sp, #24]
   204ee:	69e9      	ldr	r1, [r5, #28]
   204f0:	9105      	str	r1, [sp, #20]
   204f2:	69a9      	ldr	r1, [r5, #24]
   204f4:	9104      	str	r1, [sp, #16]
   204f6:	6969      	ldr	r1, [r5, #20]
   204f8:	9103      	str	r1, [sp, #12]
   204fa:	6929      	ldr	r1, [r5, #16]
   204fc:	9102      	str	r1, [sp, #8]
   204fe:	68e9      	ldr	r1, [r5, #12]
   20500:	9101      	str	r1, [sp, #4]
   20502:	68a9      	ldr	r1, [r5, #8]
   20504:	9100      	str	r1, [sp, #0]
   20506:	4651      	mov	r1, sl
   20508:	4648      	mov	r0, r9
   2050a:	f7f2 fec9 	bl	132a0 <print_formatted>
}
   2050e:	e6de      	b.n	202ce <std_print+0x74>

00020510 <log_output_flush>:
{
   20510:	b510      	push	{r4, lr}
   20512:	4604      	mov	r4, r0
		     output->control_block->offset,
   20514:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   20516:	6853      	ldr	r3, [r2, #4]
   20518:	6812      	ldr	r2, [r2, #0]
   2051a:	6881      	ldr	r1, [r0, #8]
   2051c:	6800      	ldr	r0, [r0, #0]
   2051e:	f7ff fe77 	bl	20210 <buffer_write>
	output->control_block->offset = 0;
   20522:	6863      	ldr	r3, [r4, #4]
   20524:	2200      	movs	r2, #0
   20526:	601a      	str	r2, [r3, #0]
}
   20528:	bd10      	pop	{r4, pc}

0002052a <out_func>:
{
   2052a:	b538      	push	{r3, r4, r5, lr}
   2052c:	4605      	mov	r5, r0
   2052e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   20530:	684b      	ldr	r3, [r1, #4]
   20532:	681a      	ldr	r2, [r3, #0]
   20534:	68cb      	ldr	r3, [r1, #12]
   20536:	429a      	cmp	r2, r3
   20538:	d00b      	beq.n	20552 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
   2053a:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2053c:	e8d3 2fef 	ldaex	r2, [r3]
   20540:	1c51      	adds	r1, r2, #1
   20542:	e8c3 1fe0 	stlex	r0, r1, [r3]
   20546:	2800      	cmp	r0, #0
   20548:	d1f8      	bne.n	2053c <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   2054a:	68a3      	ldr	r3, [r4, #8]
   2054c:	549d      	strb	r5, [r3, r2]
}
   2054e:	2000      	movs	r0, #0
   20550:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   20552:	4608      	mov	r0, r1
   20554:	f7ff ffdc 	bl	20510 <log_output_flush>
   20558:	e7ef      	b.n	2053a <out_func+0x10>

0002055a <log_output_msg_process>:
{
   2055a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2055c:	b085      	sub	sp, #20
   2055e:	4606      	mov	r6, r0
   20560:	460c      	mov	r4, r1
   20562:	4617      	mov	r7, r2
   20564:	f891 c008 	ldrb.w	ip, [r1, #8]
   20568:	f08c 0c01 	eor.w	ip, ip, #1
   2056c:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
   20570:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   20572:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
   20576:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
   2057a:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   2057c:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   20580:	f01c 0507 	ands.w	r5, ip, #7
   20584:	d10f      	bne.n	205a6 <log_output_msg_process+0x4c>
   20586:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20588:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   2058a:	f013 0f01 	tst.w	r3, #1
   2058e:	d013      	beq.n	205b8 <log_output_msg_process+0x5e>
	} else if (raw_string) {
   20590:	b9bd      	cbnz	r5, 205c2 <log_output_msg_process+0x68>
		raw_string_print(msg, output);
   20592:	4631      	mov	r1, r6
   20594:	4620      	mov	r0, r4
   20596:	f7f3 f805 	bl	135a4 <raw_string_print>
	if (!raw_string) {
   2059a:	b9c5      	cbnz	r5, 205ce <log_output_msg_process+0x74>
	log_output_flush(output);
   2059c:	4630      	mov	r0, r6
   2059e:	f7ff ffb7 	bl	20510 <log_output_flush>
}
   205a2:	b005      	add	sp, #20
   205a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   205a6:	9102      	str	r1, [sp, #8]
   205a8:	9001      	str	r0, [sp, #4]
   205aa:	9500      	str	r5, [sp, #0]
   205ac:	4639      	mov	r1, r7
   205ae:	4630      	mov	r0, r6
   205b0:	f7f2 ff90 	bl	134d4 <prefix_print>
   205b4:	4602      	mov	r2, r0
   205b6:	e7e7      	b.n	20588 <log_output_msg_process+0x2e>
		std_print(msg, output);
   205b8:	4631      	mov	r1, r6
   205ba:	4620      	mov	r0, r4
   205bc:	f7ff fe4d 	bl	2025a <std_print>
   205c0:	e7eb      	b.n	2059a <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
   205c2:	463b      	mov	r3, r7
   205c4:	4631      	mov	r1, r6
   205c6:	4620      	mov	r0, r4
   205c8:	f7f2 ffc0 	bl	1354c <hexdump_print>
   205cc:	e7e5      	b.n	2059a <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
   205ce:	462a      	mov	r2, r5
   205d0:	4639      	mov	r1, r7
   205d2:	4630      	mov	r0, r6
   205d4:	f7ff fe35 	bl	20242 <postfix_print>
   205d8:	e7e0      	b.n	2059c <log_output_msg_process+0x42>

000205da <zsock_getaddrinfo>:
#endif /* defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4) */

int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
   205da:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   205dc:	f7f3 f9e2 	bl	139a4 <socket_offload_getaddrinfo>
		*res = NULL;
	}
#endif

	return ret;
}
   205e0:	bd08      	pop	{r3, pc}

000205e2 <zsock_freeaddrinfo>:

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
   205e2:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   205e4:	f7f3 f9e6 	bl	139b4 <socket_offload_freeaddrinfo>
	}

	free(ai);
}
   205e8:	bd08      	pop	{r3, pc}

000205ea <z_fdtable_call_ioctl>:
{
   205ea:	b40c      	push	{r2, r3}
   205ec:	b500      	push	{lr}
   205ee:	b083      	sub	sp, #12
   205f0:	4603      	mov	r3, r0
   205f2:	4608      	mov	r0, r1
   205f4:	aa04      	add	r2, sp, #16
   205f6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
   205fa:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   205fc:	68db      	ldr	r3, [r3, #12]
   205fe:	4798      	blx	r3
}
   20600:	b003      	add	sp, #12
   20602:	f85d eb04 	ldr.w	lr, [sp], #4
   20606:	b002      	add	sp, #8
   20608:	4770      	bx	lr

0002060a <z_impl_zsock_close>:
{
   2060a:	b530      	push	{r4, r5, lr}
   2060c:	b083      	sub	sp, #12
   2060e:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   20610:	466a      	mov	r2, sp
   20612:	a901      	add	r1, sp, #4
   20614:	f7f1 fb80 	bl	11d18 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   20618:	b1a8      	cbz	r0, 20646 <z_impl_zsock_close+0x3c>
   2061a:	4604      	mov	r4, r0
	(void)k_mutex_lock(lock, K_FOREVER);
   2061c:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2061e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20626:	f7fc fd1d 	bl	1d064 <z_impl_k_mutex_lock>
	ret = vtable->fd_vtable.close(ctx);
   2062a:	9b01      	ldr	r3, [sp, #4]
   2062c:	689b      	ldr	r3, [r3, #8]
   2062e:	4620      	mov	r0, r4
   20630:	4798      	blx	r3
   20632:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   20634:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_unlock(mutex);
   20636:	f7fc fd9f 	bl	1d178 <z_impl_k_mutex_unlock>
	z_free_fd(sock);
   2063a:	4628      	mov	r0, r5
   2063c:	f7ff f912 	bl	1f864 <z_free_fd>
}
   20640:	4620      	mov	r0, r4
   20642:	b003      	add	sp, #12
   20644:	bd30      	pop	{r4, r5, pc}
		errno = EBADF;
   20646:	f000 f98a 	bl	2095e <__errno>
   2064a:	2309      	movs	r3, #9
   2064c:	6003      	str	r3, [r0, #0]
		return -1;
   2064e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20652:	e7f5      	b.n	20640 <z_impl_zsock_close+0x36>

00020654 <z_impl_zsock_connect>:
{
   20654:	b570      	push	{r4, r5, r6, lr}
   20656:	b082      	sub	sp, #8
   20658:	460d      	mov	r5, r1
   2065a:	4614      	mov	r4, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2065c:	aa01      	add	r2, sp, #4
   2065e:	4669      	mov	r1, sp
   20660:	f7f1 fb5a 	bl	11d18 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   20664:	b1b8      	cbz	r0, 20696 <z_impl_zsock_connect+0x42>
   20666:	4606      	mov	r6, r0
   20668:	9b00      	ldr	r3, [sp, #0]
   2066a:	695b      	ldr	r3, [r3, #20]
   2066c:	b19b      	cbz	r3, 20696 <z_impl_zsock_connect+0x42>
   2066e:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   20670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20678:	f7fc fcf4 	bl	1d064 <z_impl_k_mutex_lock>
   2067c:	9b00      	ldr	r3, [sp, #0]
   2067e:	695b      	ldr	r3, [r3, #20]
   20680:	4622      	mov	r2, r4
   20682:	4629      	mov	r1, r5
   20684:	4630      	mov	r0, r6
   20686:	4798      	blx	r3
   20688:	4604      	mov	r4, r0
   2068a:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2068c:	f7fc fd74 	bl	1d178 <z_impl_k_mutex_unlock>
}
   20690:	4620      	mov	r0, r4
   20692:	b002      	add	sp, #8
   20694:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   20696:	f000 f962 	bl	2095e <__errno>
   2069a:	2309      	movs	r3, #9
   2069c:	6003      	str	r3, [r0, #0]
   2069e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   206a2:	e7f5      	b.n	20690 <z_impl_zsock_connect+0x3c>

000206a4 <z_impl_zsock_sendto>:
{
   206a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206a8:	b084      	sub	sp, #16
   206aa:	460e      	mov	r6, r1
   206ac:	4615      	mov	r5, r2
   206ae:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   206b0:	aa03      	add	r2, sp, #12
   206b2:	a902      	add	r1, sp, #8
   206b4:	f7f1 fb30 	bl	11d18 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   206b8:	b1f0      	cbz	r0, 206f8 <z_impl_zsock_sendto+0x54>
   206ba:	4607      	mov	r7, r0
   206bc:	9b02      	ldr	r3, [sp, #8]
   206be:	6a1b      	ldr	r3, [r3, #32]
   206c0:	b1d3      	cbz	r3, 206f8 <z_impl_zsock_sendto+0x54>
   206c2:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   206c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   206c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   206cc:	f7fc fcca 	bl	1d064 <z_impl_k_mutex_lock>
   206d0:	9b02      	ldr	r3, [sp, #8]
   206d2:	f8d3 8020 	ldr.w	r8, [r3, #32]
   206d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   206d8:	9301      	str	r3, [sp, #4]
   206da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   206dc:	9300      	str	r3, [sp, #0]
   206de:	4623      	mov	r3, r4
   206e0:	462a      	mov	r2, r5
   206e2:	4631      	mov	r1, r6
   206e4:	4638      	mov	r0, r7
   206e6:	47c0      	blx	r8
   206e8:	4604      	mov	r4, r0
   206ea:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   206ec:	f7fc fd44 	bl	1d178 <z_impl_k_mutex_unlock>
}
   206f0:	4620      	mov	r0, r4
   206f2:	b004      	add	sp, #16
   206f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   206f8:	f000 f931 	bl	2095e <__errno>
   206fc:	2309      	movs	r3, #9
   206fe:	6003      	str	r3, [r0, #0]
   20700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20704:	e7f4      	b.n	206f0 <z_impl_zsock_sendto+0x4c>

00020706 <z_impl_zsock_sendmsg>:
{
   20706:	b570      	push	{r4, r5, r6, lr}
   20708:	b082      	sub	sp, #8
   2070a:	460d      	mov	r5, r1
   2070c:	4614      	mov	r4, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2070e:	aa01      	add	r2, sp, #4
   20710:	4669      	mov	r1, sp
   20712:	f7f1 fb01 	bl	11d18 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   20716:	b1b8      	cbz	r0, 20748 <z_impl_zsock_sendmsg+0x42>
   20718:	4606      	mov	r6, r0
   2071a:	9b00      	ldr	r3, [sp, #0]
   2071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2071e:	b19b      	cbz	r3, 20748 <z_impl_zsock_sendmsg+0x42>
   20720:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   20722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2072a:	f7fc fc9b 	bl	1d064 <z_impl_k_mutex_lock>
   2072e:	9b00      	ldr	r3, [sp, #0]
   20730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20732:	4622      	mov	r2, r4
   20734:	4629      	mov	r1, r5
   20736:	4630      	mov	r0, r6
   20738:	4798      	blx	r3
   2073a:	4604      	mov	r4, r0
   2073c:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2073e:	f7fc fd1b 	bl	1d178 <z_impl_k_mutex_unlock>
}
   20742:	4620      	mov	r0, r4
   20744:	b002      	add	sp, #8
   20746:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   20748:	f000 f909 	bl	2095e <__errno>
   2074c:	2309      	movs	r3, #9
   2074e:	6003      	str	r3, [r0, #0]
   20750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20754:	e7f5      	b.n	20742 <z_impl_zsock_sendmsg+0x3c>

00020756 <z_impl_zsock_recvfrom>:
{
   20756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2075a:	b084      	sub	sp, #16
   2075c:	460e      	mov	r6, r1
   2075e:	4615      	mov	r5, r2
   20760:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   20762:	aa03      	add	r2, sp, #12
   20764:	a902      	add	r1, sp, #8
   20766:	f7f1 fad7 	bl	11d18 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2076a:	b1f0      	cbz	r0, 207aa <z_impl_zsock_recvfrom+0x54>
   2076c:	4607      	mov	r7, r0
   2076e:	9b02      	ldr	r3, [sp, #8]
   20770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20772:	b1d3      	cbz	r3, 207aa <z_impl_zsock_recvfrom+0x54>
   20774:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   20776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2077e:	f7fc fc71 	bl	1d064 <z_impl_k_mutex_lock>
   20782:	9b02      	ldr	r3, [sp, #8]
   20784:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   20788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2078a:	9301      	str	r3, [sp, #4]
   2078c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2078e:	9300      	str	r3, [sp, #0]
   20790:	4623      	mov	r3, r4
   20792:	462a      	mov	r2, r5
   20794:	4631      	mov	r1, r6
   20796:	4638      	mov	r0, r7
   20798:	47c0      	blx	r8
   2079a:	4604      	mov	r4, r0
   2079c:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   2079e:	f7fc fceb 	bl	1d178 <z_impl_k_mutex_unlock>
}
   207a2:	4620      	mov	r0, r4
   207a4:	b004      	add	sp, #16
   207a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   207aa:	f000 f8d8 	bl	2095e <__errno>
   207ae:	2309      	movs	r3, #9
   207b0:	6003      	str	r3, [r0, #0]
   207b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   207b6:	e7f4      	b.n	207a2 <z_impl_zsock_recvfrom+0x4c>

000207b8 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   207b8:	b538      	push	{r3, r4, r5, lr}
   207ba:	4604      	mov	r4, r0
   207bc:	460d      	mov	r5, r1
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   207be:	2a00      	cmp	r2, #0
   207c0:	db18      	blt.n	207f4 <z_impl_zsock_poll+0x3c>
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
   207c2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   207c6:	17d1      	asrs	r1, r2, #31
   207c8:	03c9      	lsls	r1, r1, #15
   207ca:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   207ce:	03d2      	lsls	r2, r2, #15
   207d0:	f240 30e7 	movw	r0, #999	; 0x3e7
   207d4:	1810      	adds	r0, r2, r0
   207d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   207da:	f04f 0300 	mov.w	r3, #0
   207de:	f141 0100 	adc.w	r1, r1, #0
   207e2:	f7f0 fb0d 	bl	10e00 <__aeabi_uldivmod>
   207e6:	4602      	mov	r2, r0
   207e8:	460b      	mov	r3, r1
	}

	return zsock_poll_internal(fds, nfds, timeout);
   207ea:	4629      	mov	r1, r5
   207ec:	4620      	mov	r0, r4
   207ee:	f7f2 ffad 	bl	1374c <zsock_poll_internal>
}
   207f2:	bd38      	pop	{r3, r4, r5, pc}
		timeout = K_FOREVER;
   207f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   207f8:	4613      	mov	r3, r2
   207fa:	e7f6      	b.n	207ea <z_impl_zsock_poll+0x32>

000207fc <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   207fc:	2200      	movs	r2, #0
   207fe:	6002      	str	r2, [r0, #0]
   20800:	6042      	str	r2, [r0, #4]
   20802:	6082      	str	r2, [r0, #8]
}
   20804:	4770      	bx	lr

00020806 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   20806:	b510      	push	{r4, lr}
   20808:	b40f      	push	{r0, r1, r2, r3}
   2080a:	f7f3 f9e9 	bl	13be0 <before_nse>
   2080e:	bc0f      	pop	{r0, r1, r2, r3}
   20810:	f7ef fbea 	bl	ffe8 <spm_request_random_number_nse>
   20814:	b40f      	push	{r0, r1, r2, r3}
   20816:	f7f3 f9ed 	bl	13bf4 <after_nse>
   2081a:	bc0f      	pop	{r0, r1, r2, r3}
   2081c:	bd10      	pop	{r4, pc}

0002081e <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2081e:	b538      	push	{r3, r4, r5, lr}
   20820:	4604      	mov	r4, r0

	if (esf != NULL) {
   20822:	460d      	mov	r5, r1
   20824:	b111      	cbz	r1, 2082c <z_arm_fatal_error+0xe>
		esf_dump(esf);
   20826:	4608      	mov	r0, r1
   20828:	f7f3 fa0c 	bl	13c44 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2082c:	4629      	mov	r1, r5
   2082e:	4620      	mov	r0, r4
   20830:	f7fc f95a 	bl	1cae8 <z_fatal_error>
}
   20834:	bd38      	pop	{r3, r4, r5, pc}

00020836 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20836:	b508      	push	{r3, lr}
   20838:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2083a:	6800      	ldr	r0, [r0, #0]
   2083c:	f7ff ffef 	bl	2081e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   20840:	bd08      	pop	{r3, pc}

00020842 <z_irq_spurious>:
{
   20842:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20844:	2100      	movs	r1, #0
   20846:	2001      	movs	r0, #1
   20848:	f7ff ffe9 	bl	2081e <z_arm_fatal_error>
}
   2084c:	bd08      	pop	{r3, pc}

0002084e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2084e:	b508      	push	{r3, lr}
	handler();
   20850:	f7f3 fa88 	bl	13d64 <z_SysNmiOnReset>
	z_arm_int_exit();
   20854:	f7f3 fb60 	bl	13f18 <z_arm_exc_exit>
}
   20858:	bd08      	pop	{r3, pc}

0002085a <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   2085a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2085e:	f383 880b 	msr	PSPLIM, r3
}
   20862:	4770      	bx	lr

00020864 <memory_fault_recoverable>:
}
   20864:	2000      	movs	r0, #0
   20866:	4770      	bx	lr

00020868 <fault_handle>:
{
   20868:	b508      	push	{r3, lr}
	*recoverable = false;
   2086a:	2300      	movs	r3, #0
   2086c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2086e:	1ecb      	subs	r3, r1, #3
   20870:	2b09      	cmp	r3, #9
   20872:	d81a      	bhi.n	208aa <fault_handle+0x42>
   20874:	e8df f003 	tbb	[pc, r3]
   20878:	110d0905 	.word	0x110d0905
   2087c:	19191919 	.word	0x19191919
   20880:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   20882:	4611      	mov	r1, r2
   20884:	f7f3 fdda 	bl	1443c <hard_fault>
}
   20888:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2088a:	2100      	movs	r1, #0
   2088c:	f7f3 fc38 	bl	14100 <mem_manage_fault>
		break;
   20890:	e7fa      	b.n	20888 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   20892:	2100      	movs	r1, #0
   20894:	f7f3 fcfa 	bl	1428c <bus_fault>
		break;
   20898:	e7f6      	b.n	20888 <fault_handle+0x20>
		reason = usage_fault(esf);
   2089a:	f7f3 fb4b 	bl	13f34 <usage_fault>
		break;
   2089e:	e7f3      	b.n	20888 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   208a0:	4611      	mov	r1, r2
   208a2:	f7f3 fc13 	bl	140cc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   208a6:	2000      	movs	r0, #0
		break;
   208a8:	e7ee      	b.n	20888 <fault_handle+0x20>
		reserved_exception(esf, fault);
   208aa:	f7f3 fe67 	bl	1457c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   208ae:	2000      	movs	r0, #0
	return reason;
   208b0:	e7ea      	b.n	20888 <fault_handle+0x20>

000208b2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   208b2:	4770      	bx	lr

000208b4 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   208b4:	4770      	bx	lr

000208b6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   208b6:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   208ba:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   208be:	d001      	beq.n	208c4 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   208c0:	b2c0      	uxtb	r0, r0
   208c2:	4770      	bx	lr
	}

	return -EINVAL;
   208c4:	f06f 0015 	mvn.w	r0, #21
}
   208c8:	4770      	bx	lr

000208ca <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   208ca:	6843      	ldr	r3, [r0, #4]
		&&
   208cc:	2b1f      	cmp	r3, #31
   208ce:	d90a      	bls.n	208e6 <mpu_partition_is_valid+0x1c>
		&&
   208d0:	f013 0f1f 	tst.w	r3, #31
   208d4:	d001      	beq.n	208da <mpu_partition_is_valid+0x10>
		&&
   208d6:	2000      	movs	r0, #0
   208d8:	4770      	bx	lr
		((part->start &
   208da:	6803      	ldr	r3, [r0, #0]
		&&
   208dc:	f013 0f1f 	tst.w	r3, #31
   208e0:	d003      	beq.n	208ea <mpu_partition_is_valid+0x20>
   208e2:	2000      	movs	r0, #0
   208e4:	4770      	bx	lr
   208e6:	2000      	movs	r0, #0
   208e8:	4770      	bx	lr
   208ea:	2001      	movs	r0, #1
}
   208ec:	4770      	bx	lr

000208ee <mpu_configure_region>:
{
   208ee:	b510      	push	{r4, lr}
   208f0:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   208f2:	680b      	ldr	r3, [r1, #0]
   208f4:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   208f6:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   208f8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   208fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   20900:	f36c 0204 	bfi	r2, ip, #0, #5
   20904:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   20908:	8949      	ldrh	r1, [r1, #10]
   2090a:	b2d2      	uxtb	r2, r2
   2090c:	f361 1247 	bfi	r2, r1, #5, #3
   20910:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   20914:	f023 031f 	bic.w	r3, r3, #31
   20918:	4423      	add	r3, r4
   2091a:	3b01      	subs	r3, #1
   2091c:	f023 031f 	bic.w	r3, r3, #31
   20920:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   20922:	4669      	mov	r1, sp
   20924:	f7f3 ff82 	bl	1482c <region_allocate_and_init>
}
   20928:	b004      	add	sp, #16
   2092a:	bd10      	pop	{r4, pc}

0002092c <arm_core_mpu_configure_static_mpu_regions>:
{
   2092c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2092e:	f7f4 f89b 	bl	14a68 <mpu_configure_static_mpu_regions>
}
   20932:	bd08      	pop	{r3, pc}

00020934 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   20934:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20936:	f7f4 f8a1 	bl	14a7c <mpu_mark_areas_for_dynamic_regions>
}
   2093a:	bd08      	pop	{r3, pc}

0002093c <malloc_prepare>:
}
   2093c:	2000      	movs	r0, #0
   2093e:	4770      	bx	lr

00020940 <_stdout_hook_default>:
}
   20940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20944:	4770      	bx	lr

00020946 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   20946:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   20948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2094c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20950:	f7fc fb88 	bl	1d064 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   20954:	bd08      	pop	{r3, pc}

00020956 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   20956:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   20958:	f7fc fc0e 	bl	1d178 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   2095c:	bd08      	pop	{r3, pc}

0002095e <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   2095e:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   20960:	f7fc f88c 	bl	1ca7c <z_impl_z_errno>
	return z_errno();
}
   20964:	bd08      	pop	{r3, pc}

00020966 <init_rx_queues>:
	net_gptp_init();
#endif
}

static void init_rx_queues(void)
{
   20966:	b508      	push	{r3, lr}
	/* Starting TX side. The ordering is important here and the TX
	 * can only be started when RX side is ready to receive packets.
	 */
	net_if_init();
   20968:	f7f4 f984 	bl	14c74 <net_if_init>

	net_tc_rx_init();

	/* This will take the interface up and start everything. */
	net_if_post_init();
   2096c:	f7f4 f9a6 	bl	14cbc <net_if_post_init>

	/* Things to init after network interface is working */
	net_post_init();
}
   20970:	bd08      	pop	{r3, pc}

00020972 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   20972:	b508      	push	{r3, lr}

	l3_init();

	net_mgmt_event_init();

	init_rx_queues();
   20974:	f7ff fff7 	bl	20966 <init_rx_queues>

	return services_init();
}
   20978:	2000      	movs	r0, #0
   2097a:	bd08      	pop	{r3, pc}

0002097c <l2_flags_get>:
	if (!iface || !iface->if_dev) {
   2097c:	b140      	cbz	r0, 20990 <l2_flags_get+0x14>
{
   2097e:	b508      	push	{r3, lr}
   20980:	6803      	ldr	r3, [r0, #0]
   20982:	b13b      	cbz	r3, 20994 <l2_flags_get+0x18>
	return iface->if_dev->l2;
   20984:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   20986:	b13b      	cbz	r3, 20998 <l2_flags_get+0x1c>
   20988:	68db      	ldr	r3, [r3, #12]
   2098a:	b13b      	cbz	r3, 2099c <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
   2098c:	4798      	blx	r3
}
   2098e:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
   20990:	2000      	movs	r0, #0
}
   20992:	4770      	bx	lr
	enum net_l2_flags flags = 0;
   20994:	2000      	movs	r0, #0
   20996:	e7fa      	b.n	2098e <l2_flags_get+0x12>
   20998:	2000      	movs	r0, #0
   2099a:	e7f8      	b.n	2098e <l2_flags_get+0x12>
   2099c:	2000      	movs	r0, #0
   2099e:	e7f6      	b.n	2098e <l2_flags_get+0x12>

000209a0 <net_byte_to_hex>:
{
   209a0:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   209a2:	090c      	lsrs	r4, r1, #4
   209a4:	2500      	movs	r5, #0
   209a6:	e009      	b.n	209bc <net_byte_to_hex+0x1c>
		if (i == 0 && !pad && !val) {
   209a8:	b963      	cbnz	r3, 209c4 <net_byte_to_hex+0x24>
   209aa:	b95c      	cbnz	r4, 209c4 <net_byte_to_hex+0x24>
   209ac:	e003      	b.n	209b6 <net_byte_to_hex+0x16>
			*ptr++ = (char) (val - 10 + base);
   209ae:	4414      	add	r4, r2
   209b0:	3c0a      	subs	r4, #10
   209b2:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   209b6:	3501      	adds	r5, #1
   209b8:	f001 040f 	and.w	r4, r1, #15
   209bc:	2d01      	cmp	r5, #1
   209be:	dc07      	bgt.n	209d0 <net_byte_to_hex+0x30>
		if (i == 0 && !pad && !val) {
   209c0:	2d00      	cmp	r5, #0
   209c2:	d0f1      	beq.n	209a8 <net_byte_to_hex+0x8>
		if (val < 10) {
   209c4:	2c09      	cmp	r4, #9
   209c6:	dcf2      	bgt.n	209ae <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   209c8:	3430      	adds	r4, #48	; 0x30
   209ca:	f800 4b01 	strb.w	r4, [r0], #1
   209ce:	e7f2      	b.n	209b6 <net_byte_to_hex+0x16>
	*ptr = '\0';
   209d0:	2300      	movs	r3, #0
   209d2:	7003      	strb	r3, [r0, #0]
}
   209d4:	bc30      	pop	{r4, r5}
   209d6:	4770      	bx	lr

000209d8 <z_impl_net_addr_ntop>:

char *z_impl_net_addr_ntop(sa_family_t family, const void *src,
			   char *dst, size_t size)
{
   209d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209dc:	b087      	sub	sp, #28
   209de:	9003      	str	r0, [sp, #12]
   209e0:	9101      	str	r1, [sp, #4]
   209e2:	9202      	str	r2, [sp, #8]
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   209e4:	2300      	movs	r3, #0
   209e6:	9304      	str	r3, [sp, #16]
   209e8:	9305      	str	r3, [sp, #20]
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   209ea:	2802      	cmp	r0, #2
   209ec:	d011      	beq.n	20a12 <z_impl_net_addr_ntop+0x3a>

		if (longest == 1U) {
			pos = -1;
		}

	} else if (family == AF_INET) {
   209ee:	9b03      	ldr	r3, [sp, #12]
   209f0:	2b01      	cmp	r3, #1
   209f2:	f040 80d2 	bne.w	20b9a <z_impl_net_addr_ntop+0x1c2>
		addr = (struct in_addr *)src;
		len = 4;
   209f6:	2704      	movs	r7, #4
		delim = '.';
   209f8:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	int8_t pos = -1;
   209fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   20a00:	f04f 0a01 	mov.w	sl, #1
	char *ptr = dst;
   20a04:	9d02      	ldr	r5, [sp, #8]
	bool needcolon = false;
   20a06:	f04f 0800 	mov.w	r8, #0
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   20a0a:	4644      	mov	r4, r8
   20a0c:	46b0      	mov	r8, r6
   20a0e:	4626      	mov	r6, r4
   20a10:	e073      	b.n	20afa <z_impl_net_addr_ntop+0x122>
		w = (uint16_t *)addr6->s6_addr16;
   20a12:	460e      	mov	r6, r1
		for (i = 0U; i < 8; i++) {
   20a14:	2000      	movs	r0, #0
   20a16:	e001      	b.n	20a1c <z_impl_net_addr_ntop+0x44>
   20a18:	3001      	adds	r0, #1
   20a1a:	b2c0      	uxtb	r0, r0
   20a1c:	2807      	cmp	r0, #7
   20a1e:	d810      	bhi.n	20a42 <z_impl_net_addr_ntop+0x6a>
			for (j = i; j < 8; j++) {
   20a20:	4603      	mov	r3, r0
   20a22:	2b07      	cmp	r3, #7
   20a24:	d8f8      	bhi.n	20a18 <z_impl_net_addr_ntop+0x40>
				if (UNALIGNED_GET(&w[j]) != 0) {
   20a26:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
   20a2a:	2a00      	cmp	r2, #0
   20a2c:	d1f4      	bne.n	20a18 <z_impl_net_addr_ntop+0x40>
				zeros[i]++;
   20a2e:	aa06      	add	r2, sp, #24
   20a30:	1811      	adds	r1, r2, r0
   20a32:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   20a36:	3201      	adds	r2, #1
   20a38:	f801 2c08 	strb.w	r2, [r1, #-8]
			for (j = i; j < 8; j++) {
   20a3c:	3301      	adds	r3, #1
   20a3e:	b2db      	uxtb	r3, r3
   20a40:	e7ef      	b.n	20a22 <z_impl_net_addr_ntop+0x4a>
	int8_t pos = -1;
   20a42:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   20a46:	f04f 0a01 	mov.w	sl, #1
		for (i = 0U; i < 8; i++) {
   20a4a:	2300      	movs	r3, #0
   20a4c:	e001      	b.n	20a52 <z_impl_net_addr_ntop+0x7a>
   20a4e:	3301      	adds	r3, #1
   20a50:	b2db      	uxtb	r3, r3
   20a52:	2b07      	cmp	r3, #7
   20a54:	d809      	bhi.n	20a6a <z_impl_net_addr_ntop+0x92>
			if (zeros[i] > longest) {
   20a56:	aa06      	add	r2, sp, #24
   20a58:	441a      	add	r2, r3
   20a5a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   20a5e:	4552      	cmp	r2, sl
   20a60:	d9f5      	bls.n	20a4e <z_impl_net_addr_ntop+0x76>
				pos = i;
   20a62:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   20a66:	4692      	mov	sl, r2
   20a68:	e7f1      	b.n	20a4e <z_impl_net_addr_ntop+0x76>
		if (longest == 1U) {
   20a6a:	f1ba 0f01 	cmp.w	sl, #1
   20a6e:	d003      	beq.n	20a78 <z_impl_net_addr_ntop+0xa0>
		len = 8;
   20a70:	2708      	movs	r7, #8
	char delim = ':';
   20a72:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   20a76:	e7c5      	b.n	20a04 <z_impl_net_addr_ntop+0x2c>
		len = 8;
   20a78:	2708      	movs	r7, #8
	char delim = ':';
   20a7a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   20a7e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   20a82:	e7bf      	b.n	20a04 <z_impl_net_addr_ntop+0x2c>
		/* IPv4 address a.b.c.d */
		if (len == 4) {
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
   20a84:	9a01      	ldr	r2, [sp, #4]
   20a86:	5cd1      	ldrb	r1, [r2, r3]
   20a88:	b28b      	uxth	r3, r1

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
   20a8a:	b93b      	cbnz	r3, 20a9c <z_impl_net_addr_ntop+0xc4>
				*ptr++ = '0';
   20a8c:	462b      	mov	r3, r5
   20a8e:	2230      	movs	r2, #48	; 0x30
   20a90:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   20a94:	f885 b001 	strb.w	fp, [r5, #1]
   20a98:	461d      	mov	r5, r3
				continue;
   20a9a:	e02c      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
			}

			l = net_value_to_udec(ptr, value, 0);
   20a9c:	2200      	movs	r2, #0
   20a9e:	4628      	mov	r0, r5
   20aa0:	f7f4 f926 	bl	14cf0 <net_value_to_udec>

			ptr += l;
			*ptr++ = delim;
   20aa4:	fa55 f580 	uxtab	r5, r5, r0
   20aa8:	f805 bb01 	strb.w	fp, [r5], #1

			continue;
   20aac:	e023      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
		}

		/* IPv6 address */
		if (i == pos) {
			if (needcolon || i == 0U) {
   20aae:	b906      	cbnz	r6, 20ab2 <z_impl_net_addr_ntop+0xda>
   20ab0:	b96c      	cbnz	r4, 20ace <z_impl_net_addr_ntop+0xf6>
				*ptr++ = ':';
   20ab2:	4628      	mov	r0, r5
   20ab4:	233a      	movs	r3, #58	; 0x3a
   20ab6:	f800 3b01 	strb.w	r3, [r0], #1
			}

			*ptr++ = ':';
   20aba:	4605      	mov	r5, r0
   20abc:	233a      	movs	r3, #58	; 0x3a
   20abe:	f805 3b01 	strb.w	r3, [r5], #1
			needcolon = false;
			i += longest - 1U;
   20ac2:	4454      	add	r4, sl
   20ac4:	b2e4      	uxtb	r4, r4
   20ac6:	3c01      	subs	r4, #1
   20ac8:	b2e4      	uxtb	r4, r4
			needcolon = false;
   20aca:	2600      	movs	r6, #0

			continue;
   20acc:	e013      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
   20ace:	4628      	mov	r0, r5
   20ad0:	e7f3      	b.n	20aba <z_impl_net_addr_ntop+0xe2>
		bh = value >> 8;
		bl = value & 0xff;

		if (bh) {
			if (bh > 0x0f) {
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   20ad2:	2300      	movs	r3, #0
   20ad4:	2261      	movs	r2, #97	; 0x61
   20ad6:	4628      	mov	r0, r5
   20ad8:	f7ff ff62 	bl	209a0 <net_byte_to_hex>
   20adc:	e004      	b.n	20ae8 <z_impl_net_addr_ntop+0x110>
			} else {
				if (bh < 10) {
					*ptr++ = (char)(bh + '0');
				} else {
					*ptr++ = (char) (bh - 10 + 'a');
   20ade:	f100 0357 	add.w	r3, r0, #87	; 0x57
   20ae2:	4628      	mov	r0, r5
   20ae4:	f800 3b01 	strb.w	r3, [r0], #1
				}
			}

			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   20ae8:	2301      	movs	r3, #1
   20aea:	2261      	movs	r2, #97	; 0x61
   20aec:	4631      	mov	r1, r6
   20aee:	f7ff ff57 	bl	209a0 <net_byte_to_hex>
   20af2:	4605      	mov	r5, r0
			} else {
				*ptr++ = (char) (bl - 10 + 'a');
			}
		}

		needcolon = true;
   20af4:	2601      	movs	r6, #1
	for (i = 0U; i < len; i++) {
   20af6:	3401      	adds	r4, #1
   20af8:	b2e4      	uxtb	r4, r4
   20afa:	4623      	mov	r3, r4
   20afc:	42bc      	cmp	r4, r7
   20afe:	da3b      	bge.n	20b78 <z_impl_net_addr_ntop+0x1a0>
		if (len == 4) {
   20b00:	2f04      	cmp	r7, #4
   20b02:	d0bf      	beq.n	20a84 <z_impl_net_addr_ntop+0xac>
		if (i == pos) {
   20b04:	4599      	cmp	r9, r3
   20b06:	d0d2      	beq.n	20aae <z_impl_net_addr_ntop+0xd6>
		if (needcolon) {
   20b08:	b126      	cbz	r6, 20b14 <z_impl_net_addr_ntop+0x13c>
			*ptr++ = ':';
   20b0a:	4628      	mov	r0, r5
   20b0c:	233a      	movs	r3, #58	; 0x3a
   20b0e:	f800 3b01 	strb.w	r3, [r0], #1
   20b12:	4605      	mov	r5, r0
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   20b14:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
   20b18:	0213      	lsls	r3, r2, #8
   20b1a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   20b1e:	b21a      	sxth	r2, r3
		bh = value >> 8;
   20b20:	f3c3 2007 	ubfx	r0, r3, #8, #8
   20b24:	4601      	mov	r1, r0
		bl = value & 0xff;
   20b26:	b2de      	uxtb	r6, r3
		if (bh) {
   20b28:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   20b2c:	d009      	beq.n	20b42 <z_impl_net_addr_ntop+0x16a>
			if (bh > 0x0f) {
   20b2e:	280f      	cmp	r0, #15
   20b30:	d8cf      	bhi.n	20ad2 <z_impl_net_addr_ntop+0xfa>
				if (bh < 10) {
   20b32:	2809      	cmp	r0, #9
   20b34:	d8d3      	bhi.n	20ade <z_impl_net_addr_ntop+0x106>
					*ptr++ = (char)(bh + '0');
   20b36:	f100 0330 	add.w	r3, r0, #48	; 0x30
   20b3a:	4628      	mov	r0, r5
   20b3c:	f800 3b01 	strb.w	r3, [r0], #1
   20b40:	e7d2      	b.n	20ae8 <z_impl_net_addr_ntop+0x110>
		} else if (bl > 0x0f) {
   20b42:	2e0f      	cmp	r6, #15
   20b44:	d808      	bhi.n	20b58 <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
   20b46:	2e09      	cmp	r6, #9
   20b48:	d80f      	bhi.n	20b6a <z_impl_net_addr_ntop+0x192>
				*ptr++ = (char)(bl + '0');
   20b4a:	3230      	adds	r2, #48	; 0x30
   20b4c:	4628      	mov	r0, r5
   20b4e:	f800 2b01 	strb.w	r2, [r0], #1
   20b52:	4605      	mov	r5, r0
		needcolon = true;
   20b54:	2601      	movs	r6, #1
   20b56:	e7ce      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   20b58:	2300      	movs	r3, #0
   20b5a:	2261      	movs	r2, #97	; 0x61
   20b5c:	4631      	mov	r1, r6
   20b5e:	4628      	mov	r0, r5
   20b60:	f7ff ff1e 	bl	209a0 <net_byte_to_hex>
   20b64:	4605      	mov	r5, r0
		needcolon = true;
   20b66:	2601      	movs	r6, #1
   20b68:	e7c5      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
				*ptr++ = (char) (bl - 10 + 'a');
   20b6a:	3257      	adds	r2, #87	; 0x57
   20b6c:	4628      	mov	r0, r5
   20b6e:	f800 2b01 	strb.w	r2, [r0], #1
   20b72:	4605      	mov	r5, r0
		needcolon = true;
   20b74:	2601      	movs	r6, #1
   20b76:	e7be      	b.n	20af6 <z_impl_net_addr_ntop+0x11e>
	}

	if (!(ptr - dst)) {
   20b78:	9b02      	ldr	r3, [sp, #8]
   20b7a:	429d      	cmp	r5, r3
   20b7c:	d00f      	beq.n	20b9e <z_impl_net_addr_ntop+0x1c6>
		return NULL;
	}

	if (family == AF_INET) {
   20b7e:	9b03      	ldr	r3, [sp, #12]
   20b80:	2b01      	cmp	r3, #1
   20b82:	d005      	beq.n	20b90 <z_impl_net_addr_ntop+0x1b8>
		*(ptr - 1) = '\0';
	} else {
		*ptr = '\0';
   20b84:	2300      	movs	r3, #0
   20b86:	702b      	strb	r3, [r5, #0]
	}

	return dst;
   20b88:	9802      	ldr	r0, [sp, #8]
}
   20b8a:	b007      	add	sp, #28
   20b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   20b90:	2300      	movs	r3, #0
   20b92:	f805 3c01 	strb.w	r3, [r5, #-1]
	return dst;
   20b96:	9802      	ldr	r0, [sp, #8]
   20b98:	e7f7      	b.n	20b8a <z_impl_net_addr_ntop+0x1b2>
		return NULL;
   20b9a:	2000      	movs	r0, #0
   20b9c:	e7f5      	b.n	20b8a <z_impl_net_addr_ntop+0x1b2>
		return NULL;
   20b9e:	2000      	movs	r0, #0
   20ba0:	e7f3      	b.n	20b8a <z_impl_net_addr_ntop+0x1b2>

00020ba2 <unpack_uint8>:
 */
static int unpack_uint8(struct buf_ctx *buf, uint8_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   20ba2:	6842      	ldr	r2, [r0, #4]
   20ba4:	6803      	ldr	r3, [r0, #0]
   20ba6:	429a      	cmp	r2, r3
   20ba8:	d005      	beq.n	20bb6 <unpack_uint8+0x14>
		return -EINVAL;
	}

	*val = *(buf->cur++);
   20baa:	1c5a      	adds	r2, r3, #1
   20bac:	6002      	str	r2, [r0, #0]
   20bae:	781b      	ldrb	r3, [r3, #0]
   20bb0:	700b      	strb	r3, [r1, #0]

	MQTT_TRC("<< val:%02x", *val);

	return 0;
   20bb2:	2000      	movs	r0, #0
   20bb4:	4770      	bx	lr
		return -EINVAL;
   20bb6:	f06f 0015 	mvn.w	r0, #21
}
   20bba:	4770      	bx	lr

00020bbc <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   20bbc:	6843      	ldr	r3, [r0, #4]
   20bbe:	6802      	ldr	r2, [r0, #0]
   20bc0:	1a9b      	subs	r3, r3, r2
   20bc2:	2b01      	cmp	r3, #1
   20bc4:	d90d      	bls.n	20be2 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   20bc6:	1c53      	adds	r3, r2, #1
   20bc8:	6003      	str	r3, [r0, #0]
   20bca:	7813      	ldrb	r3, [r2, #0]
   20bcc:	021b      	lsls	r3, r3, #8
   20bce:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   20bd0:	6803      	ldr	r3, [r0, #0]
   20bd2:	1c5a      	adds	r2, r3, #1
   20bd4:	6002      	str	r2, [r0, #0]
   20bd6:	781b      	ldrb	r3, [r3, #0]
   20bd8:	880a      	ldrh	r2, [r1, #0]
   20bda:	4313      	orrs	r3, r2
   20bdc:	800b      	strh	r3, [r1, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   20bde:	2000      	movs	r0, #0
   20be0:	4770      	bx	lr
		return -EINVAL;
   20be2:	f06f 0015 	mvn.w	r0, #21
}
   20be6:	4770      	bx	lr

00020be8 <unpack_utf8_str>:
 *
 * @retval 0 if the procedure is successful.
 * @retval -EINVAL if the buffer would be exceeded during the read
 */
static int unpack_utf8_str(struct buf_ctx *buf, struct mqtt_utf8 *str)
{
   20be8:	b530      	push	{r4, r5, lr}
   20bea:	b083      	sub	sp, #12
   20bec:	4604      	mov	r4, r0
   20bee:	460d      	mov	r5, r1
	uint16_t utf8_strlen;
	int err_code;

	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	err_code = unpack_uint16(buf, &utf8_strlen);
   20bf0:	f10d 0106 	add.w	r1, sp, #6
   20bf4:	f7ff ffe2 	bl	20bbc <unpack_uint16>
	if (err_code != 0) {
   20bf8:	b960      	cbnz	r0, 20c14 <unpack_utf8_str+0x2c>
		return err_code;
	}

	if ((buf->end - buf->cur) < utf8_strlen) {
   20bfa:	6863      	ldr	r3, [r4, #4]
   20bfc:	6822      	ldr	r2, [r4, #0]
   20bfe:	1a9b      	subs	r3, r3, r2
   20c00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   20c04:	4293      	cmp	r3, r2
   20c06:	db0a      	blt.n	20c1e <unpack_utf8_str+0x36>
		return -EINVAL;
	}

	str->size = utf8_strlen;
   20c08:	606a      	str	r2, [r5, #4]
	/* Zero length UTF8 strings permitted. */
	if (utf8_strlen) {
   20c0a:	b12a      	cbz	r2, 20c18 <unpack_utf8_str+0x30>
		/* Point to right location in buffer. */
		str->utf8 = buf->cur;
   20c0c:	6823      	ldr	r3, [r4, #0]
   20c0e:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   20c10:	4413      	add	r3, r2
   20c12:	6023      	str	r3, [r4, #0]
	}

	MQTT_TRC("<< str_size:%08x", (uint32_t)GET_UT8STR_BUFFER_SIZE(str));

	return 0;
}
   20c14:	b003      	add	sp, #12
   20c16:	bd30      	pop	{r4, r5, pc}
		str->utf8 = NULL;
   20c18:	2300      	movs	r3, #0
   20c1a:	602b      	str	r3, [r5, #0]
   20c1c:	e7fa      	b.n	20c14 <unpack_utf8_str+0x2c>
		return -EINVAL;
   20c1e:	f06f 0015 	mvn.w	r0, #21
   20c22:	e7f7      	b.n	20c14 <unpack_utf8_str+0x2c>

00020c24 <unpack_data>:
 * @retval 0 if the procedure is successful.
 * @retval -EINVAL if the buffer would be exceeded during the read
 */
static int unpack_data(uint32_t length, struct buf_ctx *buf,
		       struct mqtt_binstr *str)
{
   20c24:	b410      	push	{r4}
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < length) {
   20c26:	684b      	ldr	r3, [r1, #4]
   20c28:	680c      	ldr	r4, [r1, #0]
   20c2a:	1b1b      	subs	r3, r3, r4
   20c2c:	4283      	cmp	r3, r0
   20c2e:	d30b      	bcc.n	20c48 <unpack_data+0x24>
		return -EINVAL;
	}

	str->len = length;
   20c30:	6050      	str	r0, [r2, #4]

	/* Zero length binary strings are permitted. */
	if (length > 0) {
   20c32:	b130      	cbz	r0, 20c42 <unpack_data+0x1e>
		str->data = buf->cur;
   20c34:	680b      	ldr	r3, [r1, #0]
   20c36:	6013      	str	r3, [r2, #0]
		buf->cur += length;
   20c38:	4418      	add	r0, r3
   20c3a:	6008      	str	r0, [r1, #0]
		str->data = NULL;
	}

	MQTT_TRC("<< bin len:%08x", GET_BINSTR_BUFFER_SIZE(str));

	return 0;
   20c3c:	2000      	movs	r0, #0
}
   20c3e:	bc10      	pop	{r4}
   20c40:	4770      	bx	lr
		str->data = NULL;
   20c42:	2000      	movs	r0, #0
   20c44:	6010      	str	r0, [r2, #0]
   20c46:	e7fa      	b.n	20c3e <unpack_data+0x1a>
		return -EINVAL;
   20c48:	f06f 0015 	mvn.w	r0, #21
   20c4c:	e7f7      	b.n	20c3e <unpack_data+0x1a>

00020c4e <packet_length_decode>:
static int packet_length_decode(struct buf_ctx *buf, uint32_t *length)
{
	uint8_t shift = 0U;
	uint8_t bytes = 0U;

	*length = 0U;
   20c4e:	2300      	movs	r3, #0
   20c50:	600b      	str	r3, [r1, #0]
	uint8_t bytes = 0U;
   20c52:	469c      	mov	ip, r3
	do {
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   20c54:	2b03      	cmp	r3, #3
   20c56:	d82b      	bhi.n	20cb0 <packet_length_decode+0x62>
{
   20c58:	b410      	push	{r4}
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   20c5a:	6802      	ldr	r2, [r0, #0]
   20c5c:	6844      	ldr	r4, [r0, #4]
   20c5e:	42a2      	cmp	r2, r4
   20c60:	d220      	bcs.n	20ca4 <packet_length_decode+0x56>
			return -EAGAIN;
		}

		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   20c62:	7812      	ldrb	r2, [r2, #0]
   20c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   20c68:	409a      	lsls	r2, r3
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   20c6a:	680c      	ldr	r4, [r1, #0]
   20c6c:	4422      	add	r2, r4
   20c6e:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
   20c70:	3307      	adds	r3, #7
   20c72:	b2db      	uxtb	r3, r3
		bytes++;
   20c74:	f10c 0c01 	add.w	ip, ip, #1
   20c78:	fa5f fc8c 	uxtb.w	ip, ip
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   20c7c:	6802      	ldr	r2, [r0, #0]
   20c7e:	1c54      	adds	r4, r2, #1
   20c80:	6004      	str	r4, [r0, #0]
   20c82:	f992 2000 	ldrsb.w	r2, [r2]
   20c86:	2a00      	cmp	r2, #0
   20c88:	da06      	bge.n	20c98 <packet_length_decode+0x4a>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   20c8a:	f1bc 0f03 	cmp.w	ip, #3
   20c8e:	d9e4      	bls.n	20c5a <packet_length_decode+0xc>
			return -EINVAL;
   20c90:	f06f 0015 	mvn.w	r0, #21
	}

	MQTT_TRC("length:0x%08x", *length);

	return 0;
}
   20c94:	bc10      	pop	{r4}
   20c96:	4770      	bx	lr
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   20c98:	680b      	ldr	r3, [r1, #0]
   20c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   20c9e:	d204      	bcs.n	20caa <packet_length_decode+0x5c>
	return 0;
   20ca0:	2000      	movs	r0, #0
   20ca2:	e7f7      	b.n	20c94 <packet_length_decode+0x46>
			return -EAGAIN;
   20ca4:	f06f 000a 	mvn.w	r0, #10
   20ca8:	e7f4      	b.n	20c94 <packet_length_decode+0x46>
		return -EINVAL;
   20caa:	f06f 0015 	mvn.w	r0, #21
   20cae:	e7f1      	b.n	20c94 <packet_length_decode+0x46>
			return -EINVAL;
   20cb0:	f06f 0015 	mvn.w	r0, #21
}
   20cb4:	4770      	bx	lr

00020cb6 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   20cb6:	b538      	push	{r3, r4, r5, lr}
   20cb8:	4604      	mov	r4, r0
   20cba:	4615      	mov	r5, r2
	int err_code;

	err_code = unpack_uint8(buf, type_and_flags);
   20cbc:	f7ff ff71 	bl	20ba2 <unpack_uint8>
	if (err_code != 0) {
   20cc0:	b100      	cbz	r0, 20cc4 <fixed_header_decode+0xe>
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   20cc2:	bd38      	pop	{r3, r4, r5, pc}
	return packet_length_decode(buf, length);
   20cc4:	4629      	mov	r1, r5
   20cc6:	4620      	mov	r0, r4
   20cc8:	f7ff ffc1 	bl	20c4e <packet_length_decode>
   20ccc:	e7f9      	b.n	20cc2 <fixed_header_decode+0xc>

00020cce <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   20cce:	b570      	push	{r4, r5, r6, lr}
   20cd0:	b082      	sub	sp, #8
   20cd2:	4605      	mov	r5, r0
   20cd4:	460c      	mov	r4, r1
   20cd6:	4616      	mov	r6, r2
	int err_code;
	uint8_t flags, ret_code;

	err_code = unpack_uint8(buf, &flags);
   20cd8:	f10d 0107 	add.w	r1, sp, #7
   20cdc:	4620      	mov	r0, r4
   20cde:	f7ff ff60 	bl	20ba2 <unpack_uint8>
	if (err_code != 0) {
   20ce2:	b108      	cbz	r0, 20ce8 <connect_ack_decode+0x1a>
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   20ce4:	b002      	add	sp, #8
   20ce6:	bd70      	pop	{r4, r5, r6, pc}
	err_code = unpack_uint8(buf, &ret_code);
   20ce8:	f10d 0106 	add.w	r1, sp, #6
   20cec:	4620      	mov	r0, r4
   20cee:	f7ff ff58 	bl	20ba2 <unpack_uint8>
	if (err_code != 0) {
   20cf2:	2800      	cmp	r0, #0
   20cf4:	d1f6      	bne.n	20ce4 <connect_ack_decode+0x16>
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   20cf6:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   20cfa:	2b04      	cmp	r3, #4
   20cfc:	d003      	beq.n	20d06 <connect_ack_decode+0x38>
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   20cfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
   20d02:	7073      	strb	r3, [r6, #1]
	return 0;
   20d04:	e7ee      	b.n	20ce4 <connect_ack_decode+0x16>
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   20d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20d0a:	f003 0301 	and.w	r3, r3, #1
		param->session_present_flag =
   20d0e:	7033      	strb	r3, [r6, #0]
		MQTT_TRC("[CID %p]: session_present_flag: %d", client,
   20d10:	e7f5      	b.n	20cfe <connect_ack_decode+0x30>

00020d12 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   20d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d16:	460d      	mov	r5, r1
   20d18:	4616      	mov	r6, r2
   20d1a:	461c      	mov	r4, r3
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   20d1c:	7d9b      	ldrb	r3, [r3, #22]
   20d1e:	f36f 0300 	bfc	r3, #0, #1
   20d22:	75a3      	strb	r3, [r4, #22]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   20d24:	b2db      	uxtb	r3, r3
   20d26:	f360 0341 	bfi	r3, r0, #1, #1
   20d2a:	75a3      	strb	r3, [r4, #22]
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   20d2c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   20d30:	7220      	strb	r0, [r4, #8]

	err_code = unpack_utf8_str(buf, &param->message.topic.topic);
   20d32:	4621      	mov	r1, r4
   20d34:	4610      	mov	r0, r2
   20d36:	f7ff ff57 	bl	20be8 <unpack_utf8_str>
	if (err_code != 0) {
   20d3a:	4607      	mov	r7, r0
   20d3c:	b958      	cbnz	r0, 20d56 <publish_decode+0x44>
		return err_code;
	}

	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   20d3e:	f8d4 8004 	ldr.w	r8, [r4, #4]
   20d42:	f108 0102 	add.w	r1, r8, #2

	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   20d46:	7a23      	ldrb	r3, [r4, #8]
   20d48:	b943      	cbnz	r3, 20d5c <publish_decode+0x4a>
		}

		var_header_length += sizeof(uint16_t);
	}

	if (var_length < var_header_length) {
   20d4a:	428d      	cmp	r5, r1
   20d4c:	d311      	bcc.n	20d72 <publish_decode+0x60>
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
	}

	param->message.payload.data = NULL;
   20d4e:	2300      	movs	r3, #0
   20d50:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   20d52:	1a6d      	subs	r5, r5, r1
   20d54:	6125      	str	r5, [r4, #16]

	return 0;
}
   20d56:	4638      	mov	r0, r7
   20d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err_code = unpack_uint16(buf, &param->message_id);
   20d5c:	f104 0114 	add.w	r1, r4, #20
   20d60:	4630      	mov	r0, r6
   20d62:	f7ff ff2b 	bl	20bbc <unpack_uint16>
		if (err_code != 0) {
   20d66:	b910      	cbnz	r0, 20d6e <publish_decode+0x5c>
		var_header_length += sizeof(uint16_t);
   20d68:	f108 0104 	add.w	r1, r8, #4
   20d6c:	e7ed      	b.n	20d4a <publish_decode+0x38>
			return err_code;
   20d6e:	4607      	mov	r7, r0
   20d70:	e7f1      	b.n	20d56 <publish_decode+0x44>
		return -EINVAL;
   20d72:	f06f 0715 	mvn.w	r7, #21
   20d76:	e7ee      	b.n	20d56 <publish_decode+0x44>

00020d78 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
   20d78:	b508      	push	{r3, lr}
	return unpack_uint16(buf, &param->message_id);
   20d7a:	f7ff ff1f 	bl	20bbc <unpack_uint16>
}
   20d7e:	bd08      	pop	{r3, pc}

00020d80 <publish_receive_decode>:

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
   20d80:	b508      	push	{r3, lr}
	return unpack_uint16(buf, &param->message_id);
   20d82:	f7ff ff1b 	bl	20bbc <unpack_uint16>
}
   20d86:	bd08      	pop	{r3, pc}

00020d88 <publish_release_decode>:

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
   20d88:	b508      	push	{r3, lr}
	return unpack_uint16(buf, &param->message_id);
   20d8a:	f7ff ff17 	bl	20bbc <unpack_uint16>
}
   20d8e:	bd08      	pop	{r3, pc}

00020d90 <publish_complete_decode>:

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
   20d90:	b508      	push	{r3, lr}
	return unpack_uint16(buf, &param->message_id);
   20d92:	f7ff ff13 	bl	20bbc <unpack_uint16>
}
   20d96:	bd08      	pop	{r3, pc}

00020d98 <subscribe_ack_decode>:

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   20d98:	b538      	push	{r3, r4, r5, lr}
   20d9a:	4604      	mov	r4, r0
   20d9c:	460d      	mov	r5, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   20d9e:	f7ff ff0d 	bl	20bbc <unpack_uint16>
	if (err_code != 0) {
   20da2:	b100      	cbz	r0, 20da6 <subscribe_ack_decode+0xe>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
}
   20da4:	bd38      	pop	{r3, r4, r5, pc}
	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   20da6:	6860      	ldr	r0, [r4, #4]
   20da8:	6823      	ldr	r3, [r4, #0]
   20daa:	1d2a      	adds	r2, r5, #4
   20dac:	4621      	mov	r1, r4
   20dae:	1ac0      	subs	r0, r0, r3
   20db0:	f7ff ff38 	bl	20c24 <unpack_data>
   20db4:	e7f6      	b.n	20da4 <subscribe_ack_decode+0xc>

00020db6 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
   20db6:	b508      	push	{r3, lr}
	return unpack_uint16(buf, &param->message_id);
   20db8:	f7ff ff00 	bl	20bbc <unpack_uint16>
}
   20dbc:	bd08      	pop	{r3, pc}

00020dbe <pack_uint8>:
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   20dbe:	684a      	ldr	r2, [r1, #4]
   20dc0:	680b      	ldr	r3, [r1, #0]
   20dc2:	429a      	cmp	r2, r3
   20dc4:	d004      	beq.n	20dd0 <pack_uint8+0x12>
	*(buf->cur++) = val;
   20dc6:	1c5a      	adds	r2, r3, #1
   20dc8:	600a      	str	r2, [r1, #0]
   20dca:	7018      	strb	r0, [r3, #0]
	return 0;
   20dcc:	2000      	movs	r0, #0
   20dce:	4770      	bx	lr
		return -ENOMEM;
   20dd0:	f06f 000b 	mvn.w	r0, #11
}
   20dd4:	4770      	bx	lr

00020dd6 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   20dd6:	684b      	ldr	r3, [r1, #4]
   20dd8:	680a      	ldr	r2, [r1, #0]
   20dda:	1a9b      	subs	r3, r3, r2
   20ddc:	2b01      	cmp	r3, #1
   20dde:	d909      	bls.n	20df4 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   20de0:	1c53      	adds	r3, r2, #1
   20de2:	600b      	str	r3, [r1, #0]
   20de4:	0a03      	lsrs	r3, r0, #8
   20de6:	7013      	strb	r3, [r2, #0]
	*(buf->cur++) = val & 0xFF;
   20de8:	680b      	ldr	r3, [r1, #0]
   20dea:	1c5a      	adds	r2, r3, #1
   20dec:	600a      	str	r2, [r1, #0]
   20dee:	7018      	strb	r0, [r3, #0]
	return 0;
   20df0:	2000      	movs	r0, #0
   20df2:	4770      	bx	lr
		return -ENOMEM;
   20df4:	f06f 000b 	mvn.w	r0, #11
}
   20df8:	4770      	bx	lr

00020dfa <packet_length_encode>:
{
   20dfa:	4603      	mov	r3, r0
	uint8_t encoded_bytes = 0U;
   20dfc:	2000      	movs	r0, #0
   20dfe:	e005      	b.n	20e0c <packet_length_encode+0x12>
}
   20e00:	bc10      	pop	{r4}
   20e02:	4770      	bx	lr
			buf->cur++;
   20e04:	680a      	ldr	r2, [r1, #0]
   20e06:	3201      	adds	r2, #1
   20e08:	600a      	str	r2, [r1, #0]
	} while (length > 0);
   20e0a:	b32b      	cbz	r3, 20e58 <packet_length_encode+0x5e>
		encoded_bytes++;
   20e0c:	3001      	adds	r0, #1
   20e0e:	b2c0      	uxtb	r0, r0
		if (buf != NULL) {
   20e10:	b121      	cbz	r1, 20e1c <packet_length_encode+0x22>
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   20e12:	680a      	ldr	r2, [r1, #0]
   20e14:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
   20e18:	f882 c000 	strb.w	ip, [r2]
		length >>= MQTT_LENGTH_SHIFT;
   20e1c:	09db      	lsrs	r3, r3, #7
		if (buf != NULL) {
   20e1e:	2900      	cmp	r1, #0
   20e20:	d0f3      	beq.n	20e0a <packet_length_encode+0x10>
			if (length > 0) {
   20e22:	2b00      	cmp	r3, #0
   20e24:	d0ee      	beq.n	20e04 <packet_length_encode+0xa>
{
   20e26:	b410      	push	{r4}
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   20e28:	680c      	ldr	r4, [r1, #0]
   20e2a:	7822      	ldrb	r2, [r4, #0]
   20e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20e30:	7022      	strb	r2, [r4, #0]
			buf->cur++;
   20e32:	680a      	ldr	r2, [r1, #0]
   20e34:	3201      	adds	r2, #1
   20e36:	600a      	str	r2, [r1, #0]
	} while (length > 0);
   20e38:	2b00      	cmp	r3, #0
   20e3a:	d0e1      	beq.n	20e00 <packet_length_encode+0x6>
		encoded_bytes++;
   20e3c:	3001      	adds	r0, #1
   20e3e:	b2c0      	uxtb	r0, r0
		if (buf != NULL) {
   20e40:	b121      	cbz	r1, 20e4c <packet_length_encode+0x52>
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   20e42:	680a      	ldr	r2, [r1, #0]
   20e44:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
   20e48:	f882 c000 	strb.w	ip, [r2]
		length >>= MQTT_LENGTH_SHIFT;
   20e4c:	09db      	lsrs	r3, r3, #7
		if (buf != NULL) {
   20e4e:	2900      	cmp	r1, #0
   20e50:	d0f2      	beq.n	20e38 <packet_length_encode+0x3e>
			if (length > 0) {
   20e52:	2b00      	cmp	r3, #0
   20e54:	d0ed      	beq.n	20e32 <packet_length_encode+0x38>
   20e56:	e7e7      	b.n	20e28 <packet_length_encode+0x2e>
   20e58:	4770      	bx	lr

00020e5a <mqtt_encode_fixed_header>:
{
   20e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t length = buf->cur - start;
   20e5e:	6815      	ldr	r5, [r2, #0]
   20e60:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   20e62:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   20e66:	d21d      	bcs.n	20ea4 <mqtt_encode_fixed_header+0x4a>
   20e68:	4680      	mov	r8, r0
   20e6a:	460e      	mov	r6, r1
   20e6c:	4614      	mov	r4, r2
	fixed_header_length = packet_length_encode(length, NULL);
   20e6e:	2100      	movs	r1, #0
   20e70:	4628      	mov	r0, r5
   20e72:	f7ff ffc2 	bl	20dfa <packet_length_encode>
	fixed_header_length += sizeof(uint8_t);
   20e76:	1c47      	adds	r7, r0, #1
   20e78:	b2ff      	uxtb	r7, r7
	buf->cur = start - fixed_header_length;
   20e7a:	f1c7 0900 	rsb	r9, r7, #0
   20e7e:	1bf6      	subs	r6, r6, r7
   20e80:	6026      	str	r6, [r4, #0]
	(void)pack_uint8(message_type, buf);
   20e82:	4621      	mov	r1, r4
   20e84:	4640      	mov	r0, r8
   20e86:	f7ff ff9a 	bl	20dbe <pack_uint8>
	(void)packet_length_encode(length, buf);
   20e8a:	4621      	mov	r1, r4
   20e8c:	4628      	mov	r0, r5
   20e8e:	f7ff ffb4 	bl	20dfa <packet_length_encode>
	buf->cur = buf->cur - fixed_header_length;
   20e92:	6823      	ldr	r3, [r4, #0]
   20e94:	444b      	add	r3, r9
   20e96:	6023      	str	r3, [r4, #0]
	buf->end = buf->cur + length + fixed_header_length;
   20e98:	443d      	add	r5, r7
   20e9a:	441d      	add	r5, r3
   20e9c:	6065      	str	r5, [r4, #4]
	return 0;
   20e9e:	2000      	movs	r0, #0
}
   20ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EMSGSIZE;
   20ea4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   20ea8:	e7fa      	b.n	20ea0 <mqtt_encode_fixed_header+0x46>

00020eaa <zero_len_str_encode>:
{
   20eaa:	b508      	push	{r3, lr}
   20eac:	4601      	mov	r1, r0
	return pack_uint16(0x0000, buf);
   20eae:	2000      	movs	r0, #0
   20eb0:	f7ff ff91 	bl	20dd6 <pack_uint16>
}
   20eb4:	bd08      	pop	{r3, pc}

00020eb6 <mqtt_message_id_only_enc>:
	if (message_id == 0U) {
   20eb6:	b189      	cbz	r1, 20edc <mqtt_message_id_only_enc+0x26>
{
   20eb8:	b570      	push	{r4, r5, r6, lr}
   20eba:	4606      	mov	r6, r0
   20ebc:	4614      	mov	r4, r2
   20ebe:	4608      	mov	r0, r1
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20ec0:	6815      	ldr	r5, [r2, #0]
   20ec2:	3505      	adds	r5, #5
   20ec4:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   20ec6:	4611      	mov	r1, r2
   20ec8:	f7ff ff85 	bl	20dd6 <pack_uint16>
	if (err_code != 0) {
   20ecc:	b100      	cbz	r0, 20ed0 <mqtt_message_id_only_enc+0x1a>
}
   20ece:	bd70      	pop	{r4, r5, r6, pc}
	return mqtt_encode_fixed_header(message_type, start, buf);
   20ed0:	4622      	mov	r2, r4
   20ed2:	4629      	mov	r1, r5
   20ed4:	4630      	mov	r0, r6
   20ed6:	f7ff ffc0 	bl	20e5a <mqtt_encode_fixed_header>
   20eda:	e7f8      	b.n	20ece <mqtt_message_id_only_enc+0x18>
		return -EINVAL;
   20edc:	f06f 0015 	mvn.w	r0, #21
}
   20ee0:	4770      	bx	lr

00020ee2 <pack_utf8_str>:
{
   20ee2:	b538      	push	{r3, r4, r5, lr}
   20ee4:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   20ee6:	684b      	ldr	r3, [r1, #4]
   20ee8:	680a      	ldr	r2, [r1, #0]
   20eea:	1a9b      	subs	r3, r3, r2
   20eec:	6840      	ldr	r0, [r0, #4]
   20eee:	1c82      	adds	r2, r0, #2
   20ef0:	4293      	cmp	r3, r2
   20ef2:	d30e      	bcc.n	20f12 <pack_utf8_str+0x30>
   20ef4:	460c      	mov	r4, r1
	(void)pack_uint16(str->size, buf);
   20ef6:	b280      	uxth	r0, r0
   20ef8:	f7ff ff6d 	bl	20dd6 <pack_uint16>
   20efc:	686a      	ldr	r2, [r5, #4]
   20efe:	6829      	ldr	r1, [r5, #0]
   20f00:	6820      	ldr	r0, [r4, #0]
   20f02:	f003 fde3 	bl	24acc <memcpy>
	buf->cur += str->size;
   20f06:	686a      	ldr	r2, [r5, #4]
   20f08:	6823      	ldr	r3, [r4, #0]
   20f0a:	4413      	add	r3, r2
   20f0c:	6023      	str	r3, [r4, #0]
	return 0;
   20f0e:	2000      	movs	r0, #0
}
   20f10:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   20f12:	f06f 000b 	mvn.w	r0, #11
   20f16:	e7fb      	b.n	20f10 <pack_utf8_str+0x2e>

00020f18 <publish_encode>:
{
   20f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f1a:	4606      	mov	r6, r0
   20f1c:	460d      	mov	r5, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   20f1e:	7d82      	ldrb	r2, [r0, #22]
   20f20:	f002 0001 	and.w	r0, r2, #1
   20f24:	7a31      	ldrb	r1, [r6, #8]
   20f26:	004b      	lsls	r3, r1, #1
   20f28:	f003 0306 	and.w	r3, r3, #6
   20f2c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   20f30:	f3c2 0240 	ubfx	r2, r2, #1, #1
   20f34:	4313      	orrs	r3, r2
   20f36:	f043 0430 	orr.w	r4, r3, #48	; 0x30
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   20f3a:	b109      	cbz	r1, 20f40 <publish_encode+0x28>
   20f3c:	8ab3      	ldrh	r3, [r6, #20]
   20f3e:	b1eb      	cbz	r3, 20f7c <publish_encode+0x64>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20f40:	682f      	ldr	r7, [r5, #0]
   20f42:	3705      	adds	r7, #5
   20f44:	602f      	str	r7, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   20f46:	4629      	mov	r1, r5
   20f48:	4630      	mov	r0, r6
   20f4a:	f7ff ffca 	bl	20ee2 <pack_utf8_str>
	if (err_code != 0) {
   20f4e:	b9a0      	cbnz	r0, 20f7a <publish_encode+0x62>
	if (param->message.topic.qos) {
   20f50:	7a33      	ldrb	r3, [r6, #8]
   20f52:	b123      	cbz	r3, 20f5e <publish_encode+0x46>
		err_code = pack_uint16(param->message_id, buf);
   20f54:	4629      	mov	r1, r5
   20f56:	8ab0      	ldrh	r0, [r6, #20]
   20f58:	f7ff ff3d 	bl	20dd6 <pack_uint16>
		if (err_code != 0) {
   20f5c:	b968      	cbnz	r0, 20f7a <publish_encode+0x62>
	buf->cur += param->message.payload.len;
   20f5e:	6932      	ldr	r2, [r6, #16]
   20f60:	682b      	ldr	r3, [r5, #0]
   20f62:	4413      	add	r3, r2
   20f64:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   20f66:	462a      	mov	r2, r5
   20f68:	4639      	mov	r1, r7
   20f6a:	4620      	mov	r0, r4
   20f6c:	f7ff ff75 	bl	20e5a <mqtt_encode_fixed_header>
	if (err_code != 0) {
   20f70:	b918      	cbnz	r0, 20f7a <publish_encode+0x62>
	buf->end -= param->message.payload.len;
   20f72:	6932      	ldr	r2, [r6, #16]
   20f74:	686b      	ldr	r3, [r5, #4]
   20f76:	1a9b      	subs	r3, r3, r2
   20f78:	606b      	str	r3, [r5, #4]
}
   20f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   20f7c:	f06f 0015 	mvn.w	r0, #21
   20f80:	e7fb      	b.n	20f7a <publish_encode+0x62>

00020f82 <publish_ack_encode>:
{
   20f82:	b508      	push	{r3, lr}
   20f84:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   20f86:	8801      	ldrh	r1, [r0, #0]
   20f88:	2040      	movs	r0, #64	; 0x40
   20f8a:	f7ff ff94 	bl	20eb6 <mqtt_message_id_only_enc>
}
   20f8e:	bd08      	pop	{r3, pc}

00020f90 <subscribe_encode>:
{
   20f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (param->message_id == 0U) {
   20f94:	88c3      	ldrh	r3, [r0, #6]
   20f96:	b34b      	cbz	r3, 20fec <subscribe_encode+0x5c>
   20f98:	4605      	mov	r5, r0
   20f9a:	460e      	mov	r6, r1
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20f9c:	680f      	ldr	r7, [r1, #0]
   20f9e:	3705      	adds	r7, #5
   20fa0:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   20fa2:	88c0      	ldrh	r0, [r0, #6]
   20fa4:	f7ff ff17 	bl	20dd6 <pack_uint16>
	if (err_code != 0) {
   20fa8:	4604      	mov	r4, r0
   20faa:	b9e0      	cbnz	r0, 20fe6 <subscribe_encode+0x56>
	for (i = 0; i < param->list_count; i++) {
   20fac:	88ab      	ldrh	r3, [r5, #4]
   20fae:	42a3      	cmp	r3, r4
   20fb0:	dd13      	ble.n	20fda <subscribe_encode+0x4a>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   20fb2:	6828      	ldr	r0, [r5, #0]
   20fb4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   20fb8:	ea4f 0883 	mov.w	r8, r3, lsl #2
   20fbc:	4631      	mov	r1, r6
   20fbe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20fc2:	f7ff ff8e 	bl	20ee2 <pack_utf8_str>
		if (err_code != 0) {
   20fc6:	b9a0      	cbnz	r0, 20ff2 <subscribe_encode+0x62>
		err_code = pack_uint8(param->list[i].qos, buf);
   20fc8:	682b      	ldr	r3, [r5, #0]
   20fca:	4443      	add	r3, r8
   20fcc:	4631      	mov	r1, r6
   20fce:	7a18      	ldrb	r0, [r3, #8]
   20fd0:	f7ff fef5 	bl	20dbe <pack_uint8>
		if (err_code != 0) {
   20fd4:	b978      	cbnz	r0, 20ff6 <subscribe_encode+0x66>
	for (i = 0; i < param->list_count; i++) {
   20fd6:	3401      	adds	r4, #1
   20fd8:	e7e8      	b.n	20fac <subscribe_encode+0x1c>
	return mqtt_encode_fixed_header(message_type, start, buf);
   20fda:	4632      	mov	r2, r6
   20fdc:	4639      	mov	r1, r7
   20fde:	2082      	movs	r0, #130	; 0x82
   20fe0:	f7ff ff3b 	bl	20e5a <mqtt_encode_fixed_header>
   20fe4:	4604      	mov	r4, r0
}
   20fe6:	4620      	mov	r0, r4
   20fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   20fec:	f06f 0415 	mvn.w	r4, #21
   20ff0:	e7f9      	b.n	20fe6 <subscribe_encode+0x56>
			return err_code;
   20ff2:	4604      	mov	r4, r0
   20ff4:	e7f7      	b.n	20fe6 <subscribe_encode+0x56>
			return err_code;
   20ff6:	4604      	mov	r4, r0
   20ff8:	e7f5      	b.n	20fe6 <subscribe_encode+0x56>

00020ffa <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   20ffa:	b570      	push	{r4, r5, r6, lr}
   20ffc:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   20ffe:	6849      	ldr	r1, [r1, #4]
   21000:	682b      	ldr	r3, [r5, #0]
   21002:	1acb      	subs	r3, r1, r3
   21004:	4293      	cmp	r3, r2
   21006:	d21b      	bcs.n	21040 <mqtt_read_message_chunk+0x46>
   21008:	4606      	mov	r6, r0
	}

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   2100a:	1ad4      	subs	r4, r2, r3

	/* Check if read does not exceed the buffer. */
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2100c:	1908      	adds	r0, r1, r4
   2100e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   21010:	6d33      	ldr	r3, [r6, #80]	; 0x50
   21012:	4413      	add	r3, r2
   21014:	4298      	cmp	r0, r3
   21016:	d815      	bhi.n	21044 <mqtt_read_message_chunk+0x4a>
   21018:	4290      	cmp	r0, r2
   2101a:	d316      	bcc.n	2104a <mqtt_read_message_chunk+0x50>
		MQTT_ERR("[CID %p]: Read would exceed RX buffer bounds.",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   2101c:	2300      	movs	r3, #0
   2101e:	4622      	mov	r2, r4
   21020:	4630      	mov	r0, r6
   21022:	f7f3 ff5f 	bl	14ee4 <mqtt_transport_read>
	if (len < 0) {
   21026:	2800      	cmp	r0, #0
   21028:	db09      	blt.n	2103e <mqtt_read_message_chunk+0x44>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   2102a:	b188      	cbz	r0, 21050 <mqtt_read_message_chunk+0x56>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   2102c:	69f3      	ldr	r3, [r6, #28]
   2102e:	4403      	add	r3, r0
   21030:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   21032:	686b      	ldr	r3, [r5, #4]
   21034:	4403      	add	r3, r0
   21036:	606b      	str	r3, [r5, #4]

	if (len < remaining) {
   21038:	42a0      	cmp	r0, r4
   2103a:	d30c      	bcc.n	21056 <mqtt_read_message_chunk+0x5c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   2103c:	2000      	movs	r0, #0
}
   2103e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   21040:	2000      	movs	r0, #0
   21042:	e7fc      	b.n	2103e <mqtt_read_message_chunk+0x44>
		return -ENOMEM;
   21044:	f06f 000b 	mvn.w	r0, #11
   21048:	e7f9      	b.n	2103e <mqtt_read_message_chunk+0x44>
   2104a:	f06f 000b 	mvn.w	r0, #11
   2104e:	e7f6      	b.n	2103e <mqtt_read_message_chunk+0x44>
		return -ENOTCONN;
   21050:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21054:	e7f3      	b.n	2103e <mqtt_read_message_chunk+0x44>
		return -EAGAIN;
   21056:	f06f 000a 	mvn.w	r0, #10
   2105a:	e7f0      	b.n	2103e <mqtt_read_message_chunk+0x44>

0002105c <mqtt_read_and_parse_fixed_header>:

static int mqtt_read_and_parse_fixed_header(struct mqtt_client *client,
					    uint8_t *type_and_flags,
					    uint32_t *var_length,
					    struct buf_ctx *buf)
{
   2105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2105e:	4605      	mov	r5, r0
   21060:	460f      	mov	r7, r1
   21062:	4616      	mov	r6, r2
   21064:	461c      	mov	r4, r3
	/* Read the mandatory part of the fixed header in first iteration. */
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   21066:	2202      	movs	r2, #2
	int err_code;

	do {
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   21068:	4621      	mov	r1, r4
   2106a:	4628      	mov	r0, r5
   2106c:	f7ff ffc5 	bl	20ffa <mqtt_read_message_chunk>
		if (err_code < 0) {
   21070:	2800      	cmp	r0, #0
   21072:	db0a      	blt.n	2108a <mqtt_read_and_parse_fixed_header+0x2e>
			return err_code;
		}

		/* Reset to pointer to the beginning of the frame. */
		buf->cur = client->rx_buf;
   21074:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   21076:	6023      	str	r3, [r4, #0]
		chunk_size = 1U;

		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   21078:	4632      	mov	r2, r6
   2107a:	4639      	mov	r1, r7
   2107c:	4620      	mov	r0, r4
   2107e:	f7ff fe1a 	bl	20cb6 <fixed_header_decode>
		chunk_size = 1U;
   21082:	2201      	movs	r2, #1
	} while (err_code == -EAGAIN);
   21084:	f110 0f0b 	cmn.w	r0, #11
   21088:	d0ee      	beq.n	21068 <mqtt_read_and_parse_fixed_header+0xc>

	return err_code;
}
   2108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002108c <mqtt_read_publish_var_header>:
{
   2108c:	b570      	push	{r4, r5, r6, lr}
   2108e:	4605      	mov	r5, r0
   21090:	4614      	mov	r4, r2
	uint8_t qos = (type_and_flags & MQTT_HEADER_QOS_MASK) >> 1;
   21092:	f3c1 0641 	ubfx	r6, r1, #1, #2
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   21096:	2202      	movs	r2, #2
   21098:	4621      	mov	r1, r4
   2109a:	f7ff ffae 	bl	20ffa <mqtt_read_message_chunk>
	if (err_code < 0) {
   2109e:	2800      	cmp	r0, #0
   210a0:	db0e      	blt.n	210c0 <mqtt_read_publish_var_header+0x34>
	variable_header_length = *buf->cur << 8; /* MSB */
   210a2:	6822      	ldr	r2, [r4, #0]
   210a4:	7811      	ldrb	r1, [r2, #0]
	variable_header_length |= *(buf->cur + 1); /* LSB */
   210a6:	7853      	ldrb	r3, [r2, #1]
   210a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	variable_header_length += sizeof(uint16_t);
   210ac:	1c9a      	adds	r2, r3, #2
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   210ae:	b106      	cbz	r6, 210b2 <mqtt_read_publish_var_header+0x26>
		variable_header_length += sizeof(uint16_t);
   210b0:	1d1a      	adds	r2, r3, #4
	err_code = mqtt_read_message_chunk(client, buf,
   210b2:	4621      	mov	r1, r4
   210b4:	4628      	mov	r0, r5
   210b6:	f7ff ffa0 	bl	20ffa <mqtt_read_message_chunk>
	if (err_code < 0) {
   210ba:	2800      	cmp	r0, #0
   210bc:	db00      	blt.n	210c0 <mqtt_read_publish_var_header+0x34>
	return 0;
   210be:	2000      	movs	r0, #0
}
   210c0:	bd70      	pop	{r4, r5, r6, pc}

000210c2 <mqtt_handle_packet>:
{
   210c2:	b530      	push	{r4, r5, lr}
   210c4:	b089      	sub	sp, #36	; 0x24
   210c6:	4605      	mov	r5, r0
   210c8:	460c      	mov	r4, r1
   210ca:	4611      	mov	r1, r2
   210cc:	4618      	mov	r0, r3
	evt.result = 0;
   210ce:	2200      	movs	r2, #0
   210d0:	9207      	str	r2, [sp, #28]
	switch (type_and_flags & 0xF0) {
   210d2:	f004 0cf0 	and.w	ip, r4, #240	; 0xf0
   210d6:	f1bc 0f60 	cmp.w	ip, #96	; 0x60
   210da:	d077      	beq.n	211cc <mqtt_handle_packet+0x10a>
   210dc:	d914      	bls.n	21108 <mqtt_handle_packet+0x46>
   210de:	f1bc 0fb0 	cmp.w	ip, #176	; 0xb0
   210e2:	f000 8085 	beq.w	211f0 <mqtt_handle_packet+0x12e>
   210e6:	d93d      	bls.n	21164 <mqtt_handle_packet+0xa2>
   210e8:	f1bc 0fd0 	cmp.w	ip, #208	; 0xd0
   210ec:	d14b      	bne.n	21186 <mqtt_handle_packet+0xc4>
		if (client->unacked_ping <= 0) {
   210ee:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   210f2:	2b00      	cmp	r3, #0
   210f4:	f340 8085 	ble.w	21202 <mqtt_handle_packet+0x140>
			client->unacked_ping--;
   210f8:	3b01      	subs	r3, #1
   210fa:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   210fe:	2309      	movs	r3, #9
   21100:	f88d 3000 	strb.w	r3, [sp]
	int err_code = 0;
   21104:	2400      	movs	r4, #0
   21106:	e022      	b.n	2114e <mqtt_handle_packet+0x8c>
	switch (type_and_flags & 0xF0) {
   21108:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   2110c:	d055      	beq.n	211ba <mqtt_handle_packet+0xf8>
   2110e:	d90c      	bls.n	2112a <mqtt_handle_packet+0x68>
   21110:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
   21114:	d124      	bne.n	21160 <mqtt_handle_packet+0x9e>
		evt.type = MQTT_EVT_PUBREC;
   21116:	2304      	movs	r3, #4
   21118:	f88d 3000 	strb.w	r3, [sp]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2111c:	eb0d 0103 	add.w	r1, sp, r3
   21120:	f7ff fe2e 	bl	20d80 <publish_receive_decode>
   21124:	4604      	mov	r4, r0
		evt.result = err_code;
   21126:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   21128:	e011      	b.n	2114e <mqtt_handle_packet+0x8c>
	switch (type_and_flags & 0xF0) {
   2112a:	f1bc 0f20 	cmp.w	ip, #32
   2112e:	d02c      	beq.n	2118a <mqtt_handle_packet+0xc8>
   21130:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   21134:	d112      	bne.n	2115c <mqtt_handle_packet+0x9a>
		evt.type = MQTT_EVT_PUBLISH;
   21136:	2302      	movs	r3, #2
   21138:	f88d 3000 	strb.w	r3, [sp]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2113c:	ab01      	add	r3, sp, #4
   2113e:	4602      	mov	r2, r0
   21140:	4620      	mov	r0, r4
   21142:	f7ff fde6 	bl	20d12 <publish_decode>
   21146:	4604      	mov	r4, r0
		evt.result = err_code;
   21148:	9007      	str	r0, [sp, #28]
					evt.param.publish.message.payload.len;
   2114a:	9b05      	ldr	r3, [sp, #20]
		client->internal.remaining_payload =
   2114c:	622b      	str	r3, [r5, #32]
		event_notify(client, &evt);
   2114e:	4669      	mov	r1, sp
   21150:	4628      	mov	r0, r5
   21152:	f000 f957 	bl	21404 <event_notify>
}
   21156:	4620      	mov	r0, r4
   21158:	b009      	add	sp, #36	; 0x24
   2115a:	bd30      	pop	{r4, r5, pc}
	switch (type_and_flags & 0xF0) {
   2115c:	4614      	mov	r4, r2
   2115e:	e7fa      	b.n	21156 <mqtt_handle_packet+0x94>
   21160:	2400      	movs	r4, #0
   21162:	e7f8      	b.n	21156 <mqtt_handle_packet+0x94>
   21164:	f1bc 0f70 	cmp.w	ip, #112	; 0x70
   21168:	d039      	beq.n	211de <mqtt_handle_packet+0x11c>
   2116a:	f1bc 0f90 	cmp.w	ip, #144	; 0x90
   2116e:	d108      	bne.n	21182 <mqtt_handle_packet+0xc0>
		evt.type = MQTT_EVT_SUBACK;
   21170:	2307      	movs	r3, #7
   21172:	f88d 3000 	strb.w	r3, [sp]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   21176:	a901      	add	r1, sp, #4
   21178:	f7ff fe0e 	bl	20d98 <subscribe_ack_decode>
   2117c:	4604      	mov	r4, r0
		evt.result = err_code;
   2117e:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   21180:	e7e5      	b.n	2114e <mqtt_handle_packet+0x8c>
	switch (type_and_flags & 0xF0) {
   21182:	2400      	movs	r4, #0
   21184:	e7e7      	b.n	21156 <mqtt_handle_packet+0x94>
   21186:	2400      	movs	r4, #0
   21188:	e7e5      	b.n	21156 <mqtt_handle_packet+0x94>
		evt.type = MQTT_EVT_CONNACK;
   2118a:	2300      	movs	r3, #0
   2118c:	f88d 3000 	strb.w	r3, [sp]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   21190:	aa01      	add	r2, sp, #4
   21192:	4601      	mov	r1, r0
   21194:	4628      	mov	r0, r5
   21196:	f7ff fd9a 	bl	20cce <connect_ack_decode>
		if (err_code == 0) {
   2119a:	4604      	mov	r4, r0
   2119c:	b958      	cbnz	r0, 211b6 <mqtt_handle_packet+0xf4>
			if (evt.param.connack.return_code ==
   2119e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   211a2:	b92b      	cbnz	r3, 211b0 <mqtt_handle_packet+0xee>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   211a4:	69aa      	ldr	r2, [r5, #24]
   211a6:	f042 0204 	orr.w	r2, r2, #4
   211aa:	61aa      	str	r2, [r5, #24]
			evt.result = evt.param.connack.return_code;
   211ac:	9307      	str	r3, [sp, #28]
	if (notify_event == true) {
   211ae:	e7ce      	b.n	2114e <mqtt_handle_packet+0x8c>
				err_code = -ECONNREFUSED;
   211b0:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   211b4:	e7fa      	b.n	211ac <mqtt_handle_packet+0xea>
			evt.result = err_code;
   211b6:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   211b8:	e7c9      	b.n	2114e <mqtt_handle_packet+0x8c>
		evt.type = MQTT_EVT_PUBACK;
   211ba:	2303      	movs	r3, #3
   211bc:	f88d 3000 	strb.w	r3, [sp]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   211c0:	a901      	add	r1, sp, #4
   211c2:	f7ff fdd9 	bl	20d78 <publish_ack_decode>
   211c6:	4604      	mov	r4, r0
		evt.result = err_code;
   211c8:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   211ca:	e7c0      	b.n	2114e <mqtt_handle_packet+0x8c>
		evt.type = MQTT_EVT_PUBREL;
   211cc:	2305      	movs	r3, #5
   211ce:	f88d 3000 	strb.w	r3, [sp]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   211d2:	a901      	add	r1, sp, #4
   211d4:	f7ff fdd8 	bl	20d88 <publish_release_decode>
   211d8:	4604      	mov	r4, r0
		evt.result = err_code;
   211da:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   211dc:	e7b7      	b.n	2114e <mqtt_handle_packet+0x8c>
		evt.type = MQTT_EVT_PUBCOMP;
   211de:	2306      	movs	r3, #6
   211e0:	f88d 3000 	strb.w	r3, [sp]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   211e4:	a901      	add	r1, sp, #4
   211e6:	f7ff fdd3 	bl	20d90 <publish_complete_decode>
   211ea:	4604      	mov	r4, r0
		evt.result = err_code;
   211ec:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   211ee:	e7ae      	b.n	2114e <mqtt_handle_packet+0x8c>
		evt.type = MQTT_EVT_UNSUBACK;
   211f0:	2308      	movs	r3, #8
   211f2:	f88d 3000 	strb.w	r3, [sp]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   211f6:	a901      	add	r1, sp, #4
   211f8:	f7ff fddd 	bl	20db6 <unsubscribe_ack_decode>
   211fc:	4604      	mov	r4, r0
		evt.result = err_code;
   211fe:	9007      	str	r0, [sp, #28]
	if (notify_event == true) {
   21200:	e7a5      	b.n	2114e <mqtt_handle_packet+0x8c>
			client->unacked_ping = 0;
   21202:	2300      	movs	r3, #0
   21204:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
   21208:	e779      	b.n	210fe <mqtt_handle_packet+0x3c>

0002120a <mqtt_handle_rx>:

int mqtt_handle_rx(struct mqtt_client *client)
{
   2120a:	b510      	push	{r4, lr}
   2120c:	b084      	sub	sp, #16
   2120e:	4604      	mov	r4, r0
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   21210:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   21212:	9300      	str	r3, [sp, #0]
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   21214:	69c2      	ldr	r2, [r0, #28]
   21216:	4413      	add	r3, r2
   21218:	9301      	str	r3, [sp, #4]

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
   2121a:	466b      	mov	r3, sp
   2121c:	aa02      	add	r2, sp, #8
   2121e:	f10d 010f 	add.w	r1, sp, #15
   21222:	f7ff ff1b 	bl	2105c <mqtt_read_and_parse_fixed_header>
						    &var_length, &buf);
	if (err_code < 0) {
   21226:	2800      	cmp	r0, #0
   21228:	db19      	blt.n	2125e <mqtt_handle_rx+0x54>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2122a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   2122e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   21232:	2b30      	cmp	r3, #48	; 0x30
   21234:	d018      	beq.n	21268 <mqtt_handle_rx+0x5e>
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   21236:	9a02      	ldr	r2, [sp, #8]
   21238:	4669      	mov	r1, sp
   2123a:	4620      	mov	r0, r4
   2123c:	f7ff fedd 	bl	20ffa <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   21240:	2800      	cmp	r0, #0
   21242:	db16      	blt.n	21272 <mqtt_handle_rx+0x68>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	/* At this point, packet is ready to be passed to the application. */
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   21244:	466b      	mov	r3, sp
   21246:	9a02      	ldr	r2, [sp, #8]
   21248:	f89d 100f 	ldrb.w	r1, [sp, #15]
   2124c:	4620      	mov	r0, r4
   2124e:	f7ff ff38 	bl	210c2 <mqtt_handle_packet>
	if (err_code < 0) {
   21252:	2800      	cmp	r0, #0
   21254:	db01      	blt.n	2125a <mqtt_handle_rx+0x50>
		return err_code;
	}

	client->internal.rx_buf_datalen = 0U;
   21256:	2000      	movs	r0, #0
   21258:	61e0      	str	r0, [r4, #28]

	return 0;
}
   2125a:	b004      	add	sp, #16
   2125c:	bd10      	pop	{r4, pc}
		return (err_code == -EAGAIN) ? 0 : err_code;
   2125e:	f110 0f0b 	cmn.w	r0, #11
   21262:	d1fa      	bne.n	2125a <mqtt_handle_rx+0x50>
   21264:	2000      	movs	r0, #0
   21266:	e7f8      	b.n	2125a <mqtt_handle_rx+0x50>
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
   21268:	466a      	mov	r2, sp
   2126a:	4620      	mov	r0, r4
   2126c:	f7ff ff0e 	bl	2108c <mqtt_read_publish_var_header>
   21270:	e7e6      	b.n	21240 <mqtt_handle_rx+0x36>
		return (err_code == -EAGAIN) ? 0 : err_code;
   21272:	f110 0f0b 	cmn.w	r0, #11
   21276:	d1f0      	bne.n	2125a <mqtt_handle_rx+0x50>
   21278:	2000      	movs	r0, #0
   2127a:	e7ee      	b.n	2125a <mqtt_handle_rx+0x50>

0002127c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2127c:	b538      	push	{r3, r4, r5, lr}
   2127e:	4604      	mov	r4, r0
	const struct sockaddr *broker = client->broker;
   21280:	6b45      	ldr	r5, [r0, #52]	; 0x34
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   21282:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   21284:	2206      	movs	r2, #6
   21286:	2101      	movs	r1, #1
   21288:	f7f2 fa3a 	bl	13700 <z_impl_zsock_socket>
   2128c:	62a0      	str	r0, [r4, #40]	; 0x28
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2128e:	2800      	cmp	r0, #0
   21290:	db0a      	blt.n	212a8 <mqtt_client_tcp_connect+0x2c>

	MQTT_TRC("Created socket %d", client->transport.tcp.sock);

	size_t peer_addr_size = sizeof(struct sockaddr_in6);

	if (broker->sa_family == AF_INET) {
   21292:	882b      	ldrh	r3, [r5, #0]
   21294:	2b01      	cmp	r3, #1
   21296:	d00c      	beq.n	212b2 <mqtt_client_tcp_connect+0x36>
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   21298:	2218      	movs	r2, #24
		peer_addr_size = sizeof(struct sockaddr_in);
	}

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   2129a:	6b61      	ldr	r1, [r4, #52]	; 0x34
	return z_impl_zsock_connect(sock, addr, addrlen);
   2129c:	f7ff f9da 	bl	20654 <z_impl_zsock_connect>
			    peer_addr_size);
	if (ret < 0) {
   212a0:	2800      	cmp	r0, #0
   212a2:	db08      	blt.n	212b6 <mqtt_client_tcp_connect+0x3a>
		goto error;
	}

	MQTT_TRC("Connect completed");
	return 0;
   212a4:	2000      	movs	r0, #0

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
}
   212a6:	bd38      	pop	{r3, r4, r5, pc}
		return -errno;
   212a8:	f7ff fb59 	bl	2095e <__errno>
   212ac:	6800      	ldr	r0, [r0, #0]
   212ae:	4240      	negs	r0, r0
   212b0:	e7f9      	b.n	212a6 <mqtt_client_tcp_connect+0x2a>
		peer_addr_size = sizeof(struct sockaddr_in);
   212b2:	2208      	movs	r2, #8
   212b4:	e7f1      	b.n	2129a <mqtt_client_tcp_connect+0x1e>
	(void)zsock_close(client->transport.tcp.sock);
   212b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   212b8:	f7ff f9a7 	bl	2060a <z_impl_zsock_close>
	return -errno;
   212bc:	f7ff fb4f 	bl	2095e <__errno>
   212c0:	6800      	ldr	r0, [r0, #0]
   212c2:	4240      	negs	r0, r0
   212c4:	e7ef      	b.n	212a6 <mqtt_client_tcp_connect+0x2a>

000212c6 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   212c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   212c8:	b083      	sub	sp, #12
   212ca:	4607      	mov	r7, r0
   212cc:	460e      	mov	r6, r1
   212ce:	4615      	mov	r5, r2
	uint32_t offset = 0U;
   212d0:	2400      	movs	r4, #0
	int ret;

	while (offset < datalen) {
   212d2:	e000      	b.n	212d6 <mqtt_client_tcp_write+0x10>
				 datalen - offset, 0);
		if (ret < 0) {
			return -errno;
		}

		offset += ret;
   212d4:	4404      	add	r4, r0
	while (offset < datalen) {
   212d6:	42ac      	cmp	r4, r5
   212d8:	d20e      	bcs.n	212f8 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   212da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   212dc:	1931      	adds	r1, r6, r4
   212de:	1b2a      	subs	r2, r5, r4
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   212e0:	2300      	movs	r3, #0
   212e2:	9301      	str	r3, [sp, #4]
   212e4:	9300      	str	r3, [sp, #0]
   212e6:	f7ff f9dd 	bl	206a4 <z_impl_zsock_sendto>
		if (ret < 0) {
   212ea:	2800      	cmp	r0, #0
   212ec:	daf2      	bge.n	212d4 <mqtt_client_tcp_write+0xe>
			return -errno;
   212ee:	f7ff fb36 	bl	2095e <__errno>
   212f2:	6800      	ldr	r0, [r0, #0]
   212f4:	4240      	negs	r0, r0
   212f6:	e000      	b.n	212fa <mqtt_client_tcp_write+0x34>
	}

	return 0;
   212f8:	2000      	movs	r0, #0
}
   212fa:	b003      	add	sp, #12
   212fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000212fe <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   212fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21300:	4607      	mov	r7, r0
   21302:	460c      	mov	r4, r1
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   21304:	2600      	movs	r6, #0

	for (i = 0; i < message->msg_iovlen; i++) {
   21306:	4633      	mov	r3, r6
   21308:	e005      	b.n	21316 <mqtt_client_tcp_write_msg+0x18>
		total_len += message->msg_iov[i].iov_len;
   2130a:	68a2      	ldr	r2, [r4, #8]
   2130c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21310:	6852      	ldr	r2, [r2, #4]
   21312:	4416      	add	r6, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   21314:	3301      	adds	r3, #1
   21316:	68e2      	ldr	r2, [r4, #12]
   21318:	429a      	cmp	r2, r3
   2131a:	d8f6      	bhi.n	2130a <mqtt_client_tcp_write_msg+0xc>
	size_t offset = 0;
   2131c:	2500      	movs	r5, #0
   2131e:	e01c      	b.n	2135a <mqtt_client_tcp_write_msg+0x5c>
	}

	while (offset < total_len) {
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
		if (ret < 0) {
			return -errno;
   21320:	f7ff fb1d 	bl	2095e <__errno>
   21324:	6800      	ldr	r0, [r0, #0]
   21326:	4240      	negs	r0, r0
   21328:	e026      	b.n	21378 <mqtt_client_tcp_write_msg+0x7a>
				message->msg_iov[i].iov_base =
					(uint8_t *)message->msg_iov[i].iov_base + ret;
				break;
			}

			ret -= message->msg_iov[i].iov_len;
   2132a:	1a40      	subs	r0, r0, r1
			message->msg_iov[i].iov_len = 0;
   2132c:	2100      	movs	r1, #0
   2132e:	6051      	str	r1, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   21330:	3301      	adds	r3, #1
   21332:	68e2      	ldr	r2, [r4, #12]
   21334:	429a      	cmp	r2, r3
   21336:	d910      	bls.n	2135a <mqtt_client_tcp_write_msg+0x5c>
			if (ret < message->msg_iov[i].iov_len) {
   21338:	68a2      	ldr	r2, [r4, #8]
   2133a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   2133e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   21342:	6851      	ldr	r1, [r2, #4]
   21344:	4686      	mov	lr, r0
   21346:	4281      	cmp	r1, r0
   21348:	d9ef      	bls.n	2132a <mqtt_client_tcp_write_msg+0x2c>
				message->msg_iov[i].iov_len -= ret;
   2134a:	1a09      	subs	r1, r1, r0
   2134c:	6051      	str	r1, [r2, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   2134e:	68a2      	ldr	r2, [r4, #8]
   21350:	f852 300c 	ldr.w	r3, [r2, ip]
   21354:	4403      	add	r3, r0
				message->msg_iov[i].iov_base =
   21356:	f842 300c 	str.w	r3, [r2, ip]
	while (offset < total_len) {
   2135a:	42b5      	cmp	r5, r6
   2135c:	d20b      	bcs.n	21376 <mqtt_client_tcp_write_msg+0x78>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   2135e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   21360:	2200      	movs	r2, #0
   21362:	4621      	mov	r1, r4
   21364:	f7ff f9cf 	bl	20706 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   21368:	2800      	cmp	r0, #0
   2136a:	dbd9      	blt.n	21320 <mqtt_client_tcp_write_msg+0x22>
		offset += ret;
   2136c:	4405      	add	r5, r0
		if (offset >= total_len) {
   2136e:	42ae      	cmp	r6, r5
   21370:	d903      	bls.n	2137a <mqtt_client_tcp_write_msg+0x7c>
		for (i = 0; i < message->msg_iovlen; i++) {
   21372:	2300      	movs	r3, #0
   21374:	e7dd      	b.n	21332 <mqtt_client_tcp_write_msg+0x34>
		}
	}

	return 0;
   21376:	2000      	movs	r0, #0
}
   21378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   2137a:	2000      	movs	r0, #0
   2137c:	e7fc      	b.n	21378 <mqtt_client_tcp_write_msg+0x7a>

0002137e <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2137e:	b510      	push	{r4, lr}
   21380:	b082      	sub	sp, #8
	int flags = 0;
	int ret;

	if (!shall_block) {
   21382:	b153      	cbz	r3, 2139a <mqtt_client_tcp_read+0x1c>
	int flags = 0;
   21384:	2300      	movs	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   21386:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   21388:	2400      	movs	r4, #0
   2138a:	9401      	str	r4, [sp, #4]
   2138c:	9400      	str	r4, [sp, #0]
   2138e:	f7ff f9e2 	bl	20756 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   21392:	2800      	cmp	r0, #0
   21394:	db03      	blt.n	2139e <mqtt_client_tcp_read+0x20>
		return -errno;
	}

	return ret;
}
   21396:	b002      	add	sp, #8
   21398:	bd10      	pop	{r4, pc}
		flags |= ZSOCK_MSG_DONTWAIT;
   2139a:	2340      	movs	r3, #64	; 0x40
   2139c:	e7f3      	b.n	21386 <mqtt_client_tcp_read+0x8>
		return -errno;
   2139e:	f7ff fade 	bl	2095e <__errno>
   213a2:	6800      	ldr	r0, [r0, #0]
   213a4:	4240      	negs	r0, r0
   213a6:	e7f6      	b.n	21396 <mqtt_client_tcp_read+0x18>

000213a8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   213a8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   213aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   213ac:	f7ff f92d 	bl	2060a <z_impl_zsock_close>
	if (ret < 0) {
   213b0:	2800      	cmp	r0, #0
   213b2:	db01      	blt.n	213b8 <mqtt_client_tcp_disconnect+0x10>
		return -errno;
	}

	return 0;
   213b4:	2000      	movs	r0, #0
}
   213b6:	bd08      	pop	{r3, pc}
		return -errno;
   213b8:	f7ff fad1 	bl	2095e <__errno>
   213bc:	6800      	ldr	r0, [r0, #0]
   213be:	4240      	negs	r0, r0
   213c0:	e7f9      	b.n	213b6 <mqtt_client_tcp_disconnect+0xe>

000213c2 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
   213c2:	b508      	push	{r3, lr}
	return transport_fn[client->transport.type].disconnect(client);
   213c4:	f7ff fff0 	bl	213a8 <mqtt_client_tcp_disconnect>
}
   213c8:	bd08      	pop	{r3, pc}

000213ca <client_reset>:
#include "mqtt_internal.h"
#include "mqtt_os.h"

static void client_reset(struct mqtt_client *client)
{
	MQTT_STATE_INIT(client);
   213ca:	2300      	movs	r3, #0
   213cc:	6183      	str	r3, [r0, #24]

	client->internal.last_activity = 0U;
   213ce:	6143      	str	r3, [r0, #20]
	client->internal.rx_buf_datalen = 0U;
   213d0:	61c3      	str	r3, [r0, #28]
	client->internal.remaining_payload = 0U;
   213d2:	6203      	str	r3, [r0, #32]
}
   213d4:	4770      	bx	lr

000213d6 <verify_tx_state>:
	return err_code;
}

static int verify_tx_state(const struct mqtt_client *client)
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   213d6:	6983      	ldr	r3, [r0, #24]
   213d8:	f013 0f04 	tst.w	r3, #4
   213dc:	d001      	beq.n	213e2 <verify_tx_state+0xc>
		return -ENOTCONN;
	}

	return 0;
   213de:	2000      	movs	r0, #0
   213e0:	4770      	bx	lr
		return -ENOTCONN;
   213e2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   213e6:	4770      	bx	lr

000213e8 <tx_buf_init>:
{
   213e8:	b538      	push	{r3, r4, r5, lr}
   213ea:	4604      	mov	r4, r0
   213ec:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   213ee:	6d82      	ldr	r2, [r0, #88]	; 0x58
   213f0:	2100      	movs	r1, #0
   213f2:	6d40      	ldr	r0, [r0, #84]	; 0x54
   213f4:	f003 fb77 	bl	24ae6 <memset>
	buf->cur = client->tx_buf;
   213f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   213fa:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   213fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
   213fe:	4413      	add	r3, r2
   21400:	606b      	str	r3, [r5, #4]
}
   21402:	bd38      	pop	{r3, r4, r5, pc}

00021404 <event_notify>:
{
   21404:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   21406:	6c83      	ldr	r3, [r0, #72]	; 0x48
   21408:	b173      	cbz	r3, 21428 <event_notify+0x24>
   2140a:	4604      	mov	r4, r0
   2140c:	460d      	mov	r5, r1
   2140e:	f7fb feb3 	bl	1d178 <z_impl_k_mutex_unlock>
		client->evt_cb(client, evt);
   21412:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   21414:	4629      	mov	r1, r5
   21416:	4620      	mov	r0, r4
   21418:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2141a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21422:	4620      	mov	r0, r4
   21424:	f7fb fe1e 	bl	1d064 <z_impl_k_mutex_lock>
}
   21428:	bd38      	pop	{r3, r4, r5, pc}

0002142a <client_disconnect>:
{
   2142a:	b570      	push	{r4, r5, r6, lr}
   2142c:	b088      	sub	sp, #32
   2142e:	4604      	mov	r4, r0
   21430:	460e      	mov	r6, r1
   21432:	4615      	mov	r5, r2
	err_code = mqtt_transport_disconnect(client);
   21434:	f7ff ffc5 	bl	213c2 <mqtt_transport_disconnect>
	client_reset(client);
   21438:	4620      	mov	r0, r4
   2143a:	f7ff ffc6 	bl	213ca <client_reset>
	if (notify) {
   2143e:	b90d      	cbnz	r5, 21444 <client_disconnect+0x1a>
}
   21440:	b008      	add	sp, #32
   21442:	bd70      	pop	{r4, r5, r6, pc}
		struct mqtt_evt evt = {
   21444:	2220      	movs	r2, #32
   21446:	2100      	movs	r1, #0
   21448:	4668      	mov	r0, sp
   2144a:	f003 fb4c 	bl	24ae6 <memset>
   2144e:	2301      	movs	r3, #1
   21450:	f88d 3000 	strb.w	r3, [sp]
   21454:	9607      	str	r6, [sp, #28]
		event_notify(client, &evt);
   21456:	4669      	mov	r1, sp
   21458:	4620      	mov	r0, r4
   2145a:	f7ff ffd3 	bl	21404 <event_notify>
}
   2145e:	e7ef      	b.n	21440 <client_disconnect+0x16>

00021460 <client_connect>:
{
   21460:	b530      	push	{r4, r5, lr}
   21462:	b083      	sub	sp, #12
   21464:	4605      	mov	r5, r0
	err_code = mqtt_transport_connect(client);
   21466:	f7f3 fd15 	bl	14e94 <mqtt_transport_connect>
	if (err_code < 0) {
   2146a:	1e04      	subs	r4, r0, #0
   2146c:	db36      	blt.n	214dc <client_connect+0x7c>
	tx_buf_init(client, &packet);
   2146e:	4669      	mov	r1, sp
   21470:	4628      	mov	r0, r5
   21472:	f7ff ffb9 	bl	213e8 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   21476:	69ab      	ldr	r3, [r5, #24]
   21478:	f043 0302 	orr.w	r3, r3, #2
   2147c:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2147e:	4669      	mov	r1, sp
   21480:	4628      	mov	r0, r5
   21482:	f7f3 fc61 	bl	14d48 <connect_request_encode>
	if (err_code < 0) {
   21486:	1e04      	subs	r4, r0, #0
   21488:	db23      	blt.n	214d2 <client_connect+0x72>
	err_code = mqtt_transport_write(client, packet.cur,
   2148a:	9900      	ldr	r1, [sp, #0]
   2148c:	9a01      	ldr	r2, [sp, #4]
   2148e:	1a52      	subs	r2, r2, r1
   21490:	4628      	mov	r0, r5
   21492:	f7f3 fd0b 	bl	14eac <mqtt_transport_write>
	if (err_code < 0) {
   21496:	1e04      	subs	r4, r0, #0
   21498:	db1b      	blt.n	214d2 <client_connect+0x72>
	return z_impl_k_uptime_ticks();
   2149a:	f003 f9df 	bl	2485c <z_impl_k_uptime_ticks>
   2149e:	014a      	lsls	r2, r1, #5
   214a0:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   214a4:	0143      	lsls	r3, r0, #5
   214a6:	1a1b      	subs	r3, r3, r0
   214a8:	eb62 0201 	sbc.w	r2, r2, r1
   214ac:	0092      	lsls	r2, r2, #2
   214ae:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   214b2:	009b      	lsls	r3, r3, #2
   214b4:	181b      	adds	r3, r3, r0
   214b6:	eb42 0201 	adc.w	r2, r2, r1
   214ba:	00d2      	lsls	r2, r2, #3
   214bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   214c0:	f3c3 3310 	ubfx	r3, r3, #12, #17
   214c4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   214c8:	616b      	str	r3, [r5, #20]
	client->unacked_ping = 0;
   214ca:	2400      	movs	r4, #0
   214cc:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	return 0;
   214d0:	e004      	b.n	214dc <client_connect+0x7c>
	client_disconnect(client, err_code, false);
   214d2:	2200      	movs	r2, #0
   214d4:	4621      	mov	r1, r4
   214d6:	4628      	mov	r0, r5
   214d8:	f7ff ffa7 	bl	2142a <client_disconnect>
}
   214dc:	4620      	mov	r0, r4
   214de:	b003      	add	sp, #12
   214e0:	bd30      	pop	{r4, r5, pc}

000214e2 <client_write_msg>:
{
   214e2:	b538      	push	{r3, r4, r5, lr}
   214e4:	4604      	mov	r4, r0
	err_code = mqtt_transport_write_msg(client, message);
   214e6:	f7f3 fcef 	bl	14ec8 <mqtt_transport_write_msg>
	if (err_code < 0) {
   214ea:	1e05      	subs	r5, r0, #0
   214ec:	db1a      	blt.n	21524 <client_write_msg+0x42>
   214ee:	f003 f9b5 	bl	2485c <z_impl_k_uptime_ticks>
   214f2:	014a      	lsls	r2, r1, #5
   214f4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   214f8:	0143      	lsls	r3, r0, #5
   214fa:	1a1b      	subs	r3, r3, r0
   214fc:	eb62 0201 	sbc.w	r2, r2, r1
   21500:	0092      	lsls	r2, r2, #2
   21502:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   21506:	009b      	lsls	r3, r3, #2
   21508:	181b      	adds	r3, r3, r0
   2150a:	eb42 0101 	adc.w	r1, r2, r1
   2150e:	00c9      	lsls	r1, r1, #3
   21510:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   21514:	f3c3 3310 	ubfx	r3, r3, #12, #17
   21518:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   2151c:	6163      	str	r3, [r4, #20]
	return 0;
   2151e:	2500      	movs	r5, #0
}
   21520:	4628      	mov	r0, r5
   21522:	bd38      	pop	{r3, r4, r5, pc}
		client_disconnect(client, err_code, true);
   21524:	2201      	movs	r2, #1
   21526:	4629      	mov	r1, r5
   21528:	4620      	mov	r0, r4
   2152a:	f7ff ff7e 	bl	2142a <client_disconnect>
		return err_code;
   2152e:	e7f7      	b.n	21520 <client_write_msg+0x3e>

00021530 <client_write>:
{
   21530:	b538      	push	{r3, r4, r5, lr}
   21532:	4604      	mov	r4, r0
	err_code = mqtt_transport_write(client, data, datalen);
   21534:	f7f3 fcba 	bl	14eac <mqtt_transport_write>
	if (err_code < 0) {
   21538:	1e05      	subs	r5, r0, #0
   2153a:	db1a      	blt.n	21572 <client_write+0x42>
   2153c:	f003 f98e 	bl	2485c <z_impl_k_uptime_ticks>
   21540:	014a      	lsls	r2, r1, #5
   21542:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   21546:	0143      	lsls	r3, r0, #5
   21548:	1a1b      	subs	r3, r3, r0
   2154a:	eb62 0201 	sbc.w	r2, r2, r1
   2154e:	0092      	lsls	r2, r2, #2
   21550:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   21554:	009b      	lsls	r3, r3, #2
   21556:	181b      	adds	r3, r3, r0
   21558:	eb42 0101 	adc.w	r1, r2, r1
   2155c:	00c9      	lsls	r1, r1, #3
   2155e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   21562:	f3c3 3310 	ubfx	r3, r3, #12, #17
   21566:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   2156a:	6163      	str	r3, [r4, #20]
	return 0;
   2156c:	2500      	movs	r5, #0
}
   2156e:	4628      	mov	r0, r5
   21570:	bd38      	pop	{r3, r4, r5, pc}
		client_disconnect(client, err_code, true);
   21572:	2201      	movs	r2, #1
   21574:	4629      	mov	r1, r5
   21576:	4620      	mov	r0, r4
   21578:	f7ff ff57 	bl	2142a <client_disconnect>
		return err_code;
   2157c:	e7f7      	b.n	2156e <client_write+0x3e>

0002157e <client_read>:
{
   2157e:	b538      	push	{r3, r4, r5, lr}
	if (client->internal.remaining_payload > 0) {
   21580:	6a03      	ldr	r3, [r0, #32]
   21582:	b963      	cbnz	r3, 2159e <client_read+0x20>
   21584:	4604      	mov	r4, r0
	err_code = mqtt_handle_rx(client);
   21586:	f7ff fe40 	bl	2120a <mqtt_handle_rx>
	if (err_code < 0) {
   2158a:	1e05      	subs	r5, r0, #0
   2158c:	db01      	blt.n	21592 <client_read+0x14>
}
   2158e:	4628      	mov	r0, r5
   21590:	bd38      	pop	{r3, r4, r5, pc}
		client_disconnect(client, err_code, true);
   21592:	2201      	movs	r2, #1
   21594:	4629      	mov	r1, r5
   21596:	4620      	mov	r0, r4
   21598:	f7ff ff47 	bl	2142a <client_disconnect>
   2159c:	e7f7      	b.n	2158e <client_read+0x10>
		return -EBUSY;
   2159e:	f06f 050f 	mvn.w	r5, #15
   215a2:	e7f4      	b.n	2158e <client_read+0x10>

000215a4 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   215a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret;

	NULL_PARAM_CHECK(client);
   215a6:	b368      	cbz	r0, 21604 <read_publish_payload+0x60>
   215a8:	460f      	mov	r7, r1
   215aa:	4615      	mov	r5, r2
   215ac:	461e      	mov	r6, r3
   215ae:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   215b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   215b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215b8:	f7fb fd54 	bl	1d064 <z_impl_k_mutex_lock>

	mqtt_mutex_lock(client);

	if (client->internal.remaining_payload == 0U) {
   215bc:	6a22      	ldr	r2, [r4, #32]
   215be:	b1fa      	cbz	r2, 21600 <read_publish_payload+0x5c>
		ret = 0;
		goto exit;
	}

	if (client->internal.remaining_payload < length) {
   215c0:	42aa      	cmp	r2, r5
   215c2:	d300      	bcc.n	215c6 <read_publish_payload+0x22>
   215c4:	462a      	mov	r2, r5
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   215c6:	4633      	mov	r3, r6
   215c8:	4639      	mov	r1, r7
   215ca:	4620      	mov	r0, r4
   215cc:	f7f3 fc8a 	bl	14ee4 <mqtt_transport_read>
   215d0:	4605      	mov	r5, r0
	if (!shall_block && ret == -EAGAIN) {
   215d2:	b916      	cbnz	r6, 215da <read_publish_payload+0x36>
   215d4:	f110 0f0b 	cmn.w	r0, #11
   215d8:	d004      	beq.n	215e4 <read_publish_payload+0x40>
		goto exit;
	}

	if (ret <= 0) {
   215da:	2d00      	cmp	r5, #0
   215dc:	dd07      	ble.n	215ee <read_publish_payload+0x4a>

		client_disconnect(client, ret, true);
		goto exit;
	}

	client->internal.remaining_payload -= ret;
   215de:	6a23      	ldr	r3, [r4, #32]
   215e0:	1b5b      	subs	r3, r3, r5
   215e2:	6223      	str	r3, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   215e4:	4620      	mov	r0, r4
   215e6:	f7fb fdc7 	bl	1d178 <z_impl_k_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   215ea:	4628      	mov	r0, r5
   215ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ret == 0) {
   215ee:	b90d      	cbnz	r5, 215f4 <read_publish_payload+0x50>
			ret = -ENOTCONN;
   215f0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		client_disconnect(client, ret, true);
   215f4:	2201      	movs	r2, #1
   215f6:	4629      	mov	r1, r5
   215f8:	4620      	mov	r0, r4
   215fa:	f7ff ff16 	bl	2142a <client_disconnect>
		goto exit;
   215fe:	e7f1      	b.n	215e4 <read_publish_payload+0x40>
		ret = 0;
   21600:	2500      	movs	r5, #0
   21602:	e7ef      	b.n	215e4 <read_publish_payload+0x40>
	NULL_PARAM_CHECK(client);
   21604:	f06f 0515 	mvn.w	r5, #21
   21608:	e7ef      	b.n	215ea <read_publish_payload+0x46>

0002160a <mqtt_client_init>:
	NULL_PARAM_CHECK_VOID(client);
   2160a:	b1b8      	cbz	r0, 2163c <mqtt_client_init+0x32>
{
   2160c:	b510      	push	{r4, lr}
   2160e:	4604      	mov	r4, r0
   21610:	2264      	movs	r2, #100	; 0x64
   21612:	2100      	movs	r1, #0
   21614:	f003 fa67 	bl	24ae6 <memset>
	MQTT_STATE_INIT(client);
   21618:	2300      	movs	r3, #0
   2161a:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   2161c:	4620      	mov	r0, r4
   2161e:	f002 fdb5 	bl	2418c <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   21622:	2304      	movs	r3, #4
   21624:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   21628:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2162c:	f043 0302 	orr.w	r3, r3, #2
   21630:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   21634:	233c      	movs	r3, #60	; 0x3c
   21636:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2163a:	bd10      	pop	{r4, pc}
   2163c:	4770      	bx	lr

0002163e <mqtt_connect>:
{
   2163e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   21640:	b1f8      	cbz	r0, 21682 <mqtt_connect+0x44>
   21642:	4604      	mov	r4, r0
	NULL_PARAM_CHECK(client->client_id.utf8);
   21644:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21646:	b1fb      	cbz	r3, 21688 <mqtt_connect+0x4a>
	return z_impl_k_mutex_lock(mutex, timeout);
   21648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2164c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21650:	f7fb fd08 	bl	1d064 <z_impl_k_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   21654:	6d63      	ldr	r3, [r4, #84]	; 0x54
   21656:	b13b      	cbz	r3, 21668 <mqtt_connect+0x2a>
   21658:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2165a:	b143      	cbz	r3, 2166e <mqtt_connect+0x30>
	err_code = client_connect(client);
   2165c:	4620      	mov	r0, r4
   2165e:	f7ff feff 	bl	21460 <client_connect>
	if (err_code < 0) {
   21662:	1e05      	subs	r5, r0, #0
   21664:	da08      	bge.n	21678 <mqtt_connect+0x3a>
   21666:	e004      	b.n	21672 <mqtt_connect+0x34>
		err_code = -ENOMEM;
   21668:	f06f 050b 	mvn.w	r5, #11
   2166c:	e001      	b.n	21672 <mqtt_connect+0x34>
   2166e:	f06f 050b 	mvn.w	r5, #11
		client_reset(client);
   21672:	4620      	mov	r0, r4
   21674:	f7ff fea9 	bl	213ca <client_reset>
	return z_impl_k_mutex_unlock(mutex);
   21678:	4620      	mov	r0, r4
   2167a:	f7fb fd7d 	bl	1d178 <z_impl_k_mutex_unlock>
}
   2167e:	4628      	mov	r0, r5
   21680:	bd38      	pop	{r3, r4, r5, pc}
	NULL_PARAM_CHECK(client);
   21682:	f06f 0515 	mvn.w	r5, #21
   21686:	e7fa      	b.n	2167e <mqtt_connect+0x40>
	NULL_PARAM_CHECK(client->client_id.utf8);
   21688:	f06f 0515 	mvn.w	r5, #21
   2168c:	e7f7      	b.n	2167e <mqtt_connect+0x40>

0002168e <mqtt_publish>:
{
   2168e:	b570      	push	{r4, r5, r6, lr}
   21690:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   21692:	2800      	cmp	r0, #0
   21694:	d038      	beq.n	21708 <mqtt_publish+0x7a>
   21696:	460e      	mov	r6, r1
   21698:	4605      	mov	r5, r0
	NULL_PARAM_CHECK(param);
   2169a:	2900      	cmp	r1, #0
   2169c:	d037      	beq.n	2170e <mqtt_publish+0x80>
	return z_impl_k_mutex_lock(mutex, timeout);
   2169e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   216a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   216a6:	f7fb fcdd 	bl	1d064 <z_impl_k_mutex_lock>
	tx_buf_init(client, &packet);
   216aa:	a90c      	add	r1, sp, #48	; 0x30
   216ac:	4628      	mov	r0, r5
   216ae:	f7ff fe9b 	bl	213e8 <tx_buf_init>
	err_code = verify_tx_state(client);
   216b2:	4628      	mov	r0, r5
   216b4:	f7ff fe8f 	bl	213d6 <verify_tx_state>
	if (err_code < 0) {
   216b8:	1e04      	subs	r4, r0, #0
   216ba:	db1f      	blt.n	216fc <mqtt_publish+0x6e>
	err_code = publish_encode(param, &packet);
   216bc:	a90c      	add	r1, sp, #48	; 0x30
   216be:	4630      	mov	r0, r6
   216c0:	f7ff fc2a 	bl	20f18 <publish_encode>
	if (err_code < 0) {
   216c4:	1e04      	subs	r4, r0, #0
   216c6:	db19      	blt.n	216fc <mqtt_publish+0x6e>
	io_vector[0].iov_base = packet.cur;
   216c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   216ca:	9208      	str	r2, [sp, #32]
	io_vector[0].iov_len = packet.end - packet.cur;
   216cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   216ce:	1a9b      	subs	r3, r3, r2
   216d0:	9309      	str	r3, [sp, #36]	; 0x24
	io_vector[1].iov_base = param->message.payload.data;
   216d2:	68f3      	ldr	r3, [r6, #12]
   216d4:	930a      	str	r3, [sp, #40]	; 0x28
	io_vector[1].iov_len = param->message.payload.len;
   216d6:	6933      	ldr	r3, [r6, #16]
   216d8:	930b      	str	r3, [sp, #44]	; 0x2c
	memset(&msg, 0, sizeof(msg));
   216da:	2300      	movs	r3, #0
   216dc:	9301      	str	r3, [sp, #4]
   216de:	9302      	str	r3, [sp, #8]
   216e0:	9303      	str	r3, [sp, #12]
   216e2:	9304      	str	r3, [sp, #16]
   216e4:	9305      	str	r3, [sp, #20]
   216e6:	9306      	str	r3, [sp, #24]
   216e8:	9307      	str	r3, [sp, #28]
	msg.msg_iov = io_vector;
   216ea:	ab08      	add	r3, sp, #32
   216ec:	9303      	str	r3, [sp, #12]
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   216ee:	2302      	movs	r3, #2
   216f0:	9304      	str	r3, [sp, #16]
	err_code = client_write_msg(client, &msg);
   216f2:	a901      	add	r1, sp, #4
   216f4:	4628      	mov	r0, r5
   216f6:	f7ff fef4 	bl	214e2 <client_write_msg>
   216fa:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   216fc:	4628      	mov	r0, r5
   216fe:	f7fb fd3b 	bl	1d178 <z_impl_k_mutex_unlock>
}
   21702:	4620      	mov	r0, r4
   21704:	b00e      	add	sp, #56	; 0x38
   21706:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   21708:	f06f 0415 	mvn.w	r4, #21
   2170c:	e7f9      	b.n	21702 <mqtt_publish+0x74>
	NULL_PARAM_CHECK(param);
   2170e:	f06f 0415 	mvn.w	r4, #21
   21712:	e7f6      	b.n	21702 <mqtt_publish+0x74>

00021714 <mqtt_publish_qos1_ack>:
{
   21714:	b570      	push	{r4, r5, r6, lr}
   21716:	b082      	sub	sp, #8
	NULL_PARAM_CHECK(client);
   21718:	b320      	cbz	r0, 21764 <mqtt_publish_qos1_ack+0x50>
   2171a:	460e      	mov	r6, r1
   2171c:	4605      	mov	r5, r0
	NULL_PARAM_CHECK(param);
   2171e:	b321      	cbz	r1, 2176a <mqtt_publish_qos1_ack+0x56>
	return z_impl_k_mutex_lock(mutex, timeout);
   21720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21728:	f7fb fc9c 	bl	1d064 <z_impl_k_mutex_lock>
	tx_buf_init(client, &packet);
   2172c:	4669      	mov	r1, sp
   2172e:	4628      	mov	r0, r5
   21730:	f7ff fe5a 	bl	213e8 <tx_buf_init>
	err_code = verify_tx_state(client);
   21734:	4628      	mov	r0, r5
   21736:	f7ff fe4e 	bl	213d6 <verify_tx_state>
	if (err_code < 0) {
   2173a:	1e04      	subs	r4, r0, #0
   2173c:	db0c      	blt.n	21758 <mqtt_publish_qos1_ack+0x44>
	err_code = publish_ack_encode(param, &packet);
   2173e:	4669      	mov	r1, sp
   21740:	4630      	mov	r0, r6
   21742:	f7ff fc1e 	bl	20f82 <publish_ack_encode>
	if (err_code < 0) {
   21746:	1e04      	subs	r4, r0, #0
   21748:	db06      	blt.n	21758 <mqtt_publish_qos1_ack+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2174a:	9900      	ldr	r1, [sp, #0]
   2174c:	9a01      	ldr	r2, [sp, #4]
   2174e:	1a52      	subs	r2, r2, r1
   21750:	4628      	mov	r0, r5
   21752:	f7ff feed 	bl	21530 <client_write>
   21756:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21758:	4628      	mov	r0, r5
   2175a:	f7fb fd0d 	bl	1d178 <z_impl_k_mutex_unlock>
}
   2175e:	4620      	mov	r0, r4
   21760:	b002      	add	sp, #8
   21762:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   21764:	f06f 0415 	mvn.w	r4, #21
   21768:	e7f9      	b.n	2175e <mqtt_publish_qos1_ack+0x4a>
	NULL_PARAM_CHECK(param);
   2176a:	f06f 0415 	mvn.w	r4, #21
   2176e:	e7f6      	b.n	2175e <mqtt_publish_qos1_ack+0x4a>

00021770 <mqtt_disconnect>:
{
   21770:	b530      	push	{r4, r5, lr}
   21772:	b083      	sub	sp, #12
	NULL_PARAM_CHECK(client);
   21774:	b338      	cbz	r0, 217c6 <mqtt_disconnect+0x56>
   21776:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   21778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2177c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21780:	f7fb fc70 	bl	1d064 <z_impl_k_mutex_lock>
	tx_buf_init(client, &packet);
   21784:	4669      	mov	r1, sp
   21786:	4628      	mov	r0, r5
   21788:	f7ff fe2e 	bl	213e8 <tx_buf_init>
	err_code = verify_tx_state(client);
   2178c:	4628      	mov	r0, r5
   2178e:	f7ff fe22 	bl	213d6 <verify_tx_state>
	if (err_code < 0) {
   21792:	1e04      	subs	r4, r0, #0
   21794:	db11      	blt.n	217ba <mqtt_disconnect+0x4a>
	err_code = disconnect_encode(&packet);
   21796:	4668      	mov	r0, sp
   21798:	f7f3 fb58 	bl	14e4c <disconnect_encode>
	if (err_code < 0) {
   2179c:	1e04      	subs	r4, r0, #0
   2179e:	db0c      	blt.n	217ba <mqtt_disconnect+0x4a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   217a0:	9900      	ldr	r1, [sp, #0]
   217a2:	9a01      	ldr	r2, [sp, #4]
   217a4:	1a52      	subs	r2, r2, r1
   217a6:	4628      	mov	r0, r5
   217a8:	f7ff fec2 	bl	21530 <client_write>
	if (err_code < 0) {
   217ac:	1e04      	subs	r4, r0, #0
   217ae:	db04      	blt.n	217ba <mqtt_disconnect+0x4a>
	client_disconnect(client, 0, true);
   217b0:	2201      	movs	r2, #1
   217b2:	2100      	movs	r1, #0
   217b4:	4628      	mov	r0, r5
   217b6:	f7ff fe38 	bl	2142a <client_disconnect>
	return z_impl_k_mutex_unlock(mutex);
   217ba:	4628      	mov	r0, r5
   217bc:	f7fb fcdc 	bl	1d178 <z_impl_k_mutex_unlock>
}
   217c0:	4620      	mov	r0, r4
   217c2:	b003      	add	sp, #12
   217c4:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   217c6:	f06f 0415 	mvn.w	r4, #21
   217ca:	e7f9      	b.n	217c0 <mqtt_disconnect+0x50>

000217cc <mqtt_subscribe>:
{
   217cc:	b570      	push	{r4, r5, r6, lr}
   217ce:	b082      	sub	sp, #8
	NULL_PARAM_CHECK(client);
   217d0:	b320      	cbz	r0, 2181c <mqtt_subscribe+0x50>
   217d2:	460e      	mov	r6, r1
   217d4:	4605      	mov	r5, r0
	NULL_PARAM_CHECK(param);
   217d6:	b321      	cbz	r1, 21822 <mqtt_subscribe+0x56>
	return z_impl_k_mutex_lock(mutex, timeout);
   217d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   217dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   217e0:	f7fb fc40 	bl	1d064 <z_impl_k_mutex_lock>
	tx_buf_init(client, &packet);
   217e4:	4669      	mov	r1, sp
   217e6:	4628      	mov	r0, r5
   217e8:	f7ff fdfe 	bl	213e8 <tx_buf_init>
	err_code = verify_tx_state(client);
   217ec:	4628      	mov	r0, r5
   217ee:	f7ff fdf2 	bl	213d6 <verify_tx_state>
	if (err_code < 0) {
   217f2:	1e04      	subs	r4, r0, #0
   217f4:	db0c      	blt.n	21810 <mqtt_subscribe+0x44>
	err_code = subscribe_encode(param, &packet);
   217f6:	4669      	mov	r1, sp
   217f8:	4630      	mov	r0, r6
   217fa:	f7ff fbc9 	bl	20f90 <subscribe_encode>
	if (err_code < 0) {
   217fe:	1e04      	subs	r4, r0, #0
   21800:	db06      	blt.n	21810 <mqtt_subscribe+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   21802:	9900      	ldr	r1, [sp, #0]
   21804:	9a01      	ldr	r2, [sp, #4]
   21806:	1a52      	subs	r2, r2, r1
   21808:	4628      	mov	r0, r5
   2180a:	f7ff fe91 	bl	21530 <client_write>
   2180e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21810:	4628      	mov	r0, r5
   21812:	f7fb fcb1 	bl	1d178 <z_impl_k_mutex_unlock>
}
   21816:	4620      	mov	r0, r4
   21818:	b002      	add	sp, #8
   2181a:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   2181c:	f06f 0415 	mvn.w	r4, #21
   21820:	e7f9      	b.n	21816 <mqtt_subscribe+0x4a>
	NULL_PARAM_CHECK(param);
   21822:	f06f 0415 	mvn.w	r4, #21
   21826:	e7f6      	b.n	21816 <mqtt_subscribe+0x4a>

00021828 <mqtt_ping>:
{
   21828:	b530      	push	{r4, r5, lr}
   2182a:	b083      	sub	sp, #12
	NULL_PARAM_CHECK(client);
   2182c:	b340      	cbz	r0, 21880 <mqtt_ping+0x58>
   2182e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   21830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21838:	f7fb fc14 	bl	1d064 <z_impl_k_mutex_lock>
	tx_buf_init(client, &packet);
   2183c:	4669      	mov	r1, sp
   2183e:	4628      	mov	r0, r5
   21840:	f7ff fdd2 	bl	213e8 <tx_buf_init>
	err_code = verify_tx_state(client);
   21844:	4628      	mov	r0, r5
   21846:	f7ff fdc6 	bl	213d6 <verify_tx_state>
	if (err_code < 0) {
   2184a:	1e04      	subs	r4, r0, #0
   2184c:	db12      	blt.n	21874 <mqtt_ping+0x4c>
	err_code = ping_request_encode(&packet);
   2184e:	4668      	mov	r0, sp
   21850:	f7f3 fb0e 	bl	14e70 <ping_request_encode>
	if (err_code < 0) {
   21854:	1e04      	subs	r4, r0, #0
   21856:	db0d      	blt.n	21874 <mqtt_ping+0x4c>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   21858:	9900      	ldr	r1, [sp, #0]
   2185a:	9a01      	ldr	r2, [sp, #4]
   2185c:	1a52      	subs	r2, r2, r1
   2185e:	4628      	mov	r0, r5
   21860:	f7ff fe66 	bl	21530 <client_write>
   21864:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   21866:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   2186a:	2b7f      	cmp	r3, #127	; 0x7f
   2186c:	d002      	beq.n	21874 <mqtt_ping+0x4c>
		client->unacked_ping++;
   2186e:	3301      	adds	r3, #1
   21870:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
	return z_impl_k_mutex_unlock(mutex);
   21874:	4628      	mov	r0, r5
   21876:	f7fb fc7f 	bl	1d178 <z_impl_k_mutex_unlock>
}
   2187a:	4620      	mov	r0, r4
   2187c:	b003      	add	sp, #12
   2187e:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   21880:	f06f 0415 	mvn.w	r4, #21
   21884:	e7f9      	b.n	2187a <mqtt_ping+0x52>

00021886 <mqtt_live>:
{
   21886:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   21888:	2800      	cmp	r0, #0
   2188a:	d03f      	beq.n	2190c <mqtt_live+0x86>
   2188c:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2188e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21896:	f7fb fbe5 	bl	1d064 <z_impl_k_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2189a:	6965      	ldr	r5, [r4, #20]
	return z_impl_k_uptime_ticks();
   2189c:	f002 ffde 	bl	2485c <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   218a0:	4684      	mov	ip, r0
   218a2:	014a      	lsls	r2, r1, #5
   218a4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   218a8:	0140      	lsls	r0, r0, #5
   218aa:	ebb0 030c 	subs.w	r3, r0, ip
   218ae:	eb62 0201 	sbc.w	r2, r2, r1
   218b2:	0092      	lsls	r2, r2, #2
   218b4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   218b8:	009b      	lsls	r3, r3, #2
   218ba:	eb13 030c 	adds.w	r3, r3, ip
   218be:	eb42 0101 	adc.w	r1, r2, r1
   218c2:	00c9      	lsls	r1, r1, #3
   218c4:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   218c8:	f3c3 3310 	ubfx	r3, r3, #12, #17
   218cc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;

	if (diff < 0) {
   218d0:	1b5b      	subs	r3, r3, r5
   218d2:	d40b      	bmi.n	218ec <mqtt_live+0x66>
	if ((client->keepalive > 0) &&
   218d4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
   218d8:	b182      	cbz	r2, 218fc <mqtt_live+0x76>
	    (elapsed_time >= (client->keepalive * 1000))) {
   218da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   218de:	fb01 f202 	mul.w	r2, r1, r2
	if ((client->keepalive > 0) &&
   218e2:	429a      	cmp	r2, r3
   218e4:	d904      	bls.n	218f0 <mqtt_live+0x6a>
	bool ping_sent = false;
   218e6:	2500      	movs	r5, #0
	int err_code = 0;
   218e8:	462e      	mov	r6, r5
   218ea:	e009      	b.n	21900 <mqtt_live+0x7a>
		return 0;
   218ec:	2300      	movs	r3, #0
   218ee:	e7f1      	b.n	218d4 <mqtt_live+0x4e>
		err_code = mqtt_ping(client);
   218f0:	4620      	mov	r0, r4
   218f2:	f7ff ff99 	bl	21828 <mqtt_ping>
   218f6:	4606      	mov	r6, r0
		ping_sent = true;
   218f8:	2501      	movs	r5, #1
   218fa:	e001      	b.n	21900 <mqtt_live+0x7a>
	bool ping_sent = false;
   218fc:	2500      	movs	r5, #0
	int err_code = 0;
   218fe:	462e      	mov	r6, r5
	return z_impl_k_mutex_unlock(mutex);
   21900:	4620      	mov	r0, r4
   21902:	f7fb fc39 	bl	1d178 <z_impl_k_mutex_unlock>
	if (ping_sent) {
   21906:	b125      	cbz	r5, 21912 <mqtt_live+0x8c>
}
   21908:	4630      	mov	r0, r6
   2190a:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   2190c:	f06f 0615 	mvn.w	r6, #21
   21910:	e7fa      	b.n	21908 <mqtt_live+0x82>
		return -EAGAIN;
   21912:	f06f 060a 	mvn.w	r6, #10
   21916:	e7f7      	b.n	21908 <mqtt_live+0x82>

00021918 <mqtt_keepalive_time_left>:
{
   21918:	b538      	push	{r3, r4, r5, lr}
   2191a:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   2191c:	6945      	ldr	r5, [r0, #20]
	return z_impl_k_uptime_ticks();
   2191e:	f002 ff9d 	bl	2485c <z_impl_k_uptime_ticks>
   21922:	468e      	mov	lr, r1
   21924:	014a      	lsls	r2, r1, #5
   21926:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   2192a:	0143      	lsls	r3, r0, #5
   2192c:	1a1b      	subs	r3, r3, r0
   2192e:	eb62 0201 	sbc.w	r2, r2, r1
   21932:	0092      	lsls	r2, r2, #2
   21934:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   21938:	009b      	lsls	r3, r3, #2
   2193a:	181b      	adds	r3, r3, r0
   2193c:	eb42 0101 	adc.w	r1, r2, r1
   21940:	00c9      	lsls	r1, r1, #3
   21942:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   21946:	f3c3 3310 	ubfx	r3, r3, #12, #17
   2194a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	if (diff < 0) {
   2194e:	1b5b      	subs	r3, r3, r5
   21950:	d40a      	bmi.n	21968 <mqtt_keepalive_time_left+0x50>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   21952:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
   21956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2195a:	fb02 f000 	mul.w	r0, r2, r0
	if (client->keepalive == 0) {
   2195e:	b12a      	cbz	r2, 2196c <mqtt_keepalive_time_left+0x54>
	if (keepalive_ms <= elapsed_time) {
   21960:	4298      	cmp	r0, r3
   21962:	d906      	bls.n	21972 <mqtt_keepalive_time_left+0x5a>
	return keepalive_ms - elapsed_time;
   21964:	1ac0      	subs	r0, r0, r3
}
   21966:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   21968:	2300      	movs	r3, #0
   2196a:	e7f2      	b.n	21952 <mqtt_keepalive_time_left+0x3a>
		return -1;
   2196c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21970:	e7f9      	b.n	21966 <mqtt_keepalive_time_left+0x4e>
		return 0;
   21972:	2000      	movs	r0, #0
   21974:	e7f7      	b.n	21966 <mqtt_keepalive_time_left+0x4e>

00021976 <mqtt_input>:
{
   21976:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   21978:	b1b0      	cbz	r0, 219a8 <mqtt_input+0x32>
   2197a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2197c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21984:	f7fb fb6e 	bl	1d064 <z_impl_k_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   21988:	69a3      	ldr	r3, [r4, #24]
   2198a:	f013 0f02 	tst.w	r3, #2
   2198e:	d106      	bne.n	2199e <mqtt_input+0x28>
		err_code = -ENOTCONN;
   21990:	f06f 057f 	mvn.w	r5, #127	; 0x7f
	return z_impl_k_mutex_unlock(mutex);
   21994:	4620      	mov	r0, r4
   21996:	f7fb fbef 	bl	1d178 <z_impl_k_mutex_unlock>
}
   2199a:	4628      	mov	r0, r5
   2199c:	bd38      	pop	{r3, r4, r5, pc}
		err_code = client_read(client);
   2199e:	4620      	mov	r0, r4
   219a0:	f7ff fded 	bl	2157e <client_read>
   219a4:	4605      	mov	r5, r0
   219a6:	e7f5      	b.n	21994 <mqtt_input+0x1e>
	NULL_PARAM_CHECK(client);
   219a8:	f06f 0515 	mvn.w	r5, #21
   219ac:	e7f5      	b.n	2199a <mqtt_input+0x24>

000219ae <mqtt_read_publish_payload_blocking>:
	return read_publish_payload(client, buffer, length, false);
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
   219ae:	b508      	push	{r3, lr}
	return read_publish_payload(client, buffer, length, true);
   219b0:	2301      	movs	r3, #1
   219b2:	f7ff fdf7 	bl	215a4 <read_publish_payload>
}
   219b6:	bd08      	pop	{r3, pc}

000219b8 <mqtt_readall_publish_payload>:

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   219b8:	b570      	push	{r4, r5, r6, lr}
   219ba:	4606      	mov	r6, r0
   219bc:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   219be:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   219c0:	e000      	b.n	219c4 <mqtt_readall_publish_payload+0xc>
			return ret;
		} else if (ret == 0) {
			return -EIO;
		}

		buffer += ret;
   219c2:	4404      	add	r4, r0
	while (buffer < end) {
   219c4:	42ac      	cmp	r4, r5
   219c6:	d20b      	bcs.n	219e0 <mqtt_readall_publish_payload+0x28>
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   219c8:	1b2a      	subs	r2, r5, r4
   219ca:	4621      	mov	r1, r4
   219cc:	4630      	mov	r0, r6
   219ce:	f7ff ffee 	bl	219ae <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   219d2:	2800      	cmp	r0, #0
   219d4:	db05      	blt.n	219e2 <mqtt_readall_publish_payload+0x2a>
		} else if (ret == 0) {
   219d6:	2800      	cmp	r0, #0
   219d8:	d1f3      	bne.n	219c2 <mqtt_readall_publish_payload+0xa>
			return -EIO;
   219da:	f06f 0004 	mvn.w	r0, #4
   219de:	e000      	b.n	219e2 <mqtt_readall_publish_payload+0x2a>
	}

	return 0;
   219e0:	2000      	movs	r0, #0
}
   219e2:	bd70      	pop	{r4, r5, r6, pc}

000219e4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   219e4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   219e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   219ea:	0089      	lsls	r1, r1, #2
   219ec:	3138      	adds	r1, #56	; 0x38
}
   219ee:	4408      	add	r0, r1
   219f0:	4770      	bx	lr

000219f2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   219f2:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   219f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   219f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   219fc:	4770      	bx	lr

000219fe <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   219fe:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   21a00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   21a04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21a08:	4770      	bx	lr

00021a0a <get_status>:
{
   21a0a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   21a0c:	b2c9      	uxtb	r1, r1
   21a0e:	f7ff ffe9 	bl	219e4 <get_sub_data>
   21a12:	6880      	ldr	r0, [r0, #8]
}
   21a14:	f000 0007 	and.w	r0, r0, #7
   21a18:	bd08      	pop	{r3, pc}

00021a1a <set_off_state>:
	__asm__ volatile(
   21a1a:	f04f 0320 	mov.w	r3, #32
   21a1e:	f3ef 8211 	mrs	r2, BASEPRI
   21a22:	f383 8812 	msr	BASEPRI_MAX, r3
   21a26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   21a2a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   21a2c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   21a30:	d001      	beq.n	21a36 <set_off_state+0x1c>
   21a32:	428b      	cmp	r3, r1
   21a34:	d107      	bne.n	21a46 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   21a36:	2301      	movs	r3, #1
   21a38:	6003      	str	r3, [r0, #0]
	int err = 0;
   21a3a:	2000      	movs	r0, #0
	__asm__ volatile(
   21a3c:	f382 8811 	msr	BASEPRI, r2
   21a40:	f3bf 8f6f 	isb	sy
}
   21a44:	4770      	bx	lr
		err = -EPERM;
   21a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21a4a:	e7f7      	b.n	21a3c <set_off_state+0x22>

00021a4c <set_starting_state>:
	__asm__ volatile(
   21a4c:	f04f 0320 	mov.w	r3, #32
   21a50:	f3ef 8211 	mrs	r2, BASEPRI
   21a54:	f383 8812 	msr	BASEPRI_MAX, r3
   21a58:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   21a5c:	6803      	ldr	r3, [r0, #0]
   21a5e:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   21a62:	f003 0307 	and.w	r3, r3, #7
   21a66:	2b01      	cmp	r3, #1
   21a68:	d008      	beq.n	21a7c <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   21a6a:	458c      	cmp	ip, r1
   21a6c:	d009      	beq.n	21a82 <set_starting_state+0x36>
		err = -EPERM;
   21a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   21a72:	f382 8811 	msr	BASEPRI, r2
   21a76:	f3bf 8f6f 	isb	sy
}
   21a7a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   21a7c:	6001      	str	r1, [r0, #0]
	int err = 0;
   21a7e:	2000      	movs	r0, #0
   21a80:	e7f7      	b.n	21a72 <set_starting_state+0x26>
		err = -EALREADY;
   21a82:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21a86:	e7f4      	b.n	21a72 <set_starting_state+0x26>

00021a88 <set_on_state>:
	__asm__ volatile(
   21a88:	f04f 0320 	mov.w	r3, #32
   21a8c:	f3ef 8211 	mrs	r2, BASEPRI
   21a90:	f383 8812 	msr	BASEPRI_MAX, r3
   21a94:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   21a98:	6803      	ldr	r3, [r0, #0]
   21a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21a9e:	f043 0302 	orr.w	r3, r3, #2
   21aa2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   21aa4:	f382 8811 	msr	BASEPRI, r2
   21aa8:	f3bf 8f6f 	isb	sy
}
   21aac:	4770      	bx	lr

00021aae <clkstarted_handle>:
{
   21aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ab0:	4606      	mov	r6, r0
   21ab2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   21ab4:	f7ff ff96 	bl	219e4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   21ab8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   21aba:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   21abc:	2300      	movs	r3, #0
   21abe:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   21ac2:	f7ff ffe1 	bl	21a88 <set_on_state>
	if (callback) {
   21ac6:	b11d      	cbz	r5, 21ad0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   21ac8:	463a      	mov	r2, r7
   21aca:	4621      	mov	r1, r4
   21acc:	4630      	mov	r0, r6
   21ace:	47a8      	blx	r5
}
   21ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021ad2 <stop>:
{
   21ad2:	b570      	push	{r4, r5, r6, lr}
   21ad4:	4606      	mov	r6, r0
   21ad6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   21ad8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   21ada:	4621      	mov	r1, r4
   21adc:	f7ff ff82 	bl	219e4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   21ae0:	4629      	mov	r1, r5
   21ae2:	3008      	adds	r0, #8
   21ae4:	f7ff ff99 	bl	21a1a <set_off_state>
	if (err < 0) {
   21ae8:	2800      	cmp	r0, #0
   21aea:	db06      	blt.n	21afa <stop+0x28>
	get_sub_config(dev, type)->stop();
   21aec:	4621      	mov	r1, r4
   21aee:	4630      	mov	r0, r6
   21af0:	f7ff ff7f 	bl	219f2 <get_sub_config>
   21af4:	6843      	ldr	r3, [r0, #4]
   21af6:	4798      	blx	r3
	return 0;
   21af8:	2000      	movs	r0, #0
}
   21afa:	bd70      	pop	{r4, r5, r6, pc}

00021afc <api_stop>:
{
   21afc:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   21afe:	2280      	movs	r2, #128	; 0x80
   21b00:	f7ff ffe7 	bl	21ad2 <stop>
}
   21b04:	bd08      	pop	{r3, pc}

00021b06 <async_start>:
{
   21b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b0a:	4606      	mov	r6, r0
   21b0c:	4690      	mov	r8, r2
   21b0e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   21b10:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   21b12:	4629      	mov	r1, r5
   21b14:	f7ff ff66 	bl	219e4 <get_sub_data>
   21b18:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   21b1a:	9906      	ldr	r1, [sp, #24]
   21b1c:	3008      	adds	r0, #8
   21b1e:	f7ff ff95 	bl	21a4c <set_starting_state>
	if (err < 0) {
   21b22:	2800      	cmp	r0, #0
   21b24:	db09      	blt.n	21b3a <async_start+0x34>
	subdata->cb = cb;
   21b26:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   21b2a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   21b2c:	4629      	mov	r1, r5
   21b2e:	4630      	mov	r0, r6
   21b30:	f7ff ff5f 	bl	219f2 <get_sub_config>
   21b34:	6803      	ldr	r3, [r0, #0]
   21b36:	4798      	blx	r3
	return 0;
   21b38:	2000      	movs	r0, #0
}
   21b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021b3e <api_start>:
{
   21b3e:	b510      	push	{r4, lr}
   21b40:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   21b42:	2480      	movs	r4, #128	; 0x80
   21b44:	9400      	str	r4, [sp, #0]
   21b46:	f7ff ffde 	bl	21b06 <async_start>
}
   21b4a:	b002      	add	sp, #8
   21b4c:	bd10      	pop	{r4, pc}

00021b4e <onoff_started_callback>:
{
   21b4e:	b510      	push	{r4, lr}
   21b50:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   21b52:	b2c9      	uxtb	r1, r1
   21b54:	f7ff ff53 	bl	219fe <get_onoff_manager>
	notify(mgr, 0);
   21b58:	2100      	movs	r1, #0
   21b5a:	47a0      	blx	r4
}
   21b5c:	bd10      	pop	{r4, pc}

00021b5e <hfclk_start>:
{
   21b5e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   21b60:	2001      	movs	r0, #1
   21b62:	f7f7 fb19 	bl	19198 <nrfx_clock_start>
}
   21b66:	bd08      	pop	{r3, pc}

00021b68 <lfclk_start>:
{
   21b68:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   21b6a:	2000      	movs	r0, #0
   21b6c:	f7f7 fb14 	bl	19198 <nrfx_clock_start>
}
   21b70:	bd08      	pop	{r3, pc}

00021b72 <hfclk_stop>:
{
   21b72:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   21b74:	2001      	movs	r0, #1
   21b76:	f7f7 fb41 	bl	191fc <nrfx_clock_stop>
}
   21b7a:	bd08      	pop	{r3, pc}

00021b7c <lfclk_stop>:
{
   21b7c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   21b7e:	2000      	movs	r0, #0
   21b80:	f7f7 fb3c 	bl	191fc <nrfx_clock_stop>
}
   21b84:	bd08      	pop	{r3, pc}

00021b86 <blocking_start_callback>:
{
   21b86:	b508      	push	{r3, lr}
   21b88:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   21b8a:	f7fb fb73 	bl	1d274 <z_impl_k_sem_give>
}
   21b8e:	bd08      	pop	{r3, pc}

00021b90 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   21b90:	f010 0f10 	tst.w	r0, #16
   21b94:	d104      	bne.n	21ba0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   21b96:	f010 0f20 	tst.w	r0, #32
   21b9a:	d103      	bne.n	21ba4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   21b9c:	2000      	movs	r0, #0
   21b9e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   21ba0:	2003      	movs	r0, #3
   21ba2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   21ba4:	2001      	movs	r0, #1
}
   21ba6:	4770      	bx	lr

00021ba8 <gpio_nrfx_port_get_raw>:
	return port->config;
   21ba8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21baa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   21bac:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   21bae:	600b      	str	r3, [r1, #0]
}
   21bb0:	2000      	movs	r0, #0
   21bb2:	4770      	bx	lr

00021bb4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   21bb4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21bb6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   21bb8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   21bba:	4042      	eors	r2, r0
   21bbc:	400a      	ands	r2, r1
   21bbe:	4042      	eors	r2, r0
    p_reg->OUT = value;
   21bc0:	605a      	str	r2, [r3, #4]
}
   21bc2:	2000      	movs	r0, #0
   21bc4:	4770      	bx	lr

00021bc6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   21bc6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21bc8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   21bca:	6099      	str	r1, [r3, #8]
}
   21bcc:	2000      	movs	r0, #0
   21bce:	4770      	bx	lr

00021bd0 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   21bd0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21bd2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   21bd4:	60d9      	str	r1, [r3, #12]
}
   21bd6:	2000      	movs	r0, #0
   21bd8:	4770      	bx	lr

00021bda <gpio_nrfx_port_toggle_bits>:
	return port->config;
   21bda:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21bdc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   21bde:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   21be0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   21be2:	6053      	str	r3, [r2, #4]
}
   21be4:	2000      	movs	r0, #0
   21be6:	4770      	bx	lr

00021be8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   21be8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   21bec:	d007      	beq.n	21bfe <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   21bee:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   21bf2:	d00d      	beq.n	21c10 <get_trigger+0x28>
   21bf4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   21bf8:	d008      	beq.n	21c0c <get_trigger+0x24>
   21bfa:	2001      	movs	r0, #1
}
   21bfc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   21bfe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   21c02:	d001      	beq.n	21c08 <get_trigger+0x20>
   21c04:	2005      	movs	r0, #5
   21c06:	4770      	bx	lr
   21c08:	2004      	movs	r0, #4
   21c0a:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   21c0c:	2002      	movs	r0, #2
   21c0e:	4770      	bx	lr
   21c10:	2003      	movs	r0, #3
   21c12:	4770      	bx	lr

00021c14 <gpio_nrfx_manage_callback>:
{
   21c14:	b410      	push	{r4}
	return port->data;
   21c16:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21c18:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
   21c1c:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   21c1e:	b1fb      	cbz	r3, 21c60 <gpio_nrfx_manage_callback+0x4c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21c20:	2000      	movs	r0, #0
   21c22:	e00d      	b.n	21c40 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
   21c24:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   21c26:	6063      	str	r3, [r4, #4]
	return list->tail;
   21c28:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   21c2c:	4281      	cmp	r1, r0
   21c2e:	d112      	bne.n	21c56 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   21c30:	f8cc 3004 	str.w	r3, [ip, #4]
}
   21c34:	e00f      	b.n	21c56 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   21c36:	f8cc 0004 	str.w	r0, [ip, #4]
}
   21c3a:	e00c      	b.n	21c56 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21c3c:	4618      	mov	r0, r3
   21c3e:	681b      	ldr	r3, [r3, #0]
   21c40:	b163      	cbz	r3, 21c5c <gpio_nrfx_manage_callback+0x48>
   21c42:	4299      	cmp	r1, r3
   21c44:	d1fa      	bne.n	21c3c <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
   21c46:	2800      	cmp	r0, #0
   21c48:	d0ec      	beq.n	21c24 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   21c4a:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   21c4c:	6003      	str	r3, [r0, #0]
	return list->tail;
   21c4e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   21c52:	4299      	cmp	r1, r3
   21c54:	d0ef      	beq.n	21c36 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
   21c56:	2300      	movs	r3, #0
   21c58:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21c5a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   21c5c:	b903      	cbnz	r3, 21c60 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
   21c5e:	b162      	cbz	r2, 21c7a <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
   21c60:	b172      	cbz	r2, 21c80 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
   21c62:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   21c64:	600b      	str	r3, [r1, #0]
	list->head = node;
   21c66:	6061      	str	r1, [r4, #4]
	return list->tail;
   21c68:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
   21c6c:	b10b      	cbz	r3, 21c72 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   21c6e:	2000      	movs	r0, #0
   21c70:	e007      	b.n	21c82 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
   21c72:	f8cc 1004 	str.w	r1, [ip, #4]
   21c76:	2000      	movs	r0, #0
}
   21c78:	e003      	b.n	21c82 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
   21c7a:	f06f 0015 	mvn.w	r0, #21
   21c7e:	e000      	b.n	21c82 <gpio_nrfx_manage_callback+0x6e>
	return 0;
   21c80:	2000      	movs	r0, #0
}
   21c82:	bc10      	pop	{r4}
   21c84:	4770      	bx	lr

00021c86 <nrfx_gpio_handler>:
{
   21c86:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   21c88:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   21c8c:	0940      	lsrs	r0, r0, #5
   21c8e:	f7f3 fb5d 	bl	1534c <get_dev>
	if (port == NULL) {
   21c92:	b1d8      	cbz	r0, 21ccc <nrfx_gpio_handler+0x46>
   21c94:	4606      	mov	r6, r0
	return port->data;
   21c96:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   21c98:	2501      	movs	r5, #1
   21c9a:	40a5      	lsls	r5, r4
	return list->head;
   21c9c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21c9e:	b119      	cbz	r1, 21ca8 <nrfx_gpio_handler+0x22>
   21ca0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   21ca2:	b149      	cbz	r1, 21cb8 <nrfx_gpio_handler+0x32>
	return node->next;
   21ca4:	680c      	ldr	r4, [r1, #0]
   21ca6:	e007      	b.n	21cb8 <nrfx_gpio_handler+0x32>
   21ca8:	460c      	mov	r4, r1
   21caa:	e005      	b.n	21cb8 <nrfx_gpio_handler+0x32>
   21cac:	b164      	cbz	r4, 21cc8 <nrfx_gpio_handler+0x42>
   21cae:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   21cb0:	b104      	cbz	r4, 21cb4 <nrfx_gpio_handler+0x2e>
	return node->next;
   21cb2:	6823      	ldr	r3, [r4, #0]
   21cb4:	4621      	mov	r1, r4
   21cb6:	461c      	mov	r4, r3
   21cb8:	b141      	cbz	r1, 21ccc <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   21cba:	688a      	ldr	r2, [r1, #8]
   21cbc:	402a      	ands	r2, r5
   21cbe:	d0f5      	beq.n	21cac <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   21cc0:	684b      	ldr	r3, [r1, #4]
   21cc2:	4630      	mov	r0, r6
   21cc4:	4798      	blx	r3
   21cc6:	e7f1      	b.n	21cac <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21cc8:	4623      	mov	r3, r4
   21cca:	e7f3      	b.n	21cb4 <nrfx_gpio_handler+0x2e>
}
   21ccc:	bd70      	pop	{r4, r5, r6, pc}

00021cce <endtx_isr>:
	return dev->config;
   21cce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21cd0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   21cd2:	f04f 0120 	mov.w	r1, #32
   21cd6:	f3ef 8211 	mrs	r2, BASEPRI
   21cda:	f381 8812 	msr	BASEPRI_MAX, r1
   21cde:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21ce2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   21ce6:	b131      	cbz	r1, 21cf6 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21ce8:	2100      	movs	r1, #0
   21cea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   21cee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21cf2:	2101      	movs	r1, #1
   21cf4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   21cf6:	f382 8811 	msr	BASEPRI, r2
   21cfa:	f3bf 8f6f 	isb	sy
}
   21cfe:	4770      	bx	lr

00021d00 <uarte_nrfx_isr_int>:
{
   21d00:	b538      	push	{r3, r4, r5, lr}
   21d02:	4604      	mov	r4, r0
	return dev->config;
   21d04:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21d06:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   21d08:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   21d0c:	f413 7f80 	tst.w	r3, #256	; 0x100
   21d10:	d002      	beq.n	21d18 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21d12:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   21d16:	b9db      	cbnz	r3, 21d50 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   21d18:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21d1a:	685b      	ldr	r3, [r3, #4]
   21d1c:	f013 0f10 	tst.w	r3, #16
   21d20:	d015      	beq.n	21d4e <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   21d22:	f04f 0220 	mov.w	r2, #32
   21d26:	f3ef 8311 	mrs	r3, BASEPRI
   21d2a:	f382 8812 	msr	BASEPRI_MAX, r2
   21d2e:	f3bf 8f6f 	isb	sy
   21d32:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   21d36:	b112      	cbz	r2, 21d3e <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   21d38:	2200      	movs	r2, #0
   21d3a:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   21d3e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   21d42:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   21d46:	f383 8811 	msr	BASEPRI, r3
   21d4a:	f3bf 8f6f 	isb	sy
}
   21d4e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   21d50:	f7ff ffbd 	bl	21cce <endtx_isr>
   21d54:	e7e0      	b.n	21d18 <uarte_nrfx_isr_int+0x18>

00021d56 <uarte_nrfx_configure>:
{
   21d56:	b530      	push	{r4, r5, lr}
   21d58:	b083      	sub	sp, #12
   21d5a:	4605      	mov	r5, r0
   21d5c:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   21d5e:	794b      	ldrb	r3, [r1, #5]
   21d60:	2b01      	cmp	r3, #1
   21d62:	d006      	beq.n	21d72 <uarte_nrfx_configure+0x1c>
   21d64:	2b03      	cmp	r3, #3
   21d66:	d011      	beq.n	21d8c <uarte_nrfx_configure+0x36>
   21d68:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   21d6c:	4618      	mov	r0, r3
   21d6e:	b003      	add	sp, #12
   21d70:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   21d72:	2300      	movs	r3, #0
   21d74:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21d78:	79a3      	ldrb	r3, [r4, #6]
   21d7a:	2b03      	cmp	r3, #3
   21d7c:	d139      	bne.n	21df2 <uarte_nrfx_configure+0x9c>
	switch (cfg->flow_ctrl) {
   21d7e:	79e3      	ldrb	r3, [r4, #7]
   21d80:	b143      	cbz	r3, 21d94 <uarte_nrfx_configure+0x3e>
   21d82:	2b01      	cmp	r3, #1
   21d84:	d010      	beq.n	21da8 <uarte_nrfx_configure+0x52>
   21d86:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21d8a:	e7ef      	b.n	21d6c <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   21d8c:	2310      	movs	r3, #16
   21d8e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   21d92:	e7f1      	b.n	21d78 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   21d94:	2300      	movs	r3, #0
   21d96:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   21d9a:	7923      	ldrb	r3, [r4, #4]
   21d9c:	b143      	cbz	r3, 21db0 <uarte_nrfx_configure+0x5a>
   21d9e:	2b02      	cmp	r3, #2
   21da0:	d023      	beq.n	21dea <uarte_nrfx_configure+0x94>
   21da2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21da6:	e7e1      	b.n	21d6c <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   21da8:	2301      	movs	r3, #1
   21daa:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   21dae:	e7f4      	b.n	21d9a <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   21db0:	2300      	movs	r3, #0
   21db2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   21db6:	6821      	ldr	r1, [r4, #0]
   21db8:	4628      	mov	r0, r5
   21dba:	f7f3 fc75 	bl	156a8 <baudrate_set>
   21dbe:	4603      	mov	r3, r0
   21dc0:	b9d0      	cbnz	r0, 21df8 <uarte_nrfx_configure+0xa2>
	return dev->config;
   21dc2:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   21dc4:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21dc6:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   21dca:	f89d c006 	ldrb.w	ip, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   21dce:	f89d 2004 	ldrb.w	r2, [sp, #4]
   21dd2:	ea41 010c 	orr.w	r1, r1, ip
   21dd6:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21dd8:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   21ddc:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   21dde:	3204      	adds	r2, #4
   21de0:	e894 0003 	ldmia.w	r4, {r0, r1}
   21de4:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   21de8:	e7c0      	b.n	21d6c <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   21dea:	230e      	movs	r3, #14
   21dec:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   21df0:	e7e1      	b.n	21db6 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   21df2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21df6:	e7b9      	b.n	21d6c <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   21df8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   21dfc:	e7b6      	b.n	21d6c <uarte_nrfx_configure+0x16>

00021dfe <uarte_nrfx_config_get>:
{
   21dfe:	460a      	mov	r2, r1
	return dev->data;
   21e00:	6903      	ldr	r3, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   21e02:	3304      	adds	r3, #4
   21e04:	e893 0003 	ldmia.w	r3, {r0, r1}
   21e08:	e882 0003 	stmia.w	r2, {r0, r1}
}
   21e0c:	2000      	movs	r0, #0
   21e0e:	4770      	bx	lr

00021e10 <uarte_nrfx_err_check>:
	return dev->config;
   21e10:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21e12:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   21e14:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   21e18:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   21e1c:	4770      	bx	lr

00021e1e <is_tx_ready>:
	return dev->config;
   21e1e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21e20:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   21e22:	685b      	ldr	r3, [r3, #4]
   21e24:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21e28:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   21e2c:	b929      	cbnz	r1, 21e3a <is_tx_ready+0x1c>
   21e2e:	b933      	cbnz	r3, 21e3e <is_tx_ready+0x20>
   21e30:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   21e34:	b92b      	cbnz	r3, 21e42 <is_tx_ready+0x24>
   21e36:	2000      	movs	r0, #0
   21e38:	4770      	bx	lr
   21e3a:	2001      	movs	r0, #1
   21e3c:	4770      	bx	lr
   21e3e:	2000      	movs	r0, #0
   21e40:	4770      	bx	lr
   21e42:	2001      	movs	r0, #1
}
   21e44:	4770      	bx	lr

00021e46 <uarte_enable>:
	return dev->config;
   21e46:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21e48:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21e4a:	2208      	movs	r2, #8
   21e4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   21e50:	4770      	bx	lr

00021e52 <tx_start>:
{
   21e52:	b510      	push	{r4, lr}
	return dev->config;
   21e54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21e56:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21e58:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21e5c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21e60:	2300      	movs	r3, #0
   21e62:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   21e66:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   21e6a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   21e6e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   21e72:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21e74:	685b      	ldr	r3, [r3, #4]
   21e76:	f013 0f10 	tst.w	r3, #16
   21e7a:	d102      	bne.n	21e82 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21e7c:	2301      	movs	r3, #1
   21e7e:	60a3      	str	r3, [r4, #8]
}
   21e80:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   21e82:	2101      	movs	r1, #1
   21e84:	f7ff ffdf 	bl	21e46 <uarte_enable>
    p_reg->INTENSET = mask;
   21e88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   21e8c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   21e90:	e7f4      	b.n	21e7c <tx_start+0x2a>

00021e92 <uarte_nrfx_poll_in>:
{
   21e92:	b410      	push	{r4}
	return dev->data;
   21e94:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   21e96:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   21e98:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21e9a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   21e9e:	b152      	cbz	r2, 21eb6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   21ea0:	7c62      	ldrb	r2, [r4, #17]
   21ea2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21ea4:	2000      	movs	r0, #0
   21ea6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   21eaa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21eae:	2201      	movs	r2, #1
   21eb0:	601a      	str	r2, [r3, #0]
}
   21eb2:	bc10      	pop	{r4}
   21eb4:	4770      	bx	lr
		return -1;
   21eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21eba:	e7fa      	b.n	21eb2 <uarte_nrfx_poll_in+0x20>

00021ebc <wait_tx_ready>:
{
   21ebc:	b570      	push	{r4, r5, r6, lr}
   21ebe:	4606      	mov	r6, r0
   21ec0:	e014      	b.n	21eec <wait_tx_ready+0x30>
		if (res) {
   21ec2:	b17d      	cbz	r5, 21ee4 <wait_tx_ready+0x28>
	__asm__ volatile(
   21ec4:	f04f 0320 	mov.w	r3, #32
   21ec8:	f3ef 8411 	mrs	r4, BASEPRI
   21ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   21ed0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   21ed4:	4630      	mov	r0, r6
   21ed6:	f7ff ffa2 	bl	21e1e <is_tx_ready>
   21eda:	b9a0      	cbnz	r0, 21f06 <wait_tx_ready+0x4a>
	__asm__ volatile(
   21edc:	f384 8811 	msr	BASEPRI, r4
   21ee0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   21ee4:	2021      	movs	r0, #33	; 0x21
   21ee6:	2100      	movs	r1, #0
   21ee8:	f7fb ff3c 	bl	1dd64 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   21eec:	2464      	movs	r4, #100	; 0x64
   21eee:	4630      	mov	r0, r6
   21ef0:	f7ff ff95 	bl	21e1e <is_tx_ready>
   21ef4:	4605      	mov	r5, r0
   21ef6:	2800      	cmp	r0, #0
   21ef8:	d1e3      	bne.n	21ec2 <wait_tx_ready+0x6>
   21efa:	2001      	movs	r0, #1
   21efc:	f001 f8c9 	bl	23092 <nrfx_busy_wait>
   21f00:	3c01      	subs	r4, #1
   21f02:	d1f4      	bne.n	21eee <wait_tx_ready+0x32>
   21f04:	e7dd      	b.n	21ec2 <wait_tx_ready+0x6>
}
   21f06:	4620      	mov	r0, r4
   21f08:	bd70      	pop	{r4, r5, r6, pc}

00021f0a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   21f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f0c:	4604      	mov	r4, r0
	return dev->config;
   21f0e:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   21f10:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   21f12:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   21f14:	2100      	movs	r1, #0
   21f16:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   21f1a:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   21f1c:	f7f3 fb3e 	bl	1559c <uarte_nrfx_pins_configure>
	return dev->data;
   21f20:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   21f22:	3104      	adds	r1, #4
   21f24:	4620      	mov	r0, r4
   21f26:	f7ff ff16 	bl	21d56 <uarte_nrfx_configure>
	if (err) {
   21f2a:	4604      	mov	r4, r0
   21f2c:	bb68      	cbnz	r0, 21f8a <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   21f2e:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   21f30:	f013 0f02 	tst.w	r3, #2
   21f34:	d12b      	bne.n	21f8e <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21f36:	2308      	movs	r3, #8
   21f38:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   21f3c:	7a33      	ldrb	r3, [r6, #8]
   21f3e:	b95b      	cbnz	r3, 21f58 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f40:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   21f44:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   21f48:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21f4c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21f50:	2301      	movs	r3, #1
   21f52:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f56:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   21f58:	6873      	ldr	r3, [r6, #4]
   21f5a:	f013 0f02 	tst.w	r3, #2
   21f5e:	d103      	bne.n	21f68 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   21f60:	f44f 7380 	mov.w	r3, #256	; 0x100
   21f64:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21f68:	6873      	ldr	r3, [r6, #4]
   21f6a:	f013 0f10 	tst.w	r3, #16
   21f6e:	d003      	beq.n	21f78 <uarte_instance_init+0x6e>
   21f70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   21f74:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   21f78:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21f7a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21f7e:	2300      	movs	r3, #0
   21f80:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21f84:	2301      	movs	r3, #1
   21f86:	60ab      	str	r3, [r5, #8]
   21f88:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   21f8a:	4620      	mov	r0, r4
   21f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   21f8e:	4639      	mov	r1, r7
   21f90:	4628      	mov	r0, r5
   21f92:	f7f3 fc69 	bl	15868 <endtx_stoptx_ppi_init>
		if (err < 0) {
   21f96:	2800      	cmp	r0, #0
   21f98:	dacd      	bge.n	21f36 <uarte_instance_init+0x2c>
			return err;
   21f9a:	4604      	mov	r4, r0
   21f9c:	e7f5      	b.n	21f8a <uarte_instance_init+0x80>

00021f9e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   21f9e:	b510      	push	{r4, lr}
   21fa0:	4604      	mov	r4, r0
   21fa2:	2200      	movs	r2, #0
   21fa4:	2101      	movs	r1, #1
   21fa6:	2008      	movs	r0, #8
   21fa8:	f7f1 feb6 	bl	13d18 <z_arm_irq_priority_set>
   21fac:	2008      	movs	r0, #8
   21fae:	f7f1 fe97 	bl	13ce0 <arch_irq_enable>
   21fb2:	2100      	movs	r1, #0
   21fb4:	4620      	mov	r0, r4
   21fb6:	f7ff ffa8 	bl	21f0a <uarte_instance_init>
   21fba:	bd10      	pop	{r4, pc}

00021fbc <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   21fbc:	2000      	movs	r0, #0
   21fbe:	4770      	bx	lr

00021fc0 <entropy_cc3xx_rng_get_entropy>:
{
   21fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fc2:	b083      	sub	sp, #12
   21fc4:	460f      	mov	r7, r1
   21fc6:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   21fc8:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   21fcc:	2400      	movs	r4, #0
	int res = -EINVAL;
   21fce:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   21fd2:	e009      	b.n	21fe8 <entropy_cc3xx_rng_get_entropy+0x28>
			res = spm_request_random_number(buffer + offset,
   21fd4:	aa01      	add	r2, sp, #4
   21fd6:	4629      	mov	r1, r5
   21fd8:	1938      	adds	r0, r7, r4
   21fda:	f7fe fc14 	bl	20806 <spm_request_random_number>
		if (olen != chunk_size) {
   21fde:	9b01      	ldr	r3, [sp, #4]
   21fe0:	42ab      	cmp	r3, r5
   21fe2:	d109      	bne.n	21ff8 <entropy_cc3xx_rng_get_entropy+0x38>
		if (res != 0) {
   21fe4:	b950      	cbnz	r0, 21ffc <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   21fe6:	442c      	add	r4, r5
	while (offset < length) {
   21fe8:	42a6      	cmp	r6, r4
   21fea:	d907      	bls.n	21ffc <entropy_cc3xx_rng_get_entropy+0x3c>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   21fec:	1b33      	subs	r3, r6, r4
   21fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21ff2:	d2ef      	bcs.n	21fd4 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   21ff4:	461d      	mov	r5, r3
   21ff6:	e7ed      	b.n	21fd4 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   21ff8:	f06f 0015 	mvn.w	r0, #21
}
   21ffc:	b003      	add	sp, #12
   21ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022000 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   22000:	4770      	bx	lr

00022002 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   22002:	1a40      	subs	r0, r0, r1
}
   22004:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   22008:	4770      	bx	lr

0002200a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2200a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2200e:	009b      	lsls	r3, r3, #2
   22010:	b29b      	uxth	r3, r3
   22012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22016:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2201a:	2200      	movs	r2, #0
   2201c:	601a      	str	r2, [r3, #0]
   2201e:	681b      	ldr	r3, [r3, #0]
}
   22020:	4770      	bx	lr

00022022 <absolute_time_to_cc>:
}
   22022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   22026:	4770      	bx	lr

00022028 <full_int_lock>:
	__asm__ volatile(
   22028:	f04f 0320 	mov.w	r3, #32
   2202c:	f3ef 8011 	mrs	r0, BASEPRI
   22030:	f383 8812 	msr	BASEPRI_MAX, r3
   22034:	f3bf 8f6f 	isb	sy
}
   22038:	4770      	bx	lr

0002203a <full_int_unlock>:
	__asm__ volatile(
   2203a:	f380 8811 	msr	BASEPRI, r0
   2203e:	f3bf 8f6f 	isb	sy
}
   22042:	4770      	bx	lr

00022044 <set_absolute_alarm>:
{
   22044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22046:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22048:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2204c:	f7f3 fc4c 	bl	158e8 <get_comparator>
   22050:	4607      	mov	r7, r0
   22052:	e019      	b.n	22088 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   22054:	2013      	movs	r0, #19
   22056:	f002 fc05 	bl	24864 <z_impl_k_busy_wait>
}
   2205a:	e022      	b.n	220a2 <set_absolute_alarm+0x5e>
		event_clear(chan);
   2205c:	4630      	mov	r0, r6
   2205e:	f7ff ffd4 	bl	2200a <event_clear>
		event_enable(chan);
   22062:	4630      	mov	r0, r6
   22064:	f7f3 fc48 	bl	158f8 <event_enable>
		set_comparator(chan, cc_val);
   22068:	4629      	mov	r1, r5
   2206a:	4630      	mov	r0, r6
   2206c:	f7f3 fc32 	bl	158d4 <set_comparator>
		now2 = counter();
   22070:	f7f3 fc56 	bl	15920 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   22074:	4284      	cmp	r4, r0
   22076:	d01e      	beq.n	220b6 <set_absolute_alarm+0x72>
   22078:	1c81      	adds	r1, r0, #2
   2207a:	4628      	mov	r0, r5
   2207c:	f7ff ffc1 	bl	22002 <counter_sub>
	} while ((now2 != now) &&
   22080:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22084:	d917      	bls.n	220b6 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   22086:	462f      	mov	r7, r5
		now = counter();
   22088:	f7f3 fc4a 	bl	15920 <counter>
   2208c:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2208e:	4601      	mov	r1, r0
   22090:	4630      	mov	r0, r6
   22092:	f7f3 fc1f 	bl	158d4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   22096:	4621      	mov	r1, r4
   22098:	4638      	mov	r0, r7
   2209a:	f7ff ffb2 	bl	22002 <counter_sub>
   2209e:	2801      	cmp	r0, #1
   220a0:	d0d8      	beq.n	22054 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   220a2:	1ca7      	adds	r7, r4, #2
   220a4:	4639      	mov	r1, r7
   220a6:	4628      	mov	r0, r5
   220a8:	f7ff ffab 	bl	22002 <counter_sub>
   220ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   220b0:	d9d4      	bls.n	2205c <set_absolute_alarm+0x18>
			cc_val = now + 2;
   220b2:	463d      	mov	r5, r7
   220b4:	e7d2      	b.n	2205c <set_absolute_alarm+0x18>
}
   220b6:	4628      	mov	r0, r5
   220b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000220ba <compare_set>:
{
   220ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   220bc:	b083      	sub	sp, #12
   220be:	4604      	mov	r4, r0
   220c0:	4617      	mov	r7, r2
   220c2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   220c4:	f7f3 fc32 	bl	1592c <compare_int_lock>
   220c8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   220ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   220cc:	9301      	str	r3, [sp, #4]
   220ce:	9b08      	ldr	r3, [sp, #32]
   220d0:	9300      	str	r3, [sp, #0]
   220d2:	463a      	mov	r2, r7
   220d4:	462b      	mov	r3, r5
   220d6:	4620      	mov	r0, r4
   220d8:	f7f3 fd08 	bl	15aec <compare_set_nolocks>
   220dc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   220de:	4631      	mov	r1, r6
   220e0:	4620      	mov	r0, r4
   220e2:	f7f3 fc7d 	bl	159e0 <compare_int_unlock>
}
   220e6:	4628      	mov	r0, r5
   220e8:	b003      	add	sp, #12
   220ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000220ec <sys_clock_cycle_get_32>:
{
   220ec:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   220ee:	f7f3 fcdd 	bl	15aac <z_nrf_rtc_timer_read>
}
   220f2:	bd08      	pop	{r3, pc}

000220f4 <sleeping_thread_init>:
{
   220f4:	b508      	push	{r3, lr}
	k_sem_init(&thread->sem, 0, 1);
   220f6:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   220f8:	2201      	movs	r2, #1
   220fa:	2100      	movs	r1, #0
   220fc:	f002 f8de 	bl	242bc <z_impl_k_sem_init>
}
   22100:	bd08      	pop	{r3, pc}

00022102 <nrf_modem_os_busywait>:
{
   22102:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   22104:	f002 fbae 	bl	24864 <z_impl_k_busy_wait>
}
   22108:	bd08      	pop	{r3, pc}

0002210a <nrf_modem_os_timedwait>:
{
   2210a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2210e:	b088      	sub	sp, #32
   22110:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   22112:	f002 fba3 	bl	2485c <z_impl_k_uptime_ticks>
   22116:	4602      	mov	r2, r0
   22118:	014b      	lsls	r3, r1, #5
   2211a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   2211e:	0140      	lsls	r0, r0, #5
   22120:	1a80      	subs	r0, r0, r2
   22122:	eb63 0301 	sbc.w	r3, r3, r1
   22126:	009d      	lsls	r5, r3, #2
   22128:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
   2212c:	0080      	lsls	r0, r0, #2
   2212e:	1880      	adds	r0, r0, r2
   22130:	eb45 0501 	adc.w	r5, r5, r1
   22134:	00ed      	lsls	r5, r5, #3
   22136:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
   2213a:	f3c0 3010 	ubfx	r0, r0, #12, #17
   2213e:	0bee      	lsrs	r6, r5, #15
   22140:	ea40 4545 	orr.w	r5, r0, r5, lsl #17
	if (*timeout == 0) {
   22144:	6823      	ldr	r3, [r4, #0]
   22146:	2b00      	cmp	r3, #0
   22148:	d052      	beq.n	221f0 <nrf_modem_os_timedwait+0xe6>
	if (*timeout < 0) {
   2214a:	2b00      	cmp	r3, #0
   2214c:	db54      	blt.n	221f8 <nrf_modem_os_timedwait+0xee>
	sleeping_thread_init(&thread);
   2214e:	a801      	add	r0, sp, #4
   22150:	f7ff ffd0 	bl	220f4 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   22154:	a801      	add	r0, sp, #4
   22156:	f7f3 fe7d 	bl	15e54 <sleeping_thread_add>
   2215a:	2800      	cmp	r0, #0
   2215c:	d056      	beq.n	2220c <nrf_modem_os_timedwait+0x102>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2215e:	6820      	ldr	r0, [r4, #0]
   22160:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22164:	d04c      	beq.n	22200 <nrf_modem_os_timedwait+0xf6>
   22166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2216a:	17c1      	asrs	r1, r0, #31
   2216c:	03c9      	lsls	r1, r1, #15
   2216e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   22172:	03c0      	lsls	r0, r0, #15
   22174:	f240 33e7 	movw	r3, #999	; 0x3e7
   22178:	18c0      	adds	r0, r0, r3
   2217a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2217e:	f04f 0300 	mov.w	r3, #0
   22182:	f141 0100 	adc.w	r1, r1, #0
   22186:	f7ee fe3b 	bl	10e00 <__aeabi_uldivmod>
   2218a:	4602      	mov	r2, r0
   2218c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2218e:	a802      	add	r0, sp, #8
   22190:	f7fb f898 	bl	1d2c4 <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   22194:	a801      	add	r0, sp, #4
   22196:	f7f3 fe81 	bl	15e9c <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   2219a:	6827      	ldr	r7, [r4, #0]
   2219c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   221a0:	d038      	beq.n	22214 <nrf_modem_os_timedwait+0x10a>
	remaining = *timeout - k_uptime_delta(&start);
   221a2:	ea4f 78e7 	mov.w	r8, r7, asr #31
	return z_impl_k_uptime_ticks();
   221a6:	f002 fb59 	bl	2485c <z_impl_k_uptime_ticks>
   221aa:	4602      	mov	r2, r0
   221ac:	014b      	lsls	r3, r1, #5
   221ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   221b2:	0140      	lsls	r0, r0, #5
   221b4:	1a80      	subs	r0, r0, r2
   221b6:	eb63 0301 	sbc.w	r3, r3, r1
   221ba:	009b      	lsls	r3, r3, #2
   221bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   221c0:	0080      	lsls	r0, r0, #2
   221c2:	1880      	adds	r0, r0, r2
   221c4:	eb43 0101 	adc.w	r1, r3, r1
   221c8:	00c9      	lsls	r1, r1, #3
   221ca:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
   221ce:	f3c0 3010 	ubfx	r0, r0, #12, #17
   221d2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   221d6:	0bc9      	lsrs	r1, r1, #15
	delta = uptime - *reftime;
   221d8:	1b40      	subs	r0, r0, r5
   221da:	eb61 0606 	sbc.w	r6, r1, r6
   221de:	1a38      	subs	r0, r7, r0
   221e0:	eb68 0606 	sbc.w	r6, r8, r6
	*timeout = remaining > 0 ? remaining : 0;
   221e4:	2e00      	cmp	r6, #0
   221e6:	db0f      	blt.n	22208 <nrf_modem_os_timedwait+0xfe>
   221e8:	6020      	str	r0, [r4, #0]
	if (*timeout == 0) {
   221ea:	b1a8      	cbz	r0, 22218 <nrf_modem_os_timedwait+0x10e>
	return 0;
   221ec:	2000      	movs	r0, #0
   221ee:	e00e      	b.n	2220e <nrf_modem_os_timedwait+0x104>
	z_impl_k_yield();
   221f0:	f7fb fd28 	bl	1dc44 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   221f4:	2074      	movs	r0, #116	; 0x74
   221f6:	e00a      	b.n	2220e <nrf_modem_os_timedwait+0x104>
		*timeout = SYS_FOREVER_MS;
   221f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   221fc:	6023      	str	r3, [r4, #0]
   221fe:	e7a6      	b.n	2214e <nrf_modem_os_timedwait+0x44>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   22200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22204:	4613      	mov	r3, r2
   22206:	e7c2      	b.n	2218e <nrf_modem_os_timedwait+0x84>
	*timeout = remaining > 0 ? remaining : 0;
   22208:	2000      	movs	r0, #0
   2220a:	e7ed      	b.n	221e8 <nrf_modem_os_timedwait+0xde>
		return 0;
   2220c:	2000      	movs	r0, #0
}
   2220e:	b008      	add	sp, #32
   22210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   22214:	2000      	movs	r0, #0
   22216:	e7fa      	b.n	2220e <nrf_modem_os_timedwait+0x104>
		return NRF_ETIMEDOUT;
   22218:	2074      	movs	r0, #116	; 0x74
   2221a:	e7f8      	b.n	2220e <nrf_modem_os_timedwait+0x104>

0002221c <nrf_modem_os_errno_set>:
{
   2221c:	b510      	push	{r4, lr}
   2221e:	4604      	mov	r4, r0
	errno = err_code;
   22220:	f7fe fb9d 	bl	2095e <__errno>
   22224:	6004      	str	r4, [r0, #0]
}
   22226:	bd10      	pop	{r4, pc}

00022228 <nrf_modem_os_is_in_isr>:
{
   22228:	b508      	push	{r3, lr}
	return k_is_in_isr();
   2222a:	f001 ff5a 	bl	240e2 <k_is_in_isr>
}
   2222e:	bd08      	pop	{r3, pc}

00022230 <nrf_modem_os_sem_give>:
{
   22230:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   22232:	f7fb f81f 	bl	1d274 <z_impl_k_sem_give>
}
   22236:	bd08      	pop	{r3, pc}

00022238 <nrf_modem_os_sem_take>:
{
   22238:	b510      	push	{r4, lr}
   2223a:	4604      	mov	r4, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2223c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   22240:	d01b      	beq.n	2227a <nrf_modem_os_sem_take+0x42>
   22242:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   22246:	17d9      	asrs	r1, r3, #31
   22248:	03c9      	lsls	r1, r1, #15
   2224a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   2224e:	03db      	lsls	r3, r3, #15
   22250:	f240 30e7 	movw	r0, #999	; 0x3e7
   22254:	1818      	adds	r0, r3, r0
   22256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2225a:	f04f 0300 	mov.w	r3, #0
   2225e:	f141 0100 	adc.w	r1, r1, #0
   22262:	f7ee fdcd 	bl	10e00 <__aeabi_uldivmod>
   22266:	4602      	mov	r2, r0
   22268:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2226a:	4620      	mov	r0, r4
   2226c:	f7fb f82a 	bl	1d2c4 <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   22270:	f110 0f0b 	cmn.w	r0, #11
   22274:	d005      	beq.n	22282 <nrf_modem_os_sem_take+0x4a>
	return 0;
   22276:	2000      	movs	r0, #0
}
   22278:	bd10      	pop	{r4, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2227a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2227e:	4613      	mov	r3, r2
   22280:	e7f3      	b.n	2226a <nrf_modem_os_sem_take+0x32>
		return NRF_ETIMEDOUT;
   22282:	2074      	movs	r0, #116	; 0x74
   22284:	e7f8      	b.n	22278 <nrf_modem_os_sem_take+0x40>

00022286 <read_task_create>:
{
   22286:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   22288:	2200      	movs	r2, #0
   2228a:	2106      	movs	r1, #6
   2228c:	201c      	movs	r0, #28
   2228e:	f7f1 fd43 	bl	13d18 <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   22292:	201c      	movs	r0, #28
   22294:	f7f1 fd24 	bl	13ce0 <arch_irq_enable>
}
   22298:	bd08      	pop	{r3, pc}

0002229a <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   2229a:	2000      	movs	r0, #0
   2229c:	4770      	bx	lr

0002229e <z_to_nrf_ipv4>:
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2229e:	2310      	movs	r3, #16
   222a0:	700b      	strb	r3, [r1, #0]
	nrf_out->sin_port = ptr->sin_port;
   222a2:	8843      	ldrh	r3, [r0, #2]
   222a4:	810b      	strh	r3, [r1, #8]
	nrf_out->sin_family = NRF_AF_INET;
   222a6:	2302      	movs	r3, #2
   222a8:	604b      	str	r3, [r1, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   222aa:	6843      	ldr	r3, [r0, #4]
   222ac:	60cb      	str	r3, [r1, #12]
}
   222ae:	4770      	bx	lr

000222b0 <nrf_to_z_ipv4>:
	ptr->sin_port = nrf_in->sin_port;
   222b0:	890b      	ldrh	r3, [r1, #8]
   222b2:	8043      	strh	r3, [r0, #2]
	ptr->sin_family = AF_INET;
   222b4:	2301      	movs	r3, #1
   222b6:	8003      	strh	r3, [r0, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   222b8:	68cb      	ldr	r3, [r1, #12]
   222ba:	6043      	str	r3, [r0, #4]
}
   222bc:	4770      	bx	lr

000222be <z_to_nrf_level>:
	switch (z_in_level) {
   222be:	2801      	cmp	r0, #1
   222c0:	d007      	beq.n	222d2 <z_to_nrf_level+0x14>
   222c2:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   222c6:	d108      	bne.n	222da <z_to_nrf_level+0x1c>
		*nrf_out_level = NRF_SOL_SECURE;
   222c8:	f44f 738d 	mov.w	r3, #282	; 0x11a
   222cc:	600b      	str	r3, [r1, #0]
	int retval = 0;
   222ce:	2000      	movs	r0, #0
		break;
   222d0:	4770      	bx	lr
		*nrf_out_level = NRF_SOL_SOCKET;
   222d2:	2301      	movs	r3, #1
   222d4:	600b      	str	r3, [r1, #0]
	int retval = 0;
   222d6:	2000      	movs	r0, #0
		break;
   222d8:	4770      	bx	lr
	switch (z_in_level) {
   222da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   222de:	4770      	bx	lr

000222e0 <z_to_nrf_optname>:
	switch (z_in_level) {
   222e0:	2801      	cmp	r0, #1
   222e2:	d033      	beq.n	2234c <z_to_nrf_optname+0x6c>
   222e4:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   222e8:	f040 8088 	bne.w	223fc <z_to_nrf_optname+0x11c>
		switch (z_in_optname) {
   222ec:	3901      	subs	r1, #1
   222ee:	290b      	cmp	r1, #11
   222f0:	f200 8087 	bhi.w	22402 <z_to_nrf_optname+0x122>
   222f4:	e8df f001 	tbb	[pc, r1]
   222f8:	120e0a06 	.word	0x120e0a06
   222fc:	85851a16 	.word	0x85851a16
   22300:	26221e85 	.word	0x26221e85
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   22304:	2302      	movs	r3, #2
   22306:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22308:	2000      	movs	r0, #0
			break;
   2230a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   2230c:	2305      	movs	r3, #5
   2230e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22310:	2000      	movs	r0, #0
			break;
   22312:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   22314:	2306      	movs	r3, #6
   22316:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22318:	2000      	movs	r0, #0
			break;
   2231a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   2231c:	2307      	movs	r3, #7
   2231e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22320:	2000      	movs	r0, #0
			break;
   22322:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   22324:	2304      	movs	r3, #4
   22326:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22328:	2000      	movs	r0, #0
			break;
   2232a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   2232c:	2301      	movs	r3, #1
   2232e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22330:	2000      	movs	r0, #0
			break;
   22332:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   22334:	2303      	movs	r3, #3
   22336:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22338:	2000      	movs	r0, #0
			break;
   2233a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   2233c:	2309      	movs	r3, #9
   2233e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22340:	2000      	movs	r0, #0
			break;
   22342:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   22344:	2308      	movs	r3, #8
   22346:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22348:	2000      	movs	r0, #0
			break;
   2234a:	4770      	bx	lr
		switch (z_in_optname) {
   2234c:	3902      	subs	r1, #2
   2234e:	2935      	cmp	r1, #53	; 0x35
   22350:	d85a      	bhi.n	22408 <z_to_nrf_optname+0x128>
   22352:	e8df f001 	tbb	[pc, r1]
   22356:	592b      	.short	0x592b
   22358:	5959591b 	.word	0x5959591b
   2235c:	59595959 	.word	0x59595959
   22360:	59595959 	.word	0x59595959
   22364:	59595959 	.word	0x59595959
   22368:	5959231f 	.word	0x5959231f
   2236c:	59592759 	.word	0x59592759
   22370:	332f5959 	.word	0x332f5959
   22374:	59595937 	.word	0x59595937
   22378:	59595959 	.word	0x59595959
   2237c:	59595959 	.word	0x59595959
   22380:	59595959 	.word	0x59595959
   22384:	433f5959 	.word	0x433f5959
   22388:	3b4f4b47 	.word	0x3b4f4b47
			*nrf_out_optname = NRF_SO_ERROR;
   2238c:	2304      	movs	r3, #4
   2238e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22390:	2000      	movs	r0, #0
			break;
   22392:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   22394:	2314      	movs	r3, #20
   22396:	6013      	str	r3, [r2, #0]
	int retval = 0;
   22398:	2000      	movs	r0, #0
			break;
   2239a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   2239c:	2315      	movs	r3, #21
   2239e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223a0:	2000      	movs	r0, #0
			break;
   223a2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   223a4:	2319      	movs	r3, #25
   223a6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223a8:	2000      	movs	r0, #0
			break;
   223aa:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_REUSEADDR;
   223ac:	2328      	movs	r3, #40	; 0x28
   223ae:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223b0:	2000      	movs	r0, #0
			break;
   223b2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   223b4:	231e      	movs	r3, #30
   223b6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223b8:	2000      	movs	r0, #0
			break;
   223ba:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   223bc:	231f      	movs	r3, #31
   223be:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223c0:	2000      	movs	r0, #0
			break;
   223c2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   223c4:	2320      	movs	r3, #32
   223c6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223c8:	2000      	movs	r0, #0
			break;
   223ca:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   223cc:	2337      	movs	r3, #55	; 0x37
   223ce:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223d0:	2000      	movs	r0, #0
			break;
   223d2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_LAST;
   223d4:	2332      	movs	r3, #50	; 0x32
   223d6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223d8:	2000      	movs	r0, #0
			break;
   223da:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   223dc:	2333      	movs	r3, #51	; 0x33
   223de:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223e0:	2000      	movs	r0, #0
			break;
   223e2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   223e4:	2334      	movs	r3, #52	; 0x34
   223e6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223e8:	2000      	movs	r0, #0
			break;
   223ea:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   223ec:	2335      	movs	r3, #53	; 0x35
   223ee:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223f0:	2000      	movs	r0, #0
			break;
   223f2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   223f4:	2336      	movs	r3, #54	; 0x36
   223f6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   223f8:	2000      	movs	r0, #0
			break;
   223fa:	4770      	bx	lr
	switch (z_in_level) {
   223fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22400:	4770      	bx	lr
   22402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22406:	4770      	bx	lr
   22408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2240c:	4770      	bx	lr

0002240e <z_to_nrf_flags>:
{
   2240e:	4603      	mov	r3, r0
	if (z_flags & MSG_DONTWAIT) {
   22410:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   22414:	d000      	beq.n	22418 <z_to_nrf_flags+0xa>
		nrf_flags |= NRF_MSG_DONTWAIT;
   22416:	2002      	movs	r0, #2
	if (z_flags & MSG_PEEK) {
   22418:	f013 0f02 	tst.w	r3, #2
   2241c:	d001      	beq.n	22422 <z_to_nrf_flags+0x14>
		nrf_flags |= NRF_MSG_PEEK;
   2241e:	f040 0008 	orr.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   22422:	f013 0f20 	tst.w	r3, #32
   22426:	d001      	beq.n	2242c <z_to_nrf_flags+0x1e>
		nrf_flags |= NRF_MSG_TRUNC;
   22428:	f040 0020 	orr.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   2242c:	f413 7f80 	tst.w	r3, #256	; 0x100
   22430:	d001      	beq.n	22436 <z_to_nrf_flags+0x28>
		nrf_flags |= NRF_MSG_WAITALL;
   22432:	f040 0010 	orr.w	r0, r0, #16
}
   22436:	4770      	bx	lr

00022438 <z_to_nrf_addrinfo_flags>:
{
   22438:	4603      	mov	r3, r0
	if (flags & AI_NUMERICSERV) {
   2243a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
   2243e:	d001      	beq.n	22444 <z_to_nrf_addrinfo_flags+0xc>
		nrf_flags |= NRF_AI_NUMERICSERV;
   22440:	f44f 6080 	mov.w	r0, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   22444:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   22448:	d001      	beq.n	2244e <z_to_nrf_addrinfo_flags+0x16>
		nrf_flags |= NRF_AI_PDNSERV;
   2244a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
}
   2244e:	4770      	bx	lr

00022450 <nrf_to_z_addrinfo_flags>:
}
   22450:	2000      	movs	r0, #0
   22452:	4770      	bx	lr

00022454 <z_to_nrf_family>:
	switch (z_family) {
   22454:	2803      	cmp	r0, #3
   22456:	d809      	bhi.n	2246c <z_to_nrf_family+0x18>
   22458:	e8df f000 	tbb	[pc, r0]
   2245c:	040b0206 	.word	0x040b0206
   22460:	2002      	movs	r0, #2
   22462:	4770      	bx	lr
		return NRF_AF_PACKET;
   22464:	2005      	movs	r0, #5
   22466:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   22468:	2000      	movs	r0, #0
   2246a:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2246c:	f06f 0069 	mvn.w	r0, #105	; 0x69
   22470:	4770      	bx	lr
		return NRF_AF_INET6;
   22472:	200a      	movs	r0, #10
}
   22474:	4770      	bx	lr

00022476 <nrf_to_z_family>:
	switch (nrf_family) {
   22476:	280a      	cmp	r0, #10
   22478:	d80b      	bhi.n	22492 <nrf_to_z_family+0x1c>
   2247a:	e8df f000 	tbb	[pc, r0]
   2247e:	0a0e      	.short	0x0a0e
   22480:	080a0a06 	.word	0x080a0a06
   22484:	0a0a0a0a 	.word	0x0a0a0a0a
   22488:	0d          	.byte	0x0d
   22489:	00          	.byte	0x00
   2248a:	2001      	movs	r0, #1
   2248c:	4770      	bx	lr
		return AF_PACKET;
   2248e:	2003      	movs	r0, #3
   22490:	4770      	bx	lr
		return -EAFNOSUPPORT;
   22492:	f06f 0069 	mvn.w	r0, #105	; 0x69
   22496:	4770      	bx	lr
		return AF_INET6;
   22498:	2002      	movs	r0, #2
}
   2249a:	4770      	bx	lr

0002249c <nrf_to_z_protocol>:
	switch (proto) {
   2249c:	2802      	cmp	r0, #2
   2249e:	d00e      	beq.n	224be <nrf_to_z_protocol+0x22>
   224a0:	dd08      	ble.n	224b4 <nrf_to_z_protocol+0x18>
   224a2:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   224a6:	d00f      	beq.n	224c8 <nrf_to_z_protocol+0x2c>
   224a8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
   224ac:	d10f      	bne.n	224ce <nrf_to_z_protocol+0x32>
		return IPPROTO_DTLS_1_2;
   224ae:	f240 1011 	movw	r0, #273	; 0x111
   224b2:	4770      	bx	lr
	switch (proto) {
   224b4:	b168      	cbz	r0, 224d2 <nrf_to_z_protocol+0x36>
   224b6:	2801      	cmp	r0, #1
   224b8:	d103      	bne.n	224c2 <nrf_to_z_protocol+0x26>
   224ba:	2006      	movs	r0, #6
   224bc:	4770      	bx	lr
		return IPPROTO_UDP;
   224be:	2011      	movs	r0, #17
   224c0:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   224c2:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   224c6:	4770      	bx	lr
		return IPPROTO_TLS_1_2;
   224c8:	f44f 7081 	mov.w	r0, #258	; 0x102
   224cc:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   224ce:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   224d2:	4770      	bx	lr

000224d4 <z_to_nrf_socktype>:
}
   224d4:	4770      	bx	lr

000224d6 <z_to_nrf_protocol>:
	switch (proto) {
   224d6:	2811      	cmp	r0, #17
   224d8:	d00f      	beq.n	224fa <z_to_nrf_protocol+0x24>
   224da:	dd09      	ble.n	224f0 <z_to_nrf_protocol+0x1a>
   224dc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   224e0:	d010      	beq.n	22504 <z_to_nrf_protocol+0x2e>
   224e2:	f240 1311 	movw	r3, #273	; 0x111
   224e6:	4298      	cmp	r0, r3
   224e8:	d10f      	bne.n	2250a <z_to_nrf_protocol+0x34>
		return NRF_SPROTO_DTLS1v2;
   224ea:	f44f 7087 	mov.w	r0, #270	; 0x10e
   224ee:	4770      	bx	lr
	switch (proto) {
   224f0:	b168      	cbz	r0, 2250e <z_to_nrf_protocol+0x38>
   224f2:	2806      	cmp	r0, #6
   224f4:	d103      	bne.n	224fe <z_to_nrf_protocol+0x28>
   224f6:	2001      	movs	r0, #1
   224f8:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   224fa:	2002      	movs	r0, #2
   224fc:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   224fe:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   22502:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   22504:	f44f 7082 	mov.w	r0, #260	; 0x104
   22508:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   2250a:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   2250e:	4770      	bx	lr

00022510 <nrf_to_z_dns_error_code>:
	switch (nrf_gai_err) {
   22510:	f2a0 1001 	subw	r0, r0, #257	; 0x101
   22514:	2814      	cmp	r0, #20
   22516:	d82d      	bhi.n	22574 <nrf_to_z_dns_error_code+0x64>
   22518:	e8df f000 	tbb	[pc, r0]
   2251c:	110e2f0b 	.word	0x110e2f0b
   22520:	2c2c2c2c 	.word	0x2c2c2c2c
   22524:	2c2c2c2c 	.word	0x2c2c2c2c
   22528:	1a17142c 	.word	0x1a17142c
   2252c:	2623201d 	.word	0x2623201d
   22530:	29          	.byte	0x29
   22531:	00          	.byte	0x00
   22532:	f06f 0008 	mvn.w	r0, #8
   22536:	4770      	bx	lr
		return DNS_EAI_BADFLAGS;
   22538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2253c:	4770      	bx	lr
		return DNS_EAI_FAIL;
   2253e:	f06f 0003 	mvn.w	r0, #3
   22542:	4770      	bx	lr
		return DNS_EAI_FAMILY;
   22544:	f06f 0005 	mvn.w	r0, #5
   22548:	4770      	bx	lr
		return DNS_EAI_MEMORY;
   2254a:	f06f 0009 	mvn.w	r0, #9
   2254e:	4770      	bx	lr
		return DNS_EAI_NODATA;
   22550:	f06f 0004 	mvn.w	r0, #4
   22554:	4770      	bx	lr
		return DNS_EAI_NONAME;
   22556:	f06f 0001 	mvn.w	r0, #1
   2255a:	4770      	bx	lr
		return DNS_EAI_SERVICE;
   2255c:	f06f 0007 	mvn.w	r0, #7
   22560:	4770      	bx	lr
		return DNS_EAI_SOCKTYPE;
   22562:	f06f 0006 	mvn.w	r0, #6
   22566:	4770      	bx	lr
		return DNS_EAI_INPROGRESS;
   22568:	f06f 0063 	mvn.w	r0, #99	; 0x63
   2256c:	4770      	bx	lr
		return DNS_EAI_SYSTEM;
   2256e:	f06f 000a 	mvn.w	r0, #10
   22572:	4770      	bx	lr
		return -1;
   22574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22578:	4770      	bx	lr
		return DNS_EAI_AGAIN;
   2257a:	f06f 0002 	mvn.w	r0, #2
}
   2257e:	4770      	bx	lr

00022580 <nrf_to_z_ipv6>:
{
   22580:	b510      	push	{r4, lr}
	ptr->sin6_port = nrf_in->sin6_port;
   22582:	890b      	ldrh	r3, [r1, #8]
   22584:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   22586:	4603      	mov	r3, r0
   22588:	2202      	movs	r2, #2
   2258a:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2258e:	690c      	ldr	r4, [r1, #16]
   22590:	f8d1 e014 	ldr.w	lr, [r1, #20]
   22594:	f8d1 c018 	ldr.w	ip, [r1, #24]
   22598:	69ca      	ldr	r2, [r1, #28]
   2259a:	6044      	str	r4, [r0, #4]
   2259c:	f8c3 e004 	str.w	lr, [r3, #4]
   225a0:	f8c3 c008 	str.w	ip, [r3, #8]
   225a4:	60da      	str	r2, [r3, #12]
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   225a6:	f891 3020 	ldrb.w	r3, [r1, #32]
   225aa:	7503      	strb	r3, [r0, #20]
}
   225ac:	bd10      	pop	{r4, pc}

000225ae <z_to_nrf_ipv6>:
{
   225ae:	b500      	push	{lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   225b0:	2324      	movs	r3, #36	; 0x24
   225b2:	700b      	strb	r3, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   225b4:	8843      	ldrh	r3, [r0, #2]
   225b6:	810b      	strh	r3, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   225b8:	230a      	movs	r3, #10
   225ba:	604b      	str	r3, [r1, #4]
   225bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
   225c0:	f8d0 c008 	ldr.w	ip, [r0, #8]
   225c4:	68c2      	ldr	r2, [r0, #12]
   225c6:	6903      	ldr	r3, [r0, #16]
   225c8:	f8c1 e010 	str.w	lr, [r1, #16]
   225cc:	f8c1 c014 	str.w	ip, [r1, #20]
   225d0:	618a      	str	r2, [r1, #24]
   225d2:	61cb      	str	r3, [r1, #28]
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   225d4:	7d03      	ldrb	r3, [r0, #20]
   225d6:	620b      	str	r3, [r1, #32]
}
   225d8:	f85d fb04 	ldr.w	pc, [sp], #4

000225dc <nrf91_socket_offload_close>:
{
   225dc:	b538      	push	{r3, r4, r5, lr}
   225de:	4604      	mov	r4, r0
	retval = nrf_close(ctx->nrf_fd);
   225e0:	6800      	ldr	r0, [r0, #0]
   225e2:	f001 fba5 	bl	23d30 <nrf_close>
	if (retval == 0) {
   225e6:	4605      	mov	r5, r0
   225e8:	b108      	cbz	r0, 225ee <nrf91_socket_offload_close+0x12>
}
   225ea:	4628      	mov	r0, r5
   225ec:	bd38      	pop	{r3, r4, r5, pc}
		release_ctx(ctx);
   225ee:	4620      	mov	r0, r4
   225f0:	f7f3 fd64 	bl	160bc <release_ctx>
	return retval;
   225f4:	e7f9      	b.n	225ea <nrf91_socket_offload_close+0xe>

000225f6 <nrf91_socket_offload_setsockopt>:
{
   225f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   225f8:	b087      	sub	sp, #28
   225fa:	460c      	mov	r4, r1
   225fc:	4615      	mov	r5, r2
   225fe:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   22600:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   22602:	a905      	add	r1, sp, #20
   22604:	4620      	mov	r0, r4
   22606:	f7ff fe5a 	bl	222be <z_to_nrf_level>
   2260a:	2800      	cmp	r0, #0
   2260c:	db27      	blt.n	2265e <nrf91_socket_offload_setsockopt+0x68>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2260e:	aa04      	add	r2, sp, #16
   22610:	4629      	mov	r1, r5
   22612:	4620      	mov	r0, r4
   22614:	f7ff fe64 	bl	222e0 <z_to_nrf_optname>
   22618:	2800      	cmp	r0, #0
   2261a:	db20      	blt.n	2265e <nrf91_socket_offload_setsockopt+0x68>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2261c:	2c01      	cmp	r4, #1
   2261e:	d00c      	beq.n	2263a <nrf91_socket_offload_setsockopt+0x44>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   22620:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   22624:	d016      	beq.n	22654 <nrf91_socket_offload_setsockopt+0x5e>
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   22626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22628:	9300      	str	r3, [sp, #0]
   2262a:	4633      	mov	r3, r6
   2262c:	9a04      	ldr	r2, [sp, #16]
   2262e:	9905      	ldr	r1, [sp, #20]
   22630:	4638      	mov	r0, r7
   22632:	f001 fc06 	bl	23e42 <nrf_setsockopt>
}
   22636:	b007      	add	sp, #28
   22638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2263a:	f1a5 0314 	sub.w	r3, r5, #20
   2263e:	2b01      	cmp	r3, #1
   22640:	d8ee      	bhi.n	22620 <nrf91_socket_offload_setsockopt+0x2a>
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   22642:	6833      	ldr	r3, [r6, #0]
   22644:	9302      	str	r3, [sp, #8]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   22646:	6873      	ldr	r3, [r6, #4]
   22648:	9303      	str	r3, [sp, #12]
		nrf_optlen = sizeof(struct nrf_timeval);
   2264a:	2308      	movs	r3, #8
   2264c:	930c      	str	r3, [sp, #48]	; 0x30
		nrf_optval = &nrf_timeo;
   2264e:	eb0d 0603 	add.w	r6, sp, r3
		nrf_optlen = sizeof(struct nrf_timeval);
   22652:	e7e8      	b.n	22626 <nrf91_socket_offload_setsockopt+0x30>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   22654:	2d0a      	cmp	r5, #10
   22656:	d1e6      	bne.n	22626 <nrf91_socket_offload_setsockopt+0x30>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   22658:	2301      	movs	r3, #1
   2265a:	930c      	str	r3, [sp, #48]	; 0x30
   2265c:	e7e3      	b.n	22626 <nrf91_socket_offload_setsockopt+0x30>
	errno = ENOPROTOOPT;
   2265e:	f7fe f97e 	bl	2095e <__errno>
   22662:	236d      	movs	r3, #109	; 0x6d
   22664:	6003      	str	r3, [r0, #0]
	return retval;
   22666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2266a:	e7e4      	b.n	22636 <nrf91_socket_offload_setsockopt+0x40>

0002266c <nrf91_socket_offload_getsockopt>:
{
   2266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22670:	b088      	sub	sp, #32
   22672:	460c      	mov	r4, r1
   22674:	4615      	mov	r5, r2
   22676:	461e      	mov	r6, r3
   22678:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	int sd = OBJ_TO_SD(obj);
   2267a:	f8d0 8000 	ldr.w	r8, [r0]
	struct nrf_timeval nrf_timeo = {0, 0};
   2267e:	2200      	movs	r2, #0
   22680:	9204      	str	r2, [sp, #16]
   22682:	9205      	str	r2, [sp, #20]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   22684:	683b      	ldr	r3, [r7, #0]
   22686:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   22688:	a907      	add	r1, sp, #28
   2268a:	4620      	mov	r0, r4
   2268c:	f7ff fe17 	bl	222be <z_to_nrf_level>
   22690:	2800      	cmp	r0, #0
   22692:	db3b      	blt.n	2270c <nrf91_socket_offload_getsockopt+0xa0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   22694:	aa06      	add	r2, sp, #24
   22696:	4629      	mov	r1, r5
   22698:	4620      	mov	r0, r4
   2269a:	f7ff fe21 	bl	222e0 <z_to_nrf_optname>
   2269e:	2800      	cmp	r0, #0
   226a0:	db34      	blt.n	2270c <nrf91_socket_offload_getsockopt+0xa0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   226a2:	2c01      	cmp	r4, #1
   226a4:	d012      	beq.n	226cc <nrf91_socket_offload_getsockopt+0x60>
	void *nrf_optval = optval;
   226a6:	4633      	mov	r3, r6
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   226a8:	aa03      	add	r2, sp, #12
   226aa:	9200      	str	r2, [sp, #0]
   226ac:	9a06      	ldr	r2, [sp, #24]
   226ae:	9907      	ldr	r1, [sp, #28]
   226b0:	4640      	mov	r0, r8
   226b2:	f001 fbe1 	bl	23e78 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   226b6:	4680      	mov	r8, r0
   226b8:	b920      	cbnz	r0, 226c4 <nrf91_socket_offload_getsockopt+0x58>
   226ba:	b11e      	cbz	r6, 226c4 <nrf91_socket_offload_getsockopt+0x58>
		*optlen = nrf_optlen;
   226bc:	9b03      	ldr	r3, [sp, #12]
   226be:	603b      	str	r3, [r7, #0]
		if (level == SOL_SOCKET) {
   226c0:	2c01      	cmp	r4, #1
   226c2:	d00d      	beq.n	226e0 <nrf91_socket_offload_getsockopt+0x74>
}
   226c4:	4640      	mov	r0, r8
   226c6:	b008      	add	sp, #32
   226c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   226cc:	f1a5 0314 	sub.w	r3, r5, #20
   226d0:	2b01      	cmp	r3, #1
   226d2:	d901      	bls.n	226d8 <nrf91_socket_offload_getsockopt+0x6c>
	void *nrf_optval = optval;
   226d4:	4633      	mov	r3, r6
   226d6:	e7e7      	b.n	226a8 <nrf91_socket_offload_getsockopt+0x3c>
		nrf_optlen = sizeof(struct nrf_timeval);
   226d8:	2308      	movs	r3, #8
   226da:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   226dc:	ab04      	add	r3, sp, #16
   226de:	e7e3      	b.n	226a8 <nrf91_socket_offload_getsockopt+0x3c>
			if (optname == SO_ERROR) {
   226e0:	2d04      	cmp	r5, #4
   226e2:	d009      	beq.n	226f8 <nrf91_socket_offload_getsockopt+0x8c>
			} else if ((optname == SO_RCVTIMEO) ||
   226e4:	3d14      	subs	r5, #20
   226e6:	2d01      	cmp	r5, #1
   226e8:	d8ec      	bhi.n	226c4 <nrf91_socket_offload_getsockopt+0x58>
					nrf_timeo.tv_sec;
   226ea:	9b04      	ldr	r3, [sp, #16]
				((struct timeval *)optval)->tv_sec =
   226ec:	6033      	str	r3, [r6, #0]
					nrf_timeo.tv_usec;
   226ee:	9b05      	ldr	r3, [sp, #20]
				((struct timeval *)optval)->tv_usec =
   226f0:	6073      	str	r3, [r6, #4]
				*optlen = sizeof(struct timeval);
   226f2:	2308      	movs	r3, #8
   226f4:	603b      	str	r3, [r7, #0]
   226f6:	e7e5      	b.n	226c4 <nrf91_socket_offload_getsockopt+0x58>
				if (*(int *)optval != 0) {
   226f8:	6830      	ldr	r0, [r6, #0]
   226fa:	2800      	cmp	r0, #0
   226fc:	d0e2      	beq.n	226c4 <nrf91_socket_offload_getsockopt+0x58>
					nrf_modem_os_errno_set(*(int *)optval);
   226fe:	f7ff fd8d 	bl	2221c <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   22702:	f7fe f92c 	bl	2095e <__errno>
   22706:	6803      	ldr	r3, [r0, #0]
   22708:	6033      	str	r3, [r6, #0]
   2270a:	e7db      	b.n	226c4 <nrf91_socket_offload_getsockopt+0x58>
	errno = ENOPROTOOPT;
   2270c:	f7fe f927 	bl	2095e <__errno>
   22710:	236d      	movs	r3, #109	; 0x6d
   22712:	6003      	str	r3, [r0, #0]
	return retval;
   22714:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   22718:	e7d4      	b.n	226c4 <nrf91_socket_offload_getsockopt+0x58>

0002271a <nrf91_socket_offload_recvfrom>:
{
   2271a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2271e:	b08c      	sub	sp, #48	; 0x30
   22720:	4604      	mov	r4, r0
   22722:	460d      	mov	r5, r1
   22724:	4617      	mov	r7, r2
   22726:	4698      	mov	r8, r3
   22728:	9e14      	ldr	r6, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   2272a:	6840      	ldr	r0, [r0, #4]
	return z_impl_k_mutex_unlock(mutex);
   2272c:	f7fa fd24 	bl	1d178 <z_impl_k_mutex_unlock>
	if (from == NULL) {
   22730:	b356      	cbz	r6, 22788 <nrf91_socket_offload_recvfrom+0x6e>
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   22732:	f10d 090c 	add.w	r9, sp, #12
   22736:	f04f 0a24 	mov.w	sl, #36	; 0x24
   2273a:	4652      	mov	r2, sl
   2273c:	2100      	movs	r1, #0
   2273e:	4648      	mov	r0, r9
   22740:	f002 f9d1 	bl	24ae6 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   22744:	f8cd a008 	str.w	sl, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   22748:	4640      	mov	r0, r8
   2274a:	f7ff fe60 	bl	2240e <z_to_nrf_flags>
   2274e:	4603      	mov	r3, r0
   22750:	aa02      	add	r2, sp, #8
   22752:	9201      	str	r2, [sp, #4]
   22754:	f8cd 9000 	str.w	r9, [sp]
   22758:	463a      	mov	r2, r7
   2275a:	4629      	mov	r1, r5
   2275c:	6820      	ldr	r0, [r4, #0]
   2275e:	f001 fb0f 	bl	23d80 <nrf_recvfrom>
		if (retval < 0) {
   22762:	1e05      	subs	r5, r0, #0
   22764:	db04      	blt.n	22770 <nrf91_socket_offload_recvfrom+0x56>
		if (cliaddr->sa_family == NRF_AF_INET) {
   22766:	9b04      	ldr	r3, [sp, #16]
   22768:	2b02      	cmp	r3, #2
   2276a:	d01b      	beq.n	227a4 <nrf91_socket_offload_recvfrom+0x8a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2276c:	2b0a      	cmp	r3, #10
   2276e:	d021      	beq.n	227b4 <nrf91_socket_offload_recvfrom+0x9a>
	if (ctx->lock) {
   22770:	6860      	ldr	r0, [r4, #4]
   22772:	b128      	cbz	r0, 22780 <nrf91_socket_offload_recvfrom+0x66>
	return z_impl_k_mutex_lock(mutex, timeout);
   22774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2277c:	f7fa fc72 	bl	1d064 <z_impl_k_mutex_lock>
}
   22780:	4628      	mov	r0, r5
   22782:	b00c      	add	sp, #48	; 0x30
   22784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   22788:	4640      	mov	r0, r8
   2278a:	f7ff fe40 	bl	2240e <z_to_nrf_flags>
   2278e:	4603      	mov	r3, r0
   22790:	2200      	movs	r2, #0
   22792:	9201      	str	r2, [sp, #4]
   22794:	9200      	str	r2, [sp, #0]
   22796:	463a      	mov	r2, r7
   22798:	4629      	mov	r1, r5
   2279a:	6820      	ldr	r0, [r4, #0]
   2279c:	f001 faf0 	bl	23d80 <nrf_recvfrom>
   227a0:	4605      	mov	r5, r0
   227a2:	e7e5      	b.n	22770 <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv4(from, (struct nrf_sockaddr_in *)cliaddr);
   227a4:	4649      	mov	r1, r9
   227a6:	4630      	mov	r0, r6
   227a8:	f7ff fd82 	bl	222b0 <nrf_to_z_ipv4>
			*fromlen = sizeof(struct sockaddr_in);
   227ac:	2308      	movs	r3, #8
   227ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   227b0:	6013      	str	r3, [r2, #0]
   227b2:	e7dd      	b.n	22770 <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   227b4:	a903      	add	r1, sp, #12
   227b6:	4630      	mov	r0, r6
   227b8:	f7ff fee2 	bl	22580 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   227bc:	2318      	movs	r3, #24
   227be:	9a15      	ldr	r2, [sp, #84]	; 0x54
   227c0:	6013      	str	r3, [r2, #0]
   227c2:	e7d5      	b.n	22770 <nrf91_socket_offload_recvfrom+0x56>

000227c4 <nrf91_socket_offload_read>:
{
   227c4:	b500      	push	{lr}
   227c6:	b083      	sub	sp, #12
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   227c8:	2300      	movs	r3, #0
   227ca:	9301      	str	r3, [sp, #4]
   227cc:	9300      	str	r3, [sp, #0]
   227ce:	f7ff ffa4 	bl	2271a <nrf91_socket_offload_recvfrom>
}
   227d2:	b003      	add	sp, #12
   227d4:	f85d fb04 	ldr.w	pc, [sp], #4

000227d8 <nrf91_socket_offload_sendto>:
{
   227d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   227dc:	b08d      	sub	sp, #52	; 0x34
   227de:	460f      	mov	r7, r1
   227e0:	4616      	mov	r6, r2
   227e2:	461d      	mov	r5, r3
   227e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
	int sd = OBJ_TO_SD(obj);
   227e6:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   227ea:	b1ec      	cbz	r4, 22828 <nrf91_socket_offload_sendto+0x50>
	} else if (to->sa_family == AF_INET) {
   227ec:	f8b4 c000 	ldrh.w	ip, [r4]
   227f0:	f1bc 0f01 	cmp.w	ip, #1
   227f4:	d025      	beq.n	22842 <nrf91_socket_offload_sendto+0x6a>
	} else if (to->sa_family == AF_INET6) {
   227f6:	f1bc 0f02 	cmp.w	ip, #2
   227fa:	d136      	bne.n	2286a <nrf91_socket_offload_sendto+0x92>
		z_to_nrf_ipv6(to, &ipv6);
   227fc:	f10d 090c 	add.w	r9, sp, #12
   22800:	4649      	mov	r1, r9
   22802:	4620      	mov	r0, r4
   22804:	f7ff fed3 	bl	225ae <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   22808:	4628      	mov	r0, r5
   2280a:	f7ff fe00 	bl	2240e <z_to_nrf_flags>
   2280e:	4603      	mov	r3, r0
   22810:	2224      	movs	r2, #36	; 0x24
   22812:	9201      	str	r2, [sp, #4]
   22814:	f8cd 9000 	str.w	r9, [sp]
   22818:	4632      	mov	r2, r6
   2281a:	4639      	mov	r1, r7
   2281c:	4640      	mov	r0, r8
   2281e:	f001 fa94 	bl	23d4a <nrf_sendto>
}
   22822:	b00d      	add	sp, #52	; 0x34
   22824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   22828:	4618      	mov	r0, r3
   2282a:	f7ff fdf0 	bl	2240e <z_to_nrf_flags>
   2282e:	4603      	mov	r3, r0
   22830:	2200      	movs	r2, #0
   22832:	9201      	str	r2, [sp, #4]
   22834:	9200      	str	r2, [sp, #0]
   22836:	4632      	mov	r2, r6
   22838:	4639      	mov	r1, r7
   2283a:	4640      	mov	r0, r8
   2283c:	f001 fa85 	bl	23d4a <nrf_sendto>
   22840:	e7ef      	b.n	22822 <nrf91_socket_offload_sendto+0x4a>
		z_to_nrf_ipv4(to, &ipv4);
   22842:	f10d 090c 	add.w	r9, sp, #12
   22846:	4649      	mov	r1, r9
   22848:	4620      	mov	r0, r4
   2284a:	f7ff fd28 	bl	2229e <z_to_nrf_ipv4>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2284e:	4628      	mov	r0, r5
   22850:	f7ff fddd 	bl	2240e <z_to_nrf_flags>
   22854:	4603      	mov	r3, r0
   22856:	2210      	movs	r2, #16
   22858:	9201      	str	r2, [sp, #4]
   2285a:	f8cd 9000 	str.w	r9, [sp]
   2285e:	4632      	mov	r2, r6
   22860:	4639      	mov	r1, r7
   22862:	4640      	mov	r0, r8
   22864:	f001 fa71 	bl	23d4a <nrf_sendto>
   22868:	e7db      	b.n	22822 <nrf91_socket_offload_sendto+0x4a>
	errno = ENOTSUP;
   2286a:	f7fe f878 	bl	2095e <__errno>
   2286e:	2386      	movs	r3, #134	; 0x86
   22870:	6003      	str	r3, [r0, #0]
	return retval;
   22872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22876:	e7d4      	b.n	22822 <nrf91_socket_offload_sendto+0x4a>

00022878 <nrf91_socket_offload_write>:
{
   22878:	b500      	push	{lr}
   2287a:	b083      	sub	sp, #12
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2287c:	2300      	movs	r3, #0
   2287e:	9301      	str	r3, [sp, #4]
   22880:	9300      	str	r3, [sp, #0]
   22882:	f7ff ffa9 	bl	227d8 <nrf91_socket_offload_sendto>
}
   22886:	b003      	add	sp, #12
   22888:	f85d fb04 	ldr.w	pc, [sp], #4

0002288c <nrf91_socket_offload_listen>:
{
   2288c:	b508      	push	{r3, lr}
	return nrf_listen(sd, backlog);
   2288e:	6800      	ldr	r0, [r0, #0]
   22890:	f001 faa2 	bl	23dd8 <nrf_listen>
}
   22894:	bd08      	pop	{r3, pc}

00022896 <nrf91_socket_offload_connect>:
{
   22896:	b510      	push	{r4, lr}
   22898:	b08a      	sub	sp, #40	; 0x28
   2289a:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   2289c:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   2289e:	8809      	ldrh	r1, [r1, #0]
   228a0:	2901      	cmp	r1, #1
   228a2:	d009      	beq.n	228b8 <nrf91_socket_offload_connect+0x22>
	} else if (addr->sa_family == AF_INET6) {
   228a4:	2902      	cmp	r1, #2
   228a6:	d011      	beq.n	228cc <nrf91_socket_offload_connect+0x36>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   228a8:	4619      	mov	r1, r3
   228aa:	4620      	mov	r0, r4
   228ac:	f001 fa83 	bl	23db6 <nrf_connect>
		if (retval < 0) {
   228b0:	2800      	cmp	r0, #0
   228b2:	db15      	blt.n	228e0 <nrf91_socket_offload_connect+0x4a>
}
   228b4:	b00a      	add	sp, #40	; 0x28
   228b6:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   228b8:	a901      	add	r1, sp, #4
   228ba:	4618      	mov	r0, r3
   228bc:	f7ff fcef 	bl	2229e <z_to_nrf_ipv4>
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   228c0:	2210      	movs	r2, #16
   228c2:	a901      	add	r1, sp, #4
   228c4:	4620      	mov	r0, r4
   228c6:	f001 fa76 	bl	23db6 <nrf_connect>
   228ca:	e7f3      	b.n	228b4 <nrf91_socket_offload_connect+0x1e>
		z_to_nrf_ipv6(addr, &ipv6);
   228cc:	a901      	add	r1, sp, #4
   228ce:	4618      	mov	r0, r3
   228d0:	f7ff fe6d 	bl	225ae <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   228d4:	2224      	movs	r2, #36	; 0x24
   228d6:	a901      	add	r1, sp, #4
   228d8:	4620      	mov	r0, r4
   228da:	f001 fa6c 	bl	23db6 <nrf_connect>
   228de:	e7e9      	b.n	228b4 <nrf91_socket_offload_connect+0x1e>
	errno = ENOTSUP;
   228e0:	f7fe f83d 	bl	2095e <__errno>
   228e4:	2386      	movs	r3, #134	; 0x86
   228e6:	6003      	str	r3, [r0, #0]
	return retval;
   228e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228ec:	e7e2      	b.n	228b4 <nrf91_socket_offload_connect+0x1e>

000228ee <nrf91_socket_offload_bind>:
{
   228ee:	b510      	push	{r4, lr}
   228f0:	b08a      	sub	sp, #40	; 0x28
   228f2:	4603      	mov	r3, r0
   228f4:	4608      	mov	r0, r1
	int sd = OBJ_TO_SD(obj);
   228f6:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   228f8:	880b      	ldrh	r3, [r1, #0]
   228fa:	2b01      	cmp	r3, #1
   228fc:	d00b      	beq.n	22916 <nrf91_socket_offload_bind+0x28>
	} else if (addr->sa_family == AF_INET6) {
   228fe:	2b02      	cmp	r3, #2
   22900:	d112      	bne.n	22928 <nrf91_socket_offload_bind+0x3a>
		z_to_nrf_ipv6(addr, &ipv6);
   22902:	a901      	add	r1, sp, #4
   22904:	f7ff fe53 	bl	225ae <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   22908:	2224      	movs	r2, #36	; 0x24
   2290a:	a901      	add	r1, sp, #4
   2290c:	4620      	mov	r0, r4
   2290e:	f001 fa87 	bl	23e20 <nrf_bind>
}
   22912:	b00a      	add	sp, #40	; 0x28
   22914:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   22916:	a901      	add	r1, sp, #4
   22918:	f7ff fcc1 	bl	2229e <z_to_nrf_ipv4>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   2291c:	2210      	movs	r2, #16
   2291e:	a901      	add	r1, sp, #4
   22920:	4620      	mov	r0, r4
   22922:	f001 fa7d 	bl	23e20 <nrf_bind>
   22926:	e7f4      	b.n	22912 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   22928:	f7fe f819 	bl	2095e <__errno>
   2292c:	2386      	movs	r3, #134	; 0x86
   2292e:	6003      	str	r3, [r0, #0]
	return retval;
   22930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22934:	e7ed      	b.n	22912 <nrf91_socket_offload_bind+0x24>

00022936 <nrf91_socket_offload_fcntl>:
{
   22936:	b500      	push	{lr}
   22938:	b083      	sub	sp, #12
   2293a:	9201      	str	r2, [sp, #4]
	switch (cmd) {
   2293c:	2903      	cmp	r1, #3
   2293e:	d00f      	beq.n	22960 <nrf91_socket_offload_fcntl+0x2a>
   22940:	2904      	cmp	r1, #4
   22942:	d115      	bne.n	22970 <nrf91_socket_offload_fcntl+0x3a>
		flags = va_arg(args, int);
   22944:	4613      	mov	r3, r2
   22946:	3204      	adds	r2, #4
   22948:	9201      	str	r2, [sp, #4]
   2294a:	681a      	ldr	r2, [r3, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2294c:	b112      	cbz	r2, 22954 <nrf91_socket_offload_fcntl+0x1e>
   2294e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   22952:	d10d      	bne.n	22970 <nrf91_socket_offload_fcntl+0x3a>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   22954:	f3c2 3280 	ubfx	r2, r2, #14, #1
   22958:	2101      	movs	r1, #1
   2295a:	f001 faae 	bl	23eba <nrf_fcntl>
		break;
   2295e:	e00d      	b.n	2297c <nrf91_socket_offload_fcntl+0x46>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   22960:	2200      	movs	r2, #0
   22962:	2102      	movs	r1, #2
   22964:	f001 faa9 	bl	23eba <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   22968:	0380      	lsls	r0, r0, #14
   2296a:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
		break;
   2296e:	e005      	b.n	2297c <nrf91_socket_offload_fcntl+0x46>
	errno = EINVAL;
   22970:	f7fd fff5 	bl	2095e <__errno>
   22974:	2316      	movs	r3, #22
   22976:	6003      	str	r3, [r0, #0]
	return retval;
   22978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2297c:	b003      	add	sp, #12
   2297e:	f85d fb04 	ldr.w	pc, [sp], #4

00022982 <nrf91_socket_offload_ioctl>:
{
   22982:	b510      	push	{r4, lr}
   22984:	b082      	sub	sp, #8
   22986:	9201      	str	r2, [sp, #4]
	int sd = OBJ_TO_SD(obj);
   22988:	6804      	ldr	r4, [r0, #0]
	switch (request) {
   2298a:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   2298e:	2b03      	cmp	r3, #3
   22990:	d81d      	bhi.n	229ce <nrf91_socket_offload_ioctl+0x4c>
   22992:	e8df f003 	tbb	[pc, r3]
   22996:	2102      	.short	0x2102
   22998:	1506      	.short	0x1506
   2299a:	f06f 0011 	mvn.w	r0, #17
}
   2299e:	b002      	add	sp, #8
   229a0:	bd10      	pop	{r4, pc}
		fds = va_arg(args, struct zsock_pollfd *);
   229a2:	9901      	ldr	r1, [sp, #4]
   229a4:	1d0a      	adds	r2, r1, #4
   229a6:	9201      	str	r2, [sp, #4]
   229a8:	6808      	ldr	r0, [r1, #0]
		nfds = va_arg(args, int);
   229aa:	f101 0308 	add.w	r3, r1, #8
   229ae:	9301      	str	r3, [sp, #4]
   229b0:	6849      	ldr	r1, [r1, #4]
		timeout = va_arg(args, int);
   229b2:	f102 0308 	add.w	r3, r2, #8
   229b6:	9301      	str	r3, [sp, #4]
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   229b8:	6852      	ldr	r2, [r2, #4]
   229ba:	f7f3 fca5 	bl	16308 <nrf91_socket_offload_poll>
   229be:	e7ee      	b.n	2299e <nrf91_socket_offload_ioctl+0x1c>
		ctx->lock = va_arg(args, struct k_mutex *);
   229c0:	9b01      	ldr	r3, [sp, #4]
   229c2:	1d1a      	adds	r2, r3, #4
   229c4:	9201      	str	r2, [sp, #4]
   229c6:	681b      	ldr	r3, [r3, #0]
   229c8:	6043      	str	r3, [r0, #4]
		return 0;
   229ca:	2000      	movs	r0, #0
   229cc:	e7e7      	b.n	2299e <nrf91_socket_offload_ioctl+0x1c>
		return nrf91_socket_offload_fcntl(sd, request, args);
   229ce:	9a01      	ldr	r2, [sp, #4]
   229d0:	4620      	mov	r0, r4
   229d2:	f7ff ffb0 	bl	22936 <nrf91_socket_offload_fcntl>
   229d6:	e7e2      	b.n	2299e <nrf91_socket_offload_ioctl+0x1c>
		return -EOPNOTSUPP;
   229d8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   229dc:	e7df      	b.n	2299e <nrf91_socket_offload_ioctl+0x1c>

000229de <native_socket>:
{
   229de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229e0:	4605      	mov	r5, r0
   229e2:	4617      	mov	r7, r2
   229e4:	461c      	mov	r4, r3
	type = type & ~(SOCK_NATIVE | SOCK_NATIVE_TLS);
   229e6:	f021 4640 	bic.w	r6, r1, #3221225472	; 0xc0000000
	k_sched_lock();
   229ea:	f7fa fe9f 	bl	1d72c <k_sched_lock>
	*offload_lock = true;
   229ee:	2301      	movs	r3, #1
   229f0:	7023      	strb	r3, [r4, #0]
	return z_impl_zsock_socket(family, type, proto);
   229f2:	463a      	mov	r2, r7
   229f4:	4631      	mov	r1, r6
   229f6:	4628      	mov	r0, r5
   229f8:	f7f0 fe82 	bl	13700 <z_impl_zsock_socket>
   229fc:	4605      	mov	r5, r0
	*offload_lock = false;
   229fe:	2300      	movs	r3, #0
   22a00:	7023      	strb	r3, [r4, #0]
	k_sched_unlock();
   22a02:	f7fb f89d 	bl	1db40 <k_sched_unlock>
}
   22a06:	4628      	mov	r0, r5
   22a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022a0a <nrf91_socket_offload_socket>:
{
   22a0a:	b570      	push	{r4, r5, r6, lr}
   22a0c:	460e      	mov	r6, r1
   22a0e:	4615      	mov	r5, r2
	family = z_to_nrf_family(family);
   22a10:	b280      	uxth	r0, r0
   22a12:	f7ff fd1f 	bl	22454 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   22a16:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   22a1a:	d010      	beq.n	22a3e <nrf91_socket_offload_socket+0x34>
   22a1c:	4604      	mov	r4, r0
	type = z_to_nrf_socktype(type);
   22a1e:	4630      	mov	r0, r6
   22a20:	f7ff fd58 	bl	224d4 <z_to_nrf_socktype>
   22a24:	4606      	mov	r6, r0
	proto = z_to_nrf_protocol(proto);
   22a26:	4628      	mov	r0, r5
   22a28:	f7ff fd55 	bl	224d6 <z_to_nrf_protocol>
   22a2c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   22a2e:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   22a32:	d00b      	beq.n	22a4c <nrf91_socket_offload_socket+0x42>
	retval = nrf_socket(family, type, proto);
   22a34:	4631      	mov	r1, r6
   22a36:	4620      	mov	r0, r4
   22a38:	f001 f969 	bl	23d0e <nrf_socket>
}
   22a3c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EAFNOSUPPORT;
   22a3e:	f7fd ff8e 	bl	2095e <__errno>
   22a42:	236a      	movs	r3, #106	; 0x6a
   22a44:	6003      	str	r3, [r0, #0]
		return -1;
   22a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22a4a:	e7f7      	b.n	22a3c <nrf91_socket_offload_socket+0x32>
		errno = EPROTONOSUPPORT;
   22a4c:	f7fd ff87 	bl	2095e <__errno>
   22a50:	237b      	movs	r3, #123	; 0x7b
   22a52:	6003      	str	r3, [r0, #0]
		return -1;
   22a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22a58:	e7f0      	b.n	22a3c <nrf91_socket_offload_socket+0x32>

00022a5a <nrf91_socket_offload_freeaddrinfo>:
{
   22a5a:	b538      	push	{r3, r4, r5, lr}
   22a5c:	4604      	mov	r4, r0
	while (next != NULL) {
   22a5e:	e007      	b.n	22a70 <nrf91_socket_offload_freeaddrinfo+0x16>
		next = next->ai_next;
   22a60:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   22a62:	69a0      	ldr	r0, [r4, #24]
   22a64:	f001 ffef 	bl	24a46 <k_free>
		k_free(this);
   22a68:	4620      	mov	r0, r4
   22a6a:	f001 ffec 	bl	24a46 <k_free>
		next = next->ai_next;
   22a6e:	462c      	mov	r4, r5
	while (next != NULL) {
   22a70:	2c00      	cmp	r4, #0
   22a72:	d1f5      	bne.n	22a60 <nrf91_socket_offload_freeaddrinfo+0x6>
}
   22a74:	bd38      	pop	{r3, r4, r5, pc}

00022a76 <nrf_to_z_addrinfo>:
{
   22a76:	b538      	push	{r3, r4, r5, lr}
   22a78:	4604      	mov	r4, r0
   22a7a:	460d      	mov	r5, r1
	z_out->ai_next = NULL;
   22a7c:	2300      	movs	r3, #0
   22a7e:	6003      	str	r3, [r0, #0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   22a80:	61c3      	str	r3, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   22a82:	6808      	ldr	r0, [r1, #0]
   22a84:	f7ff fce4 	bl	22450 <nrf_to_z_addrinfo_flags>
   22a88:	6060      	str	r0, [r4, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   22a8a:	68ab      	ldr	r3, [r5, #8]
   22a8c:	60e3      	str	r3, [r4, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   22a8e:	6868      	ldr	r0, [r5, #4]
   22a90:	f7ff fcf1 	bl	22476 <nrf_to_z_family>
	if (family == -EAFNOSUPPORT) {
   22a94:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   22a98:	d017      	beq.n	22aca <nrf_to_z_addrinfo+0x54>
	z_out->ai_family = family;
   22a9a:	60a0      	str	r0, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   22a9c:	68e8      	ldr	r0, [r5, #12]
   22a9e:	f7ff fcfd 	bl	2249c <nrf_to_z_protocol>
   22aa2:	6120      	str	r0, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   22aa4:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   22aa8:	d010      	beq.n	22acc <nrf_to_z_addrinfo+0x56>
	if (nrf_in->ai_family == NRF_AF_INET) {
   22aaa:	686b      	ldr	r3, [r5, #4]
   22aac:	2b02      	cmp	r3, #2
   22aae:	d010      	beq.n	22ad2 <nrf_to_z_addrinfo+0x5c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   22ab0:	2b0a      	cmp	r3, #10
   22ab2:	d11d      	bne.n	22af0 <nrf_to_z_addrinfo+0x7a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   22ab4:	2018      	movs	r0, #24
   22ab6:	f001 ffcf 	bl	24a58 <k_malloc>
   22aba:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   22abc:	b1d8      	cbz	r0, 22af6 <nrf_to_z_addrinfo+0x80>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   22abe:	2318      	movs	r3, #24
   22ac0:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   22ac2:	6969      	ldr	r1, [r5, #20]
   22ac4:	f7ff fd5c 	bl	22580 <nrf_to_z_ipv6>
	return 0;
   22ac8:	2000      	movs	r0, #0
}
   22aca:	bd38      	pop	{r3, r4, r5, pc}
		z_out->ai_addr = NULL;
   22acc:	2300      	movs	r3, #0
   22ace:	61a3      	str	r3, [r4, #24]
		return -EPROTONOSUPPORT;
   22ad0:	e7fb      	b.n	22aca <nrf_to_z_addrinfo+0x54>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   22ad2:	2008      	movs	r0, #8
   22ad4:	f001 ffc0 	bl	24a58 <k_malloc>
   22ad8:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   22ada:	b130      	cbz	r0, 22aea <nrf_to_z_addrinfo+0x74>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   22adc:	2308      	movs	r3, #8
   22ade:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv4(z_out->ai_addr,
   22ae0:	6969      	ldr	r1, [r5, #20]
   22ae2:	f7ff fbe5 	bl	222b0 <nrf_to_z_ipv4>
	return 0;
   22ae6:	2000      	movs	r0, #0
   22ae8:	e7ef      	b.n	22aca <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   22aea:	f06f 000b 	mvn.w	r0, #11
   22aee:	e7ec      	b.n	22aca <nrf_to_z_addrinfo+0x54>
		return -EPROTONOSUPPORT;
   22af0:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   22af4:	e7e9      	b.n	22aca <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   22af6:	f06f 000b 	mvn.w	r0, #11
   22afa:	e7e6      	b.n	22aca <nrf_to_z_addrinfo+0x54>

00022afc <z_to_nrf_addrinfo_hints>:
{
   22afc:	b538      	push	{r3, r4, r5, lr}
   22afe:	4605      	mov	r5, r0
   22b00:	460c      	mov	r4, r1
__ssp_bos_icheck3(memset, void *, int)
   22b02:	2220      	movs	r2, #32
   22b04:	2100      	movs	r1, #0
   22b06:	4620      	mov	r0, r4
   22b08:	f001 ffed 	bl	24ae6 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   22b0c:	6868      	ldr	r0, [r5, #4]
   22b0e:	f7ff fc93 	bl	22438 <z_to_nrf_addrinfo_flags>
   22b12:	6020      	str	r0, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   22b14:	68e8      	ldr	r0, [r5, #12]
   22b16:	f7ff fcdd 	bl	224d4 <z_to_nrf_socktype>
   22b1a:	60a0      	str	r0, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   22b1c:	8928      	ldrh	r0, [r5, #8]
   22b1e:	f7ff fc99 	bl	22454 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   22b22:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   22b26:	d00b      	beq.n	22b40 <z_to_nrf_addrinfo_hints+0x44>
	nrf_out->ai_family = family;
   22b28:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   22b2a:	6928      	ldr	r0, [r5, #16]
   22b2c:	f7ff fcd3 	bl	224d6 <z_to_nrf_protocol>
   22b30:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   22b32:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   22b36:	d003      	beq.n	22b40 <z_to_nrf_addrinfo_hints+0x44>
	if (z_in->ai_canonname != NULL) {
   22b38:	69eb      	ldr	r3, [r5, #28]
   22b3a:	b113      	cbz	r3, 22b42 <z_to_nrf_addrinfo_hints+0x46>
		nrf_out->ai_canonname = z_in->ai_canonname;
   22b3c:	61a3      	str	r3, [r4, #24]
	return 0;
   22b3e:	2000      	movs	r0, #0
}
   22b40:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   22b42:	2000      	movs	r0, #0
   22b44:	e7fc      	b.n	22b40 <z_to_nrf_addrinfo_hints+0x44>

00022b46 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   22b46:	b570      	push	{r4, r5, r6, lr}
   22b48:	b082      	sub	sp, #8
   22b4a:	9001      	str	r0, [sp, #4]
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   22b4c:	b1a8      	cbz	r0, 22b7a <at_parser_max_params_from_str+0x34>
   22b4e:	460d      	mov	r5, r1
   22b50:	4614      	mov	r4, r2
   22b52:	461e      	mov	r6, r3
   22b54:	b1a2      	cbz	r2, 22b80 <at_parser_max_params_from_str+0x3a>
   22b56:	6853      	ldr	r3, [r2, #4]
   22b58:	b1ab      	cbz	r3, 22b86 <at_parser_max_params_from_str+0x40>
		return -EINVAL;
	}

	at_params_list_clear(list);
   22b5a:	4610      	mov	r0, r2
   22b5c:	f000 f85a 	bl	22c14 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   22b60:	6822      	ldr	r2, [r4, #0]

	err = at_parse_param(&at_params_str, list, max_params_count);
   22b62:	42b2      	cmp	r2, r6
   22b64:	bf28      	it	cs
   22b66:	4632      	movcs	r2, r6
   22b68:	4621      	mov	r1, r4
   22b6a:	a801      	add	r0, sp, #4
   22b6c:	f7f4 fa84 	bl	17078 <at_parse_param>

	if (next_param_str) {
   22b70:	b10d      	cbz	r5, 22b76 <at_parser_max_params_from_str+0x30>
		*next_param_str = (char *)at_params_str;
   22b72:	9b01      	ldr	r3, [sp, #4]
   22b74:	602b      	str	r3, [r5, #0]
	}

	return err;
}
   22b76:	b002      	add	sp, #8
   22b78:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22b7a:	f06f 0015 	mvn.w	r0, #21
   22b7e:	e7fa      	b.n	22b76 <at_parser_max_params_from_str+0x30>
   22b80:	f06f 0015 	mvn.w	r0, #21
   22b84:	e7f7      	b.n	22b76 <at_parser_max_params_from_str+0x30>
   22b86:	f06f 0015 	mvn.w	r0, #21
   22b8a:	e7f4      	b.n	22b76 <at_parser_max_params_from_str+0x30>

00022b8c <at_parser_params_from_str>:
{
   22b8c:	b508      	push	{r3, lr}
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   22b8e:	6813      	ldr	r3, [r2, #0]
   22b90:	f7ff ffd9 	bl	22b46 <at_parser_max_params_from_str>
}
   22b94:	bd08      	pop	{r3, pc}

00022b96 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   22b96:	6803      	ldr	r3, [r0, #0]
   22b98:	428b      	cmp	r3, r1
   22b9a:	d903      	bls.n	22ba4 <at_params_get+0xe>
		return NULL;
	}

	struct at_param *param = list->params;
   22b9c:	6840      	ldr	r0, [r0, #4]

	return &param[index];
   22b9e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   22ba2:	4770      	bx	lr
		return NULL;
   22ba4:	2000      	movs	r0, #0
}
   22ba6:	4770      	bx	lr

00022ba8 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   22ba8:	7803      	ldrb	r3, [r0, #0]
   22baa:	2b01      	cmp	r3, #1
   22bac:	d007      	beq.n	22bbe <at_param_size+0x16>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   22bae:	3b02      	subs	r3, #2
   22bb0:	b2db      	uxtb	r3, r3
   22bb2:	2b01      	cmp	r3, #1
   22bb4:	d901      	bls.n	22bba <at_param_size+0x12>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
	}

	return 0;
   22bb6:	2000      	movs	r0, #0
}
   22bb8:	4770      	bx	lr
		return param->size;
   22bba:	6840      	ldr	r0, [r0, #4]
   22bbc:	4770      	bx	lr
		return sizeof(uint64_t);
   22bbe:	2008      	movs	r0, #8
   22bc0:	4770      	bx	lr

00022bc2 <at_param_clear>:
{
   22bc2:	b510      	push	{r4, lr}
   22bc4:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   22bc6:	7803      	ldrb	r3, [r0, #0]
   22bc8:	3b02      	subs	r3, #2
   22bca:	b2db      	uxtb	r3, r3
   22bcc:	2b01      	cmp	r3, #1
   22bce:	d904      	bls.n	22bda <at_param_clear+0x18>
	param->value.int_val = 0;
   22bd0:	2200      	movs	r2, #0
   22bd2:	2300      	movs	r3, #0
   22bd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   22bd8:	bd10      	pop	{r4, pc}
		k_free(param->value.str_val);
   22bda:	6880      	ldr	r0, [r0, #8]
   22bdc:	f001 ff33 	bl	24a46 <k_free>
   22be0:	e7f6      	b.n	22bd0 <at_param_clear+0xe>

00022be2 <at_param_init>:
   22be2:	2300      	movs	r3, #0
   22be4:	6003      	str	r3, [r0, #0]
   22be6:	6043      	str	r3, [r0, #4]
   22be8:	6083      	str	r3, [r0, #8]
   22bea:	60c3      	str	r3, [r0, #12]
}
   22bec:	4770      	bx	lr

00022bee <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
	if (list == NULL) {
   22bee:	b158      	cbz	r0, 22c08 <at_params_list_init+0x1a>
{
   22bf0:	b538      	push	{r3, r4, r5, lr}
   22bf2:	460c      	mov	r4, r1
   22bf4:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   22bf6:	2110      	movs	r1, #16
   22bf8:	4620      	mov	r0, r4
   22bfa:	f001 ff33 	bl	24a64 <k_calloc>
   22bfe:	6068      	str	r0, [r5, #4]
	if (list->params == NULL) {
   22c00:	b128      	cbz	r0, 22c0e <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
   22c02:	602c      	str	r4, [r5, #0]
	return 0;
   22c04:	2000      	movs	r0, #0
}
   22c06:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22c08:	f06f 0015 	mvn.w	r0, #21
}
   22c0c:	4770      	bx	lr
		return -ENOMEM;
   22c0e:	f06f 000b 	mvn.w	r0, #11
   22c12:	e7f8      	b.n	22c06 <at_params_list_init+0x18>

00022c14 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   22c14:	b198      	cbz	r0, 22c3e <at_params_list_clear+0x2a>
{
   22c16:	b570      	push	{r4, r5, r6, lr}
   22c18:	4606      	mov	r6, r0
	if (list == NULL || list->params == NULL) {
   22c1a:	6843      	ldr	r3, [r0, #4]
   22c1c:	b173      	cbz	r3, 22c3c <at_params_list_clear+0x28>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   22c1e:	2500      	movs	r5, #0
   22c20:	e009      	b.n	22c36 <at_params_list_clear+0x22>
		struct at_param *params = list->params;
   22c22:	6874      	ldr	r4, [r6, #4]

		at_param_clear(&params[i]);
   22c24:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   22c28:	4620      	mov	r0, r4
   22c2a:	f7ff ffca 	bl	22bc2 <at_param_clear>
		at_param_init(&params[i]);
   22c2e:	4620      	mov	r0, r4
   22c30:	f7ff ffd7 	bl	22be2 <at_param_init>
	for (size_t i = 0; i < list->param_count; ++i) {
   22c34:	3501      	adds	r5, #1
   22c36:	6833      	ldr	r3, [r6, #0]
   22c38:	42ab      	cmp	r3, r5
   22c3a:	d8f2      	bhi.n	22c22 <at_params_list_clear+0xe>
	}
}
   22c3c:	bd70      	pop	{r4, r5, r6, pc}
   22c3e:	4770      	bx	lr

00022c40 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   22c40:	b160      	cbz	r0, 22c5c <at_params_list_free+0x1c>
{
   22c42:	b538      	push	{r3, r4, r5, lr}
   22c44:	4604      	mov	r4, r0
	if (list == NULL || list->params == NULL) {
   22c46:	6843      	ldr	r3, [r0, #4]
   22c48:	b13b      	cbz	r3, 22c5a <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);
   22c4a:	f7ff ffe3 	bl	22c14 <at_params_list_clear>

	list->param_count = 0;
   22c4e:	2500      	movs	r5, #0
   22c50:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   22c52:	6860      	ldr	r0, [r4, #4]
   22c54:	f001 fef7 	bl	24a46 <k_free>
	list->params = NULL;
   22c58:	6065      	str	r5, [r4, #4]
}
   22c5a:	bd38      	pop	{r3, r4, r5, pc}
   22c5c:	4770      	bx	lr

00022c5e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
	if (list == NULL || list->params == NULL) {
   22c5e:	b180      	cbz	r0, 22c82 <at_params_empty_put+0x24>
   22c60:	6842      	ldr	r2, [r0, #4]
   22c62:	b18a      	cbz	r2, 22c88 <at_params_empty_put+0x2a>
{
   22c64:	b510      	push	{r4, lr}
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22c66:	f7ff ff96 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22c6a:	4604      	mov	r4, r0
   22c6c:	b178      	cbz	r0, 22c8e <at_params_empty_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   22c6e:	f7ff ffa8 	bl	22bc2 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   22c72:	2304      	movs	r3, #4
   22c74:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   22c76:	2200      	movs	r2, #0
   22c78:	2300      	movs	r3, #0
   22c7a:	e9c4 2302 	strd	r2, r3, [r4, #8]

	return 0;
   22c7e:	2000      	movs	r0, #0
}
   22c80:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22c82:	f06f 0015 	mvn.w	r0, #21
   22c86:	4770      	bx	lr
   22c88:	f06f 0015 	mvn.w	r0, #21
}
   22c8c:	4770      	bx	lr
		return -EINVAL;
   22c8e:	f06f 0015 	mvn.w	r0, #21
   22c92:	e7f5      	b.n	22c80 <at_params_empty_put+0x22>

00022c94 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
	if (list == NULL || list->params == NULL) {
   22c94:	b180      	cbz	r0, 22cb8 <at_params_int_put+0x24>
{
   22c96:	b570      	push	{r4, r5, r6, lr}
   22c98:	4616      	mov	r6, r2
   22c9a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   22c9c:	6843      	ldr	r3, [r0, #4]
   22c9e:	b173      	cbz	r3, 22cbe <at_params_int_put+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22ca0:	f7ff ff79 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22ca4:	4604      	mov	r4, r0
   22ca6:	b168      	cbz	r0, 22cc4 <at_params_int_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   22ca8:	f7ff ff8b 	bl	22bc2 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   22cac:	2301      	movs	r3, #1
   22cae:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   22cb0:	60a6      	str	r6, [r4, #8]
   22cb2:	60e5      	str	r5, [r4, #12]
	return 0;
   22cb4:	2000      	movs	r0, #0
}
   22cb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22cb8:	f06f 0015 	mvn.w	r0, #21
}
   22cbc:	4770      	bx	lr
		return -EINVAL;
   22cbe:	f06f 0015 	mvn.w	r0, #21
   22cc2:	e7f8      	b.n	22cb6 <at_params_int_put+0x22>
		return -EINVAL;
   22cc4:	f06f 0015 	mvn.w	r0, #21
   22cc8:	e7f5      	b.n	22cb6 <at_params_int_put+0x22>

00022cca <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
	if (list == NULL || list->params == NULL || str == NULL) {
   22cca:	b1d8      	cbz	r0, 22d04 <at_params_string_put+0x3a>
{
   22ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cce:	4615      	mov	r5, r2
   22cd0:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   22cd2:	6842      	ldr	r2, [r0, #4]
   22cd4:	b1ca      	cbz	r2, 22d0a <at_params_string_put+0x40>
   22cd6:	b1dd      	cbz	r5, 22d10 <at_params_string_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22cd8:	f7ff ff5d 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22cdc:	4606      	mov	r6, r0
   22cde:	b1d0      	cbz	r0, 22d16 <at_params_string_put+0x4c>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   22ce0:	1c60      	adds	r0, r4, #1
   22ce2:	f001 feb9 	bl	24a58 <k_malloc>

	if (param_value == NULL) {
   22ce6:	4607      	mov	r7, r0
   22ce8:	b1c0      	cbz	r0, 22d1c <at_params_string_put+0x52>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22cea:	4622      	mov	r2, r4
   22cec:	4629      	mov	r1, r5
   22cee:	f001 feed 	bl	24acc <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   22cf2:	4630      	mov	r0, r6
   22cf4:	f7ff ff65 	bl	22bc2 <at_param_clear>
	param->size = str_len;
   22cf8:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_STRING;
   22cfa:	2302      	movs	r3, #2
   22cfc:	7033      	strb	r3, [r6, #0]
	param->value.str_val = param_value;
   22cfe:	60b7      	str	r7, [r6, #8]

	return 0;
   22d00:	2000      	movs	r0, #0
}
   22d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   22d04:	f06f 0015 	mvn.w	r0, #21
}
   22d08:	4770      	bx	lr
		return -EINVAL;
   22d0a:	f06f 0015 	mvn.w	r0, #21
   22d0e:	e7f8      	b.n	22d02 <at_params_string_put+0x38>
   22d10:	f06f 0015 	mvn.w	r0, #21
   22d14:	e7f5      	b.n	22d02 <at_params_string_put+0x38>
		return -EINVAL;
   22d16:	f06f 0015 	mvn.w	r0, #21
   22d1a:	e7f2      	b.n	22d02 <at_params_string_put+0x38>
		return -ENOMEM;
   22d1c:	f06f 000b 	mvn.w	r0, #11
   22d20:	e7ef      	b.n	22d02 <at_params_string_put+0x38>

00022d22 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
	if (list == NULL || list->params == NULL || array == NULL) {
   22d22:	b1d8      	cbz	r0, 22d5c <at_params_array_put+0x3a>
{
   22d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d26:	4615      	mov	r5, r2
   22d28:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   22d2a:	6842      	ldr	r2, [r0, #4]
   22d2c:	b1ca      	cbz	r2, 22d62 <at_params_array_put+0x40>
   22d2e:	b1dd      	cbz	r5, 22d68 <at_params_array_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22d30:	f7ff ff31 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22d34:	4606      	mov	r6, r0
   22d36:	b1d0      	cbz	r0, 22d6e <at_params_array_put+0x4c>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   22d38:	4620      	mov	r0, r4
   22d3a:	f001 fe8d 	bl	24a58 <k_malloc>

	if (param_value == NULL) {
   22d3e:	4607      	mov	r7, r0
   22d40:	b1c0      	cbz	r0, 22d74 <at_params_array_put+0x52>
   22d42:	4622      	mov	r2, r4
   22d44:	4629      	mov	r1, r5
   22d46:	f001 fec1 	bl	24acc <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   22d4a:	4630      	mov	r0, r6
   22d4c:	f7ff ff39 	bl	22bc2 <at_param_clear>
	param->size = array_len;
   22d50:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   22d52:	2303      	movs	r3, #3
   22d54:	7033      	strb	r3, [r6, #0]
	param->value.array_val = param_value;
   22d56:	60b7      	str	r7, [r6, #8]

	return 0;
   22d58:	2000      	movs	r0, #0
}
   22d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   22d5c:	f06f 0015 	mvn.w	r0, #21
}
   22d60:	4770      	bx	lr
		return -EINVAL;
   22d62:	f06f 0015 	mvn.w	r0, #21
   22d66:	e7f8      	b.n	22d5a <at_params_array_put+0x38>
   22d68:	f06f 0015 	mvn.w	r0, #21
   22d6c:	e7f5      	b.n	22d5a <at_params_array_put+0x38>
		return -EINVAL;
   22d6e:	f06f 0015 	mvn.w	r0, #21
   22d72:	e7f2      	b.n	22d5a <at_params_array_put+0x38>
		return -ENOMEM;
   22d74:	f06f 000b 	mvn.w	r0, #11
   22d78:	e7ef      	b.n	22d5a <at_params_array_put+0x38>

00022d7a <at_params_short_get>:
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   22d7a:	b1c0      	cbz	r0, 22dae <at_params_short_get+0x34>
{
   22d7c:	b510      	push	{r4, lr}
   22d7e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   22d80:	6842      	ldr	r2, [r0, #4]
   22d82:	b1ba      	cbz	r2, 22db4 <at_params_short_get+0x3a>
   22d84:	b1cc      	cbz	r4, 22dba <at_params_short_get+0x40>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22d86:	f7ff ff06 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22d8a:	b1c8      	cbz	r0, 22dc0 <at_params_short_get+0x46>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   22d8c:	7803      	ldrb	r3, [r0, #0]
   22d8e:	2b01      	cmp	r3, #1
   22d90:	d119      	bne.n	22dc6 <at_params_short_get+0x4c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   22d92:	6883      	ldr	r3, [r0, #8]
   22d94:	68c2      	ldr	r2, [r0, #12]
   22d96:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   22d9a:	f142 0200 	adc.w	r2, r2, #0
   22d9e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   22da2:	f172 0200 	sbcs.w	r2, r2, #0
   22da6:	d211      	bcs.n	22dcc <at_params_short_get+0x52>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
   22da8:	8023      	strh	r3, [r4, #0]
	return 0;
   22daa:	2000      	movs	r0, #0
}
   22dac:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22dae:	f06f 0015 	mvn.w	r0, #21
}
   22db2:	4770      	bx	lr
		return -EINVAL;
   22db4:	f06f 0015 	mvn.w	r0, #21
   22db8:	e7f8      	b.n	22dac <at_params_short_get+0x32>
   22dba:	f06f 0015 	mvn.w	r0, #21
   22dbe:	e7f5      	b.n	22dac <at_params_short_get+0x32>
		return -EINVAL;
   22dc0:	f06f 0015 	mvn.w	r0, #21
   22dc4:	e7f2      	b.n	22dac <at_params_short_get+0x32>
		return -EINVAL;
   22dc6:	f06f 0015 	mvn.w	r0, #21
   22dca:	e7ef      	b.n	22dac <at_params_short_get+0x32>
		return -EINVAL;
   22dcc:	f06f 0015 	mvn.w	r0, #21
   22dd0:	e7ec      	b.n	22dac <at_params_short_get+0x32>

00022dd2 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   22dd2:	b1a0      	cbz	r0, 22dfe <at_params_unsigned_short_get+0x2c>
{
   22dd4:	b510      	push	{r4, lr}
   22dd6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   22dd8:	6842      	ldr	r2, [r0, #4]
   22dda:	b19a      	cbz	r2, 22e04 <at_params_unsigned_short_get+0x32>
   22ddc:	b1ac      	cbz	r4, 22e0a <at_params_unsigned_short_get+0x38>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22dde:	f7ff feda 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22de2:	b1a8      	cbz	r0, 22e10 <at_params_unsigned_short_get+0x3e>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   22de4:	7802      	ldrb	r2, [r0, #0]
   22de6:	2a01      	cmp	r2, #1
   22de8:	d115      	bne.n	22e16 <at_params_unsigned_short_get+0x44>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   22dea:	6882      	ldr	r2, [r0, #8]
   22dec:	68c3      	ldr	r3, [r0, #12]
   22dee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   22df2:	f173 0300 	sbcs.w	r3, r3, #0
   22df6:	d211      	bcs.n	22e1c <at_params_unsigned_short_get+0x4a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   22df8:	8022      	strh	r2, [r4, #0]
	return 0;
   22dfa:	2000      	movs	r0, #0
}
   22dfc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22dfe:	f06f 0015 	mvn.w	r0, #21
}
   22e02:	4770      	bx	lr
		return -EINVAL;
   22e04:	f06f 0015 	mvn.w	r0, #21
   22e08:	e7f8      	b.n	22dfc <at_params_unsigned_short_get+0x2a>
   22e0a:	f06f 0015 	mvn.w	r0, #21
   22e0e:	e7f5      	b.n	22dfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
   22e10:	f06f 0015 	mvn.w	r0, #21
   22e14:	e7f2      	b.n	22dfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
   22e16:	f06f 0015 	mvn.w	r0, #21
   22e1a:	e7ef      	b.n	22dfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
   22e1c:	f06f 0015 	mvn.w	r0, #21
   22e20:	e7ec      	b.n	22dfc <at_params_unsigned_short_get+0x2a>

00022e22 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   22e22:	b1d8      	cbz	r0, 22e5c <at_params_int_get+0x3a>
{
   22e24:	b510      	push	{r4, lr}
   22e26:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   22e28:	6842      	ldr	r2, [r0, #4]
   22e2a:	b1d2      	cbz	r2, 22e62 <at_params_int_get+0x40>
   22e2c:	b1e4      	cbz	r4, 22e68 <at_params_int_get+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22e2e:	f7ff feb2 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22e32:	b1e0      	cbz	r0, 22e6e <at_params_int_get+0x4c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   22e34:	7803      	ldrb	r3, [r0, #0]
   22e36:	2b01      	cmp	r3, #1
   22e38:	d11c      	bne.n	22e74 <at_params_int_get+0x52>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   22e3a:	6883      	ldr	r3, [r0, #8]
   22e3c:	68c2      	ldr	r2, [r0, #12]
   22e3e:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   22e42:	f142 0200 	adc.w	r2, r2, #0
   22e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22e4a:	4288      	cmp	r0, r1
   22e4c:	f04f 0100 	mov.w	r1, #0
   22e50:	eb71 0202 	sbcs.w	r2, r1, r2
   22e54:	d311      	bcc.n	22e7a <at_params_int_get+0x58>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
   22e56:	6023      	str	r3, [r4, #0]
	return 0;
   22e58:	4608      	mov	r0, r1
}
   22e5a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22e5c:	f06f 0015 	mvn.w	r0, #21
}
   22e60:	4770      	bx	lr
		return -EINVAL;
   22e62:	f06f 0015 	mvn.w	r0, #21
   22e66:	e7f8      	b.n	22e5a <at_params_int_get+0x38>
   22e68:	f06f 0015 	mvn.w	r0, #21
   22e6c:	e7f5      	b.n	22e5a <at_params_int_get+0x38>
		return -EINVAL;
   22e6e:	f06f 0015 	mvn.w	r0, #21
   22e72:	e7f2      	b.n	22e5a <at_params_int_get+0x38>
		return -EINVAL;
   22e74:	f06f 0015 	mvn.w	r0, #21
   22e78:	e7ef      	b.n	22e5a <at_params_int_get+0x38>
		return -EINVAL;
   22e7a:	f06f 0015 	mvn.w	r0, #21
   22e7e:	e7ec      	b.n	22e5a <at_params_int_get+0x38>

00022e80 <at_params_int64_get>:
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   22e80:	b180      	cbz	r0, 22ea4 <at_params_int64_get+0x24>
{
   22e82:	b510      	push	{r4, lr}
   22e84:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   22e86:	6842      	ldr	r2, [r0, #4]
   22e88:	b17a      	cbz	r2, 22eaa <at_params_int64_get+0x2a>
   22e8a:	b18c      	cbz	r4, 22eb0 <at_params_int64_get+0x30>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22e8c:	f7ff fe83 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22e90:	b188      	cbz	r0, 22eb6 <at_params_int64_get+0x36>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   22e92:	7802      	ldrb	r2, [r0, #0]
   22e94:	2a01      	cmp	r2, #1
   22e96:	d111      	bne.n	22ebc <at_params_int64_get+0x3c>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   22e98:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   22e9c:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   22ea0:	2000      	movs	r0, #0
}
   22ea2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22ea4:	f06f 0015 	mvn.w	r0, #21
}
   22ea8:	4770      	bx	lr
		return -EINVAL;
   22eaa:	f06f 0015 	mvn.w	r0, #21
   22eae:	e7f8      	b.n	22ea2 <at_params_int64_get+0x22>
   22eb0:	f06f 0015 	mvn.w	r0, #21
   22eb4:	e7f5      	b.n	22ea2 <at_params_int64_get+0x22>
		return -EINVAL;
   22eb6:	f06f 0015 	mvn.w	r0, #21
   22eba:	e7f2      	b.n	22ea2 <at_params_int64_get+0x22>
		return -EINVAL;
   22ebc:	f06f 0015 	mvn.w	r0, #21
   22ec0:	e7ef      	b.n	22ea2 <at_params_int64_get+0x22>

00022ec2 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
	if (list == NULL || list->params == NULL || value == NULL ||
   22ec2:	b1d8      	cbz	r0, 22efc <at_params_string_get+0x3a>
{
   22ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ec6:	4616      	mov	r6, r2
   22ec8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   22eca:	6842      	ldr	r2, [r0, #4]
   22ecc:	b1ca      	cbz	r2, 22f02 <at_params_string_get+0x40>
   22ece:	b1de      	cbz	r6, 22f08 <at_params_string_get+0x46>
	    value == NULL || len == NULL) {
   22ed0:	b1ec      	cbz	r4, 22f0e <at_params_string_get+0x4c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   22ed2:	f7ff fe60 	bl	22b96 <at_params_get>

	if (param == NULL) {
   22ed6:	4607      	mov	r7, r0
   22ed8:	b1e0      	cbz	r0, 22f14 <at_params_string_get+0x52>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   22eda:	7803      	ldrb	r3, [r0, #0]
   22edc:	2b02      	cmp	r3, #2
   22ede:	d11c      	bne.n	22f1a <at_params_string_get+0x58>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   22ee0:	f7ff fe62 	bl	22ba8 <at_param_size>
   22ee4:	4605      	mov	r5, r0

	if (*len < param_len) {
   22ee6:	6823      	ldr	r3, [r4, #0]
   22ee8:	4283      	cmp	r3, r0
   22eea:	d319      	bcc.n	22f20 <at_params_string_get+0x5e>
   22eec:	4602      	mov	r2, r0
   22eee:	68b9      	ldr	r1, [r7, #8]
   22ef0:	4630      	mov	r0, r6
   22ef2:	f001 fdeb 	bl	24acc <memcpy>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;
   22ef6:	6025      	str	r5, [r4, #0]

	return 0;
   22ef8:	2000      	movs	r0, #0
}
   22efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   22efc:	f06f 0015 	mvn.w	r0, #21
}
   22f00:	4770      	bx	lr
		return -EINVAL;
   22f02:	f06f 0015 	mvn.w	r0, #21
   22f06:	e7f8      	b.n	22efa <at_params_string_get+0x38>
   22f08:	f06f 0015 	mvn.w	r0, #21
   22f0c:	e7f5      	b.n	22efa <at_params_string_get+0x38>
   22f0e:	f06f 0015 	mvn.w	r0, #21
   22f12:	e7f2      	b.n	22efa <at_params_string_get+0x38>
		return -EINVAL;
   22f14:	f06f 0015 	mvn.w	r0, #21
   22f18:	e7ef      	b.n	22efa <at_params_string_get+0x38>
		return -EINVAL;
   22f1a:	f06f 0015 	mvn.w	r0, #21
   22f1e:	e7ec      	b.n	22efa <at_params_string_get+0x38>
		return -ENOMEM;
   22f20:	f06f 000b 	mvn.w	r0, #11
   22f24:	e7e9      	b.n	22efa <at_params_string_get+0x38>

00022f26 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   22f26:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   22f28:	b190      	cbz	r0, 22f50 <at_params_valid_count_get+0x2a>
   22f2a:	4605      	mov	r5, r0
   22f2c:	6843      	ldr	r3, [r0, #4]
   22f2e:	b193      	cbz	r3, 22f56 <at_params_valid_count_get+0x30>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   22f30:	2100      	movs	r1, #0
   22f32:	f7ff fe30 	bl	22b96 <at_params_get>
	size_t valid_i = 0;
   22f36:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   22f38:	e004      	b.n	22f44 <at_params_valid_count_get+0x1e>
		valid_i += 1;
   22f3a:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   22f3c:	4621      	mov	r1, r4
   22f3e:	4628      	mov	r0, r5
   22f40:	f7ff fe29 	bl	22b96 <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   22f44:	b110      	cbz	r0, 22f4c <at_params_valid_count_get+0x26>
   22f46:	7803      	ldrb	r3, [r0, #0]
   22f48:	2b00      	cmp	r3, #0
   22f4a:	d1f6      	bne.n	22f3a <at_params_valid_count_get+0x14>
	}

	return valid_i;
}
   22f4c:	4620      	mov	r0, r4
   22f4e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22f50:	f06f 0415 	mvn.w	r4, #21
   22f54:	e7fa      	b.n	22f4c <at_params_valid_count_get+0x26>
   22f56:	f06f 0415 	mvn.w	r4, #21
   22f5a:	e7f7      	b.n	22f4c <at_params_valid_count_get+0x26>

00022f5c <is_cellid_valid>:
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   22f5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22f60:	d001      	beq.n	22f66 <is_cellid_valid+0xa>
	return true;
   22f62:	2001      	movs	r0, #1
   22f64:	4770      	bx	lr
		return false;
   22f66:	2000      	movs	r0, #0
}
   22f68:	4770      	bx	lr

00022f6a <lte_lc_init>:
{
   22f6a:	b508      	push	{r3, lr}
	int err = init_and_config();
   22f6c:	f7f4 ff18 	bl	17da0 <init_and_config>
	return err ? -EFAULT : 0;
   22f70:	b900      	cbnz	r0, 22f74 <lte_lc_init+0xa>
}
   22f72:	bd08      	pop	{r3, pc}
	return err ? -EFAULT : 0;
   22f74:	f06f 000d 	mvn.w	r0, #13
   22f78:	e7fb      	b.n	22f72 <lte_lc_init+0x8>

00022f7a <init_and_connect>:
{
   22f7a:	b508      	push	{r3, lr}
	err = lte_lc_init();
   22f7c:	f7ff fff5 	bl	22f6a <lte_lc_init>
	if (err) {
   22f80:	b100      	cbz	r0, 22f84 <init_and_connect+0xa>
}
   22f82:	bd08      	pop	{r3, pc}
	return connect_lte(true);
   22f84:	2001      	movs	r0, #1
   22f86:	f7f5 f82b 	bl	17fe0 <connect_lte>
   22f8a:	e7fa      	b.n	22f82 <init_and_connect+0x8>

00022f8c <lte_lc_init_and_connect>:
{
   22f8c:	b508      	push	{r3, lr}
	return init_and_connect(x);
   22f8e:	2000      	movs	r0, #0
   22f90:	f7ff fff3 	bl	22f7a <init_and_connect>
}
   22f94:	bd08      	pop	{r3, pc}

00022f96 <get_char_frequency>:
{
   22f96:	4603      	mov	r3, r0
	uint32_t count = 0;
   22f98:	2000      	movs	r0, #0
   22f9a:	e001      	b.n	22fa0 <get_char_frequency+0xa>
	} while (*(str++) != '\0');
   22f9c:	3301      	adds	r3, #1
   22f9e:	b122      	cbz	r2, 22faa <get_char_frequency+0x14>
		if (*str == c) {
   22fa0:	781a      	ldrb	r2, [r3, #0]
   22fa2:	428a      	cmp	r2, r1
   22fa4:	d1fa      	bne.n	22f9c <get_char_frequency+0x6>
			count++;
   22fa6:	3001      	adds	r0, #1
   22fa8:	e7f8      	b.n	22f9c <get_char_frequency+0x6>
}
   22faa:	4770      	bx	lr

00022fac <string_to_int>:
{
   22fac:	b570      	push	{r4, r5, r6, lr}
   22fae:	b082      	sub	sp, #8
   22fb0:	4604      	mov	r4, r0
   22fb2:	460d      	mov	r5, r1
   22fb4:	4616      	mov	r6, r2
	errno = 0;
   22fb6:	f7fd fcd2 	bl	2095e <__errno>
   22fba:	2300      	movs	r3, #0
   22fbc:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   22fbe:	462a      	mov	r2, r5
   22fc0:	a901      	add	r1, sp, #4
   22fc2:	4620      	mov	r0, r4
   22fc4:	f7fb fddc 	bl	1eb80 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   22fc8:	9b01      	ldr	r3, [sp, #4]
   22fca:	42a3      	cmp	r3, r4
   22fcc:	d011      	beq.n	22ff2 <string_to_int+0x46>
   22fce:	4605      	mov	r5, r0
   22fd0:	781b      	ldrb	r3, [r3, #0]
   22fd2:	b973      	cbnz	r3, 22ff2 <string_to_int+0x46>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   22fd4:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   22fd8:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   22fda:	f113 0f03 	cmn.w	r3, #3
   22fde:	d803      	bhi.n	22fe8 <string_to_int+0x3c>
	*output = temp;
   22fe0:	6035      	str	r5, [r6, #0]
	return 0;
   22fe2:	2000      	movs	r0, #0
}
   22fe4:	b002      	add	sp, #8
   22fe6:	bd70      	pop	{r4, r5, r6, pc}
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   22fe8:	f7fd fcb9 	bl	2095e <__errno>
   22fec:	6803      	ldr	r3, [r0, #0]
   22fee:	2b22      	cmp	r3, #34	; 0x22
   22ff0:	d1f6      	bne.n	22fe0 <string_to_int+0x34>
		return -ENODATA;
   22ff2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   22ff6:	e7f5      	b.n	22fe4 <string_to_int+0x38>

00022ff8 <string_param_to_int>:
{
   22ff8:	b530      	push	{r4, r5, lr}
   22ffa:	b087      	sub	sp, #28
   22ffc:	4615      	mov	r5, r2
   22ffe:	461c      	mov	r4, r3
	size_t len = sizeof(str_buf);
   23000:	2310      	movs	r3, #16
   23002:	9301      	str	r3, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   23004:	ab01      	add	r3, sp, #4
   23006:	aa02      	add	r2, sp, #8
   23008:	f7ff ff5b 	bl	22ec2 <at_params_string_get>
	if (err) {
   2300c:	b108      	cbz	r0, 23012 <string_param_to_int+0x1a>
}
   2300e:	b007      	add	sp, #28
   23010:	bd30      	pop	{r4, r5, pc}
	str_buf[len] = '\0';
   23012:	9b01      	ldr	r3, [sp, #4]
   23014:	aa06      	add	r2, sp, #24
   23016:	4413      	add	r3, r2
   23018:	2200      	movs	r2, #0
   2301a:	f803 2c10 	strb.w	r2, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   2301e:	462a      	mov	r2, r5
   23020:	4621      	mov	r1, r4
   23022:	a802      	add	r0, sp, #8
   23024:	f7ff ffc2 	bl	22fac <string_to_int>
   23028:	2800      	cmp	r0, #0
   2302a:	d0f0      	beq.n	2300e <string_param_to_int+0x16>
		return -ENODATA;
   2302c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   23030:	e7ed      	b.n	2300e <string_param_to_int+0x16>

00023032 <ext_api_satisfies_req>:
{
   23032:	b500      	push	{lr}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   23034:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   23036:	f8d1 e014 	ldr.w	lr, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2303a:	f8d1 c018 	ldr.w	ip, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   2303e:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   23040:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   23042:	429a      	cmp	r2, r3
   23044:	d002      	beq.n	2304c <ext_api_satisfies_req+0x1a>
   23046:	2000      	movs	r0, #0
}
   23048:	f85d fb04 	ldr.w	pc, [sp], #4
		&&  (ext_api->ext_api_version >= req_min_version)
   2304c:	6983      	ldr	r3, [r0, #24]
   2304e:	4563      	cmp	r3, ip
   23050:	d307      	bcc.n	23062 <ext_api_satisfies_req+0x30>
		&&  (ext_api->ext_api_version <  req_max_version)
   23052:	428b      	cmp	r3, r1
   23054:	d207      	bcs.n	23066 <ext_api_satisfies_req+0x34>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   23056:	6943      	ldr	r3, [r0, #20]
   23058:	ea3e 0303 	bics.w	r3, lr, r3
   2305c:	d005      	beq.n	2306a <ext_api_satisfies_req+0x38>
   2305e:	2000      	movs	r0, #0
   23060:	e7f2      	b.n	23048 <ext_api_satisfies_req+0x16>
   23062:	2000      	movs	r0, #0
   23064:	e7f0      	b.n	23048 <ext_api_satisfies_req+0x16>
   23066:	2000      	movs	r0, #0
   23068:	e7ee      	b.n	23048 <ext_api_satisfies_req+0x16>
   2306a:	2001      	movs	r0, #1
   2306c:	e7ec      	b.n	23048 <ext_api_satisfies_req+0x16>

0002306e <skip_ext_apis>:
{
   2306e:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   23070:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   23072:	2300      	movs	r3, #0
   23074:	e002      	b.n	2307c <skip_ext_apis+0xe>
		ADVANCE_EXT_API(ext_api);
   23076:	68c2      	ldr	r2, [r0, #12]
   23078:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   2307a:	3301      	adds	r3, #1
   2307c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   2307e:	429a      	cmp	r2, r3
   23080:	d8f9      	bhi.n	23076 <skip_ext_apis+0x8>
}
   23082:	4770      	bx	lr

00023084 <SystemInit>:

void SystemInit(void)
{
   23084:	b508      	push	{r3, lr}
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   23086:	f7f6 f831 	bl	190ec <SystemCoreClockUpdate>
}
   2308a:	bd08      	pop	{r3, pc}

0002308c <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   2308c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2308e:	4780      	blx	r0
}
   23090:	bd08      	pop	{r3, pc}

00023092 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   23092:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   23094:	f001 fbe6 	bl	24864 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   23098:	bd08      	pop	{r3, pc}

0002309a <nrfx_clock_enable>:
{
   2309a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2309c:	2005      	movs	r0, #5
   2309e:	f7f0 fe2d 	bl	13cfc <arch_irq_is_enabled>
   230a2:	b100      	cbz	r0, 230a6 <nrfx_clock_enable+0xc>
}
   230a4:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   230a6:	2005      	movs	r0, #5
   230a8:	f7f0 fe1a 	bl	13ce0 <arch_irq_enable>
   230ac:	e7fa      	b.n	230a4 <nrfx_clock_enable+0xa>

000230ae <pin_is_task_output>:
{
   230ae:	b510      	push	{r4, lr}
   230b0:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   230b2:	f7f6 f975 	bl	193a0 <pin_is_output>
   230b6:	b128      	cbz	r0, 230c4 <pin_is_task_output+0x16>
   230b8:	4620      	mov	r0, r4
   230ba:	f7f6 f95b 	bl	19374 <pin_in_use_by_te>
   230be:	b118      	cbz	r0, 230c8 <pin_is_task_output+0x1a>
   230c0:	2001      	movs	r0, #1
   230c2:	e000      	b.n	230c6 <pin_is_task_output+0x18>
   230c4:	2000      	movs	r0, #0
}
   230c6:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   230c8:	2000      	movs	r0, #0
   230ca:	e7fc      	b.n	230c6 <pin_is_task_output+0x18>

000230cc <pin_is_input>:
{
   230cc:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   230ce:	f7f6 f967 	bl	193a0 <pin_is_output>
   230d2:	f080 0001 	eor.w	r0, r0, #1
}
   230d6:	b2c0      	uxtb	r0, r0
   230d8:	bd08      	pop	{r3, pc}

000230da <gpiote_polarity_to_trigger>:
}
   230da:	4770      	bx	lr

000230dc <gpiote_trigger_to_polarity>:
}
   230dc:	4770      	bx	lr

000230de <is_level>:
}
   230de:	2803      	cmp	r0, #3
   230e0:	bf94      	ite	ls
   230e2:	2000      	movls	r0, #0
   230e4:	2001      	movhi	r0, #1
   230e6:	4770      	bx	lr

000230e8 <rpc_handle_ctrl_message>:
   230e8:	2902      	cmp	r1, #2
   230ea:	b510      	push	{r4, lr}
   230ec:	4604      	mov	r4, r0
   230ee:	d005      	beq.n	230fc <rpc_handle_ctrl_message+0x14>
   230f0:	2904      	cmp	r1, #4
   230f2:	d001      	beq.n	230f8 <rpc_handle_ctrl_message+0x10>
   230f4:	2901      	cmp	r1, #1
   230f6:	d107      	bne.n	23108 <rpc_handle_ctrl_message+0x20>
   230f8:	2000      	movs	r0, #0
   230fa:	bd10      	pop	{r4, pc}
   230fc:	6880      	ldr	r0, [r0, #8]
   230fe:	2800      	cmp	r0, #0
   23100:	d0fa      	beq.n	230f8 <rpc_handle_ctrl_message+0x10>
   23102:	f000 f833 	bl	2316c <rpc_transport_local_data_free>
   23106:	e7f7      	b.n	230f8 <rpc_handle_ctrl_message+0x10>
   23108:	6880      	ldr	r0, [r0, #8]
   2310a:	b108      	cbz	r0, 23110 <rpc_handle_ctrl_message+0x28>
   2310c:	f000 f82e 	bl	2316c <rpc_transport_local_data_free>
   23110:	4620      	mov	r0, r4
   23112:	f000 f827 	bl	23164 <rpc_transport_msg_free>
   23116:	e7ef      	b.n	230f8 <rpc_handle_ctrl_message+0x10>

00023118 <rpc_message_send>:
   23118:	6843      	ldr	r3, [r0, #4]
   2311a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2311e:	f043 0302 	orr.w	r3, r3, #2
   23122:	6043      	str	r3, [r0, #4]
   23124:	f000 b826 	b.w	23174 <rpc_transport_data_msg_send>

00023128 <rpc_message_alloc>:
   23128:	b570      	push	{r4, r5, r6, lr}
   2312a:	4606      	mov	r6, r0
   2312c:	b130      	cbz	r0, 2313c <rpc_message_alloc+0x14>
   2312e:	f000 f81b 	bl	23168 <rpc_transport_data_alloc>
   23132:	4605      	mov	r5, r0
   23134:	b918      	cbnz	r0, 2313e <rpc_message_alloc+0x16>
   23136:	2400      	movs	r4, #0
   23138:	4620      	mov	r0, r4
   2313a:	bd70      	pop	{r4, r5, r6, pc}
   2313c:	4605      	mov	r5, r0
   2313e:	f000 f80f 	bl	23160 <rpc_transport_data_msg_alloc>
   23142:	4604      	mov	r4, r0
   23144:	b110      	cbz	r0, 2314c <rpc_message_alloc+0x24>
   23146:	60c6      	str	r6, [r0, #12]
   23148:	6085      	str	r5, [r0, #8]
   2314a:	e7f5      	b.n	23138 <rpc_message_alloc+0x10>
   2314c:	2d00      	cmp	r5, #0
   2314e:	d0f2      	beq.n	23136 <rpc_message_alloc+0xe>
   23150:	4628      	mov	r0, r5
   23152:	f000 f80b 	bl	2316c <rpc_transport_local_data_free>
   23156:	e7ef      	b.n	23138 <rpc_message_alloc+0x10>

00023158 <rpc_message_free>:
   23158:	f000 b804 	b.w	23164 <rpc_transport_msg_free>

0002315c <rpc_message_data_free>:
   2315c:	f000 b808 	b.w	23170 <rpc_transport_peer_data_free>

00023160 <rpc_transport_data_msg_alloc>:
   23160:	f7f7 b854 	b.w	1a20c <rpc_transport_ipc_data_msg_alloc>

00023164 <rpc_transport_msg_free>:
   23164:	f7f7 b89e 	b.w	1a2a4 <rpc_transport_ipc_msg_free>

00023168 <rpc_transport_data_alloc>:
   23168:	f7f7 b882 	b.w	1a270 <rpc_transport_ipc_data_alloc>

0002316c <rpc_transport_local_data_free>:
   2316c:	f000 b804 	b.w	23178 <rpc_transport_ipc_local_data_free>

00023170 <rpc_transport_peer_data_free>:
   23170:	f000 b809 	b.w	23186 <rpc_transport_ipc_peer_data_free>

00023174 <rpc_transport_data_msg_send>:
   23174:	f7f7 b80e 	b.w	1a194 <rpc_transport_ipc_data_msg_send>

00023178 <rpc_transport_ipc_local_data_free>:
   23178:	b508      	push	{r3, lr}
   2317a:	f7f2 ff45 	bl	16008 <nrf_modem_os_shm_tx_free>
   2317e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23182:	f7f2 bf05 	b.w	15f90 <nrf_modem_os_application_irq_set>

00023186 <rpc_transport_ipc_peer_data_free>:
   23186:	b510      	push	{r4, lr}
   23188:	4604      	mov	r4, r0
   2318a:	f7f7 f851 	bl	1a230 <rpc_transport_ipc_ctrl_msg_alloc>
   2318e:	2101      	movs	r1, #1
   23190:	2200      	movs	r2, #0
   23192:	7001      	strb	r1, [r0, #0]
   23194:	2102      	movs	r1, #2
   23196:	6084      	str	r4, [r0, #8]
   23198:	7042      	strb	r2, [r0, #1]
   2319a:	7081      	strb	r1, [r0, #2]
   2319c:	70c2      	strb	r2, [r0, #3]
   2319e:	f7f7 f817 	bl	1a1d0 <rpc_transport_ipc_ctrl_msg_send>
   231a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   231a6:	f7f2 bef3 	b.w	15f90 <nrf_modem_os_application_irq_set>

000231aa <rpc_client_request_alloc>:
   231aa:	b508      	push	{r3, lr}
   231ac:	f7ff ffbc 	bl	23128 <rpc_message_alloc>
   231b0:	b100      	cbz	r0, 231b4 <rpc_client_request_alloc+0xa>
   231b2:	3008      	adds	r0, #8
   231b4:	bd08      	pop	{r3, pc}

000231b6 <rpc_client_request_send>:
   231b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   231ba:	4610      	mov	r0, r2
   231bc:	f840 1d08 	str.w	r1, [r0, #-8]!
   231c0:	f7ff bfaa 	b.w	23118 <rpc_message_send>

000231c4 <rpc_client_message_free>:
   231c4:	3808      	subs	r0, #8
   231c6:	f7ff bfc7 	b.w	23158 <rpc_message_free>

000231ca <rpc_client_data_free>:
   231ca:	f7ff bfc7 	b.w	2315c <rpc_message_data_free>

000231ce <packet_handler_alloc_and_init>:
   231ce:	b538      	push	{r3, r4, r5, lr}
   231d0:	4604      	mov	r4, r0
   231d2:	4608      	mov	r0, r1
   231d4:	4611      	mov	r1, r2
   231d6:	4622      	mov	r2, r4
   231d8:	f7f9 fb58 	bl	1c88c <packet_handler_create>
   231dc:	61e0      	str	r0, [r4, #28]
   231de:	b158      	cbz	r0, 231f8 <packet_handler_alloc_and_init+0x2a>
   231e0:	6803      	ldr	r3, [r0, #0]
   231e2:	681b      	ldr	r3, [r3, #0]
   231e4:	4798      	blx	r3
   231e6:	4605      	mov	r5, r0
   231e8:	b120      	cbz	r0, 231f4 <packet_handler_alloc_and_init+0x26>
   231ea:	69e0      	ldr	r0, [r4, #28]
   231ec:	f000 fce3 	bl	23bb6 <packet_handler_delete>
   231f0:	2300      	movs	r3, #0
   231f2:	61e3      	str	r3, [r4, #28]
   231f4:	4628      	mov	r0, r5
   231f6:	bd38      	pop	{r3, r4, r5, pc}
   231f8:	250c      	movs	r5, #12
   231fa:	e7fb      	b.n	231f4 <packet_handler_alloc_and_init+0x26>

000231fc <socket_free>:
   231fc:	b510      	push	{r4, lr}
   231fe:	4604      	mov	r4, r0
   23200:	69c0      	ldr	r0, [r0, #28]
   23202:	b108      	cbz	r0, 23208 <socket_free+0xc>
   23204:	f000 fcd7 	bl	23bb6 <packet_handler_delete>
   23208:	4620      	mov	r0, r4
   2320a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2320e:	222c      	movs	r2, #44	; 0x2c
   23210:	2100      	movs	r1, #0
   23212:	f001 bc68 	b.w	24ae6 <memset>

00023216 <interface_socket_event_get>:
   23216:	b510      	push	{r4, lr}
   23218:	4604      	mov	r4, r0
   2321a:	b189      	cbz	r1, 23240 <interface_socket_event_get+0x2a>
   2321c:	f7f7 fa8e 	bl	1a73c <interface_socket_from_handle_get>
   23220:	b158      	cbz	r0, 2323a <interface_socket_event_get+0x24>
   23222:	6803      	ldr	r3, [r0, #0]
   23224:	0c1b      	lsrs	r3, r3, #16
   23226:	f003 020a 	and.w	r2, r3, #10
   2322a:	2a0a      	cmp	r2, #10
   2322c:	bf14      	ite	ne
   2322e:	f003 030f 	andne.w	r3, r3, #15
   23232:	f003 030d 	andeq.w	r3, r3, #13
   23236:	600b      	str	r3, [r1, #0]
   23238:	e002      	b.n	23240 <interface_socket_event_get+0x2a>
   2323a:	2c00      	cmp	r4, #0
   2323c:	da01      	bge.n	23242 <interface_socket_event_get+0x2c>
   2323e:	6008      	str	r0, [r1, #0]
   23240:	bd10      	pop	{r4, pc}
   23242:	2310      	movs	r3, #16
   23244:	e7f7      	b.n	23236 <interface_socket_event_get+0x20>

00023246 <ip_recvd_packet_free_cb>:
   23246:	b510      	push	{r4, lr}
   23248:	4604      	mov	r4, r0
   2324a:	6800      	ldr	r0, [r0, #0]
   2324c:	f7ff ffbd 	bl	231ca <rpc_client_data_free>
   23250:	68a0      	ldr	r0, [r4, #8]
   23252:	b118      	cbz	r0, 2325c <ip_recvd_packet_free_cb+0x16>
   23254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23258:	f7f2 bec4 	b.w	15fe4 <nrf_modem_os_free>
   2325c:	bd10      	pop	{r4, pc}

0002325e <protocol_verify>:
   2325e:	b508      	push	{r3, lr}
   23260:	4603      	mov	r3, r0
   23262:	4608      	mov	r0, r1
   23264:	b169      	cbz	r1, 23282 <protocol_verify+0x24>
   23266:	2b01      	cmp	r3, #1
   23268:	d107      	bne.n	2327a <protocol_verify+0x1c>
   2326a:	2901      	cmp	r1, #1
   2326c:	d013      	beq.n	23296 <protocol_verify+0x38>
   2326e:	206b      	movs	r0, #107	; 0x6b
   23270:	f7fe ffd4 	bl	2221c <nrf_modem_os_errno_set>
   23274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23278:	bd08      	pop	{r3, pc}
   2327a:	2b02      	cmp	r3, #2
   2327c:	d10b      	bne.n	23296 <protocol_verify+0x38>
   2327e:	2902      	cmp	r1, #2
   23280:	e7f4      	b.n	2326c <protocol_verify+0xe>
   23282:	2b01      	cmp	r3, #1
   23284:	d101      	bne.n	2328a <protocol_verify+0x2c>
   23286:	6013      	str	r3, [r2, #0]
   23288:	e7f6      	b.n	23278 <protocol_verify+0x1a>
   2328a:	2b03      	cmp	r3, #3
   2328c:	d101      	bne.n	23292 <protocol_verify+0x34>
   2328e:	6011      	str	r1, [r2, #0]
   23290:	e7f2      	b.n	23278 <protocol_verify+0x1a>
   23292:	2302      	movs	r3, #2
   23294:	e7f7      	b.n	23286 <protocol_verify+0x28>
   23296:	2000      	movs	r0, #0
   23298:	e7ee      	b.n	23278 <protocol_verify+0x1a>

0002329a <ip_addr_parse>:
   2329a:	b570      	push	{r4, r5, r6, lr}
   2329c:	684d      	ldr	r5, [r1, #4]
   2329e:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   232a2:	4285      	cmp	r5, r0
   232a4:	d11f      	bne.n	232e6 <ip_addr_parse+0x4c>
   232a6:	7808      	ldrb	r0, [r1, #0]
   232a8:	4290      	cmp	r0, r2
   232aa:	d11e      	bne.n	232ea <ip_addr_parse+0x50>
   232ac:	2d02      	cmp	r5, #2
   232ae:	d109      	bne.n	232c4 <ip_addr_parse+0x2a>
   232b0:	2810      	cmp	r0, #16
   232b2:	d11a      	bne.n	232ea <ip_addr_parse+0x50>
   232b4:	890a      	ldrh	r2, [r1, #8]
   232b6:	8032      	strh	r2, [r6, #0]
   232b8:	2204      	movs	r2, #4
   232ba:	801a      	strh	r2, [r3, #0]
   232bc:	68cb      	ldr	r3, [r1, #12]
   232be:	6023      	str	r3, [r4, #0]
   232c0:	2000      	movs	r0, #0
   232c2:	bd70      	pop	{r4, r5, r6, pc}
   232c4:	2d0a      	cmp	r5, #10
   232c6:	d110      	bne.n	232ea <ip_addr_parse+0x50>
   232c8:	2824      	cmp	r0, #36	; 0x24
   232ca:	d10e      	bne.n	232ea <ip_addr_parse+0x50>
   232cc:	890a      	ldrh	r2, [r1, #8]
   232ce:	8032      	strh	r2, [r6, #0]
   232d0:	2210      	movs	r2, #16
   232d2:	801a      	strh	r2, [r3, #0]
   232d4:	188b      	adds	r3, r1, r2
   232d6:	3120      	adds	r1, #32
   232d8:	f853 2b04 	ldr.w	r2, [r3], #4
   232dc:	428b      	cmp	r3, r1
   232de:	f844 2b04 	str.w	r2, [r4], #4
   232e2:	d1f9      	bne.n	232d8 <ip_addr_parse+0x3e>
   232e4:	e7ec      	b.n	232c0 <ip_addr_parse+0x26>
   232e6:	206a      	movs	r0, #106	; 0x6a
   232e8:	e7eb      	b.n	232c2 <ip_addr_parse+0x28>
   232ea:	2016      	movs	r0, #22
   232ec:	e7e9      	b.n	232c2 <ip_addr_parse+0x28>

000232ee <ip_interface_request_create>:
   232ee:	b570      	push	{r4, r5, r6, lr}
   232f0:	4606      	mov	r6, r0
   232f2:	4618      	mov	r0, r3
   232f4:	460d      	mov	r5, r1
   232f6:	4614      	mov	r4, r2
   232f8:	f7ff ff57 	bl	231aa <rpc_client_request_alloc>
   232fc:	b148      	cbz	r0, 23312 <ip_interface_request_create+0x24>
   232fe:	2300      	movs	r3, #0
   23300:	2208      	movs	r2, #8
   23302:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   23306:	60c4      	str	r4, [r0, #12]
   23308:	6105      	str	r5, [r0, #16]
   2330a:	7202      	strb	r2, [r0, #8]
   2330c:	7243      	strb	r3, [r0, #9]
   2330e:	7283      	strb	r3, [r0, #10]
   23310:	72c3      	strb	r3, [r0, #11]
   23312:	bd70      	pop	{r4, r5, r6, pc}

00023314 <ip_interface_wait>:
   23314:	b538      	push	{r3, r4, r5, lr}
   23316:	4605      	mov	r5, r0
   23318:	f7f7 f996 	bl	1a648 <interface_socket_wait>
   2331c:	4604      	mov	r4, r0
   2331e:	b938      	cbnz	r0, 23330 <ip_interface_wait+0x1c>
   23320:	4628      	mov	r0, r5
   23322:	f7f7 fa0b 	bl	1a73c <interface_socket_from_handle_get>
   23326:	b118      	cbz	r0, 23330 <ip_interface_wait+0x1c>
   23328:	6844      	ldr	r4, [r0, #4]
   2332a:	b10c      	cbz	r4, 23330 <ip_interface_wait+0x1c>
   2332c:	2300      	movs	r3, #0
   2332e:	6043      	str	r3, [r0, #4]
   23330:	4620      	mov	r0, r4
   23332:	bd38      	pop	{r3, r4, r5, pc}

00023334 <ip_interface_recvfrom>:
   23334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23338:	b087      	sub	sp, #28
   2333a:	4681      	mov	r9, r0
   2333c:	461e      	mov	r6, r3
   2333e:	4690      	mov	r8, r2
   23340:	9f11      	ldr	r7, [sp, #68]	; 0x44
   23342:	9101      	str	r1, [sp, #4]
   23344:	2a00      	cmp	r2, #0
   23346:	f000 80e8 	beq.w	2351a <ip_interface_recvfrom+0x1e6>
   2334a:	b11b      	cbz	r3, 23354 <ip_interface_recvfrom+0x20>
   2334c:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   23350:	f000 80e5 	beq.w	2351e <ip_interface_recvfrom+0x1ea>
   23354:	4648      	mov	r0, r9
   23356:	f7f7 f9f1 	bl	1a73c <interface_socket_from_handle_get>
   2335a:	4604      	mov	r4, r0
   2335c:	2800      	cmp	r0, #0
   2335e:	f000 80e0 	beq.w	23522 <ip_interface_recvfrom+0x1ee>
   23362:	6803      	ldr	r3, [r0, #0]
   23364:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   23368:	d10f      	bne.n	2338a <ip_interface_recvfrom+0x56>
   2336a:	6802      	ldr	r2, [r0, #0]
   2336c:	b292      	uxth	r2, r2
   2336e:	2a06      	cmp	r2, #6
   23370:	f000 809e 	beq.w	234b0 <ip_interface_recvfrom+0x17c>
   23374:	6802      	ldr	r2, [r0, #0]
   23376:	461e      	mov	r6, r3
   23378:	b292      	uxth	r2, r2
   2337a:	2a07      	cmp	r2, #7
   2337c:	469a      	mov	sl, r3
   2337e:	f000 8099 	beq.w	234b4 <ip_interface_recvfrom+0x180>
   23382:	2280      	movs	r2, #128	; 0x80
   23384:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23388:	e084      	b.n	23494 <ip_interface_recvfrom+0x160>
   2338a:	07b1      	lsls	r1, r6, #30
   2338c:	d422      	bmi.n	233d4 <ip_interface_recvfrom+0xa0>
   2338e:	6803      	ldr	r3, [r0, #0]
   23390:	00da      	lsls	r2, r3, #3
   23392:	d522      	bpl.n	233da <ip_interface_recvfrom+0xa6>
   23394:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   23398:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2339c:	f006 0b10 	and.w	fp, r6, #16
   233a0:	6822      	ldr	r2, [r4, #0]
   233a2:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   233a6:	d01b      	beq.n	233e0 <ip_interface_recvfrom+0xac>
   233a8:	6822      	ldr	r2, [r4, #0]
   233aa:	69e0      	ldr	r0, [r4, #28]
   233ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   233b0:	6022      	str	r2, [r4, #0]
   233b2:	6802      	ldr	r2, [r0, #0]
   233b4:	68d2      	ldr	r2, [r2, #12]
   233b6:	4790      	blx	r2
   233b8:	1c43      	adds	r3, r0, #1
   233ba:	4605      	mov	r5, r0
   233bc:	d029      	beq.n	23412 <ip_interface_recvfrom+0xde>
   233be:	4580      	cmp	r8, r0
   233c0:	dd05      	ble.n	233ce <ip_interface_recvfrom+0x9a>
   233c2:	6923      	ldr	r3, [r4, #16]
   233c4:	2b01      	cmp	r3, #1
   233c6:	d102      	bne.n	233ce <ip_interface_recvfrom+0x9a>
   233c8:	f1bb 0f00 	cmp.w	fp, #0
   233cc:	d125      	bne.n	2341a <ip_interface_recvfrom+0xe6>
   233ce:	f04f 0a00 	mov.w	sl, #0
   233d2:	e04a      	b.n	2346a <ip_interface_recvfrom+0x136>
   233d4:	f04f 0a00 	mov.w	sl, #0
   233d8:	e7de      	b.n	23398 <ip_interface_recvfrom+0x64>
   233da:	f04f 0a01 	mov.w	sl, #1
   233de:	e7db      	b.n	23398 <ip_interface_recvfrom+0x64>
   233e0:	6821      	ldr	r1, [r4, #0]
   233e2:	0308      	lsls	r0, r1, #12
   233e4:	d515      	bpl.n	23412 <ip_interface_recvfrom+0xde>
   233e6:	6821      	ldr	r1, [r4, #0]
   233e8:	b289      	uxth	r1, r1
   233ea:	290d      	cmp	r1, #13
   233ec:	d011      	beq.n	23412 <ip_interface_recvfrom+0xde>
   233ee:	6923      	ldr	r3, [r4, #16]
   233f0:	2b01      	cmp	r3, #1
   233f2:	f000 809e 	beq.w	23532 <ip_interface_recvfrom+0x1fe>
   233f6:	4692      	mov	sl, r2
   233f8:	2280      	movs	r2, #128	; 0x80
   233fa:	6823      	ldr	r3, [r4, #0]
   233fc:	0c1b      	lsrs	r3, r3, #16
   233fe:	041b      	lsls	r3, r3, #16
   23400:	f043 030d 	orr.w	r3, r3, #13
   23404:	6023      	str	r3, [r4, #0]
   23406:	6823      	ldr	r3, [r4, #0]
   23408:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2340c:	6023      	str	r3, [r4, #0]
   2340e:	2600      	movs	r6, #0
   23410:	e040      	b.n	23494 <ip_interface_recvfrom+0x160>
   23412:	f1ba 0f00 	cmp.w	sl, #0
   23416:	f000 808d 	beq.w	23534 <ip_interface_recvfrom+0x200>
   2341a:	6a23      	ldr	r3, [r4, #32]
   2341c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   23420:	2b00      	cmp	r3, #0
   23422:	bf08      	it	eq
   23424:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   23428:	4611      	mov	r1, r2
   2342a:	9302      	str	r3, [sp, #8]
   2342c:	4648      	mov	r0, r9
   2342e:	ab02      	add	r3, sp, #8
   23430:	f7ff ff70 	bl	23314 <ip_interface_wait>
   23434:	6823      	ldr	r3, [r4, #0]
   23436:	4602      	mov	r2, r0
   23438:	b29b      	uxth	r3, r3
   2343a:	b933      	cbnz	r3, 2344a <ip_interface_recvfrom+0x116>
   2343c:	2204      	movs	r2, #4
   2343e:	4610      	mov	r0, r2
   23440:	f7fe feec 	bl	2221c <nrf_modem_os_errno_set>
   23444:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23448:	e046      	b.n	234d8 <ip_interface_recvfrom+0x1a4>
   2344a:	2800      	cmp	r0, #0
   2344c:	d06b      	beq.n	23526 <ip_interface_recvfrom+0x1f2>
   2344e:	6823      	ldr	r3, [r4, #0]
   23450:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   23454:	d06a      	beq.n	2352c <ip_interface_recvfrom+0x1f8>
   23456:	6823      	ldr	r3, [r4, #0]
   23458:	b29b      	uxth	r3, r3
   2345a:	2b0d      	cmp	r3, #13
   2345c:	d066      	beq.n	2352c <ip_interface_recvfrom+0x1f8>
   2345e:	6923      	ldr	r3, [r4, #16]
   23460:	1e59      	subs	r1, r3, #1
   23462:	f1d1 0a00 	rsbs	sl, r1, #0
   23466:	eb4a 0a01 	adc.w	sl, sl, r1
   2346a:	b107      	cbz	r7, 2346e <ip_interface_recvfrom+0x13a>
   2346c:	683f      	ldr	r7, [r7, #0]
   2346e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   23470:	69e0      	ldr	r0, [r4, #28]
   23472:	e9cd 2704 	strd	r2, r7, [sp, #16]
   23476:	9b01      	ldr	r3, [sp, #4]
   23478:	6802      	ldr	r2, [r0, #0]
   2347a:	e9cd 3802 	strd	r3, r8, [sp, #8]
   2347e:	6895      	ldr	r5, [r2, #8]
   23480:	a902      	add	r1, sp, #8
   23482:	4632      	mov	r2, r6
   23484:	47a8      	blx	r5
   23486:	1c42      	adds	r2, r0, #1
   23488:	4605      	mov	r5, r0
   2348a:	bf0b      	itete	eq
   2348c:	2600      	moveq	r6, #0
   2348e:	2601      	movne	r6, #1
   23490:	220b      	moveq	r2, #11
   23492:	2200      	movne	r2, #0
   23494:	69e0      	ldr	r0, [r4, #28]
   23496:	9201      	str	r2, [sp, #4]
   23498:	6801      	ldr	r1, [r0, #0]
   2349a:	68c9      	ldr	r1, [r1, #12]
   2349c:	4788      	blx	r1
   2349e:	3001      	adds	r0, #1
   234a0:	9a01      	ldr	r2, [sp, #4]
   234a2:	d009      	beq.n	234b8 <ip_interface_recvfrom+0x184>
   234a4:	6823      	ldr	r3, [r4, #0]
   234a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   234aa:	6023      	str	r3, [r4, #0]
   234ac:	b1a2      	cbz	r2, 234d8 <ip_interface_recvfrom+0x1a4>
   234ae:	e7c6      	b.n	2343e <ip_interface_recvfrom+0x10a>
   234b0:	461e      	mov	r6, r3
   234b2:	469a      	mov	sl, r3
   234b4:	2209      	movs	r2, #9
   234b6:	e765      	b.n	23384 <ip_interface_recvfrom+0x50>
   234b8:	f1ba 0f00 	cmp.w	sl, #0
   234bc:	d010      	beq.n	234e0 <ip_interface_recvfrom+0x1ac>
   234be:	2e00      	cmp	r6, #0
   234c0:	d1f4      	bne.n	234ac <ip_interface_recvfrom+0x178>
   234c2:	4635      	mov	r5, r6
   234c4:	6823      	ldr	r3, [r4, #0]
   234c6:	0c1b      	lsrs	r3, r3, #16
   234c8:	041b      	lsls	r3, r3, #16
   234ca:	f043 030d 	orr.w	r3, r3, #13
   234ce:	6023      	str	r3, [r4, #0]
   234d0:	6823      	ldr	r3, [r4, #0]
   234d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   234d6:	6023      	str	r3, [r4, #0]
   234d8:	4628      	mov	r0, r5
   234da:	b007      	add	sp, #28
   234dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234e0:	2e00      	cmp	r6, #0
   234e2:	d1e3      	bne.n	234ac <ip_interface_recvfrom+0x178>
   234e4:	6823      	ldr	r3, [r4, #0]
   234e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   234ea:	6823      	ldr	r3, [r4, #0]
   234ec:	d00a      	beq.n	23504 <ip_interface_recvfrom+0x1d0>
   234ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   234f2:	6023      	str	r3, [r4, #0]
   234f4:	6823      	ldr	r3, [r4, #0]
   234f6:	2269      	movs	r2, #105	; 0x69
   234f8:	0c1b      	lsrs	r3, r3, #16
   234fa:	041b      	lsls	r3, r3, #16
   234fc:	f043 030d 	orr.w	r3, r3, #13
   23500:	6023      	str	r3, [r4, #0]
   23502:	e79c      	b.n	2343e <ip_interface_recvfrom+0x10a>
   23504:	031b      	lsls	r3, r3, #12
   23506:	d5d1      	bpl.n	234ac <ip_interface_recvfrom+0x178>
   23508:	6823      	ldr	r3, [r4, #0]
   2350a:	b29b      	uxth	r3, r3
   2350c:	2b0d      	cmp	r3, #13
   2350e:	d1cd      	bne.n	234ac <ip_interface_recvfrom+0x178>
   23510:	68a3      	ldr	r3, [r4, #8]
   23512:	2b00      	cmp	r3, #0
   23514:	d0ca      	beq.n	234ac <ip_interface_recvfrom+0x178>
   23516:	68a2      	ldr	r2, [r4, #8]
   23518:	e7c8      	b.n	234ac <ip_interface_recvfrom+0x178>
   2351a:	2216      	movs	r2, #22
   2351c:	e78f      	b.n	2343e <ip_interface_recvfrom+0x10a>
   2351e:	225f      	movs	r2, #95	; 0x5f
   23520:	e78d      	b.n	2343e <ip_interface_recvfrom+0x10a>
   23522:	2209      	movs	r2, #9
   23524:	e78b      	b.n	2343e <ip_interface_recvfrom+0x10a>
   23526:	f04f 0a01 	mov.w	sl, #1
   2352a:	e739      	b.n	233a0 <ip_interface_recvfrom+0x6c>
   2352c:	2600      	movs	r6, #0
   2352e:	46b2      	mov	sl, r6
   23530:	e7b0      	b.n	23494 <ip_interface_recvfrom+0x160>
   23532:	469a      	mov	sl, r3
   23534:	220b      	movs	r2, #11
   23536:	e76a      	b.n	2340e <ip_interface_recvfrom+0xda>

00023538 <ip_interface_connect>:
   23538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2353c:	4606      	mov	r6, r0
   2353e:	4691      	mov	r9, r2
   23540:	460f      	mov	r7, r1
   23542:	b085      	sub	sp, #20
   23544:	2900      	cmp	r1, #0
   23546:	d067      	beq.n	23618 <ip_interface_connect+0xe0>
   23548:	2a00      	cmp	r2, #0
   2354a:	d065      	beq.n	23618 <ip_interface_connect+0xe0>
   2354c:	f7f7 f8f6 	bl	1a73c <interface_socket_from_handle_get>
   23550:	4604      	mov	r4, r0
   23552:	2800      	cmp	r0, #0
   23554:	d062      	beq.n	2361c <ip_interface_connect+0xe4>
   23556:	6803      	ldr	r3, [r0, #0]
   23558:	b29b      	uxth	r3, r3
   2355a:	2b02      	cmp	r3, #2
   2355c:	d003      	beq.n	23566 <ip_interface_connect+0x2e>
   2355e:	6803      	ldr	r3, [r0, #0]
   23560:	b29b      	uxth	r3, r3
   23562:	2b04      	cmp	r3, #4
   23564:	d151      	bne.n	2360a <ip_interface_connect+0xd2>
   23566:	6823      	ldr	r3, [r4, #0]
   23568:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   2356c:	d158      	bne.n	23620 <ip_interface_connect+0xe8>
   2356e:	f247 0202 	movw	r2, #28674	; 0x7002
   23572:	4630      	mov	r0, r6
   23574:	69a1      	ldr	r1, [r4, #24]
   23576:	f7ff feba 	bl	232ee <ip_interface_request_create>
   2357a:	4605      	mov	r5, r0
   2357c:	2800      	cmp	r0, #0
   2357e:	d051      	beq.n	23624 <ip_interface_connect+0xec>
   23580:	f247 0802 	movw	r8, #28674	; 0x7002
   23584:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   23588:	60c3      	str	r3, [r0, #12]
   2358a:	69a3      	ldr	r3, [r4, #24]
   2358c:	464a      	mov	r2, r9
   2358e:	6103      	str	r3, [r0, #16]
   23590:	6883      	ldr	r3, [r0, #8]
   23592:	4639      	mov	r1, r7
   23594:	3304      	adds	r3, #4
   23596:	6083      	str	r3, [r0, #8]
   23598:	f100 0318 	add.w	r3, r0, #24
   2359c:	9301      	str	r3, [sp, #4]
   2359e:	f10d 030a 	add.w	r3, sp, #10
   235a2:	9300      	str	r3, [sp, #0]
   235a4:	68e0      	ldr	r0, [r4, #12]
   235a6:	ab02      	add	r3, sp, #8
   235a8:	f7ff fe77 	bl	2329a <ip_addr_parse>
   235ac:	bb30      	cbnz	r0, 235fc <ip_interface_connect+0xc4>
   235ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   235b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   235b6:	82ab      	strh	r3, [r5, #20]
   235b8:	68ab      	ldr	r3, [r5, #8]
   235ba:	6827      	ldr	r7, [r4, #0]
   235bc:	4413      	add	r3, r2
   235be:	60ab      	str	r3, [r5, #8]
   235c0:	6823      	ldr	r3, [r4, #0]
   235c2:	82ea      	strh	r2, [r5, #22]
   235c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   235c8:	6023      	str	r3, [r4, #0]
   235ca:	462a      	mov	r2, r5
   235cc:	4641      	mov	r1, r8
   235ce:	2004      	movs	r0, #4
   235d0:	f7ff fdf1 	bl	231b6 <rpc_client_request_send>
   235d4:	6823      	ldr	r3, [r4, #0]
   235d6:	00db      	lsls	r3, r3, #3
   235d8:	d426      	bmi.n	23628 <ip_interface_connect+0xf0>
   235da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   235dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   235e0:	2b00      	cmp	r3, #0
   235e2:	bf08      	it	eq
   235e4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   235e8:	2105      	movs	r1, #5
   235ea:	9303      	str	r3, [sp, #12]
   235ec:	4630      	mov	r0, r6
   235ee:	ab03      	add	r3, sp, #12
   235f0:	f7ff fe90 	bl	23314 <ip_interface_wait>
   235f4:	b130      	cbz	r0, 23604 <ip_interface_connect+0xcc>
   235f6:	2877      	cmp	r0, #119	; 0x77
   235f8:	d000      	beq.n	235fc <ip_interface_connect+0xc4>
   235fa:	6027      	str	r7, [r4, #0]
   235fc:	f7fe fe0e 	bl	2221c <nrf_modem_os_errno_set>
   23600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23604:	b005      	add	sp, #20
   23606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2360a:	6803      	ldr	r3, [r0, #0]
   2360c:	b29b      	uxth	r3, r3
   2360e:	2b05      	cmp	r3, #5
   23610:	bf14      	ite	ne
   23612:	2009      	movne	r0, #9
   23614:	207f      	moveq	r0, #127	; 0x7f
   23616:	e7f1      	b.n	235fc <ip_interface_connect+0xc4>
   23618:	2016      	movs	r0, #22
   2361a:	e7ef      	b.n	235fc <ip_interface_connect+0xc4>
   2361c:	2009      	movs	r0, #9
   2361e:	e7ed      	b.n	235fc <ip_interface_connect+0xc4>
   23620:	2078      	movs	r0, #120	; 0x78
   23622:	e7eb      	b.n	235fc <ip_interface_connect+0xc4>
   23624:	200c      	movs	r0, #12
   23626:	e7e9      	b.n	235fc <ip_interface_connect+0xc4>
   23628:	2077      	movs	r0, #119	; 0x77
   2362a:	e7e7      	b.n	235fc <ip_interface_connect+0xc4>

0002362c <getopt_check_and_send_int>:
   2362c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2362e:	4604      	mov	r4, r0
   23630:	460d      	mov	r5, r1
   23632:	4618      	mov	r0, r3
   23634:	4611      	mov	r1, r2
   23636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2363a:	b18b      	cbz	r3, 23660 <getopt_check_and_send_int+0x34>
   2363c:	681e      	ldr	r6, [r3, #0]
   2363e:	b17e      	cbz	r6, 23660 <getopt_check_and_send_int+0x34>
   23640:	b172      	cbz	r2, 23660 <getopt_check_and_send_int+0x34>
   23642:	e9cd 2300 	strd	r2, r3, [sp]
   23646:	462b      	mov	r3, r5
   23648:	4622      	mov	r2, r4
   2364a:	f7f7 fb5d 	bl	1ad08 <ip_interface_socketoption_get>
   2364e:	4603      	mov	r3, r0
   23650:	b118      	cbz	r0, 2365a <getopt_check_and_send_int+0x2e>
   23652:	f7fe fde3 	bl	2221c <nrf_modem_os_errno_set>
   23656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2365a:	4618      	mov	r0, r3
   2365c:	b002      	add	sp, #8
   2365e:	bd70      	pop	{r4, r5, r6, pc}
   23660:	2016      	movs	r0, #22
   23662:	e7f6      	b.n	23652 <getopt_check_and_send_int+0x26>

00023664 <ip_interface_socketoption_send>:
   23664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23668:	4698      	mov	r8, r3
   2366a:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   2366e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23672:	9301      	str	r3, [sp, #4]
   23674:	680b      	ldr	r3, [r1, #0]
   23676:	4606      	mov	r6, r0
   23678:	025d      	lsls	r5, r3, #9
   2367a:	460c      	mov	r4, r1
   2367c:	4692      	mov	sl, r2
   2367e:	d43a      	bmi.n	236f6 <ip_interface_socketoption_send+0x92>
   23680:	680b      	ldr	r3, [r1, #0]
   23682:	0219      	lsls	r1, r3, #8
   23684:	d437      	bmi.n	236f6 <ip_interface_socketoption_send+0x92>
   23686:	6823      	ldr	r3, [r4, #0]
   23688:	01da      	lsls	r2, r3, #7
   2368a:	d434      	bmi.n	236f6 <ip_interface_socketoption_send+0x92>
   2368c:	6823      	ldr	r3, [r4, #0]
   2368e:	019b      	lsls	r3, r3, #6
   23690:	d431      	bmi.n	236f6 <ip_interface_socketoption_send+0x92>
   23692:	f8d4 9000 	ldr.w	r9, [r4]
   23696:	6823      	ldr	r3, [r4, #0]
   23698:	f247 0203 	movw	r2, #28675	; 0x7003
   2369c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   236a0:	6023      	str	r3, [r4, #0]
   236a2:	69a1      	ldr	r1, [r4, #24]
   236a4:	463b      	mov	r3, r7
   236a6:	f7ff fe22 	bl	232ee <ip_interface_request_create>
   236aa:	4605      	mov	r5, r0
   236ac:	b308      	cbz	r0, 236f2 <ip_interface_socketoption_send+0x8e>
   236ae:	6883      	ldr	r3, [r0, #8]
   236b0:	f8c0 a014 	str.w	sl, [r0, #20]
   236b4:	3308      	adds	r3, #8
   236b6:	6083      	str	r3, [r0, #8]
   236b8:	f8c0 8018 	str.w	r8, [r0, #24]
   236bc:	b13f      	cbz	r7, 236ce <ip_interface_socketoption_send+0x6a>
   236be:	f1bb 0f00 	cmp.w	fp, #0
   236c2:	d004      	beq.n	236ce <ip_interface_socketoption_send+0x6a>
   236c4:	463a      	mov	r2, r7
   236c6:	4659      	mov	r1, fp
   236c8:	6800      	ldr	r0, [r0, #0]
   236ca:	f001 f9ff 	bl	24acc <memcpy>
   236ce:	462a      	mov	r2, r5
   236d0:	f247 0103 	movw	r1, #28675	; 0x7003
   236d4:	2004      	movs	r0, #4
   236d6:	f7ff fd6e 	bl	231b6 <rpc_client_request_send>
   236da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   236de:	4630      	mov	r0, r6
   236e0:	4611      	mov	r1, r2
   236e2:	ab01      	add	r3, sp, #4
   236e4:	f7ff fe16 	bl	23314 <ip_interface_wait>
   236e8:	f8c4 9000 	str.w	r9, [r4]
   236ec:	b003      	add	sp, #12
   236ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236f2:	200c      	movs	r0, #12
   236f4:	e7f8      	b.n	236e8 <ip_interface_socketoption_send+0x84>
   236f6:	200b      	movs	r0, #11
   236f8:	e7f8      	b.n	236ec <ip_interface_socketoption_send+0x88>

000236fa <setopt_check_and_send_int>:
   236fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   236fc:	4604      	mov	r4, r0
   236fe:	460d      	mov	r5, r1
   23700:	4618      	mov	r0, r3
   23702:	4611      	mov	r1, r2
   23704:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   23708:	2a04      	cmp	r2, #4
   2370a:	d10f      	bne.n	2372c <setopt_check_and_send_int+0x32>
   2370c:	b173      	cbz	r3, 2372c <setopt_check_and_send_int+0x32>
   2370e:	e9cd 3200 	strd	r3, r2, [sp]
   23712:	462b      	mov	r3, r5
   23714:	4622      	mov	r2, r4
   23716:	f7ff ffa5 	bl	23664 <ip_interface_socketoption_send>
   2371a:	4603      	mov	r3, r0
   2371c:	b118      	cbz	r0, 23726 <setopt_check_and_send_int+0x2c>
   2371e:	f7fe fd7d 	bl	2221c <nrf_modem_os_errno_set>
   23722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23726:	4618      	mov	r0, r3
   23728:	b003      	add	sp, #12
   2372a:	bd30      	pop	{r4, r5, pc}
   2372c:	2016      	movs	r0, #22
   2372e:	e7f6      	b.n	2371e <setopt_check_and_send_int+0x24>

00023730 <ip_interface_getopt>:
   23730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23734:	2901      	cmp	r1, #1
   23736:	4604      	mov	r4, r0
   23738:	460f      	mov	r7, r1
   2373a:	4616      	mov	r6, r2
   2373c:	461d      	mov	r5, r3
   2373e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   23742:	d007      	beq.n	23754 <ip_interface_getopt+0x24>
   23744:	206d      	movs	r0, #109	; 0x6d
   23746:	f7fe fd69 	bl	2221c <nrf_modem_os_errno_set>
   2374a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2374e:	b002      	add	sp, #8
   23750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23754:	f7f6 fff2 	bl	1a73c <interface_socket_from_handle_get>
   23758:	4602      	mov	r2, r0
   2375a:	b908      	cbnz	r0, 23760 <ip_interface_getopt+0x30>
   2375c:	2009      	movs	r0, #9
   2375e:	e7f2      	b.n	23746 <ip_interface_getopt+0x16>
   23760:	2e28      	cmp	r6, #40	; 0x28
   23762:	dc0d      	bgt.n	23780 <ip_interface_getopt+0x50>
   23764:	2e1d      	cmp	r6, #29
   23766:	dd0d      	ble.n	23784 <ip_interface_getopt+0x54>
   23768:	f1a6 031e 	sub.w	r3, r6, #30
   2376c:	2b0a      	cmp	r3, #10
   2376e:	d809      	bhi.n	23784 <ip_interface_getopt+0x54>
   23770:	e8df f003 	tbb	[pc, r3]
   23774:	08241d13 	.word	0x08241d13
   23778:	08080808 	.word	0x08080808
   2377c:	0808      	.short	0x0808
   2377e:	2b          	.byte	0x2b
   2377f:	00          	.byte	0x00
   23780:	2e37      	cmp	r6, #55	; 0x37
   23782:	d029      	beq.n	237d8 <ip_interface_getopt+0xa8>
   23784:	462b      	mov	r3, r5
   23786:	4632      	mov	r2, r6
   23788:	2101      	movs	r1, #1
   2378a:	4620      	mov	r0, r4
   2378c:	f8cd 8020 	str.w	r8, [sp, #32]
   23790:	b002      	add	sp, #8
   23792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23796:	f7f7 b815 	b.w	1a7c4 <interface_socket_getopt>
   2379a:	4623      	mov	r3, r4
   2379c:	f248 0101 	movw	r1, #32769	; 0x8001
   237a0:	f44f 7000 	mov.w	r0, #512	; 0x200
   237a4:	e9cd 5800 	strd	r5, r8, [sp]
   237a8:	f7ff ff40 	bl	2362c <getopt_check_and_send_int>
   237ac:	e7cf      	b.n	2374e <ip_interface_getopt+0x1e>
   237ae:	4623      	mov	r3, r4
   237b0:	f244 0110 	movw	r1, #16400	; 0x4010
   237b4:	2004      	movs	r0, #4
   237b6:	e9cd 5800 	strd	r5, r8, [sp]
   237ba:	e7f5      	b.n	237a8 <ip_interface_getopt+0x78>
   237bc:	4623      	mov	r3, r4
   237be:	f246 0110 	movw	r1, #24592	; 0x6010
   237c2:	2006      	movs	r0, #6
   237c4:	e9cd 5800 	strd	r5, r8, [sp]
   237c8:	e7ee      	b.n	237a8 <ip_interface_getopt+0x78>
   237ca:	4623      	mov	r3, r4
   237cc:	f241 0104 	movw	r1, #4100	; 0x1004
   237d0:	2008      	movs	r0, #8
   237d2:	e9cd 5800 	strd	r5, r8, [sp]
   237d6:	e7e7      	b.n	237a8 <ip_interface_getopt+0x78>
   237d8:	4623      	mov	r3, r4
   237da:	f245 0106 	movw	r1, #20486	; 0x5006
   237de:	4638      	mov	r0, r7
   237e0:	e9cd 5800 	strd	r5, r8, [sp]
   237e4:	e7e0      	b.n	237a8 <ip_interface_getopt+0x78>

000237e6 <attach_trigger_condition_verify>:
   237e6:	6903      	ldr	r3, [r0, #16]
   237e8:	2b01      	cmp	r3, #1
   237ea:	d105      	bne.n	237f8 <attach_trigger_condition_verify+0x12>
   237ec:	6800      	ldr	r0, [r0, #0]
   237ee:	b280      	uxth	r0, r0
   237f0:	1f43      	subs	r3, r0, #5
   237f2:	4258      	negs	r0, r3
   237f4:	4158      	adcs	r0, r3
   237f6:	4770      	bx	lr
   237f8:	2b02      	cmp	r3, #2
   237fa:	d109      	bne.n	23810 <attach_trigger_condition_verify+0x2a>
   237fc:	6803      	ldr	r3, [r0, #0]
   237fe:	b29b      	uxth	r3, r3
   23800:	2b02      	cmp	r3, #2
   23802:	d003      	beq.n	2380c <attach_trigger_condition_verify+0x26>
   23804:	6803      	ldr	r3, [r0, #0]
   23806:	b29b      	uxth	r3, r3
   23808:	2b04      	cmp	r3, #4
   2380a:	d1ef      	bne.n	237ec <attach_trigger_condition_verify+0x6>
   2380c:	2001      	movs	r0, #1
   2380e:	4770      	bx	lr
   23810:	2000      	movs	r0, #0
   23812:	4770      	bx	lr

00023814 <secure_client_socket>:
   23814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2381a:	9301      	str	r3, [sp, #4]
   2381c:	680b      	ldr	r3, [r1, #0]
   2381e:	4606      	mov	r6, r0
   23820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23824:	600b      	str	r3, [r1, #0]
   23826:	680b      	ldr	r3, [r1, #0]
   23828:	460c      	mov	r4, r1
   2382a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2382e:	600b      	str	r3, [r1, #0]
   23830:	680f      	ldr	r7, [r1, #0]
   23832:	463a      	mov	r2, r7
   23834:	f7f8 f8cc 	bl	1b9d0 <secure_socket_attach_initiate>
   23838:	4605      	mov	r5, r0
   2383a:	b950      	cbnz	r0, 23852 <secure_client_socket+0x3e>
   2383c:	220c      	movs	r2, #12
   2383e:	4630      	mov	r0, r6
   23840:	4611      	mov	r1, r2
   23842:	ab01      	add	r3, sp, #4
   23844:	f7ff fd66 	bl	23314 <ip_interface_wait>
   23848:	4605      	mov	r5, r0
   2384a:	b128      	cbz	r0, 23858 <secure_client_socket+0x44>
   2384c:	2877      	cmp	r0, #119	; 0x77
   2384e:	d000      	beq.n	23852 <secure_client_socket+0x3e>
   23850:	6027      	str	r7, [r4, #0]
   23852:	4628      	mov	r0, r5
   23854:	b003      	add	sp, #12
   23856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23858:	4630      	mov	r0, r6
   2385a:	f7f8 f8a7 	bl	1b9ac <hostname_free>
   2385e:	6823      	ldr	r3, [r4, #0]
   23860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   23864:	6023      	str	r3, [r4, #0]
   23866:	6823      	ldr	r3, [r4, #0]
   23868:	0c1b      	lsrs	r3, r3, #16
   2386a:	041b      	lsls	r3, r3, #16
   2386c:	f043 030c 	orr.w	r3, r3, #12
   23870:	6023      	str	r3, [r4, #0]
   23872:	6823      	ldr	r3, [r4, #0]
   23874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   23878:	6023      	str	r3, [r4, #0]
   2387a:	6823      	ldr	r3, [r4, #0]
   2387c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23880:	6023      	str	r3, [r4, #0]
   23882:	e7e6      	b.n	23852 <secure_client_socket+0x3e>

00023884 <tls_interface_close>:
   23884:	b510      	push	{r4, lr}
   23886:	4604      	mov	r4, r0
   23888:	f7f6 ff58 	bl	1a73c <interface_socket_from_handle_get>
   2388c:	b138      	cbz	r0, 2389e <tls_interface_close+0x1a>
   2388e:	4620      	mov	r0, r4
   23890:	f7f8 f88c 	bl	1b9ac <hostname_free>
   23894:	4620      	mov	r0, r4
   23896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2389a:	f7f7 b8d1 	b.w	1aa40 <ip_interface_close>
   2389e:	2009      	movs	r0, #9
   238a0:	f7fe fcbc 	bl	2221c <nrf_modem_os_errno_set>
   238a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   238a8:	bd10      	pop	{r4, pc}

000238aa <null_handler_init>:
   238aa:	2000      	movs	r0, #0
   238ac:	4770      	bx	lr

000238ae <null_handler_put>:
   238ae:	b510      	push	{r4, lr}
   238b0:	460c      	mov	r4, r1
   238b2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   238b6:	4620      	mov	r0, r4
   238b8:	4798      	blx	r3
   238ba:	6860      	ldr	r0, [r4, #4]
   238bc:	bd10      	pop	{r4, pc}

000238be <null_handler_get>:
   238be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   238c2:	4770      	bx	lr

000238c4 <null_handler_available>:
   238c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   238c8:	4770      	bx	lr

000238ca <null_handler_flush>:
   238ca:	2000      	movs	r0, #0
   238cc:	4770      	bx	lr

000238ce <null_handler_free>:
   238ce:	4770      	bx	lr

000238d0 <stream_handler_free_packet>:
   238d0:	b530      	push	{r4, r5, lr}
   238d2:	4605      	mov	r5, r0
   238d4:	b085      	sub	sp, #20
   238d6:	68c0      	ldr	r0, [r0, #12]
   238d8:	f000 fb0d 	bl	23ef6 <linked_list_pop>
   238dc:	4604      	mov	r4, r0
   238de:	b170      	cbz	r0, 238fe <stream_handler_free_packet+0x2e>
   238e0:	6843      	ldr	r3, [r0, #4]
   238e2:	9300      	str	r3, [sp, #0]
   238e4:	6883      	ldr	r3, [r0, #8]
   238e6:	9301      	str	r3, [sp, #4]
   238e8:	6903      	ldr	r3, [r0, #16]
   238ea:	9302      	str	r3, [sp, #8]
   238ec:	68c3      	ldr	r3, [r0, #12]
   238ee:	4668      	mov	r0, sp
   238f0:	9303      	str	r3, [sp, #12]
   238f2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   238f6:	4798      	blx	r3
   238f8:	4620      	mov	r0, r4
   238fa:	f7f2 fb73 	bl	15fe4 <nrf_modem_os_free>
   238fe:	b005      	add	sp, #20
   23900:	bd30      	pop	{r4, r5, pc}

00023902 <stream_handler_init>:
   23902:	b510      	push	{r4, lr}
   23904:	4604      	mov	r4, r0
   23906:	200c      	movs	r0, #12
   23908:	f7f2 fb62 	bl	15fd0 <nrf_modem_os_alloc>
   2390c:	60e0      	str	r0, [r4, #12]
   2390e:	b128      	cbz	r0, 2391c <stream_handler_init+0x1a>
   23910:	2300      	movs	r3, #0
   23912:	6123      	str	r3, [r4, #16]
   23914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23918:	f000 bad1 	b.w	23ebe <linked_list_init>
   2391c:	200c      	movs	r0, #12
   2391e:	bd10      	pop	{r4, pc}

00023920 <stream_handler_put>:
   23920:	b570      	push	{r4, r5, r6, lr}
   23922:	4606      	mov	r6, r0
   23924:	2014      	movs	r0, #20
   23926:	460d      	mov	r5, r1
   23928:	f7f2 fb52 	bl	15fd0 <nrf_modem_os_alloc>
   2392c:	4604      	mov	r4, r0
   2392e:	b178      	cbz	r0, 23950 <stream_handler_put+0x30>
   23930:	682b      	ldr	r3, [r5, #0]
   23932:	4601      	mov	r1, r0
   23934:	6043      	str	r3, [r0, #4]
   23936:	686b      	ldr	r3, [r5, #4]
   23938:	6083      	str	r3, [r0, #8]
   2393a:	68eb      	ldr	r3, [r5, #12]
   2393c:	60c3      	str	r3, [r0, #12]
   2393e:	68ab      	ldr	r3, [r5, #8]
   23940:	6103      	str	r3, [r0, #16]
   23942:	68f0      	ldr	r0, [r6, #12]
   23944:	f000 fac4 	bl	23ed0 <linked_list_push>
   23948:	b128      	cbz	r0, 23956 <stream_handler_put+0x36>
   2394a:	4620      	mov	r0, r4
   2394c:	f7f2 fb4a 	bl	15fe4 <nrf_modem_os_free>
   23950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23954:	e000      	b.n	23958 <stream_handler_put+0x38>
   23956:	6868      	ldr	r0, [r5, #4]
   23958:	bd70      	pop	{r4, r5, r6, pc}

0002395a <stream_handler_get>:
   2395a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2395e:	4606      	mov	r6, r0
   23960:	b085      	sub	sp, #20
   23962:	68c0      	ldr	r0, [r0, #12]
   23964:	468a      	mov	sl, r1
   23966:	4617      	mov	r7, r2
   23968:	f000 facf 	bl	23f0a <linked_list_peek>
   2396c:	4604      	mov	r4, r0
   2396e:	2800      	cmp	r0, #0
   23970:	d055      	beq.n	23a1e <stream_handler_get+0xc4>
   23972:	f8da 0008 	ldr.w	r0, [sl, #8]
   23976:	2800      	cmp	r0, #0
   23978:	d049      	beq.n	23a0e <stream_handler_get+0xb4>
   2397a:	6921      	ldr	r1, [r4, #16]
   2397c:	2900      	cmp	r1, #0
   2397e:	d046      	beq.n	23a0e <stream_handler_get+0xb4>
   23980:	68e2      	ldr	r2, [r4, #12]
   23982:	2a00      	cmp	r2, #0
   23984:	d043      	beq.n	23a0e <stream_handler_get+0xb4>
   23986:	f8da 500c 	ldr.w	r5, [sl, #12]
   2398a:	42aa      	cmp	r2, r5
   2398c:	bf28      	it	cs
   2398e:	462a      	movcs	r2, r5
   23990:	f8ca 200c 	str.w	r2, [sl, #12]
   23994:	f001 f89a 	bl	24acc <memcpy>
   23998:	2500      	movs	r5, #0
   2399a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2399e:	6931      	ldr	r1, [r6, #16]
   239a0:	9301      	str	r3, [sp, #4]
   239a2:	f8da 3000 	ldr.w	r3, [sl]
   239a6:	9302      	str	r3, [sp, #8]
   239a8:	f007 0320 	and.w	r3, r7, #32
   239ac:	9303      	str	r3, [sp, #12]
   239ae:	f007 0708 	and.w	r7, r7, #8
   239b2:	9b01      	ldr	r3, [sp, #4]
   239b4:	42ab      	cmp	r3, r5
   239b6:	d924      	bls.n	23a02 <stream_handler_get+0xa8>
   239b8:	68a2      	ldr	r2, [r4, #8]
   239ba:	9b01      	ldr	r3, [sp, #4]
   239bc:	eba2 0801 	sub.w	r8, r2, r1
   239c0:	eba3 0b05 	sub.w	fp, r3, r5
   239c4:	f8da 2000 	ldr.w	r2, [sl]
   239c8:	45d8      	cmp	r8, fp
   239ca:	46c1      	mov	r9, r8
   239cc:	bf28      	it	cs
   239ce:	46d9      	movcs	r9, fp
   239d0:	b142      	cbz	r2, 239e4 <stream_handler_get+0x8a>
   239d2:	9b03      	ldr	r3, [sp, #12]
   239d4:	b933      	cbnz	r3, 239e4 <stream_handler_get+0x8a>
   239d6:	6860      	ldr	r0, [r4, #4]
   239d8:	9b02      	ldr	r3, [sp, #8]
   239da:	4401      	add	r1, r0
   239dc:	464a      	mov	r2, r9
   239de:	1958      	adds	r0, r3, r5
   239e0:	f001 f874 	bl	24acc <memcpy>
   239e4:	4620      	mov	r0, r4
   239e6:	f000 fa97 	bl	23f18 <linked_list_get_next>
   239ea:	4604      	mov	r4, r0
   239ec:	b92f      	cbnz	r7, 239fa <stream_handler_get+0xa0>
   239ee:	45d8      	cmp	r8, fp
   239f0:	d811      	bhi.n	23a16 <stream_handler_get+0xbc>
   239f2:	4630      	mov	r0, r6
   239f4:	f7ff ff6c 	bl	238d0 <stream_handler_free_packet>
   239f8:	6137      	str	r7, [r6, #16]
   239fa:	2100      	movs	r1, #0
   239fc:	444d      	add	r5, r9
   239fe:	2c00      	cmp	r4, #0
   23a00:	d1d7      	bne.n	239b2 <stream_handler_get+0x58>
   23a02:	4628      	mov	r0, r5
   23a04:	f8ca 5004 	str.w	r5, [sl, #4]
   23a08:	b005      	add	sp, #20
   23a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a0e:	2200      	movs	r2, #0
   23a10:	f8ca 200c 	str.w	r2, [sl, #12]
   23a14:	e7c0      	b.n	23998 <stream_handler_get+0x3e>
   23a16:	6932      	ldr	r2, [r6, #16]
   23a18:	444a      	add	r2, r9
   23a1a:	6132      	str	r2, [r6, #16]
   23a1c:	e7ed      	b.n	239fa <stream_handler_get+0xa0>
   23a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23a22:	e7f1      	b.n	23a08 <stream_handler_get+0xae>

00023a24 <stream_handler_available>:
   23a24:	b510      	push	{r4, lr}
   23a26:	4604      	mov	r4, r0
   23a28:	68c0      	ldr	r0, [r0, #12]
   23a2a:	f000 fa6e 	bl	23f0a <linked_list_peek>
   23a2e:	b150      	cbz	r0, 23a46 <stream_handler_available+0x22>
   23a30:	6924      	ldr	r4, [r4, #16]
   23a32:	4264      	negs	r4, r4
   23a34:	6883      	ldr	r3, [r0, #8]
   23a36:	441c      	add	r4, r3
   23a38:	f000 fa6e 	bl	23f18 <linked_list_get_next>
   23a3c:	2800      	cmp	r0, #0
   23a3e:	d1f9      	bne.n	23a34 <stream_handler_available+0x10>
   23a40:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   23a44:	bd10      	pop	{r4, pc}
   23a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23a4a:	e7fb      	b.n	23a44 <stream_handler_available+0x20>

00023a4c <stream_handler_flush>:
   23a4c:	68c3      	ldr	r3, [r0, #12]
   23a4e:	b510      	push	{r4, lr}
   23a50:	4604      	mov	r4, r0
   23a52:	b923      	cbnz	r3, 23a5e <stream_handler_flush+0x12>
   23a54:	2016      	movs	r0, #22
   23a56:	e007      	b.n	23a68 <stream_handler_flush+0x1c>
   23a58:	4620      	mov	r0, r4
   23a5a:	f7ff ff39 	bl	238d0 <stream_handler_free_packet>
   23a5e:	68e0      	ldr	r0, [r4, #12]
   23a60:	f000 fa58 	bl	23f14 <linked_list_size_get>
   23a64:	2800      	cmp	r0, #0
   23a66:	d1f7      	bne.n	23a58 <stream_handler_flush+0xc>
   23a68:	bd10      	pop	{r4, pc}

00023a6a <stream_handler_free>:
   23a6a:	68c3      	ldr	r3, [r0, #12]
   23a6c:	b510      	push	{r4, lr}
   23a6e:	4604      	mov	r4, r0
   23a70:	b133      	cbz	r3, 23a80 <stream_handler_free+0x16>
   23a72:	f7ff ffeb 	bl	23a4c <stream_handler_flush>
   23a76:	68e0      	ldr	r0, [r4, #12]
   23a78:	f7f2 fab4 	bl	15fe4 <nrf_modem_os_free>
   23a7c:	2300      	movs	r3, #0
   23a7e:	60e3      	str	r3, [r4, #12]
   23a80:	bd10      	pop	{r4, pc}

00023a82 <datagram_handler_free_packet>:
   23a82:	b530      	push	{r4, r5, lr}
   23a84:	4605      	mov	r5, r0
   23a86:	b085      	sub	sp, #20
   23a88:	68c0      	ldr	r0, [r0, #12]
   23a8a:	f000 fa34 	bl	23ef6 <linked_list_pop>
   23a8e:	4604      	mov	r4, r0
   23a90:	b170      	cbz	r0, 23ab0 <datagram_handler_free_packet+0x2e>
   23a92:	6843      	ldr	r3, [r0, #4]
   23a94:	9300      	str	r3, [sp, #0]
   23a96:	6883      	ldr	r3, [r0, #8]
   23a98:	9301      	str	r3, [sp, #4]
   23a9a:	6903      	ldr	r3, [r0, #16]
   23a9c:	9302      	str	r3, [sp, #8]
   23a9e:	68c3      	ldr	r3, [r0, #12]
   23aa0:	4668      	mov	r0, sp
   23aa2:	9303      	str	r3, [sp, #12]
   23aa4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   23aa8:	4798      	blx	r3
   23aaa:	4620      	mov	r0, r4
   23aac:	f7f2 fa9a 	bl	15fe4 <nrf_modem_os_free>
   23ab0:	b005      	add	sp, #20
   23ab2:	bd30      	pop	{r4, r5, pc}

00023ab4 <datagram_handler_init>:
   23ab4:	b510      	push	{r4, lr}
   23ab6:	4604      	mov	r4, r0
   23ab8:	200c      	movs	r0, #12
   23aba:	f7f2 fa89 	bl	15fd0 <nrf_modem_os_alloc>
   23abe:	60e0      	str	r0, [r4, #12]
   23ac0:	b118      	cbz	r0, 23aca <datagram_handler_init+0x16>
   23ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ac6:	f000 b9fa 	b.w	23ebe <linked_list_init>
   23aca:	200c      	movs	r0, #12
   23acc:	bd10      	pop	{r4, pc}

00023ace <datagram_handler_put>:
   23ace:	b570      	push	{r4, r5, r6, lr}
   23ad0:	4606      	mov	r6, r0
   23ad2:	2014      	movs	r0, #20
   23ad4:	460d      	mov	r5, r1
   23ad6:	f7f2 fa7b 	bl	15fd0 <nrf_modem_os_alloc>
   23ada:	4604      	mov	r4, r0
   23adc:	b178      	cbz	r0, 23afe <datagram_handler_put+0x30>
   23ade:	682b      	ldr	r3, [r5, #0]
   23ae0:	4601      	mov	r1, r0
   23ae2:	6043      	str	r3, [r0, #4]
   23ae4:	686b      	ldr	r3, [r5, #4]
   23ae6:	6083      	str	r3, [r0, #8]
   23ae8:	68eb      	ldr	r3, [r5, #12]
   23aea:	60c3      	str	r3, [r0, #12]
   23aec:	68ab      	ldr	r3, [r5, #8]
   23aee:	6103      	str	r3, [r0, #16]
   23af0:	68f0      	ldr	r0, [r6, #12]
   23af2:	f000 f9ed 	bl	23ed0 <linked_list_push>
   23af6:	b128      	cbz	r0, 23b04 <datagram_handler_put+0x36>
   23af8:	4620      	mov	r0, r4
   23afa:	f7f2 fa73 	bl	15fe4 <nrf_modem_os_free>
   23afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23b02:	e000      	b.n	23b06 <datagram_handler_put+0x38>
   23b04:	6868      	ldr	r0, [r5, #4]
   23b06:	bd70      	pop	{r4, r5, r6, pc}

00023b08 <datagram_handler_get>:
   23b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b0a:	4607      	mov	r7, r0
   23b0c:	68c0      	ldr	r0, [r0, #12]
   23b0e:	460c      	mov	r4, r1
   23b10:	4616      	mov	r6, r2
   23b12:	f000 f9fa 	bl	23f0a <linked_list_peek>
   23b16:	4605      	mov	r5, r0
   23b18:	b328      	cbz	r0, 23b66 <datagram_handler_get+0x5e>
   23b1a:	6882      	ldr	r2, [r0, #8]
   23b1c:	6863      	ldr	r3, [r4, #4]
   23b1e:	6820      	ldr	r0, [r4, #0]
   23b20:	429a      	cmp	r2, r3
   23b22:	bf28      	it	cs
   23b24:	461a      	movcs	r2, r3
   23b26:	6062      	str	r2, [r4, #4]
   23b28:	b110      	cbz	r0, 23b30 <datagram_handler_get+0x28>
   23b2a:	6869      	ldr	r1, [r5, #4]
   23b2c:	f000 ffce 	bl	24acc <memcpy>
   23b30:	68a0      	ldr	r0, [r4, #8]
   23b32:	b1a8      	cbz	r0, 23b60 <datagram_handler_get+0x58>
   23b34:	6929      	ldr	r1, [r5, #16]
   23b36:	b199      	cbz	r1, 23b60 <datagram_handler_get+0x58>
   23b38:	68ea      	ldr	r2, [r5, #12]
   23b3a:	b18a      	cbz	r2, 23b60 <datagram_handler_get+0x58>
   23b3c:	68e3      	ldr	r3, [r4, #12]
   23b3e:	429a      	cmp	r2, r3
   23b40:	bf28      	it	cs
   23b42:	461a      	movcs	r2, r3
   23b44:	60e2      	str	r2, [r4, #12]
   23b46:	f000 ffc1 	bl	24acc <memcpy>
   23b4a:	0732      	lsls	r2, r6, #28
   23b4c:	68ad      	ldr	r5, [r5, #8]
   23b4e:	d402      	bmi.n	23b56 <datagram_handler_get+0x4e>
   23b50:	4638      	mov	r0, r7
   23b52:	f7ff ff96 	bl	23a82 <datagram_handler_free_packet>
   23b56:	06b3      	lsls	r3, r6, #26
   23b58:	bf4c      	ite	mi
   23b5a:	4628      	movmi	r0, r5
   23b5c:	6860      	ldrpl	r0, [r4, #4]
   23b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23b60:	2300      	movs	r3, #0
   23b62:	60e3      	str	r3, [r4, #12]
   23b64:	e7f1      	b.n	23b4a <datagram_handler_get+0x42>
   23b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23b6a:	e7f8      	b.n	23b5e <datagram_handler_get+0x56>

00023b6c <datagram_handler_available>:
   23b6c:	b508      	push	{r3, lr}
   23b6e:	68c0      	ldr	r0, [r0, #12]
   23b70:	f000 f9cb 	bl	23f0a <linked_list_peek>
   23b74:	b108      	cbz	r0, 23b7a <datagram_handler_available+0xe>
   23b76:	6880      	ldr	r0, [r0, #8]
   23b78:	bd08      	pop	{r3, pc}
   23b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23b7e:	e7fb      	b.n	23b78 <datagram_handler_available+0xc>

00023b80 <datagram_handler_flush>:
   23b80:	68c3      	ldr	r3, [r0, #12]
   23b82:	b510      	push	{r4, lr}
   23b84:	4604      	mov	r4, r0
   23b86:	b923      	cbnz	r3, 23b92 <datagram_handler_flush+0x12>
   23b88:	2016      	movs	r0, #22
   23b8a:	e007      	b.n	23b9c <datagram_handler_flush+0x1c>
   23b8c:	4620      	mov	r0, r4
   23b8e:	f7ff ff78 	bl	23a82 <datagram_handler_free_packet>
   23b92:	68e0      	ldr	r0, [r4, #12]
   23b94:	f000 f9be 	bl	23f14 <linked_list_size_get>
   23b98:	2800      	cmp	r0, #0
   23b9a:	d1f7      	bne.n	23b8c <datagram_handler_flush+0xc>
   23b9c:	bd10      	pop	{r4, pc}

00023b9e <datagram_handler_free>:
   23b9e:	68c3      	ldr	r3, [r0, #12]
   23ba0:	b510      	push	{r4, lr}
   23ba2:	4604      	mov	r4, r0
   23ba4:	b133      	cbz	r3, 23bb4 <datagram_handler_free+0x16>
   23ba6:	f7ff ffeb 	bl	23b80 <datagram_handler_flush>
   23baa:	68e0      	ldr	r0, [r4, #12]
   23bac:	f7f2 fa1a 	bl	15fe4 <nrf_modem_os_free>
   23bb0:	2300      	movs	r3, #0
   23bb2:	60e3      	str	r3, [r4, #12]
   23bb4:	bd10      	pop	{r4, pc}

00023bb6 <packet_handler_delete>:
   23bb6:	b510      	push	{r4, lr}
   23bb8:	4604      	mov	r4, r0
   23bba:	6803      	ldr	r3, [r0, #0]
   23bbc:	691b      	ldr	r3, [r3, #16]
   23bbe:	4798      	blx	r3
   23bc0:	6823      	ldr	r3, [r4, #0]
   23bc2:	4620      	mov	r0, r4
   23bc4:	695b      	ldr	r3, [r3, #20]
   23bc6:	4798      	blx	r3
   23bc8:	4620      	mov	r0, r4
   23bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23bce:	f7f2 ba09 	b.w	15fe4 <nrf_modem_os_free>

00023bd2 <nrf_modem_platform_error_handler>:
   23bd2:	b508      	push	{r3, lr}
   23bd4:	f7ed fea2 	bl	1191c <nrf_modem_recoverable_error_handler>
   23bd8:	bd08      	pop	{r3, pc}

00023bda <unimplemented_method>:
   23bda:	b40f      	push	{r0, r1, r2, r3}
   23bdc:	b508      	push	{r3, lr}
   23bde:	205f      	movs	r0, #95	; 0x5f
   23be0:	f7fe fb1c 	bl	2221c <nrf_modem_os_errno_set>
   23be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23bec:	b004      	add	sp, #16
   23bee:	4770      	bx	lr

00023bf0 <rpc_transport_ipc_fault_handler>:
   23bf0:	f7ff bfef 	b.w	23bd2 <nrf_modem_platform_error_handler>

00023bf4 <nrf_modem_platform_init>:
   23bf4:	b513      	push	{r0, r1, r4, lr}
   23bf6:	4604      	mov	r4, r0
   23bf8:	f7f2 fa0e 	bl	16018 <nrf_modem_os_init>
   23bfc:	6a23      	ldr	r3, [r4, #32]
   23bfe:	4668      	mov	r0, sp
   23c00:	9400      	str	r4, [sp, #0]
   23c02:	f88d 3004 	strb.w	r3, [sp, #4]
   23c06:	f7f6 fb73 	bl	1a2f0 <rpc_transport_ipc_init>
   23c0a:	4604      	mov	r4, r0
   23c0c:	b948      	cbnz	r0, 23c22 <nrf_modem_platform_init+0x2e>
   23c0e:	f7f6 fcc3 	bl	1a598 <interface_init>
   23c12:	f7f8 fb81 	bl	1c318 <nrf_modem_at_init>
   23c16:	4604      	mov	r4, r0
   23c18:	b918      	cbnz	r0, 23c22 <nrf_modem_platform_init+0x2e>
   23c1a:	f7f6 fe7d 	bl	1a918 <ip_interface_init>
   23c1e:	f7f7 ff29 	bl	1ba74 <tls_interface_init>
   23c22:	4620      	mov	r0, r4
   23c24:	b002      	add	sp, #8
   23c26:	bd10      	pop	{r4, pc}

00023c28 <nrf_modem_platform_fd_method_table_get>:
   23c28:	b510      	push	{r4, lr}
   23c2a:	f7f6 fd87 	bl	1a73c <interface_socket_from_handle_get>
   23c2e:	4604      	mov	r4, r0
   23c30:	b130      	cbz	r0, 23c40 <nrf_modem_platform_fd_method_table_get+0x18>
   23c32:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   23c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23c3a:	68c0      	ldr	r0, [r0, #12]
   23c3c:	f7f8 be8e 	b.w	1c95c <nrf_modem_platform_af_method_table_get>
   23c40:	2009      	movs	r0, #9
   23c42:	f7fe faeb 	bl	2221c <nrf_modem_os_errno_set>
   23c46:	4620      	mov	r0, r4
   23c48:	bd10      	pop	{r4, pc}

00023c4a <internal_poll>:
   23c4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23c4e:	2600      	movs	r6, #0
   23c50:	4688      	mov	r8, r1
   23c52:	4604      	mov	r4, r0
   23c54:	4637      	mov	r7, r6
   23c56:	4546      	cmp	r6, r8
   23c58:	d103      	bne.n	23c62 <internal_poll+0x18>
   23c5a:	4638      	mov	r0, r7
   23c5c:	b002      	add	sp, #8
   23c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c62:	88a5      	ldrh	r5, [r4, #4]
   23c64:	6820      	ldr	r0, [r4, #0]
   23c66:	a901      	add	r1, sp, #4
   23c68:	f7ff fad5 	bl	23216 <interface_socket_event_get>
   23c6c:	f005 0503 	and.w	r5, r5, #3
   23c70:	9b01      	ldr	r3, [sp, #4]
   23c72:	f045 051c 	orr.w	r5, r5, #28
   23c76:	401d      	ands	r5, r3
   23c78:	6820      	ldr	r0, [r4, #0]
   23c7a:	80e5      	strh	r5, [r4, #6]
   23c7c:	f7f6 fd5e 	bl	1a73c <interface_socket_from_handle_get>
   23c80:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   23c84:	b168      	cbz	r0, 23ca2 <internal_poll+0x58>
   23c86:	071a      	lsls	r2, r3, #28
   23c88:	d50b      	bpl.n	23ca2 <internal_poll+0x58>
   23c8a:	6942      	ldr	r2, [r0, #20]
   23c8c:	2a01      	cmp	r2, #1
   23c8e:	d003      	beq.n	23c98 <internal_poll+0x4e>
   23c90:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   23c94:	2a01      	cmp	r2, #1
   23c96:	d802      	bhi.n	23c9e <internal_poll+0x54>
   23c98:	f043 0301 	orr.w	r3, r3, #1
   23c9c:	80e3      	strh	r3, [r4, #6]
   23c9e:	3701      	adds	r7, #1
   23ca0:	e001      	b.n	23ca6 <internal_poll+0x5c>
   23ca2:	2b00      	cmp	r3, #0
   23ca4:	d1fb      	bne.n	23c9e <internal_poll+0x54>
   23ca6:	3601      	adds	r6, #1
   23ca8:	3408      	adds	r4, #8
   23caa:	e7d4      	b.n	23c56 <internal_poll+0xc>

00023cac <nrf_modem_platform_getaddrinfo>:
   23cac:	f7f7 bae0 	b.w	1b270 <ip_interface_getaddrinfo>

00023cb0 <nrf_modem_platform_freeaddrinfo>:
   23cb0:	f7f7 bbdc 	b.w	1b46c <ip_interface_freeaddrinfo>

00023cb4 <nrf_modem_platform_poll>:
   23cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23cb6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   23cba:	2908      	cmp	r1, #8
   23cbc:	4605      	mov	r5, r0
   23cbe:	460e      	mov	r6, r1
   23cc0:	9201      	str	r2, [sp, #4]
   23cc2:	d906      	bls.n	23cd2 <nrf_modem_platform_poll+0x1e>
   23cc4:	2016      	movs	r0, #22
   23cc6:	f7fe faa9 	bl	2221c <nrf_modem_os_errno_set>
   23cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23cce:	b002      	add	sp, #8
   23cd0:	bd70      	pop	{r4, r5, r6, pc}
   23cd2:	b910      	cbnz	r0, 23cda <nrf_modem_platform_poll+0x26>
   23cd4:	b109      	cbz	r1, 23cda <nrf_modem_platform_poll+0x26>
   23cd6:	200e      	movs	r0, #14
   23cd8:	e7f5      	b.n	23cc6 <nrf_modem_platform_poll+0x12>
   23cda:	4631      	mov	r1, r6
   23cdc:	4628      	mov	r0, r5
   23cde:	f7ff ffb4 	bl	23c4a <internal_poll>
   23ce2:	2400      	movs	r4, #0
   23ce4:	2800      	cmp	r0, #0
   23ce6:	d1f2      	bne.n	23cce <nrf_modem_platform_poll+0x1a>
   23ce8:	2c00      	cmp	r4, #0
   23cea:	d1f0      	bne.n	23cce <nrf_modem_platform_poll+0x1a>
   23cec:	4628      	mov	r0, r5
   23cee:	a901      	add	r1, sp, #4
   23cf0:	f7fe fa0b 	bl	2210a <nrf_modem_os_timedwait>
   23cf4:	4604      	mov	r4, r0
   23cf6:	b118      	cbz	r0, 23d00 <nrf_modem_platform_poll+0x4c>
   23cf8:	2874      	cmp	r0, #116	; 0x74
   23cfa:	d001      	beq.n	23d00 <nrf_modem_platform_poll+0x4c>
   23cfc:	200b      	movs	r0, #11
   23cfe:	e7e2      	b.n	23cc6 <nrf_modem_platform_poll+0x12>
   23d00:	4631      	mov	r1, r6
   23d02:	4628      	mov	r0, r5
   23d04:	f7ff ffa1 	bl	23c4a <internal_poll>
   23d08:	e7ec      	b.n	23ce4 <nrf_modem_platform_poll+0x30>

00023d0a <nrf_modem_platform_fcntl>:
   23d0a:	f7f6 bda9 	b.w	1a860 <interface_socket_fcntl>

00023d0e <nrf_socket>:
   23d0e:	b570      	push	{r4, r5, r6, lr}
   23d10:	4604      	mov	r4, r0
   23d12:	460d      	mov	r5, r1
   23d14:	4616      	mov	r6, r2
   23d16:	f7f8 fe21 	bl	1c95c <nrf_modem_platform_af_method_table_get>
   23d1a:	b130      	cbz	r0, 23d2a <nrf_socket+0x1c>
   23d1c:	4632      	mov	r2, r6
   23d1e:	4629      	mov	r1, r5
   23d20:	6803      	ldr	r3, [r0, #0]
   23d22:	4620      	mov	r0, r4
   23d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23d28:	4718      	bx	r3
   23d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d2e:	bd70      	pop	{r4, r5, r6, pc}

00023d30 <nrf_close>:
   23d30:	b510      	push	{r4, lr}
   23d32:	4604      	mov	r4, r0
   23d34:	f7ff ff78 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23d38:	b120      	cbz	r0, 23d44 <nrf_close+0x14>
   23d3a:	6843      	ldr	r3, [r0, #4]
   23d3c:	4620      	mov	r0, r4
   23d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23d42:	4718      	bx	r3
   23d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d48:	bd10      	pop	{r4, pc}

00023d4a <nrf_sendto>:
   23d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d4e:	4604      	mov	r4, r0
   23d50:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   23d54:	460d      	mov	r5, r1
   23d56:	4616      	mov	r6, r2
   23d58:	461f      	mov	r7, r3
   23d5a:	f7ff ff65 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23d5e:	b158      	cbz	r0, 23d78 <nrf_sendto+0x2e>
   23d60:	e9cd 8908 	strd	r8, r9, [sp, #32]
   23d64:	f8d0 e008 	ldr.w	lr, [r0, #8]
   23d68:	463b      	mov	r3, r7
   23d6a:	4632      	mov	r2, r6
   23d6c:	4629      	mov	r1, r5
   23d6e:	4620      	mov	r0, r4
   23d70:	46f4      	mov	ip, lr
   23d72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d76:	4760      	bx	ip
   23d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023d80 <nrf_recvfrom>:
   23d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d84:	4604      	mov	r4, r0
   23d86:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   23d8a:	460d      	mov	r5, r1
   23d8c:	4616      	mov	r6, r2
   23d8e:	461f      	mov	r7, r3
   23d90:	f7ff ff4a 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23d94:	b158      	cbz	r0, 23dae <nrf_recvfrom+0x2e>
   23d96:	e9cd 8908 	strd	r8, r9, [sp, #32]
   23d9a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   23d9e:	463b      	mov	r3, r7
   23da0:	4632      	mov	r2, r6
   23da2:	4629      	mov	r1, r5
   23da4:	4620      	mov	r0, r4
   23da6:	46f4      	mov	ip, lr
   23da8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23dac:	4760      	bx	ip
   23dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023db6 <nrf_connect>:
   23db6:	b570      	push	{r4, r5, r6, lr}
   23db8:	4604      	mov	r4, r0
   23dba:	460d      	mov	r5, r1
   23dbc:	4616      	mov	r6, r2
   23dbe:	f7ff ff33 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23dc2:	b130      	cbz	r0, 23dd2 <nrf_connect+0x1c>
   23dc4:	4632      	mov	r2, r6
   23dc6:	4629      	mov	r1, r5
   23dc8:	6943      	ldr	r3, [r0, #20]
   23dca:	4620      	mov	r0, r4
   23dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23dd0:	4718      	bx	r3
   23dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23dd6:	bd70      	pop	{r4, r5, r6, pc}

00023dd8 <nrf_listen>:
   23dd8:	b570      	push	{r4, r5, r6, lr}
   23dda:	4604      	mov	r4, r0
   23ddc:	460d      	mov	r5, r1
   23dde:	f7ff ff23 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23de2:	b128      	cbz	r0, 23df0 <nrf_listen+0x18>
   23de4:	4629      	mov	r1, r5
   23de6:	6983      	ldr	r3, [r0, #24]
   23de8:	4620      	mov	r0, r4
   23dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23dee:	4718      	bx	r3
   23df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23df4:	bd70      	pop	{r4, r5, r6, pc}

00023df6 <nrf_accept>:
   23df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dfa:	4604      	mov	r4, r0
   23dfc:	460d      	mov	r5, r1
   23dfe:	4616      	mov	r6, r2
   23e00:	f7ff ff12 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23e04:	b140      	cbz	r0, 23e18 <nrf_accept+0x22>
   23e06:	69c7      	ldr	r7, [r0, #28]
   23e08:	4632      	mov	r2, r6
   23e0a:	4629      	mov	r1, r5
   23e0c:	4620      	mov	r0, r4
   23e0e:	46bc      	mov	ip, r7
   23e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23e14:	2300      	movs	r3, #0
   23e16:	4760      	bx	ip
   23e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e20 <nrf_bind>:
   23e20:	b570      	push	{r4, r5, r6, lr}
   23e22:	4604      	mov	r4, r0
   23e24:	460d      	mov	r5, r1
   23e26:	4616      	mov	r6, r2
   23e28:	f7ff fefe 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23e2c:	b130      	cbz	r0, 23e3c <nrf_bind+0x1c>
   23e2e:	4632      	mov	r2, r6
   23e30:	4629      	mov	r1, r5
   23e32:	6903      	ldr	r3, [r0, #16]
   23e34:	4620      	mov	r0, r4
   23e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23e3a:	4718      	bx	r3
   23e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e40:	bd70      	pop	{r4, r5, r6, pc}

00023e42 <nrf_setsockopt>:
   23e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e46:	f8dd 8018 	ldr.w	r8, [sp, #24]
   23e4a:	4604      	mov	r4, r0
   23e4c:	460d      	mov	r5, r1
   23e4e:	4616      	mov	r6, r2
   23e50:	461f      	mov	r7, r3
   23e52:	f7ff fee9 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23e56:	b158      	cbz	r0, 23e70 <nrf_setsockopt+0x2e>
   23e58:	f8cd 8018 	str.w	r8, [sp, #24]
   23e5c:	f8d0 e020 	ldr.w	lr, [r0, #32]
   23e60:	463b      	mov	r3, r7
   23e62:	4632      	mov	r2, r6
   23e64:	4629      	mov	r1, r5
   23e66:	4620      	mov	r0, r4
   23e68:	46f4      	mov	ip, lr
   23e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23e6e:	4760      	bx	ip
   23e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e78 <nrf_getsockopt>:
   23e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e7c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   23e80:	4604      	mov	r4, r0
   23e82:	460d      	mov	r5, r1
   23e84:	4616      	mov	r6, r2
   23e86:	461f      	mov	r7, r3
   23e88:	f7ff fece 	bl	23c28 <nrf_modem_platform_fd_method_table_get>
   23e8c:	b158      	cbz	r0, 23ea6 <nrf_getsockopt+0x2e>
   23e8e:	f8cd 8018 	str.w	r8, [sp, #24]
   23e92:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   23e96:	463b      	mov	r3, r7
   23e98:	4632      	mov	r2, r6
   23e9a:	4629      	mov	r1, r5
   23e9c:	4620      	mov	r0, r4
   23e9e:	46f4      	mov	ip, lr
   23ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23ea4:	4760      	bx	ip
   23ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023eae <nrf_getaddrinfo>:
   23eae:	f7ff befd 	b.w	23cac <nrf_modem_platform_getaddrinfo>

00023eb2 <nrf_freeaddrinfo>:
   23eb2:	f7ff befd 	b.w	23cb0 <nrf_modem_platform_freeaddrinfo>

00023eb6 <nrf_poll>:
   23eb6:	f7ff befd 	b.w	23cb4 <nrf_modem_platform_poll>

00023eba <nrf_fcntl>:
   23eba:	f7ff bf26 	b.w	23d0a <nrf_modem_platform_fcntl>

00023ebe <linked_list_init>:
   23ebe:	4603      	mov	r3, r0
   23ec0:	b120      	cbz	r0, 23ecc <linked_list_init+0xe>
   23ec2:	2000      	movs	r0, #0
   23ec4:	e9c3 0001 	strd	r0, r0, [r3, #4]
   23ec8:	6018      	str	r0, [r3, #0]
   23eca:	4770      	bx	lr
   23ecc:	2016      	movs	r0, #22
   23ece:	4770      	bx	lr

00023ed0 <linked_list_push>:
   23ed0:	6803      	ldr	r3, [r0, #0]
   23ed2:	3301      	adds	r3, #1
   23ed4:	d00d      	beq.n	23ef2 <linked_list_push+0x22>
   23ed6:	2300      	movs	r3, #0
   23ed8:	600b      	str	r3, [r1, #0]
   23eda:	6803      	ldr	r3, [r0, #0]
   23edc:	b933      	cbnz	r3, 23eec <linked_list_push+0x1c>
   23ede:	6041      	str	r1, [r0, #4]
   23ee0:	6803      	ldr	r3, [r0, #0]
   23ee2:	6081      	str	r1, [r0, #8]
   23ee4:	3301      	adds	r3, #1
   23ee6:	6003      	str	r3, [r0, #0]
   23ee8:	2000      	movs	r0, #0
   23eea:	4770      	bx	lr
   23eec:	6883      	ldr	r3, [r0, #8]
   23eee:	6019      	str	r1, [r3, #0]
   23ef0:	e7f6      	b.n	23ee0 <linked_list_push+0x10>
   23ef2:	200c      	movs	r0, #12
   23ef4:	4770      	bx	lr

00023ef6 <linked_list_pop>:
   23ef6:	4603      	mov	r3, r0
   23ef8:	6800      	ldr	r0, [r0, #0]
   23efa:	b128      	cbz	r0, 23f08 <linked_list_pop+0x12>
   23efc:	6858      	ldr	r0, [r3, #4]
   23efe:	6802      	ldr	r2, [r0, #0]
   23f00:	605a      	str	r2, [r3, #4]
   23f02:	681a      	ldr	r2, [r3, #0]
   23f04:	3a01      	subs	r2, #1
   23f06:	601a      	str	r2, [r3, #0]
   23f08:	4770      	bx	lr

00023f0a <linked_list_peek>:
   23f0a:	4603      	mov	r3, r0
   23f0c:	6800      	ldr	r0, [r0, #0]
   23f0e:	b100      	cbz	r0, 23f12 <linked_list_peek+0x8>
   23f10:	6858      	ldr	r0, [r3, #4]
   23f12:	4770      	bx	lr

00023f14 <linked_list_size_get>:
   23f14:	6800      	ldr	r0, [r0, #0]
   23f16:	4770      	bx	lr

00023f18 <linked_list_get_next>:
   23f18:	6800      	ldr	r0, [r0, #0]
   23f1a:	4770      	bx	lr

00023f1c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23f1c:	b148      	cbz	r0, 23f32 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23f1e:	68c3      	ldr	r3, [r0, #12]
   23f20:	8818      	ldrh	r0, [r3, #0]
   23f22:	f3c0 0008 	ubfx	r0, r0, #0, #9
   23f26:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   23f2a:	bf14      	ite	ne
   23f2c:	2000      	movne	r0, #0
   23f2e:	2001      	moveq	r0, #1
   23f30:	4770      	bx	lr
		return false;
   23f32:	2000      	movs	r0, #0
}
   23f34:	4770      	bx	lr

00023f36 <k_heap_init>:
{
   23f36:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   23f38:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   23f3c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   23f3e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   23f40:	f7fc f821 	bl	1ff86 <sys_heap_init>
}
   23f44:	bd10      	pop	{r4, pc}

00023f46 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f4a:	b085      	sub	sp, #20
   23f4c:	4607      	mov	r7, r0
   23f4e:	468a      	mov	sl, r1
   23f50:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23f52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   23f56:	f000 fc8b 	bl	24870 <sys_clock_timeout_end_calc>
   23f5a:	4606      	mov	r6, r0
   23f5c:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23f5e:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   23f62:	f04f 0320 	mov.w	r3, #32
   23f66:	f3ef 8511 	mrs	r5, BASEPRI
   23f6a:	f383 8812 	msr	BASEPRI_MAX, r3
   23f6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   23f72:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   23f76:	4644      	mov	r4, r8

	while (ret == NULL) {
   23f78:	e00f      	b.n	23f9a <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23f7a:	9000      	str	r0, [sp, #0]
   23f7c:	9101      	str	r1, [sp, #4]
   23f7e:	f107 020c 	add.w	r2, r7, #12
   23f82:	4629      	mov	r1, r5
   23f84:	4658      	mov	r0, fp
   23f86:	f7f9 fd25 	bl	1d9d4 <z_pend_curr>
   23f8a:	f04f 0320 	mov.w	r3, #32
   23f8e:	f3ef 8511 	mrs	r5, BASEPRI
   23f92:	f383 8812 	msr	BASEPRI_MAX, r3
   23f96:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   23f9a:	b9ac      	cbnz	r4, 23fc8 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23f9c:	9a03      	ldr	r2, [sp, #12]
   23f9e:	4651      	mov	r1, sl
   23fa0:	4638      	mov	r0, r7
   23fa2:	f7fb ff7f 	bl	1fea4 <sys_heap_aligned_alloc>
   23fa6:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   23fa8:	f7fa f8ac 	bl	1e104 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23fac:	b964      	cbnz	r4, 23fc8 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
   23fae:	1a30      	subs	r0, r6, r0
   23fb0:	eb69 0101 	sbc.w	r1, r9, r1
   23fb4:	2801      	cmp	r0, #1
   23fb6:	f171 0300 	sbcs.w	r3, r1, #0
   23fba:	db05      	blt.n	23fc8 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
   23fbc:	f1b8 0f00 	cmp.w	r8, #0
   23fc0:	d1db      	bne.n	23f7a <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
   23fc2:	f04f 0801 	mov.w	r8, #1
   23fc6:	e7d8      	b.n	23f7a <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
   23fc8:	f385 8811 	msr	BASEPRI, r5
   23fcc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23fd0:	4620      	mov	r0, r4
   23fd2:	b005      	add	sp, #20
   23fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023fd8 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   23fd8:	b500      	push	{lr}
   23fda:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   23fdc:	e9cd 2300 	strd	r2, r3, [sp]
   23fe0:	460a      	mov	r2, r1
   23fe2:	2104      	movs	r1, #4
   23fe4:	f7ff ffaf 	bl	23f46 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   23fe8:	b003      	add	sp, #12
   23fea:	f85d fb04 	ldr.w	pc, [sp], #4

00023fee <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   23fee:	b570      	push	{r4, r5, r6, lr}
   23ff0:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23ff2:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   23ff6:	f04f 0320 	mov.w	r3, #32
   23ffa:	f3ef 8511 	mrs	r5, BASEPRI
   23ffe:	f383 8812 	msr	BASEPRI_MAX, r3
   24002:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   24006:	f7fb ff09 	bl	1fe1c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2400a:	f104 000c 	add.w	r0, r4, #12
   2400e:	f000 fb5f 	bl	246d0 <z_unpend_all>
   24012:	b920      	cbnz	r0, 2401e <k_heap_free+0x30>
	__asm__ volatile(
   24014:	f385 8811 	msr	BASEPRI, r5
   24018:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2401c:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   2401e:	4629      	mov	r1, r5
   24020:	4630      	mov	r0, r6
   24022:	f7f9 fb67 	bl	1d6f4 <z_reschedule>
   24026:	e7f9      	b.n	2401c <k_heap_free+0x2e>

00024028 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24028:	68c2      	ldr	r2, [r0, #12]
   2402a:	6903      	ldr	r3, [r0, #16]
   2402c:	431a      	orrs	r2, r3
   2402e:	f012 0203 	ands.w	r2, r2, #3
   24032:	d10d      	bne.n	24050 <create_free_list+0x28>
	slab->free_list = NULL;
   24034:	2100      	movs	r1, #0
   24036:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24038:	e005      	b.n	24046 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2403a:	6941      	ldr	r1, [r0, #20]
   2403c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2403e:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   24040:	68c1      	ldr	r1, [r0, #12]
   24042:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   24044:	3201      	adds	r2, #1
   24046:	6881      	ldr	r1, [r0, #8]
   24048:	4291      	cmp	r1, r2
   2404a:	d8f6      	bhi.n	2403a <create_free_list+0x12>
	return 0;
   2404c:	2000      	movs	r0, #0
   2404e:	4770      	bx	lr
		return -EINVAL;
   24050:	f06f 0015 	mvn.w	r0, #21
}
   24054:	4770      	bx	lr

00024056 <k_mem_slab_init>:
{
   24056:	b510      	push	{r4, lr}
   24058:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2405a:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   2405c:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   2405e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   24060:	2300      	movs	r3, #0
   24062:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   24064:	f7ff ffe0 	bl	24028 <create_free_list>
	if (rc < 0) {
   24068:	2800      	cmp	r0, #0
   2406a:	db01      	blt.n	24070 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   2406c:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2406e:	6064      	str	r4, [r4, #4]
}
   24070:	bd10      	pop	{r4, pc}

00024072 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24074:	4604      	mov	r4, r0
   24076:	460d      	mov	r5, r1
	__asm__ volatile(
   24078:	f04f 0320 	mov.w	r3, #32
   2407c:	f3ef 8611 	mrs	r6, BASEPRI
   24080:	f383 8812 	msr	BASEPRI_MAX, r3
   24084:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24088:	6943      	ldr	r3, [r0, #20]
   2408a:	b163      	cbz	r3, 240a6 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   2408c:	682b      	ldr	r3, [r5, #0]
   2408e:	6962      	ldr	r2, [r4, #20]
   24090:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24092:	682b      	ldr	r3, [r5, #0]
   24094:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24096:	69a3      	ldr	r3, [r4, #24]
   24098:	3b01      	subs	r3, #1
   2409a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2409c:	f386 8811 	msr	BASEPRI, r6
   240a0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   240a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   240a6:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   240aa:	f000 fae6 	bl	2467a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   240ae:	2800      	cmp	r0, #0
   240b0:	d0ec      	beq.n	2408c <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   240b2:	682a      	ldr	r2, [r5, #0]
   240b4:	2100      	movs	r1, #0
   240b6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   240ba:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   240bc:	f000 fa16 	bl	244ec <z_ready_thread>
			z_reschedule(&slab->lock, key);
   240c0:	4631      	mov	r1, r6
   240c2:	4638      	mov	r0, r7
   240c4:	f7f9 fb16 	bl	1d6f4 <z_reschedule>
			return;
   240c8:	e7ec      	b.n	240a4 <k_mem_slab_free+0x32>

000240ca <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   240ca:	3207      	adds	r2, #7
   240cc:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   240d0:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   240d4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   240d8:	2300      	movs	r3, #0
   240da:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   240de:	1888      	adds	r0, r1, r2
   240e0:	4770      	bx	lr

000240e2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   240e2:	f3ef 8005 	mrs	r0, IPSR
}
   240e6:	3800      	subs	r0, #0
   240e8:	bf18      	it	ne
   240ea:	2001      	movne	r0, #1
   240ec:	4770      	bx	lr

000240ee <k_thread_name_get>:
}
   240ee:	3078      	adds	r0, #120	; 0x78
   240f0:	4770      	bx	lr

000240f2 <z_impl_k_thread_start>:
{
   240f2:	b508      	push	{r3, lr}
	z_sched_start(thread);
   240f4:	f7f9 fc34 	bl	1d960 <z_sched_start>
}
   240f8:	bd08      	pop	{r3, pc}

000240fa <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   240fa:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   240fc:	2400      	movs	r4, #0
   240fe:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   24100:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24102:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   24104:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   24106:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   24108:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2410a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2410c:	bc10      	pop	{r4}
   2410e:	4770      	bx	lr

00024110 <z_impl_k_thread_create>:
{
   24110:	b5f0      	push	{r4, r5, r6, r7, lr}
   24112:	b087      	sub	sp, #28
   24114:	4604      	mov	r4, r0
   24116:	9e12      	ldr	r6, [sp, #72]	; 0x48
   24118:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2411a:	2700      	movs	r7, #0
   2411c:	9705      	str	r7, [sp, #20]
   2411e:	9f10      	ldr	r7, [sp, #64]	; 0x40
   24120:	9704      	str	r7, [sp, #16]
   24122:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   24124:	9703      	str	r7, [sp, #12]
   24126:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   24128:	9702      	str	r7, [sp, #8]
   2412a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2412c:	9701      	str	r7, [sp, #4]
   2412e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   24130:	9700      	str	r7, [sp, #0]
   24132:	f7f8 fed3 	bl	1cedc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24136:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2413a:	bf08      	it	eq
   2413c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   24140:	d102      	bne.n	24148 <z_impl_k_thread_create+0x38>
}
   24142:	4620      	mov	r0, r4
   24144:	b007      	add	sp, #28
   24146:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   24148:	4632      	mov	r2, r6
   2414a:	462b      	mov	r3, r5
   2414c:	4620      	mov	r0, r4
   2414e:	f7f8 feb7 	bl	1cec0 <schedule_new_thread>
   24152:	e7f6      	b.n	24142 <z_impl_k_thread_create+0x32>

00024154 <z_pm_save_idle_exit>:
{
   24154:	b508      	push	{r3, lr}
	pm_system_resume();
   24156:	f7ef fc35 	bl	139c4 <pm_system_resume>
	sys_clock_idle_exit();
   2415a:	f7fd ff51 	bl	22000 <sys_clock_idle_exit>
}
   2415e:	bd08      	pop	{r3, pc}

00024160 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   24160:	4288      	cmp	r0, r1
   24162:	da00      	bge.n	24166 <new_prio_for_inheritance+0x6>
   24164:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   24166:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2416a:	db01      	blt.n	24170 <new_prio_for_inheritance+0x10>
   2416c:	4608      	mov	r0, r1
   2416e:	4770      	bx	lr
   24170:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   24174:	4770      	bx	lr

00024176 <adjust_owner_prio>:
{
   24176:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   24178:	6880      	ldr	r0, [r0, #8]
   2417a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2417e:	428b      	cmp	r3, r1
   24180:	d101      	bne.n	24186 <adjust_owner_prio+0x10>
	return false;
   24182:	2000      	movs	r0, #0
}
   24184:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   24186:	f7f9 fc39 	bl	1d9fc <z_set_prio>
   2418a:	e7fb      	b.n	24184 <adjust_owner_prio+0xe>

0002418c <z_impl_k_mutex_init>:
{
   2418c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2418e:	2000      	movs	r0, #0
   24190:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   24192:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   24194:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   24196:	605b      	str	r3, [r3, #4]
}
   24198:	4770      	bx	lr

0002419a <prepare_thread_to_run>:
{
   2419a:	b508      	push	{r3, lr}
   2419c:	2200      	movs	r2, #0
   2419e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   241a2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   241a4:	f000 f9a2 	bl	244ec <z_ready_thread>
}
   241a8:	bd08      	pop	{r3, pc}

000241aa <queue_insert>:
{
   241aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   241ae:	4605      	mov	r5, r0
   241b0:	460e      	mov	r6, r1
   241b2:	4614      	mov	r4, r2
   241b4:	4699      	mov	r9, r3
   241b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   241ba:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   241be:	f04f 0320 	mov.w	r3, #32
   241c2:	f3ef 8811 	mrs	r8, BASEPRI
   241c6:	f383 8812 	msr	BASEPRI_MAX, r3
   241ca:	f3bf 8f6f 	isb	sy
	if (is_append) {
   241ce:	b102      	cbz	r2, 241d2 <queue_insert+0x28>
	return list->tail;
   241d0:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   241d2:	4638      	mov	r0, r7
   241d4:	f000 fa51 	bl	2467a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   241d8:	b9f8      	cbnz	r0, 2421a <queue_insert+0x70>
	if (alloc) {
   241da:	f1b9 0f00 	cmp.w	r9, #0
   241de:	d125      	bne.n	2422c <queue_insert+0x82>
	node->next_and_flags = flags;
   241e0:	2300      	movs	r3, #0
   241e2:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   241e4:	b39e      	cbz	r6, 2424e <queue_insert+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   241e6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   241e8:	f033 0303 	bics.w	r3, r3, #3
   241ec:	d03b      	beq.n	24266 <queue_insert+0xbc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   241ee:	6822      	ldr	r2, [r4, #0]
   241f0:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   241f4:	4313      	orrs	r3, r2
   241f6:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   241f8:	6833      	ldr	r3, [r6, #0]
   241fa:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   241fe:	431c      	orrs	r4, r3
   24200:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24202:	2104      	movs	r1, #4
   24204:	f105 0010 	add.w	r0, r5, #16
   24208:	f000 fbf4 	bl	249f4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2420c:	4641      	mov	r1, r8
   2420e:	4638      	mov	r0, r7
   24210:	f7f9 fa70 	bl	1d6f4 <z_reschedule>
	return 0;
   24214:	2000      	movs	r0, #0
}
   24216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
   2421a:	4621      	mov	r1, r4
   2421c:	f7ff ffbd 	bl	2419a <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   24220:	4641      	mov	r1, r8
   24222:	4638      	mov	r0, r7
   24224:	f7f9 fa66 	bl	1d6f4 <z_reschedule>
		return 0;
   24228:	2000      	movs	r0, #0
   2422a:	e7f4      	b.n	24216 <queue_insert+0x6c>
	return z_thread_aligned_alloc(0, size);
   2422c:	2108      	movs	r1, #8
   2422e:	2000      	movs	r0, #0
   24230:	f7fa fb04 	bl	1e83c <z_thread_aligned_alloc>
		if (anode == NULL) {
   24234:	b120      	cbz	r0, 24240 <queue_insert+0x96>
		anode->data = data;
   24236:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   24238:	2201      	movs	r2, #1
   2423a:	6002      	str	r2, [r0, #0]
		data = anode;
   2423c:	4604      	mov	r4, r0
   2423e:	e7d1      	b.n	241e4 <queue_insert+0x3a>
	__asm__ volatile(
   24240:	f388 8811 	msr	BASEPRI, r8
   24244:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24248:	f06f 000b 	mvn.w	r0, #11
   2424c:	e7e3      	b.n	24216 <queue_insert+0x6c>
	return list->head;
   2424e:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24250:	6823      	ldr	r3, [r4, #0]
   24252:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24256:	4313      	orrs	r3, r2
   24258:	6023      	str	r3, [r4, #0]
	list->head = node;
   2425a:	602c      	str	r4, [r5, #0]
	return list->tail;
   2425c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2425e:	2b00      	cmp	r3, #0
   24260:	d1cf      	bne.n	24202 <queue_insert+0x58>
	list->tail = node;
   24262:	606c      	str	r4, [r5, #4]
}
   24264:	e7cd      	b.n	24202 <queue_insert+0x58>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24266:	6823      	ldr	r3, [r4, #0]
   24268:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2426c:	6023      	str	r3, [r4, #0]
	return list->tail;
   2426e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24270:	b132      	cbz	r2, 24280 <queue_insert+0xd6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24272:	6813      	ldr	r3, [r2, #0]
   24274:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24278:	4323      	orrs	r3, r4
   2427a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2427c:	606c      	str	r4, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2427e:	e7c0      	b.n	24202 <queue_insert+0x58>
	list->tail = node;
   24280:	606c      	str	r4, [r5, #4]
	list->head = node;
   24282:	602c      	str	r4, [r5, #0]
}
   24284:	e7bd      	b.n	24202 <queue_insert+0x58>

00024286 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   24286:	b160      	cbz	r0, 242a2 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24288:	6803      	ldr	r3, [r0, #0]
   2428a:	f013 0f03 	tst.w	r3, #3
   2428e:	d008      	beq.n	242a2 <z_queue_node_peek+0x1c>
{
   24290:	b510      	push	{r4, lr}
		ret = anode->data;
   24292:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   24294:	b909      	cbnz	r1, 2429a <z_queue_node_peek+0x14>
		ret = anode->data;
   24296:	4620      	mov	r0, r4
}
   24298:	bd10      	pop	{r4, pc}
			k_free(anode);
   2429a:	f000 fbd4 	bl	24a46 <k_free>
		ret = anode->data;
   2429e:	4620      	mov	r0, r4
   242a0:	e7fa      	b.n	24298 <z_queue_node_peek+0x12>
}
   242a2:	4770      	bx	lr

000242a4 <k_queue_append>:
{
   242a4:	b500      	push	{lr}
   242a6:	b083      	sub	sp, #12
   242a8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   242aa:	2301      	movs	r3, #1
   242ac:	9300      	str	r3, [sp, #0]
   242ae:	2300      	movs	r3, #0
   242b0:	4619      	mov	r1, r3
   242b2:	f7ff ff7a 	bl	241aa <queue_insert>
}
   242b6:	b003      	add	sp, #12
   242b8:	f85d fb04 	ldr.w	pc, [sp], #4

000242bc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   242bc:	b15a      	cbz	r2, 242d6 <z_impl_k_sem_init+0x1a>
   242be:	428a      	cmp	r2, r1
   242c0:	d30c      	bcc.n	242dc <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   242c2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   242c4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   242c6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   242c8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   242ca:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   242ce:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   242d0:	6143      	str	r3, [r0, #20]
	return 0;
   242d2:	2000      	movs	r0, #0
   242d4:	4770      	bx	lr
		return -EINVAL;
   242d6:	f06f 0015 	mvn.w	r0, #21
   242da:	4770      	bx	lr
   242dc:	f06f 0015 	mvn.w	r0, #21
}
   242e0:	4770      	bx	lr

000242e2 <work_timeout>:
{
   242e2:	b510      	push	{r4, lr}
   242e4:	b082      	sub	sp, #8
   242e6:	4603      	mov	r3, r0
	__asm__ volatile(
   242e8:	f04f 0220 	mov.w	r2, #32
   242ec:	f3ef 8411 	mrs	r4, BASEPRI
   242f0:	f382 8812 	msr	BASEPRI_MAX, r2
   242f4:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   242f8:	2200      	movs	r2, #0
   242fa:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   242fc:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   24300:	f022 0108 	bic.w	r1, r2, #8
   24304:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24308:	f012 0f08 	tst.w	r2, #8
   2430c:	d105      	bne.n	2431a <work_timeout+0x38>
	__asm__ volatile(
   2430e:	f384 8811 	msr	BASEPRI, r4
   24312:	f3bf 8f6f 	isb	sy
}
   24316:	b002      	add	sp, #8
   24318:	bd10      	pop	{r4, pc}
   2431a:	3810      	subs	r0, #16
		queue = dw->queue;
   2431c:	699b      	ldr	r3, [r3, #24]
   2431e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24320:	a901      	add	r1, sp, #4
   24322:	f7f8 fff7 	bl	1d314 <submit_to_queue_locked>
   24326:	e7f2      	b.n	2430e <work_timeout+0x2c>

00024328 <k_work_submit_to_queue>:
{
   24328:	b530      	push	{r4, r5, lr}
   2432a:	b083      	sub	sp, #12
   2432c:	9001      	str	r0, [sp, #4]
   2432e:	4608      	mov	r0, r1
	__asm__ volatile(
   24330:	f04f 0320 	mov.w	r3, #32
   24334:	f3ef 8511 	mrs	r5, BASEPRI
   24338:	f383 8812 	msr	BASEPRI_MAX, r3
   2433c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24340:	a901      	add	r1, sp, #4
   24342:	f7f8 ffe7 	bl	1d314 <submit_to_queue_locked>
   24346:	4604      	mov	r4, r0
	__asm__ volatile(
   24348:	f385 8811 	msr	BASEPRI, r5
   2434c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24350:	2800      	cmp	r0, #0
   24352:	dc02      	bgt.n	2435a <k_work_submit_to_queue+0x32>
}
   24354:	4620      	mov	r0, r4
   24356:	b003      	add	sp, #12
   24358:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   2435a:	f7f9 fd35 	bl	1ddc8 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2435e:	2800      	cmp	r0, #0
   24360:	d0f8      	beq.n	24354 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   24362:	f7f9 fc6f 	bl	1dc44 <z_impl_k_yield>
	return ret;
   24366:	e7f5      	b.n	24354 <k_work_submit_to_queue+0x2c>

00024368 <k_work_init_delayable>:
{
   24368:	b538      	push	{r3, r4, r5, lr}
   2436a:	4604      	mov	r4, r0
   2436c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2436e:	2230      	movs	r2, #48	; 0x30
   24370:	2100      	movs	r1, #0
   24372:	f000 fbb8 	bl	24ae6 <memset>
   24376:	6065      	str	r5, [r4, #4]
   24378:	f44f 7380 	mov.w	r3, #256	; 0x100
   2437c:	60e3      	str	r3, [r4, #12]
}
   2437e:	bd38      	pop	{r3, r4, r5, pc}

00024380 <k_work_schedule_for_queue>:
{
   24380:	b510      	push	{r4, lr}
   24382:	b082      	sub	sp, #8
   24384:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   24386:	f04f 0020 	mov.w	r0, #32
   2438a:	f3ef 8411 	mrs	r4, BASEPRI
   2438e:	f380 8812 	msr	BASEPRI_MAX, r0
   24392:	f3bf 8f6f 	isb	sy
	return *flagp;
   24396:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24398:	f010 0f0e 	tst.w	r0, #14
   2439c:	d006      	beq.n	243ac <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2439e:	2000      	movs	r0, #0
	__asm__ volatile(
   243a0:	f384 8811 	msr	BASEPRI, r4
   243a4:	f3bf 8f6f 	isb	sy
}
   243a8:	b002      	add	sp, #8
   243aa:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   243ac:	a801      	add	r0, sp, #4
   243ae:	f7f9 f81d 	bl	1d3ec <schedule_for_queue_locked>
   243b2:	e7f5      	b.n	243a0 <k_work_schedule_for_queue+0x20>

000243b4 <k_work_reschedule_for_queue>:
{
   243b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   243b6:	b083      	sub	sp, #12
   243b8:	9001      	str	r0, [sp, #4]
   243ba:	460c      	mov	r4, r1
   243bc:	4616      	mov	r6, r2
   243be:	461d      	mov	r5, r3
	__asm__ volatile(
   243c0:	f04f 0320 	mov.w	r3, #32
   243c4:	f3ef 8711 	mrs	r7, BASEPRI
   243c8:	f383 8812 	msr	BASEPRI_MAX, r3
   243cc:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   243d0:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   243d2:	f023 0208 	bic.w	r2, r3, #8
   243d6:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   243d8:	f013 0f08 	tst.w	r3, #8
   243dc:	d10b      	bne.n	243f6 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   243de:	4632      	mov	r2, r6
   243e0:	462b      	mov	r3, r5
   243e2:	4621      	mov	r1, r4
   243e4:	a801      	add	r0, sp, #4
   243e6:	f7f9 f801 	bl	1d3ec <schedule_for_queue_locked>
	__asm__ volatile(
   243ea:	f387 8811 	msr	BASEPRI, r7
   243ee:	f3bf 8f6f 	isb	sy
}
   243f2:	b003      	add	sp, #12
   243f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   243f6:	f101 0010 	add.w	r0, r1, #16
   243fa:	f000 f9cb 	bl	24794 <z_abort_timeout>
		ret = true;
   243fe:	e7ee      	b.n	243de <k_work_reschedule_for_queue+0x2a>

00024400 <thread_active_elsewhere>:
}
   24400:	2000      	movs	r0, #0
   24402:	4770      	bx	lr

00024404 <pended_on_thread>:
}
   24404:	6880      	ldr	r0, [r0, #8]
   24406:	4770      	bx	lr

00024408 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   24408:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2440c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24410:	4283      	cmp	r3, r0
   24412:	d001      	beq.n	24418 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   24414:	1ac0      	subs	r0, r0, r3
   24416:	4770      	bx	lr
	return 0;
   24418:	2000      	movs	r0, #0
}
   2441a:	4770      	bx	lr

0002441c <z_unpend_thread_no_timeout>:
{
   2441c:	b538      	push	{r3, r4, r5, lr}
   2441e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24420:	2300      	movs	r3, #0
	__asm__ volatile(
   24422:	f04f 0220 	mov.w	r2, #32
   24426:	f3ef 8511 	mrs	r5, BASEPRI
   2442a:	f382 8812 	msr	BASEPRI_MAX, r2
   2442e:	f3bf 8f6f 	isb	sy
   24432:	e010      	b.n	24456 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24434:	4620      	mov	r0, r4
   24436:	f7ff ffe5 	bl	24404 <pended_on_thread>
   2443a:	4621      	mov	r1, r4
   2443c:	f000 f823 	bl	24486 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24440:	7b63      	ldrb	r3, [r4, #13]
   24442:	f023 0302 	bic.w	r3, r3, #2
   24446:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24448:	2300      	movs	r3, #0
   2444a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2444c:	f385 8811 	msr	BASEPRI, r5
   24450:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24454:	2301      	movs	r3, #1
   24456:	2b00      	cmp	r3, #0
   24458:	d0ec      	beq.n	24434 <z_unpend_thread_no_timeout+0x18>
}
   2445a:	bd38      	pop	{r3, r4, r5, pc}

0002445c <z_reschedule_irqlock>:
{
   2445c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2445e:	4603      	mov	r3, r0
   24460:	b920      	cbnz	r0, 2446c <z_reschedule_irqlock+0x10>
   24462:	f3ef 8205 	mrs	r2, IPSR
   24466:	b942      	cbnz	r2, 2447a <z_reschedule_irqlock+0x1e>
   24468:	2201      	movs	r2, #1
   2446a:	e000      	b.n	2446e <z_reschedule_irqlock+0x12>
   2446c:	2200      	movs	r2, #0
	if (resched(key)) {
   2446e:	b932      	cbnz	r2, 2447e <z_reschedule_irqlock+0x22>
   24470:	f383 8811 	msr	BASEPRI, r3
   24474:	f3bf 8f6f 	isb	sy
}
   24478:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2447a:	2200      	movs	r2, #0
   2447c:	e7f7      	b.n	2446e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2447e:	4618      	mov	r0, r3
   24480:	f7ef fc98 	bl	13db4 <arch_swap>
	return ret;
   24484:	e7f8      	b.n	24478 <z_reschedule_irqlock+0x1c>

00024486 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   24486:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   24488:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2448a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2448c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2448e:	2300      	movs	r3, #0
   24490:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   24492:	604b      	str	r3, [r1, #4]
}
   24494:	4770      	bx	lr

00024496 <z_unpend_thread>:
{
   24496:	b538      	push	{r3, r4, r5, lr}
   24498:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2449a:	2300      	movs	r3, #0
	__asm__ volatile(
   2449c:	f04f 0220 	mov.w	r2, #32
   244a0:	f3ef 8511 	mrs	r5, BASEPRI
   244a4:	f382 8812 	msr	BASEPRI_MAX, r2
   244a8:	f3bf 8f6f 	isb	sy
   244ac:	e010      	b.n	244d0 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   244ae:	4620      	mov	r0, r4
   244b0:	f7ff ffa8 	bl	24404 <pended_on_thread>
   244b4:	4621      	mov	r1, r4
   244b6:	f7ff ffe6 	bl	24486 <z_priq_dumb_remove>
   244ba:	7b63      	ldrb	r3, [r4, #13]
   244bc:	f023 0302 	bic.w	r3, r3, #2
   244c0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   244c2:	2300      	movs	r3, #0
   244c4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   244c6:	f385 8811 	msr	BASEPRI, r5
   244ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   244ce:	2301      	movs	r3, #1
   244d0:	2b00      	cmp	r3, #0
   244d2:	d0ec      	beq.n	244ae <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   244d4:	f104 0018 	add.w	r0, r4, #24
   244d8:	f000 f95c 	bl	24794 <z_abort_timeout>
}
   244dc:	bd38      	pop	{r3, r4, r5, pc}

000244de <z_priq_dumb_best>:
{
   244de:	4603      	mov	r3, r0
	return list->head == list;
   244e0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244e2:	4283      	cmp	r3, r0
   244e4:	d000      	beq.n	244e8 <z_priq_dumb_best+0xa>
}
   244e6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   244e8:	2000      	movs	r0, #0
	return thread;
   244ea:	e7fc      	b.n	244e6 <z_priq_dumb_best+0x8>

000244ec <z_ready_thread>:
{
   244ec:	b538      	push	{r3, r4, r5, lr}
   244ee:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   244f0:	2300      	movs	r3, #0
	__asm__ volatile(
   244f2:	f04f 0220 	mov.w	r2, #32
   244f6:	f3ef 8511 	mrs	r5, BASEPRI
   244fa:	f382 8812 	msr	BASEPRI_MAX, r2
   244fe:	f3bf 8f6f 	isb	sy
   24502:	e004      	b.n	2450e <z_ready_thread+0x22>
	__asm__ volatile(
   24504:	f385 8811 	msr	BASEPRI, r5
   24508:	f3bf 8f6f 	isb	sy
   2450c:	2301      	movs	r3, #1
   2450e:	b943      	cbnz	r3, 24522 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   24510:	4620      	mov	r0, r4
   24512:	f7ff ff75 	bl	24400 <thread_active_elsewhere>
   24516:	2800      	cmp	r0, #0
   24518:	d1f4      	bne.n	24504 <z_ready_thread+0x18>
			ready_thread(thread);
   2451a:	4620      	mov	r0, r4
   2451c:	f7f9 f9e0 	bl	1d8e0 <ready_thread>
   24520:	e7f0      	b.n	24504 <z_ready_thread+0x18>
}
   24522:	bd38      	pop	{r3, r4, r5, pc}

00024524 <z_thread_timeout>:
{
   24524:	b570      	push	{r4, r5, r6, lr}
   24526:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   24528:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   2452c:	2300      	movs	r3, #0
	__asm__ volatile(
   2452e:	f04f 0220 	mov.w	r2, #32
   24532:	f3ef 8611 	mrs	r6, BASEPRI
   24536:	f382 8812 	msr	BASEPRI_MAX, r2
   2453a:	f3bf 8f6f 	isb	sy
   2453e:	e011      	b.n	24564 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24540:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24544:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   24548:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2454c:	f023 0310 	bic.w	r3, r3, #16
   24550:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   24554:	4628      	mov	r0, r5
   24556:	f7f9 f9c3 	bl	1d8e0 <ready_thread>
	__asm__ volatile(
   2455a:	f386 8811 	msr	BASEPRI, r6
   2455e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24562:	2301      	movs	r3, #1
   24564:	b9ab      	cbnz	r3, 24592 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   24566:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2456a:	f013 0f28 	tst.w	r3, #40	; 0x28
   2456e:	d1f4      	bne.n	2455a <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   24570:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24574:	2b00      	cmp	r3, #0
   24576:	d0e3      	beq.n	24540 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24578:	4628      	mov	r0, r5
   2457a:	f7ff ff43 	bl	24404 <pended_on_thread>
   2457e:	4629      	mov	r1, r5
   24580:	f7ff ff81 	bl	24486 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24584:	7b6b      	ldrb	r3, [r5, #13]
   24586:	f023 0302 	bic.w	r3, r3, #2
   2458a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   2458c:	2300      	movs	r3, #0
   2458e:	60ab      	str	r3, [r5, #8]
}
   24590:	e7d6      	b.n	24540 <z_thread_timeout+0x1c>
}
   24592:	bd70      	pop	{r4, r5, r6, pc}

00024594 <add_to_waitq_locked>:
{
   24594:	b570      	push	{r4, r5, r6, lr}
   24596:	4605      	mov	r5, r0
   24598:	460e      	mov	r6, r1
	unready_thread(thread);
   2459a:	f7f9 f9ff 	bl	1d99c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2459e:	7b6b      	ldrb	r3, [r5, #13]
   245a0:	f043 0302 	orr.w	r3, r3, #2
   245a4:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   245a6:	b1b6      	cbz	r6, 245d6 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   245a8:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   245aa:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   245ac:	42a6      	cmp	r6, r4
   245ae:	d019      	beq.n	245e4 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245b0:	b164      	cbz	r4, 245cc <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   245b2:	4621      	mov	r1, r4
   245b4:	4628      	mov	r0, r5
   245b6:	f7ff ff27 	bl	24408 <z_sched_prio_cmp>
   245ba:	2800      	cmp	r0, #0
   245bc:	dc0c      	bgt.n	245d8 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   245be:	b12c      	cbz	r4, 245cc <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   245c0:	6873      	ldr	r3, [r6, #4]
   245c2:	429c      	cmp	r4, r3
   245c4:	d002      	beq.n	245cc <add_to_waitq_locked+0x38>
   245c6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245c8:	2c00      	cmp	r4, #0
   245ca:	d1f1      	bne.n	245b0 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   245cc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   245ce:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   245d0:	606b      	str	r3, [r5, #4]
	tail->next = node;
   245d2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   245d4:	6075      	str	r5, [r6, #4]
}
   245d6:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   245d8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   245da:	606b      	str	r3, [r5, #4]
	node->next = successor;
   245dc:	602c      	str	r4, [r5, #0]
	prev->next = node;
   245de:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   245e0:	6065      	str	r5, [r4, #4]
}
   245e2:	e7f8      	b.n	245d6 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245e4:	2400      	movs	r4, #0
   245e6:	e7e3      	b.n	245b0 <add_to_waitq_locked+0x1c>

000245e8 <pend>:
{
   245e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   245ec:	4605      	mov	r5, r0
   245ee:	460e      	mov	r6, r1
   245f0:	4691      	mov	r9, r2
   245f2:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   245f4:	2400      	movs	r4, #0
	__asm__ volatile(
   245f6:	f04f 0320 	mov.w	r3, #32
   245fa:	f3ef 8711 	mrs	r7, BASEPRI
   245fe:	f383 8812 	msr	BASEPRI_MAX, r3
   24602:	f3bf 8f6f 	isb	sy
   24606:	e008      	b.n	2461a <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
   24608:	4631      	mov	r1, r6
   2460a:	4628      	mov	r0, r5
   2460c:	f7ff ffc2 	bl	24594 <add_to_waitq_locked>
	__asm__ volatile(
   24610:	f387 8811 	msr	BASEPRI, r7
   24614:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24618:	2401      	movs	r4, #1
   2461a:	2c00      	cmp	r4, #0
   2461c:	d0f4      	beq.n	24608 <pend+0x20>
	add_thread_timeout(thread, timeout);
   2461e:	464a      	mov	r2, r9
   24620:	4643      	mov	r3, r8
   24622:	4628      	mov	r0, r5
   24624:	f7f9 f808 	bl	1d638 <add_thread_timeout>
}
   24628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002462c <z_unpend1_no_timeout>:
{
   2462c:	b570      	push	{r4, r5, r6, lr}
   2462e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   24630:	2300      	movs	r3, #0
	__asm__ volatile(
   24632:	f04f 0220 	mov.w	r2, #32
   24636:	f3ef 8611 	mrs	r6, BASEPRI
   2463a:	f382 8812 	msr	BASEPRI_MAX, r2
   2463e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24642:	461c      	mov	r4, r3
   24644:	e004      	b.n	24650 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   24646:	f386 8811 	msr	BASEPRI, r6
   2464a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2464e:	2301      	movs	r3, #1
   24650:	b98b      	cbnz	r3, 24676 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   24652:	4628      	mov	r0, r5
   24654:	f7ff ff43 	bl	244de <z_priq_dumb_best>
		if (thread != NULL) {
   24658:	4604      	mov	r4, r0
   2465a:	2800      	cmp	r0, #0
   2465c:	d0f3      	beq.n	24646 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2465e:	f7ff fed1 	bl	24404 <pended_on_thread>
   24662:	4621      	mov	r1, r4
   24664:	f7ff ff0f 	bl	24486 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24668:	7b63      	ldrb	r3, [r4, #13]
   2466a:	f023 0302 	bic.w	r3, r3, #2
   2466e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24670:	2300      	movs	r3, #0
   24672:	60a3      	str	r3, [r4, #8]
}
   24674:	e7e7      	b.n	24646 <z_unpend1_no_timeout+0x1a>
}
   24676:	4620      	mov	r0, r4
   24678:	bd70      	pop	{r4, r5, r6, pc}

0002467a <z_unpend_first_thread>:
{
   2467a:	b570      	push	{r4, r5, r6, lr}
   2467c:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   2467e:	2300      	movs	r3, #0
	__asm__ volatile(
   24680:	f04f 0220 	mov.w	r2, #32
   24684:	f3ef 8611 	mrs	r6, BASEPRI
   24688:	f382 8812 	msr	BASEPRI_MAX, r2
   2468c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24690:	461c      	mov	r4, r3
   24692:	e004      	b.n	2469e <z_unpend_first_thread+0x24>
	__asm__ volatile(
   24694:	f386 8811 	msr	BASEPRI, r6
   24698:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2469c:	2301      	movs	r3, #1
   2469e:	b9ab      	cbnz	r3, 246cc <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   246a0:	4628      	mov	r0, r5
   246a2:	f7ff ff1c 	bl	244de <z_priq_dumb_best>
		if (thread != NULL) {
   246a6:	4604      	mov	r4, r0
   246a8:	2800      	cmp	r0, #0
   246aa:	d0f3      	beq.n	24694 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   246ac:	f7ff feaa 	bl	24404 <pended_on_thread>
   246b0:	4621      	mov	r1, r4
   246b2:	f7ff fee8 	bl	24486 <z_priq_dumb_remove>
   246b6:	7b63      	ldrb	r3, [r4, #13]
   246b8:	f023 0302 	bic.w	r3, r3, #2
   246bc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   246be:	2300      	movs	r3, #0
   246c0:	60a3      	str	r3, [r4, #8]
   246c2:	f104 0018 	add.w	r0, r4, #24
   246c6:	f000 f865 	bl	24794 <z_abort_timeout>
   246ca:	e7e3      	b.n	24694 <z_unpend_first_thread+0x1a>
}
   246cc:	4620      	mov	r0, r4
   246ce:	bd70      	pop	{r4, r5, r6, pc}

000246d0 <z_unpend_all>:
{
   246d0:	b538      	push	{r3, r4, r5, lr}
   246d2:	4605      	mov	r5, r0
	int need_sched = 0;
   246d4:	2000      	movs	r0, #0
	return list->head == list;
   246d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   246d8:	42a5      	cmp	r5, r4
   246da:	d008      	beq.n	246ee <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   246dc:	b13c      	cbz	r4, 246ee <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   246de:	4620      	mov	r0, r4
   246e0:	f7ff fed9 	bl	24496 <z_unpend_thread>
		z_ready_thread(thread);
   246e4:	4620      	mov	r0, r4
   246e6:	f7ff ff01 	bl	244ec <z_ready_thread>
		need_sched = 1;
   246ea:	2001      	movs	r0, #1
   246ec:	e7f3      	b.n	246d6 <z_unpend_all+0x6>
}
   246ee:	bd38      	pop	{r3, r4, r5, pc}

000246f0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   246f0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   246f2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   246f4:	6083      	str	r3, [r0, #8]
}
   246f6:	4770      	bx	lr

000246f8 <z_sched_wake>:
{
   246f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   246fc:	4605      	mov	r5, r0
   246fe:	4688      	mov	r8, r1
   24700:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   24702:	2300      	movs	r3, #0
	__asm__ volatile(
   24704:	f04f 0220 	mov.w	r2, #32
   24708:	f3ef 8611 	mrs	r6, BASEPRI
   2470c:	f382 8812 	msr	BASEPRI_MAX, r2
   24710:	f3bf 8f6f 	isb	sy
	bool ret = false;
   24714:	4699      	mov	r9, r3
   24716:	e004      	b.n	24722 <z_sched_wake+0x2a>
	__asm__ volatile(
   24718:	f386 8811 	msr	BASEPRI, r6
   2471c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24720:	2301      	movs	r3, #1
   24722:	b9eb      	cbnz	r3, 24760 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   24724:	4628      	mov	r0, r5
   24726:	f7ff feda 	bl	244de <z_priq_dumb_best>
		if (thread != NULL) {
   2472a:	4604      	mov	r4, r0
   2472c:	2800      	cmp	r0, #0
   2472e:	d0f3      	beq.n	24718 <z_sched_wake+0x20>
   24730:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   24734:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24736:	f7ff fe65 	bl	24404 <pended_on_thread>
   2473a:	4621      	mov	r1, r4
   2473c:	f7ff fea3 	bl	24486 <z_priq_dumb_remove>
   24740:	7b63      	ldrb	r3, [r4, #13]
   24742:	f023 0302 	bic.w	r3, r3, #2
   24746:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24748:	2300      	movs	r3, #0
   2474a:	60a3      	str	r3, [r4, #8]
   2474c:	f104 0018 	add.w	r0, r4, #24
   24750:	f000 f820 	bl	24794 <z_abort_timeout>
			ready_thread(thread);
   24754:	4620      	mov	r0, r4
   24756:	f7f9 f8c3 	bl	1d8e0 <ready_thread>
			ret = true;
   2475a:	f04f 0901 	mov.w	r9, #1
   2475e:	e7db      	b.n	24718 <z_sched_wake+0x20>
}
   24760:	4648      	mov	r0, r9
   24762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024766 <remove_timeout>:
{
   24766:	b510      	push	{r4, lr}
   24768:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2476a:	f7f9 fb9d 	bl	1dea8 <next>
   2476e:	b148      	cbz	r0, 24784 <remove_timeout+0x1e>
   24770:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   24772:	6920      	ldr	r0, [r4, #16]
   24774:	6961      	ldr	r1, [r4, #20]
   24776:	6913      	ldr	r3, [r2, #16]
   24778:	181b      	adds	r3, r3, r0
   2477a:	6950      	ldr	r0, [r2, #20]
   2477c:	eb41 0100 	adc.w	r1, r1, r0
   24780:	6113      	str	r3, [r2, #16]
   24782:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   24784:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   24786:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   24788:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2478a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2478c:	2300      	movs	r3, #0
   2478e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   24790:	6063      	str	r3, [r4, #4]
}
   24792:	bd10      	pop	{r4, pc}

00024794 <z_abort_timeout>:
{
   24794:	b570      	push	{r4, r5, r6, lr}
   24796:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   24798:	2300      	movs	r3, #0
	__asm__ volatile(
   2479a:	f04f 0220 	mov.w	r2, #32
   2479e:	f3ef 8611 	mrs	r6, BASEPRI
   247a2:	f382 8812 	msr	BASEPRI_MAX, r2
   247a6:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   247aa:	f06f 0015 	mvn.w	r0, #21
   247ae:	e004      	b.n	247ba <z_abort_timeout+0x26>
	__asm__ volatile(
   247b0:	f386 8811 	msr	BASEPRI, r6
   247b4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   247b8:	2301      	movs	r3, #1
   247ba:	461d      	mov	r5, r3
   247bc:	b93b      	cbnz	r3, 247ce <z_abort_timeout+0x3a>
	return node->next != NULL;
   247be:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   247c0:	2b00      	cmp	r3, #0
   247c2:	d0f5      	beq.n	247b0 <z_abort_timeout+0x1c>
			remove_timeout(to);
   247c4:	4620      	mov	r0, r4
   247c6:	f7ff ffce 	bl	24766 <remove_timeout>
			ret = 0;
   247ca:	4628      	mov	r0, r5
   247cc:	e7f0      	b.n	247b0 <z_abort_timeout+0x1c>
}
   247ce:	bd70      	pop	{r4, r5, r6, pc}

000247d0 <z_get_next_timeout_expiry>:
{
   247d0:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   247d2:	2300      	movs	r3, #0
	__asm__ volatile(
   247d4:	f04f 0220 	mov.w	r2, #32
   247d8:	f3ef 8411 	mrs	r4, BASEPRI
   247dc:	f382 8812 	msr	BASEPRI_MAX, r2
   247e0:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   247e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   247e8:	e006      	b.n	247f8 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   247ea:	f7f9 fb75 	bl	1ded8 <next_timeout>
	__asm__ volatile(
   247ee:	f384 8811 	msr	BASEPRI, r4
   247f2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   247f6:	2301      	movs	r3, #1
   247f8:	2b00      	cmp	r3, #0
   247fa:	d0f6      	beq.n	247ea <z_get_next_timeout_expiry+0x1a>
}
   247fc:	bd10      	pop	{r4, pc}

000247fe <z_set_timeout_expiry>:
{
   247fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24800:	4605      	mov	r5, r0
   24802:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   24804:	2300      	movs	r3, #0
	__asm__ volatile(
   24806:	f04f 0220 	mov.w	r2, #32
   2480a:	f3ef 8611 	mrs	r6, BASEPRI
   2480e:	f382 8812 	msr	BASEPRI_MAX, r2
   24812:	f3bf 8f6f 	isb	sy
   24816:	e00a      	b.n	2482e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   24818:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2481a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2481e:	2801      	cmp	r0, #1
   24820:	dd00      	ble.n	24824 <z_set_timeout_expiry+0x26>
   24822:	b97c      	cbnz	r4, 24844 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   24824:	f386 8811 	msr	BASEPRI, r6
   24828:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2482c:	2301      	movs	r3, #1
   2482e:	461c      	mov	r4, r3
   24830:	b97b      	cbnz	r3, 24852 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   24832:	f7f9 fb51 	bl	1ded8 <next_timeout>
			      || (ticks <= next_to);
   24836:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2483a:	d0ed      	beq.n	24818 <z_set_timeout_expiry+0x1a>
   2483c:	42a8      	cmp	r0, r5
   2483e:	dbec      	blt.n	2481a <z_set_timeout_expiry+0x1c>
   24840:	2401      	movs	r4, #1
   24842:	e7ea      	b.n	2481a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24844:	4639      	mov	r1, r7
   24846:	42a8      	cmp	r0, r5
   24848:	bfa8      	it	ge
   2484a:	4628      	movge	r0, r5
   2484c:	f7f1 fa40 	bl	15cd0 <sys_clock_set_timeout>
   24850:	e7e8      	b.n	24824 <z_set_timeout_expiry+0x26>
}
   24852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024854 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24854:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24856:	f7f9 fc55 	bl	1e104 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2485a:	bd08      	pop	{r3, pc}

0002485c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   2485c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   2485e:	f7f9 fc51 	bl	1e104 <sys_clock_tick_get>
}
   24862:	bd08      	pop	{r3, pc}

00024864 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   24864:	b900      	cbnz	r0, 24868 <z_impl_k_busy_wait+0x4>
   24866:	4770      	bx	lr
{
   24868:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2486a:	f7ee f8a3 	bl	129b4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2486e:	bd08      	pop	{r3, pc}

00024870 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24870:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   24874:	bf08      	it	eq
   24876:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   2487a:	d021      	beq.n	248c0 <sys_clock_timeout_end_calc+0x50>
{
   2487c:	b538      	push	{r3, r4, r5, lr}
   2487e:	4605      	mov	r5, r0
   24880:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24882:	ea51 0300 	orrs.w	r3, r1, r0
   24886:	d009      	beq.n	2489c <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24888:	f06f 0301 	mvn.w	r3, #1
   2488c:	1a18      	subs	r0, r3, r0
   2488e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24892:	eb63 0101 	sbc.w	r1, r3, r1
   24896:	2900      	cmp	r1, #0
   24898:	db03      	blt.n	248a2 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2489a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2489c:	f7f9 fc32 	bl	1e104 <sys_clock_tick_get>
   248a0:	e7fb      	b.n	2489a <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   248a2:	f7f9 fc2f 	bl	1e104 <sys_clock_tick_get>
   248a6:	4603      	mov	r3, r0
   248a8:	4628      	mov	r0, r5
   248aa:	4622      	mov	r2, r4
   248ac:	2d01      	cmp	r5, #1
   248ae:	f174 0400 	sbcs.w	r4, r4, #0
   248b2:	da01      	bge.n	248b8 <sys_clock_timeout_end_calc+0x48>
   248b4:	2001      	movs	r0, #1
   248b6:	2200      	movs	r2, #0
   248b8:	1818      	adds	r0, r3, r0
   248ba:	eb41 0102 	adc.w	r1, r1, r2
   248be:	e7ec      	b.n	2489a <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   248c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248c4:	4601      	mov	r1, r0
}
   248c6:	4770      	bx	lr

000248c8 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   248c8:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   248ca:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   248cc:	2300      	movs	r3, #0
   248ce:	6303      	str	r3, [r0, #48]	; 0x30
   248d0:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   248d4:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   248d6:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   248d8:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   248da:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   248dc:	6343      	str	r3, [r0, #52]	; 0x34
}
   248de:	4770      	bx	lr

000248e0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   248e0:	b510      	push	{r4, lr}
   248e2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   248e4:	f7ff ff56 	bl	24794 <z_abort_timeout>

	if (inactive) {
   248e8:	b9a0      	cbnz	r0, 24914 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   248ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   248ec:	b10b      	cbz	r3, 248f2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   248ee:	4620      	mov	r0, r4
   248f0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   248f2:	f104 0018 	add.w	r0, r4, #24
   248f6:	f7ff fe99 	bl	2462c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   248fa:	b158      	cbz	r0, 24914 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   248fc:	f7ff fdf6 	bl	244ec <z_ready_thread>
	__asm__ volatile(
   24900:	f04f 0320 	mov.w	r3, #32
   24904:	f3ef 8011 	mrs	r0, BASEPRI
   24908:	f383 8812 	msr	BASEPRI_MAX, r3
   2490c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24910:	f7ff fda4 	bl	2445c <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   24914:	bd10      	pop	{r4, pc}

00024916 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24916:	b108      	cbz	r0, 2491c <poller_thread+0x6>
   24918:	3860      	subs	r0, #96	; 0x60
   2491a:	4770      	bx	lr
}
   2491c:	4770      	bx	lr

0002491e <signal_poller>:
{
   2491e:	b538      	push	{r3, r4, r5, lr}
   24920:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   24922:	6880      	ldr	r0, [r0, #8]
   24924:	f7ff fff7 	bl	24916 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   24928:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2492a:	f013 0f02 	tst.w	r3, #2
   2492e:	d025      	beq.n	2497c <signal_poller+0x5e>
   24930:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   24932:	6a82      	ldr	r2, [r0, #40]	; 0x28
   24934:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   24936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2493a:	bf08      	it	eq
   2493c:	f112 0f02 	cmneq.w	r2, #2
   24940:	d01e      	beq.n	24980 <signal_poller+0x62>
	z_unpend_thread(thread);
   24942:	f7ff fda8 	bl	24496 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24946:	2d08      	cmp	r5, #8
   24948:	d00a      	beq.n	24960 <signal_poller+0x42>
   2494a:	2300      	movs	r3, #0
   2494c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   24950:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24952:	f013 0f1f 	tst.w	r3, #31
   24956:	d108      	bne.n	2496a <signal_poller+0x4c>
	return node->next != NULL;
   24958:	69a3      	ldr	r3, [r4, #24]
   2495a:	b123      	cbz	r3, 24966 <signal_poller+0x48>
   2495c:	2300      	movs	r3, #0
   2495e:	e005      	b.n	2496c <signal_poller+0x4e>
   24960:	f06f 0303 	mvn.w	r3, #3
   24964:	e7f2      	b.n	2494c <signal_poller+0x2e>
   24966:	2301      	movs	r3, #1
   24968:	e000      	b.n	2496c <signal_poller+0x4e>
   2496a:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2496c:	b90b      	cbnz	r3, 24972 <signal_poller+0x54>
		return 0;
   2496e:	2000      	movs	r0, #0
   24970:	e005      	b.n	2497e <signal_poller+0x60>
	z_ready_thread(thread);
   24972:	4620      	mov	r0, r4
   24974:	f7ff fdba 	bl	244ec <z_ready_thread>
	return 0;
   24978:	2000      	movs	r0, #0
   2497a:	e000      	b.n	2497e <signal_poller+0x60>
		return 0;
   2497c:	2000      	movs	r0, #0
}
   2497e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   24980:	f06f 000a 	mvn.w	r0, #10
   24984:	e7fb      	b.n	2497e <signal_poller+0x60>

00024986 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   24986:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   24988:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2498a:	7823      	ldrb	r3, [r4, #0]
   2498c:	b173      	cbz	r3, 249ac <signal_triggered_work+0x26>
   2498e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   24992:	b15d      	cbz	r5, 249ac <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   24994:	f1a4 0614 	sub.w	r6, r4, #20
   24998:	f104 0014 	add.w	r0, r4, #20
   2499c:	f7ff fefa 	bl	24794 <z_abort_timeout>
		twork->poll_result = 0;
   249a0:	2300      	movs	r3, #0
   249a2:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   249a4:	4631      	mov	r1, r6
   249a6:	4628      	mov	r0, r5
   249a8:	f7ff fcbe 	bl	24328 <k_work_submit_to_queue>
	}

	return 0;
}
   249ac:	2000      	movs	r0, #0
   249ae:	bd70      	pop	{r4, r5, r6, pc}

000249b0 <signal_poll_event>:
{
   249b0:	b570      	push	{r4, r5, r6, lr}
   249b2:	4604      	mov	r4, r0
   249b4:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   249b6:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   249b8:	b1d6      	cbz	r6, 249f0 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   249ba:	7873      	ldrb	r3, [r6, #1]
   249bc:	2b01      	cmp	r3, #1
   249be:	d00d      	beq.n	249dc <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   249c0:	2b02      	cmp	r3, #2
   249c2:	d012      	beq.n	249ea <signal_poll_event+0x3a>
		poller->is_polling = false;
   249c4:	2000      	movs	r0, #0
   249c6:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   249c8:	2300      	movs	r3, #0
   249ca:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   249cc:	68e3      	ldr	r3, [r4, #12]
   249ce:	f3c3 3145 	ubfx	r1, r3, #13, #6
   249d2:	430d      	orrs	r5, r1
   249d4:	f365 3352 	bfi	r3, r5, #13, #6
   249d8:	60e3      	str	r3, [r4, #12]
}
   249da:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   249dc:	f7ff ff9f 	bl	2491e <signal_poller>
		poller->is_polling = false;
   249e0:	2300      	movs	r3, #0
   249e2:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   249e4:	4298      	cmp	r0, r3
   249e6:	daef      	bge.n	249c8 <signal_poll_event+0x18>
   249e8:	e7f7      	b.n	249da <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   249ea:	f7ff ffcc 	bl	24986 <signal_triggered_work>
   249ee:	e7f7      	b.n	249e0 <signal_poll_event+0x30>
	int retcode = 0;
   249f0:	2000      	movs	r0, #0
   249f2:	e7e9      	b.n	249c8 <signal_poll_event+0x18>

000249f4 <z_handle_obj_poll_events>:
{
   249f4:	b508      	push	{r3, lr}
   249f6:	4603      	mov	r3, r0
	return list->head == list;
   249f8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   249fa:	4283      	cmp	r3, r0
   249fc:	d009      	beq.n	24a12 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   249fe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   24a00:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   24a02:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24a04:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24a06:	2300      	movs	r3, #0
   24a08:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24a0a:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   24a0c:	b108      	cbz	r0, 24a12 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   24a0e:	f7ff ffcf 	bl	249b0 <signal_poll_event>
}
   24a12:	bd08      	pop	{r3, pc}

00024a14 <z_heap_aligned_alloc>:
{
   24a14:	b5d0      	push	{r4, r6, r7, lr}
   24a16:	b082      	sub	sp, #8
   24a18:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24a1a:	2300      	movs	r3, #0
   24a1c:	3204      	adds	r2, #4
   24a1e:	d20e      	bcs.n	24a3e <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   24a20:	b97b      	cbnz	r3, 24a42 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24a22:	2600      	movs	r6, #0
   24a24:	2700      	movs	r7, #0
   24a26:	e9cd 6700 	strd	r6, r7, [sp]
   24a2a:	f041 0104 	orr.w	r1, r1, #4
   24a2e:	4620      	mov	r0, r4
   24a30:	f7ff fa89 	bl	23f46 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24a34:	b108      	cbz	r0, 24a3a <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   24a36:	f840 4b04 	str.w	r4, [r0], #4
}
   24a3a:	b002      	add	sp, #8
   24a3c:	bdd0      	pop	{r4, r6, r7, pc}
   24a3e:	2301      	movs	r3, #1
   24a40:	e7ee      	b.n	24a20 <z_heap_aligned_alloc+0xc>
		return NULL;
   24a42:	2000      	movs	r0, #0
   24a44:	e7f9      	b.n	24a3a <z_heap_aligned_alloc+0x26>

00024a46 <k_free>:
	if (ptr != NULL) {
   24a46:	b130      	cbz	r0, 24a56 <k_free+0x10>
{
   24a48:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   24a4a:	1f01      	subs	r1, r0, #4
   24a4c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   24a50:	f7ff facd 	bl	23fee <k_heap_free>
}
   24a54:	bd08      	pop	{r3, pc}
   24a56:	4770      	bx	lr

00024a58 <k_malloc>:
{
   24a58:	b508      	push	{r3, lr}
   24a5a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   24a5c:	2004      	movs	r0, #4
   24a5e:	f7f9 fee3 	bl	1e828 <k_aligned_alloc>
}
   24a62:	bd08      	pop	{r3, pc}

00024a64 <k_calloc>:
{
   24a64:	b538      	push	{r3, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   24a66:	2300      	movs	r3, #0
   24a68:	fba0 4001 	umull	r4, r0, r0, r1
   24a6c:	b958      	cbnz	r0, 24a86 <k_calloc+0x22>
	if (size_mul_overflow(nmemb, size, &bounds)) {
   24a6e:	b963      	cbnz	r3, 24a8a <k_calloc+0x26>
	ret = k_malloc(bounds);
   24a70:	4620      	mov	r0, r4
   24a72:	f7ff fff1 	bl	24a58 <k_malloc>
	if (ret != NULL) {
   24a76:	4605      	mov	r5, r0
   24a78:	b118      	cbz	r0, 24a82 <k_calloc+0x1e>
__ssp_bos_icheck3(memset, void *, int)
   24a7a:	4622      	mov	r2, r4
   24a7c:	2100      	movs	r1, #0
   24a7e:	f000 f832 	bl	24ae6 <memset>
}
   24a82:	4628      	mov	r0, r5
   24a84:	bd38      	pop	{r3, r4, r5, pc}
   24a86:	2301      	movs	r3, #1
   24a88:	e7f1      	b.n	24a6e <k_calloc+0xa>
		return NULL;
   24a8a:	2500      	movs	r5, #0
   24a8c:	e7f9      	b.n	24a82 <k_calloc+0x1e>

00024a8e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24a8e:	4770      	bx	lr

00024a90 <memchr>:
   24a90:	b2c9      	uxtb	r1, r1
   24a92:	4603      	mov	r3, r0
   24a94:	4402      	add	r2, r0
   24a96:	b510      	push	{r4, lr}
   24a98:	4293      	cmp	r3, r2
   24a9a:	4618      	mov	r0, r3
   24a9c:	d101      	bne.n	24aa2 <memchr+0x12>
   24a9e:	2000      	movs	r0, #0
   24aa0:	e003      	b.n	24aaa <memchr+0x1a>
   24aa2:	7804      	ldrb	r4, [r0, #0]
   24aa4:	3301      	adds	r3, #1
   24aa6:	428c      	cmp	r4, r1
   24aa8:	d1f6      	bne.n	24a98 <memchr+0x8>
   24aaa:	bd10      	pop	{r4, pc}

00024aac <memcmp>:
   24aac:	3901      	subs	r1, #1
   24aae:	4402      	add	r2, r0
   24ab0:	b510      	push	{r4, lr}
   24ab2:	4290      	cmp	r0, r2
   24ab4:	d101      	bne.n	24aba <memcmp+0xe>
   24ab6:	2000      	movs	r0, #0
   24ab8:	e005      	b.n	24ac6 <memcmp+0x1a>
   24aba:	7803      	ldrb	r3, [r0, #0]
   24abc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24ac0:	42a3      	cmp	r3, r4
   24ac2:	d001      	beq.n	24ac8 <memcmp+0x1c>
   24ac4:	1b18      	subs	r0, r3, r4
   24ac6:	bd10      	pop	{r4, pc}
   24ac8:	3001      	adds	r0, #1
   24aca:	e7f2      	b.n	24ab2 <memcmp+0x6>

00024acc <memcpy>:
   24acc:	440a      	add	r2, r1
   24ace:	1e43      	subs	r3, r0, #1
   24ad0:	4291      	cmp	r1, r2
   24ad2:	d100      	bne.n	24ad6 <memcpy+0xa>
   24ad4:	4770      	bx	lr
   24ad6:	b510      	push	{r4, lr}
   24ad8:	f811 4b01 	ldrb.w	r4, [r1], #1
   24adc:	4291      	cmp	r1, r2
   24ade:	f803 4f01 	strb.w	r4, [r3, #1]!
   24ae2:	d1f9      	bne.n	24ad8 <memcpy+0xc>
   24ae4:	bd10      	pop	{r4, pc}

00024ae6 <memset>:
   24ae6:	4402      	add	r2, r0
   24ae8:	4603      	mov	r3, r0
   24aea:	4293      	cmp	r3, r2
   24aec:	d100      	bne.n	24af0 <memset+0xa>
   24aee:	4770      	bx	lr
   24af0:	f803 1b01 	strb.w	r1, [r3], #1
   24af4:	e7f9      	b.n	24aea <memset+0x4>

00024af6 <__seofread>:
   24af6:	2000      	movs	r0, #0
   24af8:	4770      	bx	lr

00024afa <strchr>:
   24afa:	b2c9      	uxtb	r1, r1
   24afc:	4603      	mov	r3, r0
   24afe:	4618      	mov	r0, r3
   24b00:	f813 2b01 	ldrb.w	r2, [r3], #1
   24b04:	b112      	cbz	r2, 24b0c <strchr+0x12>
   24b06:	428a      	cmp	r2, r1
   24b08:	d1f9      	bne.n	24afe <strchr+0x4>
   24b0a:	4770      	bx	lr
   24b0c:	2900      	cmp	r1, #0
   24b0e:	bf18      	it	ne
   24b10:	2000      	movne	r0, #0
   24b12:	4770      	bx	lr

00024b14 <strcpy>:
   24b14:	4603      	mov	r3, r0
   24b16:	f811 2b01 	ldrb.w	r2, [r1], #1
   24b1a:	f803 2b01 	strb.w	r2, [r3], #1
   24b1e:	2a00      	cmp	r2, #0
   24b20:	d1f9      	bne.n	24b16 <strcpy+0x2>
   24b22:	4770      	bx	lr

00024b24 <strncmp>:
   24b24:	4603      	mov	r3, r0
   24b26:	b510      	push	{r4, lr}
   24b28:	b172      	cbz	r2, 24b48 <strncmp+0x24>
   24b2a:	3901      	subs	r1, #1
   24b2c:	1884      	adds	r4, r0, r2
   24b2e:	f813 0b01 	ldrb.w	r0, [r3], #1
   24b32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24b36:	4290      	cmp	r0, r2
   24b38:	d101      	bne.n	24b3e <strncmp+0x1a>
   24b3a:	42a3      	cmp	r3, r4
   24b3c:	d101      	bne.n	24b42 <strncmp+0x1e>
   24b3e:	1a80      	subs	r0, r0, r2
   24b40:	bd10      	pop	{r4, pc}
   24b42:	2800      	cmp	r0, #0
   24b44:	d1f3      	bne.n	24b2e <strncmp+0xa>
   24b46:	e7fa      	b.n	24b3e <strncmp+0x1a>
   24b48:	4610      	mov	r0, r2
   24b4a:	e7f9      	b.n	24b40 <strncmp+0x1c>

00024b4c <strncpy>:
   24b4c:	3901      	subs	r1, #1
   24b4e:	4603      	mov	r3, r0
   24b50:	b510      	push	{r4, lr}
   24b52:	b132      	cbz	r2, 24b62 <strncpy+0x16>
   24b54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24b58:	3a01      	subs	r2, #1
   24b5a:	f803 4b01 	strb.w	r4, [r3], #1
   24b5e:	2c00      	cmp	r4, #0
   24b60:	d1f7      	bne.n	24b52 <strncpy+0x6>
   24b62:	441a      	add	r2, r3
   24b64:	2100      	movs	r1, #0
   24b66:	4293      	cmp	r3, r2
   24b68:	d100      	bne.n	24b6c <strncpy+0x20>
   24b6a:	bd10      	pop	{r4, pc}
   24b6c:	f803 1b01 	strb.w	r1, [r3], #1
   24b70:	e7f9      	b.n	24b66 <strncpy+0x1a>

00024b72 <strnlen>:
   24b72:	4602      	mov	r2, r0
   24b74:	4401      	add	r1, r0
   24b76:	b510      	push	{r4, lr}
   24b78:	428a      	cmp	r2, r1
   24b7a:	4613      	mov	r3, r2
   24b7c:	d003      	beq.n	24b86 <strnlen+0x14>
   24b7e:	781c      	ldrb	r4, [r3, #0]
   24b80:	3201      	adds	r2, #1
   24b82:	2c00      	cmp	r4, #0
   24b84:	d1f8      	bne.n	24b78 <strnlen+0x6>
   24b86:	1a18      	subs	r0, r3, r0
   24b88:	bd10      	pop	{r4, pc}

00024b8a <strstr>:
   24b8a:	780a      	ldrb	r2, [r1, #0]
   24b8c:	b570      	push	{r4, r5, r6, lr}
   24b8e:	b96a      	cbnz	r2, 24bac <strstr+0x22>
   24b90:	bd70      	pop	{r4, r5, r6, pc}
   24b92:	429a      	cmp	r2, r3
   24b94:	d109      	bne.n	24baa <strstr+0x20>
   24b96:	460c      	mov	r4, r1
   24b98:	4605      	mov	r5, r0
   24b9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24b9e:	2b00      	cmp	r3, #0
   24ba0:	d0f6      	beq.n	24b90 <strstr+0x6>
   24ba2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   24ba6:	429e      	cmp	r6, r3
   24ba8:	d0f7      	beq.n	24b9a <strstr+0x10>
   24baa:	3001      	adds	r0, #1
   24bac:	7803      	ldrb	r3, [r0, #0]
   24bae:	2b00      	cmp	r3, #0
   24bb0:	d1ef      	bne.n	24b92 <strstr+0x8>
   24bb2:	4618      	mov	r0, r3
   24bb4:	e7ec      	b.n	24b90 <strstr+0x6>

00024bb6 <_strtol_r>:
   24bb6:	f7f9 bf67 	b.w	1ea88 <_strtol_l.constprop.0>

00024bba <_strtoul_r>:
   24bba:	f7fa b88b 	b.w	1ecd4 <_strtoul_l.constprop.0>

00024bbe <_vsniprintf_r>:
   24bbe:	b530      	push	{r4, r5, lr}
   24bc0:	4614      	mov	r4, r2
   24bc2:	b09b      	sub	sp, #108	; 0x6c
   24bc4:	4605      	mov	r5, r0
   24bc6:	461a      	mov	r2, r3
   24bc8:	2c00      	cmp	r4, #0
   24bca:	da05      	bge.n	24bd8 <_vsniprintf_r+0x1a>
   24bcc:	238b      	movs	r3, #139	; 0x8b
   24bce:	6003      	str	r3, [r0, #0]
   24bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24bd4:	b01b      	add	sp, #108	; 0x6c
   24bd6:	bd30      	pop	{r4, r5, pc}
   24bd8:	f44f 7302 	mov.w	r3, #520	; 0x208
   24bdc:	9100      	str	r1, [sp, #0]
   24bde:	9104      	str	r1, [sp, #16]
   24be0:	4669      	mov	r1, sp
   24be2:	f8ad 300c 	strh.w	r3, [sp, #12]
   24be6:	bf14      	ite	ne
   24be8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   24bec:	4623      	moveq	r3, r4
   24bee:	9302      	str	r3, [sp, #8]
   24bf0:	9305      	str	r3, [sp, #20]
   24bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24bf6:	f8ad 300e 	strh.w	r3, [sp, #14]
   24bfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   24bfc:	f7fa f92e 	bl	1ee5c <_svfiprintf_r>
   24c00:	1c43      	adds	r3, r0, #1
   24c02:	bfbc      	itt	lt
   24c04:	238b      	movlt	r3, #139	; 0x8b
   24c06:	602b      	strlt	r3, [r5, #0]
   24c08:	2c00      	cmp	r4, #0
   24c0a:	d0e3      	beq.n	24bd4 <_vsniprintf_r+0x16>
   24c0c:	9b00      	ldr	r3, [sp, #0]
   24c0e:	2200      	movs	r2, #0
   24c10:	701a      	strb	r2, [r3, #0]
   24c12:	e7df      	b.n	24bd4 <_vsniprintf_r+0x16>

00024c14 <__ssputs_r>:
   24c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c18:	688e      	ldr	r6, [r1, #8]
   24c1a:	4682      	mov	sl, r0
   24c1c:	460c      	mov	r4, r1
   24c1e:	4690      	mov	r8, r2
   24c20:	429e      	cmp	r6, r3
   24c22:	461f      	mov	r7, r3
   24c24:	d838      	bhi.n	24c98 <__ssputs_r+0x84>
   24c26:	898a      	ldrh	r2, [r1, #12]
   24c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
   24c2c:	d032      	beq.n	24c94 <__ssputs_r+0x80>
   24c2e:	6825      	ldr	r5, [r4, #0]
   24c30:	3301      	adds	r3, #1
   24c32:	6909      	ldr	r1, [r1, #16]
   24c34:	eba5 0901 	sub.w	r9, r5, r1
   24c38:	6965      	ldr	r5, [r4, #20]
   24c3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   24c3e:	444b      	add	r3, r9
   24c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   24c44:	106d      	asrs	r5, r5, #1
   24c46:	429d      	cmp	r5, r3
   24c48:	bf38      	it	cc
   24c4a:	461d      	movcc	r5, r3
   24c4c:	0553      	lsls	r3, r2, #21
   24c4e:	d531      	bpl.n	24cb4 <__ssputs_r+0xa0>
   24c50:	4629      	mov	r1, r5
   24c52:	f7f9 fe7b 	bl	1e94c <_malloc_r>
   24c56:	4606      	mov	r6, r0
   24c58:	b950      	cbnz	r0, 24c70 <__ssputs_r+0x5c>
   24c5a:	230c      	movs	r3, #12
   24c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c60:	f8ca 3000 	str.w	r3, [sl]
   24c64:	89a3      	ldrh	r3, [r4, #12]
   24c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24c6a:	81a3      	strh	r3, [r4, #12]
   24c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24c70:	464a      	mov	r2, r9
   24c72:	6921      	ldr	r1, [r4, #16]
   24c74:	f7ff ff2a 	bl	24acc <memcpy>
   24c78:	89a3      	ldrh	r3, [r4, #12]
   24c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   24c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24c82:	81a3      	strh	r3, [r4, #12]
   24c84:	6126      	str	r6, [r4, #16]
   24c86:	444e      	add	r6, r9
   24c88:	6165      	str	r5, [r4, #20]
   24c8a:	eba5 0509 	sub.w	r5, r5, r9
   24c8e:	6026      	str	r6, [r4, #0]
   24c90:	463e      	mov	r6, r7
   24c92:	60a5      	str	r5, [r4, #8]
   24c94:	42be      	cmp	r6, r7
   24c96:	d900      	bls.n	24c9a <__ssputs_r+0x86>
   24c98:	463e      	mov	r6, r7
   24c9a:	4632      	mov	r2, r6
   24c9c:	4641      	mov	r1, r8
   24c9e:	6820      	ldr	r0, [r4, #0]
   24ca0:	f000 f94c 	bl	24f3c <memmove>
   24ca4:	68a3      	ldr	r3, [r4, #8]
   24ca6:	2000      	movs	r0, #0
   24ca8:	1b9b      	subs	r3, r3, r6
   24caa:	60a3      	str	r3, [r4, #8]
   24cac:	6823      	ldr	r3, [r4, #0]
   24cae:	4433      	add	r3, r6
   24cb0:	6023      	str	r3, [r4, #0]
   24cb2:	e7db      	b.n	24c6c <__ssputs_r+0x58>
   24cb4:	462a      	mov	r2, r5
   24cb6:	f000 f95b 	bl	24f70 <_realloc_r>
   24cba:	4606      	mov	r6, r0
   24cbc:	2800      	cmp	r0, #0
   24cbe:	d1e1      	bne.n	24c84 <__ssputs_r+0x70>
   24cc0:	6921      	ldr	r1, [r4, #16]
   24cc2:	4650      	mov	r0, sl
   24cc4:	f7f9 fdf8 	bl	1e8b8 <_free_r>
   24cc8:	e7c7      	b.n	24c5a <__ssputs_r+0x46>

00024cca <_sungetc_r>:
   24cca:	b538      	push	{r3, r4, r5, lr}
   24ccc:	1c4b      	adds	r3, r1, #1
   24cce:	4614      	mov	r4, r2
   24cd0:	d103      	bne.n	24cda <_sungetc_r+0x10>
   24cd2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24cd6:	4628      	mov	r0, r5
   24cd8:	bd38      	pop	{r3, r4, r5, pc}
   24cda:	8993      	ldrh	r3, [r2, #12]
   24cdc:	b2cd      	uxtb	r5, r1
   24cde:	f023 0320 	bic.w	r3, r3, #32
   24ce2:	8193      	strh	r3, [r2, #12]
   24ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24ce6:	6852      	ldr	r2, [r2, #4]
   24ce8:	b18b      	cbz	r3, 24d0e <_sungetc_r+0x44>
   24cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   24cec:	4293      	cmp	r3, r2
   24cee:	dd08      	ble.n	24d02 <_sungetc_r+0x38>
   24cf0:	6823      	ldr	r3, [r4, #0]
   24cf2:	1e5a      	subs	r2, r3, #1
   24cf4:	6022      	str	r2, [r4, #0]
   24cf6:	f803 5c01 	strb.w	r5, [r3, #-1]
   24cfa:	6863      	ldr	r3, [r4, #4]
   24cfc:	3301      	adds	r3, #1
   24cfe:	6063      	str	r3, [r4, #4]
   24d00:	e7e9      	b.n	24cd6 <_sungetc_r+0xc>
   24d02:	4621      	mov	r1, r4
   24d04:	f000 f8e3 	bl	24ece <__submore>
   24d08:	2800      	cmp	r0, #0
   24d0a:	d0f1      	beq.n	24cf0 <_sungetc_r+0x26>
   24d0c:	e7e1      	b.n	24cd2 <_sungetc_r+0x8>
   24d0e:	6921      	ldr	r1, [r4, #16]
   24d10:	6823      	ldr	r3, [r4, #0]
   24d12:	b151      	cbz	r1, 24d2a <_sungetc_r+0x60>
   24d14:	4299      	cmp	r1, r3
   24d16:	d208      	bcs.n	24d2a <_sungetc_r+0x60>
   24d18:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   24d1c:	42a9      	cmp	r1, r5
   24d1e:	d104      	bne.n	24d2a <_sungetc_r+0x60>
   24d20:	3b01      	subs	r3, #1
   24d22:	3201      	adds	r2, #1
   24d24:	6023      	str	r3, [r4, #0]
   24d26:	6062      	str	r2, [r4, #4]
   24d28:	e7d5      	b.n	24cd6 <_sungetc_r+0xc>
   24d2a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   24d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24d32:	6363      	str	r3, [r4, #52]	; 0x34
   24d34:	2303      	movs	r3, #3
   24d36:	63a3      	str	r3, [r4, #56]	; 0x38
   24d38:	4623      	mov	r3, r4
   24d3a:	f803 5f46 	strb.w	r5, [r3, #70]!
   24d3e:	6023      	str	r3, [r4, #0]
   24d40:	2301      	movs	r3, #1
   24d42:	e7dc      	b.n	24cfe <_sungetc_r+0x34>

00024d44 <__ssrefill_r>:
   24d44:	b510      	push	{r4, lr}
   24d46:	460c      	mov	r4, r1
   24d48:	6b49      	ldr	r1, [r1, #52]	; 0x34
   24d4a:	b169      	cbz	r1, 24d68 <__ssrefill_r+0x24>
   24d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24d50:	4299      	cmp	r1, r3
   24d52:	d001      	beq.n	24d58 <__ssrefill_r+0x14>
   24d54:	f7f9 fdb0 	bl	1e8b8 <_free_r>
   24d58:	2000      	movs	r0, #0
   24d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   24d5c:	6360      	str	r0, [r4, #52]	; 0x34
   24d5e:	6063      	str	r3, [r4, #4]
   24d60:	b113      	cbz	r3, 24d68 <__ssrefill_r+0x24>
   24d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24d64:	6023      	str	r3, [r4, #0]
   24d66:	bd10      	pop	{r4, pc}
   24d68:	6923      	ldr	r3, [r4, #16]
   24d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24d6e:	6023      	str	r3, [r4, #0]
   24d70:	2300      	movs	r3, #0
   24d72:	6063      	str	r3, [r4, #4]
   24d74:	89a3      	ldrh	r3, [r4, #12]
   24d76:	f043 0320 	orr.w	r3, r3, #32
   24d7a:	81a3      	strh	r3, [r4, #12]
   24d7c:	e7f3      	b.n	24d66 <__ssrefill_r+0x22>

00024d7e <_printf_common>:
   24d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d82:	4616      	mov	r6, r2
   24d84:	4699      	mov	r9, r3
   24d86:	688a      	ldr	r2, [r1, #8]
   24d88:	4607      	mov	r7, r0
   24d8a:	690b      	ldr	r3, [r1, #16]
   24d8c:	460c      	mov	r4, r1
   24d8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   24d92:	4293      	cmp	r3, r2
   24d94:	bfb8      	it	lt
   24d96:	4613      	movlt	r3, r2
   24d98:	6033      	str	r3, [r6, #0]
   24d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   24d9e:	b10a      	cbz	r2, 24da4 <_printf_common+0x26>
   24da0:	3301      	adds	r3, #1
   24da2:	6033      	str	r3, [r6, #0]
   24da4:	6823      	ldr	r3, [r4, #0]
   24da6:	0699      	lsls	r1, r3, #26
   24da8:	bf42      	ittt	mi
   24daa:	6833      	ldrmi	r3, [r6, #0]
   24dac:	3302      	addmi	r3, #2
   24dae:	6033      	strmi	r3, [r6, #0]
   24db0:	6825      	ldr	r5, [r4, #0]
   24db2:	f015 0506 	ands.w	r5, r5, #6
   24db6:	d106      	bne.n	24dc6 <_printf_common+0x48>
   24db8:	f104 0a19 	add.w	sl, r4, #25
   24dbc:	68e3      	ldr	r3, [r4, #12]
   24dbe:	6832      	ldr	r2, [r6, #0]
   24dc0:	1a9b      	subs	r3, r3, r2
   24dc2:	42ab      	cmp	r3, r5
   24dc4:	dc29      	bgt.n	24e1a <_printf_common+0x9c>
   24dc6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   24dca:	1e13      	subs	r3, r2, #0
   24dcc:	6822      	ldr	r2, [r4, #0]
   24dce:	bf18      	it	ne
   24dd0:	2301      	movne	r3, #1
   24dd2:	0692      	lsls	r2, r2, #26
   24dd4:	d42e      	bmi.n	24e34 <_printf_common+0xb6>
   24dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   24dda:	4649      	mov	r1, r9
   24ddc:	4638      	mov	r0, r7
   24dde:	47c0      	blx	r8
   24de0:	3001      	adds	r0, #1
   24de2:	d021      	beq.n	24e28 <_printf_common+0xaa>
   24de4:	6823      	ldr	r3, [r4, #0]
   24de6:	341a      	adds	r4, #26
   24de8:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   24dec:	f003 0306 	and.w	r3, r3, #6
   24df0:	6832      	ldr	r2, [r6, #0]
   24df2:	2600      	movs	r6, #0
   24df4:	2b04      	cmp	r3, #4
   24df6:	f854 3c12 	ldr.w	r3, [r4, #-18]
   24dfa:	bf08      	it	eq
   24dfc:	1aad      	subeq	r5, r5, r2
   24dfe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   24e02:	bf14      	ite	ne
   24e04:	2500      	movne	r5, #0
   24e06:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   24e0a:	4293      	cmp	r3, r2
   24e0c:	bfc4      	itt	gt
   24e0e:	1a9b      	subgt	r3, r3, r2
   24e10:	18ed      	addgt	r5, r5, r3
   24e12:	42b5      	cmp	r5, r6
   24e14:	d11a      	bne.n	24e4c <_printf_common+0xce>
   24e16:	2000      	movs	r0, #0
   24e18:	e008      	b.n	24e2c <_printf_common+0xae>
   24e1a:	2301      	movs	r3, #1
   24e1c:	4652      	mov	r2, sl
   24e1e:	4649      	mov	r1, r9
   24e20:	4638      	mov	r0, r7
   24e22:	47c0      	blx	r8
   24e24:	3001      	adds	r0, #1
   24e26:	d103      	bne.n	24e30 <_printf_common+0xb2>
   24e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24e30:	3501      	adds	r5, #1
   24e32:	e7c3      	b.n	24dbc <_printf_common+0x3e>
   24e34:	18e1      	adds	r1, r4, r3
   24e36:	1c5a      	adds	r2, r3, #1
   24e38:	2030      	movs	r0, #48	; 0x30
   24e3a:	3302      	adds	r3, #2
   24e3c:	4422      	add	r2, r4
   24e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   24e42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   24e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   24e4a:	e7c4      	b.n	24dd6 <_printf_common+0x58>
   24e4c:	2301      	movs	r3, #1
   24e4e:	4622      	mov	r2, r4
   24e50:	4649      	mov	r1, r9
   24e52:	4638      	mov	r0, r7
   24e54:	47c0      	blx	r8
   24e56:	3001      	adds	r0, #1
   24e58:	d0e6      	beq.n	24e28 <_printf_common+0xaa>
   24e5a:	3601      	adds	r6, #1
   24e5c:	e7d9      	b.n	24e12 <_printf_common+0x94>

00024e5e <__sccl>:
   24e5e:	b570      	push	{r4, r5, r6, lr}
   24e60:	780b      	ldrb	r3, [r1, #0]
   24e62:	4604      	mov	r4, r0
   24e64:	2b5e      	cmp	r3, #94	; 0x5e
   24e66:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   24e6a:	bf13      	iteet	ne
   24e6c:	1c48      	addne	r0, r1, #1
   24e6e:	1c88      	addeq	r0, r1, #2
   24e70:	784b      	ldrbeq	r3, [r1, #1]
   24e72:	2200      	movne	r2, #0
   24e74:	bf08      	it	eq
   24e76:	2201      	moveq	r2, #1
   24e78:	1e61      	subs	r1, r4, #1
   24e7a:	f801 2f01 	strb.w	r2, [r1, #1]!
   24e7e:	42a9      	cmp	r1, r5
   24e80:	d1fb      	bne.n	24e7a <__sccl+0x1c>
   24e82:	b90b      	cbnz	r3, 24e88 <__sccl+0x2a>
   24e84:	3801      	subs	r0, #1
   24e86:	bd70      	pop	{r4, r5, r6, pc}
   24e88:	f082 0201 	eor.w	r2, r2, #1
   24e8c:	4605      	mov	r5, r0
   24e8e:	54e2      	strb	r2, [r4, r3]
   24e90:	4628      	mov	r0, r5
   24e92:	f810 1b01 	ldrb.w	r1, [r0], #1
   24e96:	292d      	cmp	r1, #45	; 0x2d
   24e98:	d006      	beq.n	24ea8 <__sccl+0x4a>
   24e9a:	295d      	cmp	r1, #93	; 0x5d
   24e9c:	d0f3      	beq.n	24e86 <__sccl+0x28>
   24e9e:	b909      	cbnz	r1, 24ea4 <__sccl+0x46>
   24ea0:	4628      	mov	r0, r5
   24ea2:	e7f0      	b.n	24e86 <__sccl+0x28>
   24ea4:	460b      	mov	r3, r1
   24ea6:	e7f1      	b.n	24e8c <__sccl+0x2e>
   24ea8:	786e      	ldrb	r6, [r5, #1]
   24eaa:	2e5d      	cmp	r6, #93	; 0x5d
   24eac:	d0fa      	beq.n	24ea4 <__sccl+0x46>
   24eae:	42b3      	cmp	r3, r6
   24eb0:	dcf8      	bgt.n	24ea4 <__sccl+0x46>
   24eb2:	3502      	adds	r5, #2
   24eb4:	4619      	mov	r1, r3
   24eb6:	3101      	adds	r1, #1
   24eb8:	428e      	cmp	r6, r1
   24eba:	5462      	strb	r2, [r4, r1]
   24ebc:	dcfb      	bgt.n	24eb6 <__sccl+0x58>
   24ebe:	1af1      	subs	r1, r6, r3
   24ec0:	1c58      	adds	r0, r3, #1
   24ec2:	3901      	subs	r1, #1
   24ec4:	42b3      	cmp	r3, r6
   24ec6:	bfa8      	it	ge
   24ec8:	2100      	movge	r1, #0
   24eca:	1843      	adds	r3, r0, r1
   24ecc:	e7e0      	b.n	24e90 <__sccl+0x32>

00024ece <__submore>:
   24ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ed2:	460c      	mov	r4, r1
   24ed4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   24ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24eda:	4299      	cmp	r1, r3
   24edc:	d11a      	bne.n	24f14 <__submore+0x46>
   24ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
   24ee2:	f7f9 fd33 	bl	1e94c <_malloc_r>
   24ee6:	b918      	cbnz	r0, 24ef0 <__submore+0x22>
   24ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24ef4:	6360      	str	r0, [r4, #52]	; 0x34
   24ef6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   24efa:	63a3      	str	r3, [r4, #56]	; 0x38
   24efc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   24f00:	7083      	strb	r3, [r0, #2]
   24f02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   24f06:	7043      	strb	r3, [r0, #1]
   24f08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   24f0c:	7003      	strb	r3, [r0, #0]
   24f0e:	6020      	str	r0, [r4, #0]
   24f10:	2000      	movs	r0, #0
   24f12:	e7eb      	b.n	24eec <__submore+0x1e>
   24f14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   24f16:	0077      	lsls	r7, r6, #1
   24f18:	463a      	mov	r2, r7
   24f1a:	f000 f829 	bl	24f70 <_realloc_r>
   24f1e:	4605      	mov	r5, r0
   24f20:	2800      	cmp	r0, #0
   24f22:	d0e1      	beq.n	24ee8 <__submore+0x1a>
   24f24:	eb00 0806 	add.w	r8, r0, r6
   24f28:	4601      	mov	r1, r0
   24f2a:	4632      	mov	r2, r6
   24f2c:	4640      	mov	r0, r8
   24f2e:	f7ff fdcd 	bl	24acc <memcpy>
   24f32:	f8c4 8000 	str.w	r8, [r4]
   24f36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   24f3a:	e7e9      	b.n	24f10 <__submore+0x42>

00024f3c <memmove>:
   24f3c:	4288      	cmp	r0, r1
   24f3e:	b510      	push	{r4, lr}
   24f40:	eb01 0402 	add.w	r4, r1, r2
   24f44:	d902      	bls.n	24f4c <memmove+0x10>
   24f46:	4284      	cmp	r4, r0
   24f48:	4623      	mov	r3, r4
   24f4a:	d807      	bhi.n	24f5c <memmove+0x20>
   24f4c:	1e43      	subs	r3, r0, #1
   24f4e:	42a1      	cmp	r1, r4
   24f50:	d008      	beq.n	24f64 <memmove+0x28>
   24f52:	f811 2b01 	ldrb.w	r2, [r1], #1
   24f56:	f803 2f01 	strb.w	r2, [r3, #1]!
   24f5a:	e7f8      	b.n	24f4e <memmove+0x12>
   24f5c:	4402      	add	r2, r0
   24f5e:	4601      	mov	r1, r0
   24f60:	428a      	cmp	r2, r1
   24f62:	d100      	bne.n	24f66 <memmove+0x2a>
   24f64:	bd10      	pop	{r4, pc}
   24f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   24f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   24f6e:	e7f7      	b.n	24f60 <memmove+0x24>

00024f70 <_realloc_r>:
   24f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f72:	4607      	mov	r7, r0
   24f74:	4614      	mov	r4, r2
   24f76:	460e      	mov	r6, r1
   24f78:	b921      	cbnz	r1, 24f84 <_realloc_r+0x14>
   24f7a:	4611      	mov	r1, r2
   24f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24f80:	f7f9 bce4 	b.w	1e94c <_malloc_r>
   24f84:	b922      	cbnz	r2, 24f90 <_realloc_r+0x20>
   24f86:	4625      	mov	r5, r4
   24f88:	f7f9 fc96 	bl	1e8b8 <_free_r>
   24f8c:	4628      	mov	r0, r5
   24f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f90:	f000 f814 	bl	24fbc <_malloc_usable_size_r>
   24f94:	42a0      	cmp	r0, r4
   24f96:	d20f      	bcs.n	24fb8 <_realloc_r+0x48>
   24f98:	4621      	mov	r1, r4
   24f9a:	4638      	mov	r0, r7
   24f9c:	f7f9 fcd6 	bl	1e94c <_malloc_r>
   24fa0:	4605      	mov	r5, r0
   24fa2:	2800      	cmp	r0, #0
   24fa4:	d0f2      	beq.n	24f8c <_realloc_r+0x1c>
   24fa6:	4631      	mov	r1, r6
   24fa8:	4622      	mov	r2, r4
   24faa:	f7ff fd8f 	bl	24acc <memcpy>
   24fae:	4631      	mov	r1, r6
   24fb0:	4638      	mov	r0, r7
   24fb2:	f7f9 fc81 	bl	1e8b8 <_free_r>
   24fb6:	e7e9      	b.n	24f8c <_realloc_r+0x1c>
   24fb8:	4635      	mov	r5, r6
   24fba:	e7e7      	b.n	24f8c <_realloc_r+0x1c>

00024fbc <_malloc_usable_size_r>:
   24fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24fc0:	1f18      	subs	r0, r3, #4
   24fc2:	2b00      	cmp	r3, #0
   24fc4:	bfbc      	itt	lt
   24fc6:	580b      	ldrlt	r3, [r1, r0]
   24fc8:	18c0      	addlt	r0, r0, r3
   24fca:	4770      	bx	lr

00024fcc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   24fcc:	f7fe b85a 	b.w	23084 <SystemInit>
