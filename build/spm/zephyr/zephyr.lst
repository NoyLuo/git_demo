
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a8 25 00 20 fd 1d 00 00 d7 7c 00 00 d1 1d 00 00     .%. .....|......
  10:	d1 1d 00 00 d1 1d 00 00 d1 1d 00 00 d1 1d 00 00     ................
	...
  2c:	c9 17 00 00 d1 1d 00 00 00 00 00 00 71 17 00 00     ............q...
  3c:	a1 2a 00 00                                         .*..

00000040 <_irq_vector_table>:
  40:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  50:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  60:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  70:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  80:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  90:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  a0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  b0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  c0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  d0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  e0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
  f0:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
 100:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
 110:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
 120:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
 130:	49 18 00 00 49 18 00 00 49 18 00 00 49 18 00 00     I...I...I...I...
 140:	49 18 00 00                                         I...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
 210:	00 00 01 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
 220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b80c 	b.w	26c <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f824 	bl	2a8 <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__aeabi_idiv0>:
     26c:	4770      	bx	lr
     26e:	bf00      	nop

00000270 <__gnu_cmse_nonsecure_call>:
     270:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     274:	4627      	mov	r7, r4
     276:	46a0      	mov	r8, r4
     278:	46a1      	mov	r9, r4
     27a:	46a2      	mov	sl, r4
     27c:	46a3      	mov	fp, r4
     27e:	46a4      	mov	ip, r4
     280:	b0a2      	sub	sp, #136	; 0x88
     282:	ec2d 0a00 	vlstm	sp
     286:	f384 8800 	msr	CPSR_f, r4
     28a:	4625      	mov	r5, r4
     28c:	4626      	mov	r6, r4
     28e:	47a4      	blxns	r4
     290:	f3ef 8514 	mrs	r5, CONTROL
     294:	f015 0f08 	tst.w	r5, #8
     298:	bf18      	it	ne
     29a:	eeb0 0a40 	vmovne.f32	s0, s0
     29e:	ec3d 0a00 	vlldm	sp
     2a2:	b022      	add	sp, #136	; 0x88
     2a4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000002a8 <__udivmoddi4>:
     2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2ac:	4607      	mov	r7, r0
     2ae:	468c      	mov	ip, r1
     2b0:	4608      	mov	r0, r1
     2b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
     2b4:	4615      	mov	r5, r2
     2b6:	463c      	mov	r4, r7
     2b8:	4619      	mov	r1, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	f040 80c5 	bne.w	44a <CONFIG_FLASH_SIZE+0x4a>
     2c0:	4282      	cmp	r2, r0
     2c2:	fab2 f782 	clz	r7, r2
     2c6:	d946      	bls.n	356 <__udivmoddi4+0xae>
     2c8:	b14f      	cbz	r7, 2de <__udivmoddi4+0x36>
     2ca:	f1c7 0e20 	rsb	lr, r7, #32
     2ce:	fa00 f307 	lsl.w	r3, r0, r7
     2d2:	40bd      	lsls	r5, r7
     2d4:	fa24 fe0e 	lsr.w	lr, r4, lr
     2d8:	40bc      	lsls	r4, r7
     2da:	ea4e 0c03 	orr.w	ip, lr, r3
     2de:	ea4f 4815 	mov.w	r8, r5, lsr #16
     2e2:	fa1f fe85 	uxth.w	lr, r5
     2e6:	0c22      	lsrs	r2, r4, #16
     2e8:	fbbc f9f8 	udiv	r9, ip, r8
     2ec:	fb08 c319 	mls	r3, r8, r9, ip
     2f0:	fb09 fa0e 	mul.w	sl, r9, lr
     2f4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     2f8:	459a      	cmp	sl, r3
     2fa:	d928      	bls.n	34e <__udivmoddi4+0xa6>
     2fc:	18eb      	adds	r3, r5, r3
     2fe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     302:	d204      	bcs.n	30e <__udivmoddi4+0x66>
     304:	459a      	cmp	sl, r3
     306:	d902      	bls.n	30e <__udivmoddi4+0x66>
     308:	f1a9 0002 	sub.w	r0, r9, #2
     30c:	442b      	add	r3, r5
     30e:	eba3 030a 	sub.w	r3, r3, sl
     312:	b2a4      	uxth	r4, r4
     314:	fbb3 f2f8 	udiv	r2, r3, r8
     318:	fb08 3312 	mls	r3, r8, r2, r3
     31c:	fb02 fe0e 	mul.w	lr, r2, lr
     320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     324:	45a6      	cmp	lr, r4
     326:	d914      	bls.n	352 <__udivmoddi4+0xaa>
     328:	192c      	adds	r4, r5, r4
     32a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     32e:	d203      	bcs.n	338 <__udivmoddi4+0x90>
     330:	45a6      	cmp	lr, r4
     332:	d901      	bls.n	338 <__udivmoddi4+0x90>
     334:	1e93      	subs	r3, r2, #2
     336:	442c      	add	r4, r5
     338:	eba4 040e 	sub.w	r4, r4, lr
     33c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     340:	b11e      	cbz	r6, 34a <__udivmoddi4+0xa2>
     342:	40fc      	lsrs	r4, r7
     344:	2300      	movs	r3, #0
     346:	6034      	str	r4, [r6, #0]
     348:	6073      	str	r3, [r6, #4]
     34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     34e:	4648      	mov	r0, r9
     350:	e7dd      	b.n	30e <__udivmoddi4+0x66>
     352:	4613      	mov	r3, r2
     354:	e7f0      	b.n	338 <__udivmoddi4+0x90>
     356:	b902      	cbnz	r2, 35a <__udivmoddi4+0xb2>
     358:	deff      	udf	#255	; 0xff
     35a:	bb87      	cbnz	r7, 3be <__udivmoddi4+0x116>
     35c:	1a83      	subs	r3, r0, r2
     35e:	2101      	movs	r1, #1
     360:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     364:	b2aa      	uxth	r2, r5
     366:	0c20      	lsrs	r0, r4, #16
     368:	fbb3 fcfe 	udiv	ip, r3, lr
     36c:	fb0e 331c 	mls	r3, lr, ip, r3
     370:	fb0c f802 	mul.w	r8, ip, r2
     374:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     378:	4598      	cmp	r8, r3
     37a:	d962      	bls.n	442 <CONFIG_FLASH_SIZE+0x42>
     37c:	18eb      	adds	r3, r5, r3
     37e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <__udivmoddi4+0xe6>
     384:	4598      	cmp	r8, r3
     386:	d902      	bls.n	38e <__udivmoddi4+0xe6>
     388:	f1ac 0002 	sub.w	r0, ip, #2
     38c:	442b      	add	r3, r5
     38e:	eba3 0308 	sub.w	r3, r3, r8
     392:	b2a4      	uxth	r4, r4
     394:	fbb3 fcfe 	udiv	ip, r3, lr
     398:	fb0e 331c 	mls	r3, lr, ip, r3
     39c:	fb0c f202 	mul.w	r2, ip, r2
     3a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     3a4:	42a2      	cmp	r2, r4
     3a6:	d94e      	bls.n	446 <CONFIG_FLASH_SIZE+0x46>
     3a8:	192c      	adds	r4, r5, r4
     3aa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     3ae:	d204      	bcs.n	3ba <__udivmoddi4+0x112>
     3b0:	42a2      	cmp	r2, r4
     3b2:	d902      	bls.n	3ba <__udivmoddi4+0x112>
     3b4:	f1ac 0302 	sub.w	r3, ip, #2
     3b8:	442c      	add	r4, r5
     3ba:	1aa4      	subs	r4, r4, r2
     3bc:	e7be      	b.n	33c <__udivmoddi4+0x94>
     3be:	f1c7 0c20 	rsb	ip, r7, #32
     3c2:	40bd      	lsls	r5, r7
     3c4:	fa00 f307 	lsl.w	r3, r0, r7
     3c8:	fa20 f80c 	lsr.w	r8, r0, ip
     3cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3d0:	fa24 fc0c 	lsr.w	ip, r4, ip
     3d4:	40bc      	lsls	r4, r7
     3d6:	ea4c 0203 	orr.w	r2, ip, r3
     3da:	b2ab      	uxth	r3, r5
     3dc:	fbb8 fcfe 	udiv	ip, r8, lr
     3e0:	0c11      	lsrs	r1, r2, #16
     3e2:	fb0e 801c 	mls	r0, lr, ip, r8
     3e6:	fb0c f903 	mul.w	r9, ip, r3
     3ea:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     3ee:	4581      	cmp	r9, r0
     3f0:	d923      	bls.n	43a <CONFIG_FLASH_SIZE+0x3a>
     3f2:	1828      	adds	r0, r5, r0
     3f4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     3f8:	d204      	bcs.n	404 <CONFIG_FLASH_SIZE+0x4>
     3fa:	4581      	cmp	r9, r0
     3fc:	d902      	bls.n	404 <CONFIG_FLASH_SIZE+0x4>
     3fe:	f1ac 0102 	sub.w	r1, ip, #2
     402:	4428      	add	r0, r5
     404:	eba0 0009 	sub.w	r0, r0, r9
     408:	b292      	uxth	r2, r2
     40a:	fbb0 fcfe 	udiv	ip, r0, lr
     40e:	fb0e 001c 	mls	r0, lr, ip, r0
     412:	fb0c f803 	mul.w	r8, ip, r3
     416:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     41a:	4598      	cmp	r8, r3
     41c:	d90f      	bls.n	43e <CONFIG_FLASH_SIZE+0x3e>
     41e:	18eb      	adds	r3, r5, r3
     420:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     424:	d204      	bcs.n	430 <CONFIG_FLASH_SIZE+0x30>
     426:	4598      	cmp	r8, r3
     428:	d902      	bls.n	430 <CONFIG_FLASH_SIZE+0x30>
     42a:	f1ac 0202 	sub.w	r2, ip, #2
     42e:	442b      	add	r3, r5
     430:	eba3 0308 	sub.w	r3, r3, r8
     434:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     438:	e792      	b.n	360 <__udivmoddi4+0xb8>
     43a:	4661      	mov	r1, ip
     43c:	e7e2      	b.n	404 <CONFIG_FLASH_SIZE+0x4>
     43e:	4662      	mov	r2, ip
     440:	e7f6      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     442:	4660      	mov	r0, ip
     444:	e7a3      	b.n	38e <__udivmoddi4+0xe6>
     446:	4663      	mov	r3, ip
     448:	e7b7      	b.n	3ba <__udivmoddi4+0x112>
     44a:	4283      	cmp	r3, r0
     44c:	d905      	bls.n	45a <CONFIG_FLASH_SIZE+0x5a>
     44e:	b10e      	cbz	r6, 454 <CONFIG_FLASH_SIZE+0x54>
     450:	e9c6 7000 	strd	r7, r0, [r6]
     454:	2100      	movs	r1, #0
     456:	4608      	mov	r0, r1
     458:	e777      	b.n	34a <__udivmoddi4+0xa2>
     45a:	fab3 f183 	clz	r1, r3
     45e:	b981      	cbnz	r1, 482 <CONFIG_FLASH_SIZE+0x82>
     460:	4283      	cmp	r3, r0
     462:	d301      	bcc.n	468 <CONFIG_FLASH_SIZE+0x68>
     464:	42ba      	cmp	r2, r7
     466:	d80a      	bhi.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	1abc      	subs	r4, r7, r2
     46a:	eb60 0303 	sbc.w	r3, r0, r3
     46e:	2001      	movs	r0, #1
     470:	469c      	mov	ip, r3
     472:	2e00      	cmp	r6, #0
     474:	d067      	beq.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     476:	e9c6 4c00 	strd	r4, ip, [r6]
     47a:	2100      	movs	r1, #0
     47c:	e765      	b.n	34a <__udivmoddi4+0xa2>
     47e:	4608      	mov	r0, r1
     480:	e7f7      	b.n	472 <CONFIG_FLASH_SIZE+0x72>
     482:	f1c1 0c20 	rsb	ip, r1, #32
     486:	408b      	lsls	r3, r1
     488:	fa02 f501 	lsl.w	r5, r2, r1
     48c:	fa22 f40c 	lsr.w	r4, r2, ip
     490:	fa20 fb0c 	lsr.w	fp, r0, ip
     494:	fa27 f20c 	lsr.w	r2, r7, ip
     498:	408f      	lsls	r7, r1
     49a:	431c      	orrs	r4, r3
     49c:	fa00 f301 	lsl.w	r3, r0, r1
     4a0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     4a4:	4313      	orrs	r3, r2
     4a6:	fa1f fe84 	uxth.w	lr, r4
     4aa:	0c1a      	lsrs	r2, r3, #16
     4ac:	fbbb f8f9 	udiv	r8, fp, r9
     4b0:	fb09 bb18 	mls	fp, r9, r8, fp
     4b4:	fb08 fa0e 	mul.w	sl, r8, lr
     4b8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     4bc:	4592      	cmp	sl, r2
     4be:	d93e      	bls.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     4c0:	18a2      	adds	r2, r4, r2
     4c2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     4c6:	d204      	bcs.n	4d2 <CONFIG_FLASH_SIZE+0xd2>
     4c8:	4592      	cmp	sl, r2
     4ca:	d902      	bls.n	4d2 <CONFIG_FLASH_SIZE+0xd2>
     4cc:	f1a8 0002 	sub.w	r0, r8, #2
     4d0:	4422      	add	r2, r4
     4d2:	eba2 020a 	sub.w	r2, r2, sl
     4d6:	b29b      	uxth	r3, r3
     4d8:	fbb2 f8f9 	udiv	r8, r2, r9
     4dc:	fb09 2218 	mls	r2, r9, r8, r2
     4e0:	fb08 fe0e 	mul.w	lr, r8, lr
     4e4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     4e8:	4596      	cmp	lr, r2
     4ea:	d92a      	bls.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     4ec:	18a2      	adds	r2, r4, r2
     4ee:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     4f2:	d204      	bcs.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     4f4:	4596      	cmp	lr, r2
     4f6:	d902      	bls.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     4f8:	f1a8 0302 	sub.w	r3, r8, #2
     4fc:	4422      	add	r2, r4
     4fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     502:	eba2 020e 	sub.w	r2, r2, lr
     506:	fba0 9305 	umull	r9, r3, r0, r5
     50a:	429a      	cmp	r2, r3
     50c:	46ce      	mov	lr, r9
     50e:	4698      	mov	r8, r3
     510:	d302      	bcc.n	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     512:	d106      	bne.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     514:	454f      	cmp	r7, r9
     516:	d204      	bcs.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     518:	3801      	subs	r0, #1
     51a:	ebb9 0e05 	subs.w	lr, r9, r5
     51e:	eb63 0804 	sbc.w	r8, r3, r4
     522:	b186      	cbz	r6, 546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     524:	ebb7 030e 	subs.w	r3, r7, lr
     528:	eb62 0708 	sbc.w	r7, r2, r8
     52c:	fa07 fc0c 	lsl.w	ip, r7, ip
     530:	40cb      	lsrs	r3, r1
     532:	40cf      	lsrs	r7, r1
     534:	ea4c 0303 	orr.w	r3, ip, r3
     538:	e9c6 3700 	strd	r3, r7, [r6]
     53c:	e79d      	b.n	47a <CONFIG_FLASH_SIZE+0x7a>
     53e:	4640      	mov	r0, r8
     540:	e7c7      	b.n	4d2 <CONFIG_FLASH_SIZE+0xd2>
     542:	4643      	mov	r3, r8
     544:	e7db      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     546:	4631      	mov	r1, r6
     548:	e6ff      	b.n	34a <__udivmoddi4+0xa2>
	...

0000054c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     54c:	680b      	ldr	r3, [r1, #0]
     54e:	3301      	adds	r3, #1
     550:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     552:	4b01      	ldr	r3, [pc, #4]	; (558 <char_out+0xc>)
     554:	681b      	ldr	r3, [r3, #0]
     556:	4718      	bx	r3
     558:	20000000 	.word	0x20000000

0000055c <__printk_hook_install>:
	_char_out = fn;
     55c:	4b01      	ldr	r3, [pc, #4]	; (564 <__printk_hook_install+0x8>)
     55e:	6018      	str	r0, [r3, #0]
}
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	20000000 	.word	0x20000000

00000568 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     568:	b507      	push	{r0, r1, r2, lr}
     56a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     56c:	2100      	movs	r1, #0
{
     56e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     570:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     572:	4803      	ldr	r0, [pc, #12]	; (580 <vprintk+0x18>)
     574:	a901      	add	r1, sp, #4
     576:	f000 f805 	bl	584 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     57a:	b003      	add	sp, #12
     57c:	f85d fb04 	ldr.w	pc, [sp], #4
     580:	0000054d 	.word	0x0000054d

00000584 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     588:	468b      	mov	fp, r1
     58a:	4692      	mov	sl, r2
     58c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     58e:	2500      	movs	r5, #0
{
     590:	b091      	sub	sp, #68	; 0x44
     592:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     594:	f89a 0000 	ldrb.w	r0, [sl]
     598:	b908      	cbnz	r0, 59e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     59a:	4628      	mov	r0, r5
     59c:	e35f      	b.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
		if (*fp != '%') {
     59e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     5a0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     5a4:	d007      	beq.n	5b6 <cbvprintf+0x32>
			OUTC('%');
     5a6:	4659      	mov	r1, fp
     5a8:	9b02      	ldr	r3, [sp, #8]
     5aa:	4798      	blx	r3
     5ac:	2800      	cmp	r0, #0
     5ae:	f2c0 8356 	blt.w	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     5b2:	3501      	adds	r5, #1
			break;
     5b4:	e212      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		} state = {
     5b6:	2218      	movs	r2, #24
     5b8:	2100      	movs	r1, #0
     5ba:	a80a      	add	r0, sp, #40	; 0x28
     5bc:	f007 fbe8 	bl	7d90 <memset>
	if (*sp == '%') {
     5c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     5c4:	2b25      	cmp	r3, #37	; 0x25
     5c6:	d078      	beq.n	6ba <cbvprintf+0x136>
     5c8:	2200      	movs	r2, #0
     5ca:	4610      	mov	r0, r2
     5cc:	4696      	mov	lr, r2
     5ce:	4694      	mov	ip, r2
     5d0:	4616      	mov	r6, r2
     5d2:	4639      	mov	r1, r7
		switch (*sp) {
     5d4:	f817 3b01 	ldrb.w	r3, [r7], #1
     5d8:	2b2b      	cmp	r3, #43	; 0x2b
     5da:	f000 809d 	beq.w	718 <cbvprintf+0x194>
     5de:	f200 8094 	bhi.w	70a <cbvprintf+0x186>
     5e2:	2b20      	cmp	r3, #32
     5e4:	f000 809b 	beq.w	71e <cbvprintf+0x19a>
     5e8:	2b23      	cmp	r3, #35	; 0x23
     5ea:	f000 809b 	beq.w	724 <cbvprintf+0x1a0>
     5ee:	b12e      	cbz	r6, 5fc <cbvprintf+0x78>
     5f0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     5f4:	f046 0604 	orr.w	r6, r6, #4
     5f8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     5fc:	f1bc 0f00 	cmp.w	ip, #0
     600:	d005      	beq.n	60e <cbvprintf+0x8a>
     602:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     606:	f046 0608 	orr.w	r6, r6, #8
     60a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     60e:	f1be 0f00 	cmp.w	lr, #0
     612:	d005      	beq.n	620 <cbvprintf+0x9c>
     614:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     618:	f046 0610 	orr.w	r6, r6, #16
     61c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     620:	b128      	cbz	r0, 62e <cbvprintf+0xaa>
     622:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     626:	f040 0020 	orr.w	r0, r0, #32
     62a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     62e:	b12a      	cbz	r2, 63c <cbvprintf+0xb8>
     630:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     638:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     63c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     640:	f002 0044 	and.w	r0, r2, #68	; 0x44
     644:	2844      	cmp	r0, #68	; 0x44
     646:	d103      	bne.n	650 <cbvprintf+0xcc>
		conv->flag_zero = false;
     648:	f36f 1286 	bfc	r2, #6, #1
     64c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     650:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     654:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     65a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     65e:	d17b      	bne.n	758 <cbvprintf+0x1d4>
		conv->width_star = true;
     660:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
     664:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     666:	f042 0201 	orr.w	r2, r2, #1
     66a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     66e:	781a      	ldrb	r2, [r3, #0]
     670:	2a2e      	cmp	r2, #46	; 0x2e
     672:	bf0c      	ite	eq
     674:	2101      	moveq	r1, #1
     676:	2100      	movne	r1, #0
     678:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     67c:	f361 0241 	bfi	r2, r1, #1, #1
     680:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     684:	d174      	bne.n	770 <cbvprintf+0x1ec>
	if (*sp == '*') {
     686:	785a      	ldrb	r2, [r3, #1]
     688:	2a2a      	cmp	r2, #42	; 0x2a
     68a:	d06a      	beq.n	762 <cbvprintf+0x1de>
	size_t val = 0;
     68c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     68e:	260a      	movs	r6, #10
	++sp;
     690:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     692:	4618      	mov	r0, r3
     694:	f810 2b01 	ldrb.w	r2, [r0], #1
     698:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     69c:	2f09      	cmp	r7, #9
     69e:	f240 808e 	bls.w	7be <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     6a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6a6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6a8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6ac:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     6b0:	f361 0241 	bfi	r2, r1, #1, #1
     6b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     6b8:	e05a      	b.n	770 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     6ba:	f10a 0702 	add.w	r7, sl, #2
     6be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     6c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6c6:	07d9      	lsls	r1, r3, #31
     6c8:	f140 8149 	bpl.w	95e <CONFIG_ISR_STACK_SIZE+0x15e>
			width = va_arg(ap, int);
     6cc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     6d0:	f1b9 0f00 	cmp.w	r9, #0
     6d4:	da07      	bge.n	6e6 <cbvprintf+0x162>
				conv->flag_dash = true;
     6d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     6da:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     6de:	f042 0204 	orr.w	r2, r2, #4
     6e2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     6e6:	075a      	lsls	r2, r3, #29
     6e8:	f140 8142 	bpl.w	970 <CONFIG_ISR_STACK_SIZE+0x170>
			int arg = va_arg(ap, int);
     6ec:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     6f0:	f1b8 0f00 	cmp.w	r8, #0
     6f4:	f280 8141 	bge.w	97a <CONFIG_ISR_STACK_SIZE+0x17a>
				conv->prec_present = false;
     6f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6fc:	f36f 0341 	bfc	r3, #1, #1
     700:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     704:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     708:	e137      	b.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
		switch (*sp) {
     70a:	2b2d      	cmp	r3, #45	; 0x2d
     70c:	d00c      	beq.n	728 <cbvprintf+0x1a4>
     70e:	2b30      	cmp	r3, #48	; 0x30
     710:	f47f af6d 	bne.w	5ee <cbvprintf+0x6a>
			conv->flag_zero = true;
     714:	2201      	movs	r2, #1
	} while (loop);
     716:	e75c      	b.n	5d2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     718:	f04f 0c01 	mov.w	ip, #1
     71c:	e759      	b.n	5d2 <cbvprintf+0x4e>
			conv->flag_space = true;
     71e:	f04f 0e01 	mov.w	lr, #1
     722:	e756      	b.n	5d2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     724:	2001      	movs	r0, #1
     726:	e754      	b.n	5d2 <cbvprintf+0x4e>
		switch (*sp) {
     728:	2601      	movs	r6, #1
     72a:	e752      	b.n	5d2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     72c:	4633      	mov	r3, r6
     72e:	fb0c 0202 	mla	r2, ip, r2, r0
     732:	3a30      	subs	r2, #48	; 0x30
     734:	461e      	mov	r6, r3
     736:	f816 0b01 	ldrb.w	r0, [r6], #1
     73a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     73e:	2f09      	cmp	r7, #9
     740:	d9f4      	bls.n	72c <cbvprintf+0x1a8>
	if (sp != wp) {
     742:	4299      	cmp	r1, r3
     744:	d093      	beq.n	66e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     746:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     74a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     74c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     74e:	f362 0141 	bfi	r1, r2, #1, #1
     752:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     756:	e78a      	b.n	66e <cbvprintf+0xea>
     758:	460b      	mov	r3, r1
	size_t val = 0;
     75a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     75c:	f04f 0c0a 	mov.w	ip, #10
     760:	e7e8      	b.n	734 <cbvprintf+0x1b0>
		conv->prec_star = true;
     762:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     766:	3302      	adds	r3, #2
		conv->prec_star = true;
     768:	f042 0204 	orr.w	r2, r2, #4
     76c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     770:	461f      	mov	r7, r3
     772:	f817 2b01 	ldrb.w	r2, [r7], #1
     776:	2a6c      	cmp	r2, #108	; 0x6c
     778:	d041      	beq.n	7fe <cbvprintf+0x27a>
     77a:	d825      	bhi.n	7c8 <cbvprintf+0x244>
     77c:	2a68      	cmp	r2, #104	; 0x68
     77e:	d02b      	beq.n	7d8 <cbvprintf+0x254>
     780:	2a6a      	cmp	r2, #106	; 0x6a
     782:	d046      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
     784:	2a4c      	cmp	r2, #76	; 0x4c
     786:	d04c      	beq.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     788:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     78a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     78e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     792:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     794:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     798:	f200 80d9 	bhi.w	94e <CONFIG_ISR_STACK_SIZE+0x14e>
     79c:	2a57      	cmp	r2, #87	; 0x57
     79e:	d84d      	bhi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     7a0:	2a41      	cmp	r2, #65	; 0x41
     7a2:	d003      	beq.n	7ac <cbvprintf+0x228>
     7a4:	3a45      	subs	r2, #69	; 0x45
     7a6:	2a02      	cmp	r2, #2
     7a8:	f200 80d1 	bhi.w	94e <CONFIG_ISR_STACK_SIZE+0x14e>
		conv->specifier_cat = SPECIFIER_FP;
     7ac:	2204      	movs	r2, #4
     7ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     7b2:	f362 0302 	bfi	r3, r2, #0, #3
     7b6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     7ba:	2301      	movs	r3, #1
			break;
     7bc:	e09e      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
		val = 10U * val + *sp++ - '0';
     7be:	fb06 2101 	mla	r1, r6, r1, r2
     7c2:	4603      	mov	r3, r0
     7c4:	3930      	subs	r1, #48	; 0x30
     7c6:	e764      	b.n	692 <cbvprintf+0x10e>
	switch (*sp) {
     7c8:	2a74      	cmp	r2, #116	; 0x74
     7ca:	d026      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     7cc:	2a7a      	cmp	r2, #122	; 0x7a
     7ce:	d1db      	bne.n	788 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     7d0:	2206      	movs	r2, #6
     7d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7d6:	e00d      	b.n	7f4 <cbvprintf+0x270>
		if (*++sp == 'h') {
     7d8:	785a      	ldrb	r2, [r3, #1]
     7da:	2a68      	cmp	r2, #104	; 0x68
     7dc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7e0:	d106      	bne.n	7f0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     7e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     7e4:	f361 02c6 	bfi	r2, r1, #3, #4
     7e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     7ec:	1c9f      	adds	r7, r3, #2
     7ee:	e7cc      	b.n	78a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     7f0:	4613      	mov	r3, r2
     7f2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     7f4:	f362 03c6 	bfi	r3, r2, #3, #4
     7f8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     7fc:	e7c5      	b.n	78a <cbvprintf+0x206>
		if (*++sp == 'l') {
     7fe:	785a      	ldrb	r2, [r3, #1]
     800:	2a6c      	cmp	r2, #108	; 0x6c
     802:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     806:	d101      	bne.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
			conv->length_mod = LENGTH_LL;
     808:	2104      	movs	r1, #4
     80a:	e7eb      	b.n	7e4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     80c:	4613      	mov	r3, r2
     80e:	2203      	movs	r2, #3
     810:	e7f0      	b.n	7f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     812:	2205      	movs	r2, #5
     814:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     818:	e7ec      	b.n	7f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     81a:	2207      	movs	r2, #7
     81c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     820:	e7e8      	b.n	7f4 <cbvprintf+0x270>
		conv->unsupported = true;
     822:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     826:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     82a:	f023 0302 	bic.w	r3, r3, #2
     82e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     832:	f043 0302 	orr.w	r3, r3, #2
     836:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     83a:	e7a6      	b.n	78a <cbvprintf+0x206>
	switch (conv->specifier) {
     83c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     840:	2920      	cmp	r1, #32
     842:	f200 8084 	bhi.w	94e <CONFIG_ISR_STACK_SIZE+0x14e>
     846:	a001      	add	r0, pc, #4	; (adr r0, 84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     84c:	00000911 	.word	0x00000911
     850:	0000094f 	.word	0x0000094f
     854:	0000094f 	.word	0x0000094f
     858:	0000094f 	.word	0x0000094f
     85c:	0000094f 	.word	0x0000094f
     860:	0000094f 	.word	0x0000094f
     864:	0000094f 	.word	0x0000094f
     868:	0000094f 	.word	0x0000094f
     86c:	0000094f 	.word	0x0000094f
     870:	000007ad 	.word	0x000007ad
     874:	0000094f 	.word	0x0000094f
     878:	00000911 	.word	0x00000911
     87c:	000008d1 	.word	0x000008d1
     880:	000007ad 	.word	0x000007ad
     884:	000007ad 	.word	0x000007ad
     888:	000007ad 	.word	0x000007ad
     88c:	0000094f 	.word	0x0000094f
     890:	000008d1 	.word	0x000008d1
     894:	0000094f 	.word	0x0000094f
     898:	0000094f 	.word	0x0000094f
     89c:	0000094f 	.word	0x0000094f
     8a0:	0000094f 	.word	0x0000094f
     8a4:	00000919 	.word	0x00000919
     8a8:	00000911 	.word	0x00000911
     8ac:	00000935 	.word	0x00000935
     8b0:	0000094f 	.word	0x0000094f
     8b4:	0000094f 	.word	0x0000094f
     8b8:	00000935 	.word	0x00000935
     8bc:	0000094f 	.word	0x0000094f
     8c0:	00000911 	.word	0x00000911
     8c4:	0000094f 	.word	0x0000094f
     8c8:	0000094f 	.word	0x0000094f
     8cc:	00000911 	.word	0x00000911
		conv->specifier_cat = SPECIFIER_SINT;
     8d0:	2001      	movs	r0, #1
     8d2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     8d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     8da:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     8de:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     8e0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     8e4:	bf02      	ittt	eq
     8e6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     8ea:	f041 0101 	orreq.w	r1, r1, #1
     8ee:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     8f2:	2a63      	cmp	r2, #99	; 0x63
     8f4:	d131      	bne.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     8f6:	3b00      	subs	r3, #0
     8f8:	bf18      	it	ne
     8fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     8fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     900:	f3c2 0140 	ubfx	r1, r2, #1, #1
     904:	430b      	orrs	r3, r1
     906:	f363 0241 	bfi	r2, r3, #1, #1
     90a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     90e:	e6d8      	b.n	6c2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     910:	2002      	movs	r0, #2
     912:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     916:	e7de      	b.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
		conv->specifier_cat = SPECIFIER_PTR;
     918:	2103      	movs	r1, #3
     91a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     91e:	f003 0378 	and.w	r3, r3, #120	; 0x78
     922:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     926:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     92a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     92c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     930:	4143      	adcs	r3, r0
     932:	e7e3      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
		conv->specifier_cat = SPECIFIER_PTR;
     934:	2103      	movs	r1, #3
     936:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     93a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     93e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     942:	bf14      	ite	ne
     944:	2301      	movne	r3, #1
     946:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     948:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     94c:	e7d6      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
		conv->invalid = true;
     94e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     952:	f043 0301 	orr.w	r3, r3, #1
     956:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     95a:	2300      	movs	r3, #0
     95c:	e7ce      	b.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
		} else if (conv->width_present) {
     95e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     962:	2a00      	cmp	r2, #0
		int width = -1;
     964:	bfac      	ite	ge
     966:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
     96a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     96e:	e6ba      	b.n	6e6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     970:	079b      	lsls	r3, r3, #30
     972:	f57f aec7 	bpl.w	704 <cbvprintf+0x180>
			precision = conv->prec_value;
     976:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     97a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     97c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     980:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     984:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     988:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     98c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     98e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     992:	d138      	bne.n	a06 <CONFIG_ISR_STACK_SIZE+0x206>
			switch (length_mod) {
     994:	1ecb      	subs	r3, r1, #3
     996:	2b04      	cmp	r3, #4
     998:	d822      	bhi.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
     99a:	e8df f003 	tbb	[pc, r3]
     99e:	0903      	.short	0x0903
     9a0:	2109      	.short	0x2109
     9a2:	21          	.byte	0x21
     9a3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9a4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     9a8:	17da      	asrs	r2, r3, #31
     9aa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     9ae:	e006      	b.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
					(sint_value_type)va_arg(ap, intmax_t);
     9b0:	3407      	adds	r4, #7
     9b2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     9b6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     9ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     9be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9c2:	f013 0603 	ands.w	r6, r3, #3
     9c6:	d056      	beq.n	a76 <CONFIG_ISR_STACK_SIZE+0x276>
			OUTS(sp, fp);
     9c8:	463b      	mov	r3, r7
     9ca:	4652      	mov	r2, sl
     9cc:	4659      	mov	r1, fp
     9ce:	9802      	ldr	r0, [sp, #8]
     9d0:	f007 f90b 	bl	7bea <outs>
     9d4:	2800      	cmp	r0, #0
     9d6:	f2c0 8142 	blt.w	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     9da:	4405      	add	r5, r0
			continue;
     9dc:	46ba      	mov	sl, r7
     9de:	e5d9      	b.n	594 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9e0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     9e4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9e6:	ea4f 72e3 	mov.w	r2, r3, asr #31
     9ea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     9ee:	d105      	bne.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
				value->uint = (unsigned char)value->uint;
     9f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     9f4:	930a      	str	r3, [sp, #40]	; 0x28
     9f6:	2300      	movs	r3, #0
     9f8:	930b      	str	r3, [sp, #44]	; 0x2c
     9fa:	e7e0      	b.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
			} else if (length_mod == LENGTH_H) {
     9fc:	2902      	cmp	r1, #2
     9fe:	d1de      	bne.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
				value->sint = (short)value->sint;
     a00:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     a04:	e7d0      	b.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a06:	2b02      	cmp	r3, #2
     a08:	d123      	bne.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
			switch (length_mod) {
     a0a:	1ecb      	subs	r3, r1, #3
     a0c:	2b04      	cmp	r3, #4
     a0e:	d813      	bhi.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     a10:	e8df f003 	tbb	[pc, r3]
     a14:	120a0a03 	.word	0x120a0a03
     a18:	12          	.byte	0x12
     a19:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     a1a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
     a1c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
     a1e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     a20:	920a      	str	r2, [sp, #40]	; 0x28
     a22:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a24:	4604      	mov	r4, r0
     a26:	e7ca      	b.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
					(uint_value_type)va_arg(ap,
     a28:	1de0      	adds	r0, r4, #7
     a2a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     a2e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     a32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     a36:	e7f5      	b.n	a24 <CONFIG_ISR_STACK_SIZE+0x224>
					(uint_value_type)va_arg(ap, size_t);
     a38:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a3c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     a3e:	930a      	str	r3, [sp, #40]	; 0x28
     a40:	f04f 0300 	mov.w	r3, #0
     a44:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a46:	d0d3      	beq.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			} else if (length_mod == LENGTH_H) {
     a48:	2902      	cmp	r1, #2
     a4a:	d1b8      	bne.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
				value->uint = (unsigned short)value->uint;
     a4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     a50:	e7d0      	b.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		} else if (specifier_cat == SPECIFIER_FP) {
     a52:	2b04      	cmp	r3, #4
     a54:	d109      	bne.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
					(sint_value_type)va_arg(ap, long long);
     a56:	1de3      	adds	r3, r4, #7
     a58:	f023 0307 	bic.w	r3, r3, #7
     a5c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     a60:	e9d3 2300 	ldrd	r2, r3, [r3]
     a64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     a68:	e7a9      	b.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
		} else if (specifier_cat == SPECIFIER_PTR) {
     a6a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     a6c:	bf04      	itt	eq
     a6e:	f854 3b04 	ldreq.w	r3, [r4], #4
     a72:	930a      	streq	r3, [sp, #40]	; 0x28
     a74:	e7a3      	b.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
		switch (conv->specifier) {
     a76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     a7a:	2878      	cmp	r0, #120	; 0x78
     a7c:	d8ae      	bhi.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
     a7e:	2862      	cmp	r0, #98	; 0x62
     a80:	d822      	bhi.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     a82:	2825      	cmp	r0, #37	; 0x25
     a84:	f43f ad8f 	beq.w	5a6 <cbvprintf+0x22>
     a88:	2858      	cmp	r0, #88	; 0x58
     a8a:	d1a7      	bne.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
			bps = encode_uint(value->uint, conv, buf, bpe);
     a8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     a90:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     a94:	9300      	str	r3, [sp, #0]
     a96:	aa0c      	add	r2, sp, #48	; 0x30
     a98:	ab04      	add	r3, sp, #16
     a9a:	f007 f860 	bl	7b5e <encode_uint>
     a9e:	4682      	mov	sl, r0
			if (precision >= 0) {
     aa0:	f1b8 0f00 	cmp.w	r8, #0
     aa4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     aa8:	db0c      	blt.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
				conv->flag_zero = false;
     aaa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     aae:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ab2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     ab6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     ab8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     abc:	d902      	bls.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
					conv->pad0_value = precision - (int)len;
     abe:	eba8 0303 	sub.w	r3, r8, r3
     ac2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     ac4:	4680      	mov	r8, r0
     ac6:	e03d      	b.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
		switch (conv->specifier) {
     ac8:	3863      	subs	r0, #99	; 0x63
     aca:	2815      	cmp	r0, #21
     acc:	d886      	bhi.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
     ace:	a201      	add	r2, pc, #4	; (adr r2, ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>)
     ad0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ad4:	00000b55 	.word	0x00000b55
     ad8:	00000bb9 	.word	0x00000bb9
     adc:	000009dd 	.word	0x000009dd
     ae0:	000009dd 	.word	0x000009dd
     ae4:	000009dd 	.word	0x000009dd
     ae8:	000009dd 	.word	0x000009dd
     aec:	00000bb9 	.word	0x00000bb9
     af0:	000009dd 	.word	0x000009dd
     af4:	000009dd 	.word	0x000009dd
     af8:	000009dd 	.word	0x000009dd
     afc:	000009dd 	.word	0x000009dd
     b00:	00000c13 	.word	0x00000c13
     b04:	00000be1 	.word	0x00000be1
     b08:	00000be5 	.word	0x00000be5
     b0c:	000009dd 	.word	0x000009dd
     b10:	000009dd 	.word	0x000009dd
     b14:	00000b2d 	.word	0x00000b2d
     b18:	000009dd 	.word	0x000009dd
     b1c:	00000be1 	.word	0x00000be1
     b20:	000009dd 	.word	0x000009dd
     b24:	000009dd 	.word	0x000009dd
     b28:	00000be1 	.word	0x00000be1
			if (precision >= 0) {
     b2c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b34:	db0a      	blt.n	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
				len = strnlen(bps, precision);
     b36:	4641      	mov	r1, r8
     b38:	4650      	mov	r0, sl
     b3a:	f007 f8ec 	bl	7d16 <strnlen>
		char sign = 0;
     b3e:	2600      	movs	r6, #0
			bpe = bps + len;
     b40:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     b44:	f1ba 0f00 	cmp.w	sl, #0
     b48:	d10c      	bne.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
     b4a:	e747      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
				len = strlen(bps);
     b4c:	4650      	mov	r0, sl
     b4e:	f007 f8db 	bl	7d08 <strlen>
     b52:	e7f4      	b.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
			break;
     b54:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
     b58:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b5c:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
     b60:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     b64:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     b68:	b106      	cbz	r6, b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			nj_len += 1U;
     b6a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     b6c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b70:	06d0      	lsls	r0, r2, #27
     b72:	d568      	bpl.n	c46 <CONFIG_ISR_STACK_SIZE+0x446>
			nj_len += 2U;
     b74:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     b76:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     b78:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     b7a:	bf48      	it	mi
     b7c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     b7e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     b80:	bf48      	it	mi
     b82:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     b84:	f1b9 0f00 	cmp.w	r9, #0
     b88:	dd76      	ble.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
			if (!conv->flag_dash) {
     b8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     b8e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     b92:	f3c2 0380 	ubfx	r3, r2, #2, #1
     b96:	9303      	str	r3, [sp, #12]
     b98:	0753      	lsls	r3, r2, #29
     b9a:	d46d      	bmi.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
				if (conv->flag_zero) {
     b9c:	0650      	lsls	r0, r2, #25
     b9e:	d561      	bpl.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
					if (sign != 0) {
     ba0:	b146      	cbz	r6, bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>
						OUTC(sign);
     ba2:	4659      	mov	r1, fp
     ba4:	4630      	mov	r0, r6
     ba6:	9b02      	ldr	r3, [sp, #8]
     ba8:	4798      	blx	r3
     baa:	2800      	cmp	r0, #0
     bac:	db57      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
						sign = 0;
     bae:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     bb0:	3501      	adds	r5, #1
						sign = 0;
     bb2:	461e      	mov	r6, r3
					pad = '0';
     bb4:	2330      	movs	r3, #48	; 0x30
     bb6:	e056      	b.n	c66 <CONFIG_ISR_STACK_SIZE+0x466>
			if (conv->flag_plus) {
     bb8:	071e      	lsls	r6, r3, #28
     bba:	d40f      	bmi.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
				sign = ' ';
     bbc:	f013 0610 	ands.w	r6, r3, #16
     bc0:	bf18      	it	ne
     bc2:	2620      	movne	r6, #32
			sint = value->sint;
     bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     bc8:	2b00      	cmp	r3, #0
     bca:	f6bf af5f 	bge.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
				value->uint = (uint_value_type)-sint;
     bce:	4252      	negs	r2, r2
     bd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     bd4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     bd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     bda:	e757      	b.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
				sign = '+';
     bdc:	262b      	movs	r6, #43	; 0x2b
     bde:	e7f1      	b.n	bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
		switch (conv->specifier) {
     be0:	2600      	movs	r6, #0
     be2:	e753      	b.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
			if (value->ptr != NULL) {
     be4:	980a      	ldr	r0, [sp, #40]	; 0x28
     be6:	b340      	cbz	r0, c3a <CONFIG_ISR_STACK_SIZE+0x43a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     be8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     bec:	9300      	str	r3, [sp, #0]
     bee:	2100      	movs	r1, #0
     bf0:	ab04      	add	r3, sp, #16
     bf2:	aa0c      	add	r2, sp, #48	; 0x30
     bf4:	f006 ffb3 	bl	7b5e <encode_uint>
				conv->altform_0c = true;
     bf8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bfc:	4682      	mov	sl, r0
				conv->altform_0c = true;
     bfe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c02:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c06:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     c0a:	2600      	movs	r6, #0
				conv->altform_0c = true;
     c0c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     c10:	e746      	b.n	aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>
				store_count(conv, value->ptr, count);
     c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c14:	2907      	cmp	r1, #7
     c16:	f63f aee1 	bhi.w	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
     c1a:	e8df f001 	tbb	[pc, r1]
     c1e:	040c      	.short	0x040c
     c20:	08080c06 	.word	0x08080c06
     c24:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     c26:	701d      	strb	r5, [r3, #0]
		break;
     c28:	e6d8      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		*(short *)dp = (short)count;
     c2a:	801d      	strh	r5, [r3, #0]
		break;
     c2c:	e6d6      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		*(intmax_t *)dp = (intmax_t)count;
     c2e:	17ea      	asrs	r2, r5, #31
     c30:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     c34:	e6d2      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c36:	601d      	str	r5, [r3, #0]
		break;
     c38:	e6d0      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
			bps = "(nil)";
     c3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d04 <CONFIG_ISR_STACK_SIZE+0x504>
     c3e:	4606      	mov	r6, r0
			bpe = bps + 5;
     c40:	f10a 0805 	add.w	r8, sl, #5
     c44:	e78e      	b.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
		} else if (conv->altform_0) {
     c46:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c48:	bf48      	it	mi
     c4a:	3301      	addmi	r3, #1
     c4c:	e793      	b.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
					OUTC(pad);
     c4e:	4618      	mov	r0, r3
     c50:	9303      	str	r3, [sp, #12]
     c52:	4659      	mov	r1, fp
     c54:	9b02      	ldr	r3, [sp, #8]
     c56:	4798      	blx	r3
     c58:	2800      	cmp	r0, #0
     c5a:	9b03      	ldr	r3, [sp, #12]
     c5c:	da04      	bge.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
#undef OUTS
#undef OUTC
}
     c5e:	b011      	add	sp, #68	; 0x44
     c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     c64:	2320      	movs	r3, #32
     c66:	444d      	add	r5, r9
     c68:	464a      	mov	r2, r9
				while (width-- > 0) {
     c6a:	2a00      	cmp	r2, #0
     c6c:	eba5 0109 	sub.w	r1, r5, r9
     c70:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     c74:	dceb      	bgt.n	c4e <CONFIG_ISR_STACK_SIZE+0x44e>
     c76:	460d      	mov	r5, r1
		if (sign != 0) {
     c78:	b136      	cbz	r6, c88 <CONFIG_ISR_STACK_SIZE+0x488>
			OUTC(sign);
     c7a:	4659      	mov	r1, fp
     c7c:	4630      	mov	r0, r6
     c7e:	9b02      	ldr	r3, [sp, #8]
     c80:	4798      	blx	r3
     c82:	2800      	cmp	r0, #0
     c84:	dbeb      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c86:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     c88:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c8c:	06d9      	lsls	r1, r3, #27
     c8e:	d401      	bmi.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     c90:	071a      	lsls	r2, r3, #28
     c92:	d506      	bpl.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
				OUTC('0');
     c94:	4659      	mov	r1, fp
     c96:	2030      	movs	r0, #48	; 0x30
     c98:	9b02      	ldr	r3, [sp, #8]
     c9a:	4798      	blx	r3
     c9c:	2800      	cmp	r0, #0
     c9e:	dbde      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     ca0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     ca2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ca6:	06db      	lsls	r3, r3, #27
     ca8:	d507      	bpl.n	cba <CONFIG_ISR_STACK_SIZE+0x4ba>
				OUTC(conv->specifier);
     caa:	4659      	mov	r1, fp
     cac:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cb0:	9b02      	ldr	r3, [sp, #8]
     cb2:	4798      	blx	r3
     cb4:	2800      	cmp	r0, #0
     cb6:	dbd2      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     cb8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     cba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cbc:	442e      	add	r6, r5
     cbe:	1b73      	subs	r3, r6, r5
     cc0:	2b00      	cmp	r3, #0
     cc2:	dc16      	bgt.n	cf2 <CONFIG_ISR_STACK_SIZE+0x4f2>
			OUTS(bps, bpe);
     cc4:	4643      	mov	r3, r8
     cc6:	4652      	mov	r2, sl
     cc8:	4659      	mov	r1, fp
     cca:	9802      	ldr	r0, [sp, #8]
     ccc:	f006 ff8d 	bl	7bea <outs>
     cd0:	2800      	cmp	r0, #0
     cd2:	dbc4      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     cd4:	4405      	add	r5, r0
		while (width > 0) {
     cd6:	44a9      	add	r9, r5
     cd8:	eba9 0305 	sub.w	r3, r9, r5
     cdc:	2b00      	cmp	r3, #0
     cde:	f77f ae7d 	ble.w	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
			OUTC(' ');
     ce2:	4659      	mov	r1, fp
     ce4:	2020      	movs	r0, #32
     ce6:	9b02      	ldr	r3, [sp, #8]
     ce8:	4798      	blx	r3
     cea:	2800      	cmp	r0, #0
     cec:	dbb7      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     cee:	3501      	adds	r5, #1
			--width;
     cf0:	e7f2      	b.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
				OUTC('0');
     cf2:	4659      	mov	r1, fp
     cf4:	2030      	movs	r0, #48	; 0x30
     cf6:	9b02      	ldr	r3, [sp, #8]
     cf8:	4798      	blx	r3
     cfa:	2800      	cmp	r0, #0
     cfc:	dbaf      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     cfe:	3501      	adds	r5, #1
     d00:	e7dd      	b.n	cbe <CONFIG_ISR_STACK_SIZE+0x4be>
     d02:	bf00      	nop
     d04:	000088f8 	.word	0x000088f8

00000d08 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d08:	4604      	mov	r4, r0
     d0a:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     d0c:	f04f 0220 	mov.w	r2, #32
     d10:	f3ef 8311 	mrs	r3, BASEPRI
     d14:	f382 8812 	msr	BASEPRI_MAX, r2
     d18:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
     d1c:	f007 f9cc 	bl	80b8 <sys_clock_disable>

	sys_arch_reboot(type);
     d20:	4620      	mov	r0, r4
     d22:	f001 f89b 	bl	1e5c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d26:	4803      	ldr	r0, [pc, #12]	; (d34 <sys_reboot+0x2c>)
     d28:	f006 feef 	bl	7b0a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d2c:	f000 fc66 	bl	15fc <arch_cpu_idle>
     d30:	e7fc      	b.n	d2c <sys_reboot+0x24>
     d32:	bf00      	nop
     d34:	000088fe 	.word	0x000088fe

00000d38 <nordicsemi_nrf91_init>:
     d38:	f04f 0220 	mov.w	r2, #32
     d3c:	f3ef 8311 	mrs	r3, BASEPRI
     d40:	f382 8812 	msr	BASEPRI_MAX, r2
     d44:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     d48:	2101      	movs	r1, #1
     d4a:	4a04      	ldr	r2, [pc, #16]	; (d5c <nordicsemi_nrf91_init+0x24>)
     d4c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d50:	f383 8811 	msr	BASEPRI, r3
     d54:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d58:	2000      	movs	r0, #0
     d5a:	4770      	bx	lr
     d5c:	50039000 	.word	0x50039000

00000d60 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d60:	b120      	cbz	r0, d6c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d62:	4b03      	ldr	r3, [pc, #12]	; (d70 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     d64:	0180      	lsls	r0, r0, #6
     d66:	f043 0301 	orr.w	r3, r3, #1
     d6a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop
     d70:	00008530 	.word	0x00008530

00000d74 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
     d74:	b084      	sub	sp, #16
     d76:	ab04      	add	r3, sp, #16
     d78:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
     d7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
     d80:	2b06      	cmp	r3, #6
     d82:	d107      	bne.n	d94 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     d84:	2201      	movs	r2, #1
     d86:	4b04      	ldr	r3, [pc, #16]	; (d98 <pm_power_state_set+0x24>)
     d88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d8c:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     d90:	bf20      	wfe
    while (true)
     d92:	e7fd      	b.n	d90 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
     d94:	b004      	add	sp, #16
     d96:	4770      	bx	lr
     d98:	50004000 	.word	0x50004000

00000d9c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     da0:	4605      	mov	r5, r0
	__asm__ volatile(
     da2:	f04f 0320 	mov.w	r3, #32
     da6:	f3ef 8611 	mrs	r6, BASEPRI
     daa:	f383 8812 	msr	BASEPRI_MAX, r3
     dae:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     db2:	481d      	ldr	r0, [pc, #116]	; (e28 <pm_state_notify+0x8c>)
     db4:	f002 fc90 	bl	36d8 <z_spin_lock_valid>
     db8:	b940      	cbnz	r0, dcc <pm_state_notify+0x30>
     dba:	491c      	ldr	r1, [pc, #112]	; (e2c <pm_state_notify+0x90>)
     dbc:	481c      	ldr	r0, [pc, #112]	; (e30 <pm_state_notify+0x94>)
     dbe:	2281      	movs	r2, #129	; 0x81
     dc0:	f006 fea3 	bl	7b0a <printk>
     dc4:	2181      	movs	r1, #129	; 0x81
     dc6:	4819      	ldr	r0, [pc, #100]	; (e2c <pm_state_notify+0x90>)
     dc8:	f006 ff25 	bl	7c16 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
     dcc:	4816      	ldr	r0, [pc, #88]	; (e28 <pm_state_notify+0x8c>)
     dce:	f002 fc9f 	bl	3710 <z_spin_lock_set_owner>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     dd2:	4b18      	ldr	r3, [pc, #96]	; (e34 <pm_state_notify+0x98>)
     dd4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dd6:	b19c      	cbz	r4, e00 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
     dd8:	f04f 090c 	mov.w	r9, #12
     ddc:	4f16      	ldr	r7, [pc, #88]	; (e38 <pm_state_notify+0x9c>)
     dde:	f8df 805c 	ldr.w	r8, [pc, #92]	; e3c <pm_state_notify+0xa0>
			callback = notifier->state_exit;
     de2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     de6:	2d00      	cmp	r5, #0
     de8:	bf08      	it	eq
     dea:	4613      	moveq	r3, r2
		if (callback) {
     dec:	b12b      	cbz	r3, dfa <pm_state_notify+0x5e>
			callback(z_power_states[_current_cpu->id].state);
     dee:	f898 2014 	ldrb.w	r2, [r8, #20]
     df2:	fb09 f202 	mul.w	r2, r9, r2
     df6:	5cb8      	ldrb	r0, [r7, r2]
     df8:	4798      	blx	r3
	return node->next;
     dfa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dfc:	2c00      	cmp	r4, #0
     dfe:	d1f0      	bne.n	de2 <pm_state_notify+0x46>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e00:	4809      	ldr	r0, [pc, #36]	; (e28 <pm_state_notify+0x8c>)
     e02:	f002 fc77 	bl	36f4 <z_spin_unlock_valid>
     e06:	b940      	cbnz	r0, e1a <pm_state_notify+0x7e>
     e08:	4908      	ldr	r1, [pc, #32]	; (e2c <pm_state_notify+0x90>)
     e0a:	4809      	ldr	r0, [pc, #36]	; (e30 <pm_state_notify+0x94>)
     e0c:	22ac      	movs	r2, #172	; 0xac
     e0e:	f006 fe7c 	bl	7b0a <printk>
     e12:	21ac      	movs	r1, #172	; 0xac
     e14:	4805      	ldr	r0, [pc, #20]	; (e2c <pm_state_notify+0x90>)
     e16:	f006 fefe 	bl	7c16 <assert_post_action>
	__asm__ volatile(
     e1a:	f386 8811 	msr	BASEPRI, r6
     e1e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e26:	bf00      	nop
     e28:	20000238 	.word	0x20000238
     e2c:	0000892b 	.word	0x0000892b
     e30:	00008951 	.word	0x00008951
     e34:	2000023c 	.word	0x2000023c
     e38:	20000248 	.word	0x20000248
     e3c:	200009c4 	.word	0x200009c4

00000e40 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e40:	2201      	movs	r2, #1
     e42:	f000 031f 	and.w	r3, r0, #31
     e46:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     e48:	4b08      	ldr	r3, [pc, #32]	; (e6c <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     e4a:	0940      	lsrs	r0, r0, #5
     e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e50:	e8d0 3fef 	ldaex	r3, [r0]
     e54:	ea43 0102 	orr.w	r1, r3, r2
     e58:	e8c0 1fec 	stlex	ip, r1, [r0]
     e5c:	f1bc 0f00 	cmp.w	ip, #0
     e60:	d1f6      	bne.n	e50 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
     e62:	421a      	tst	r2, r3
}
     e64:	bf14      	ite	ne
     e66:	2001      	movne	r0, #1
     e68:	2000      	moveq	r0, #0
     e6a:	4770      	bx	lr
     e6c:	20000254 	.word	0x20000254

00000e70 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
     e70:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     e72:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     e74:	4b1a      	ldr	r3, [pc, #104]	; (ee0 <pm_system_resume+0x70>)
{
     e76:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
     e78:	7d1c      	ldrb	r4, [r3, #20]
     e7a:	f004 031f 	and.w	r3, r4, #31
     e7e:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e80:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e82:	4b18      	ldr	r3, [pc, #96]	; (ee4 <pm_system_resume+0x74>)
     e84:	0961      	lsrs	r1, r4, #5
     e86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e8a:	e8d3 1fef 	ldaex	r1, [r3]
     e8e:	ea01 0500 	and.w	r5, r1, r0
     e92:	e8c3 5fec 	stlex	ip, r5, [r3]
     e96:	f1bc 0f00 	cmp.w	ip, #0
     e9a:	d1f6      	bne.n	e8a <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     e9c:	4211      	tst	r1, r2
     e9e:	d017      	beq.n	ed0 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
     ea0:	220c      	movs	r2, #12
     ea2:	4d11      	ldr	r5, [pc, #68]	; (ee8 <pm_system_resume+0x78>)
     ea4:	ab01      	add	r3, sp, #4
     ea6:	fb02 5204 	mla	r2, r2, r4, r5
     eaa:	ca07      	ldmia	r2, {r0, r1, r2}
     eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     eb0:	4a0e      	ldr	r2, [pc, #56]	; (eec <pm_system_resume+0x7c>)
     eb2:	b17a      	cbz	r2, ed4 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
     eb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     eb8:	f006 feb5 	bl	7c26 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     ebc:	2000      	movs	r0, #0
     ebe:	f7ff ff6d 	bl	d9c <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     ec2:	230c      	movs	r3, #12
     ec4:	435c      	muls	r4, r3
     ec6:	2300      	movs	r3, #0
     ec8:	192a      	adds	r2, r5, r4
     eca:	512b      	str	r3, [r5, r4]
     ecc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     ed0:	b005      	add	sp, #20
     ed2:	bd30      	pop	{r4, r5, pc}
     ed4:	f382 8811 	msr	BASEPRI, r2
     ed8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     edc:	e7ee      	b.n	ebc <pm_system_resume+0x4c>
     ede:	bf00      	nop
     ee0:	200009c4 	.word	0x200009c4
     ee4:	20000244 	.word	0x20000244
     ee8:	20000248 	.word	0x20000248
     eec:	00007c27 	.word	0x00007c27

00000ef0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     ef4:	4b32      	ldr	r3, [pc, #200]	; (fc0 <pm_system_suspend+0xd0>)
{
     ef6:	4680      	mov	r8, r0
	uint8_t id = _current_cpu->id;
     ef8:	7d1d      	ldrb	r5, [r3, #20]
{
     efa:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
     efc:	4628      	mov	r0, r5
     efe:	f7ff ff9f 	bl	e40 <atomic_test_and_set_bit.constprop.0>
     f02:	4c30      	ldr	r4, [pc, #192]	; (fc4 <pm_system_suspend+0xd4>)
     f04:	b960      	cbnz	r0, f20 <pm_system_suspend+0x30>
		z_power_states[id] = pm_policy_next_state(id, ticks);
     f06:	260c      	movs	r6, #12
     f08:	466f      	mov	r7, sp
     f0a:	fb06 4605 	mla	r6, r6, r5, r4
     f0e:	4642      	mov	r2, r8
     f10:	4629      	mov	r1, r5
     f12:	4638      	mov	r0, r7
     f14:	f006 fe9f 	bl	7c56 <pm_policy_next_state>
     f18:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
     f1c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
     f20:	230c      	movs	r3, #12
     f22:	436b      	muls	r3, r5
     f24:	5ce0      	ldrb	r0, [r4, r3]
     f26:	18e2      	adds	r2, r4, r3
     f28:	096e      	lsrs	r6, r5, #5
     f2a:	f005 071f 	and.w	r7, r5, #31
     f2e:	b3b8      	cbz	r0, fa0 <pm_system_suspend+0xb0>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     f30:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
     f34:	d010      	beq.n	f58 <pm_system_suspend+0x68>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f36:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     f3a:	2100      	movs	r1, #0
     f3c:	f8d2 e008 	ldr.w	lr, [r2, #8]
     f40:	4821      	ldr	r0, [pc, #132]	; (fc8 <pm_system_suspend+0xd8>)
     f42:	2300      	movs	r3, #0
     f44:	fbee 010c 	umlal	r0, r1, lr, ip
     f48:	4a20      	ldr	r2, [pc, #128]	; (fcc <pm_system_suspend+0xdc>)
     f4a:	f7ff f977 	bl	23c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f4e:	2101      	movs	r1, #1
     f50:	eba8 0000 	sub.w	r0, r8, r0
     f54:	f003 fedc 	bl	4d10 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f58:	f002 feb4 	bl	3cc4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f5c:	2001      	movs	r0, #1
     f5e:	f7ff ff1d 	bl	d9c <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f62:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     f64:	4b1a      	ldr	r3, [pc, #104]	; (fd0 <pm_system_suspend+0xe0>)
     f66:	40ba      	lsls	r2, r7
     f68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     f6c:	e8d3 1fef 	ldaex	r1, [r3]
     f70:	4311      	orrs	r1, r2
     f72:	e8c3 1fe0 	stlex	r0, r1, [r3]
     f76:	2800      	cmp	r0, #0
     f78:	d1f8      	bne.n	f6c <pm_system_suspend+0x7c>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
     f7a:	230c      	movs	r3, #12
     f7c:	fb03 4405 	mla	r4, r3, r5, r4
     f80:	ab05      	add	r3, sp, #20
     f82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     f8a:	4a12      	ldr	r2, [pc, #72]	; (fd4 <pm_system_suspend+0xe4>)
     f8c:	b11a      	cbz	r2, f96 <pm_system_suspend+0xa6>
		pm_power_state_set(info);
     f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     f92:	f7ff feef 	bl	d74 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
     f96:	f7ff ff6b 	bl	e70 <pm_system_resume>
	k_sched_unlock();
     f9a:	f003 fab5 	bl	4508 <k_sched_unlock>
	bool ret = true;
     f9e:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
     fa0:	2301      	movs	r3, #1
     fa2:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fa4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fa6:	4a0c      	ldr	r2, [pc, #48]	; (fd8 <pm_system_suspend+0xe8>)
     fa8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
     fac:	e8d6 2fef 	ldaex	r2, [r6]
     fb0:	401a      	ands	r2, r3
     fb2:	e8c6 2fe1 	stlex	r1, r2, [r6]
     fb6:	2900      	cmp	r1, #0
     fb8:	d1f8      	bne.n	fac <pm_system_suspend+0xbc>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
     fba:	b008      	add	sp, #32
     fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fc0:	200009c4 	.word	0x200009c4
     fc4:	20000248 	.word	0x20000248
     fc8:	000f423f 	.word	0x000f423f
     fcc:	000f4240 	.word	0x000f4240
     fd0:	20000244 	.word	0x20000244
     fd4:	00000d75 	.word	0x00000d75
     fd8:	20000254 	.word	0x20000254

00000fdc <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
     fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     fde:	2800      	cmp	r0, #0
{
     fe0:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     fe2:	bf14      	ite	ne
     fe4:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     fe8:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
     fec:	428a      	cmp	r2, r1
     fee:	d20b      	bcs.n	1008 <CONFIG_MAIN_STACK_SIZE+0x8>
     ff0:	2294      	movs	r2, #148	; 0x94
     ff2:	4921      	ldr	r1, [pc, #132]	; (1078 <CONFIG_MAIN_STACK_SIZE+0x78>)
     ff4:	4821      	ldr	r0, [pc, #132]	; (107c <CONFIG_MAIN_STACK_SIZE+0x7c>)
     ff6:	f006 fd88 	bl	7b0a <printk>
     ffa:	2194      	movs	r1, #148	; 0x94
     ffc:	481e      	ldr	r0, [pc, #120]	; (1078 <CONFIG_MAIN_STACK_SIZE+0x78>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
     ffe:	b003      	add	sp, #12
    1000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    1004:	f006 be07 	b.w	7c16 <assert_post_action>
	if (end <= start) {
    1008:	d033      	beq.n	1072 <CONFIG_MAIN_STACK_SIZE+0x72>
    100a:	460d      	mov	r5, r1
    100c:	4e1c      	ldr	r6, [pc, #112]	; (1080 <CONFIG_MAIN_STACK_SIZE+0x80>)
		if (ram) {
    100e:	b368      	cbz	r0, 106c <CONFIG_MAIN_STACK_SIZE+0x6c>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1010:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    1014:	3501      	adds	r5, #1
    1016:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1018:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    101c:	d8f7      	bhi.n	100e <CONFIG_MAIN_STACK_SIZE+0xe>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    101e:	fb02 f003 	mul.w	r0, r2, r3
    1022:	3a01      	subs	r2, #1
    1024:	434b      	muls	r3, r1
    1026:	9000      	str	r0, [sp, #0]
    1028:	4816      	ldr	r0, [pc, #88]	; (1084 <CONFIG_MAIN_STACK_SIZE+0x84>)
    102a:	f006 fd6e 	bl	7b0a <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    102e:	4b16      	ldr	r3, [pc, #88]	; (1088 <CONFIG_MAIN_STACK_SIZE+0x88>)
    1030:	f014 0f10 	tst.w	r4, #16
    1034:	4915      	ldr	r1, [pc, #84]	; (108c <CONFIG_MAIN_STACK_SIZE+0x8c>)
    1036:	4816      	ldr	r0, [pc, #88]	; (1090 <CONFIG_MAIN_STACK_SIZE+0x90>)
    1038:	bf08      	it	eq
    103a:	4619      	moveq	r1, r3
    103c:	f006 fd65 	bl	7b0a <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1040:	2172      	movs	r1, #114	; 0x72
    1042:	4814      	ldr	r0, [pc, #80]	; (1094 <CONFIG_MAIN_STACK_SIZE+0x94>)
    1044:	f006 fd61 	bl	7b0a <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1048:	2177      	movs	r1, #119	; 0x77
    104a:	4812      	ldr	r0, [pc, #72]	; (1094 <CONFIG_MAIN_STACK_SIZE+0x94>)
    104c:	f006 fd5d 	bl	7b0a <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    1050:	2178      	movs	r1, #120	; 0x78
    1052:	4810      	ldr	r0, [pc, #64]	; (1094 <CONFIG_MAIN_STACK_SIZE+0x94>)
    1054:	f006 fd59 	bl	7b0a <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    1058:	216c      	movs	r1, #108	; 0x6c
    105a:	480e      	ldr	r0, [pc, #56]	; (1094 <CONFIG_MAIN_STACK_SIZE+0x94>)
    105c:	f006 fd55 	bl	7b0a <printk>
	PRINT("\n");
    1060:	480d      	ldr	r0, [pc, #52]	; (1098 <CONFIG_MAIN_STACK_SIZE+0x98>)
}
    1062:	b003      	add	sp, #12
    1064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    1068:	f006 bd4f 	b.w	7b0a <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    106c:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    1070:	e7d0      	b.n	1014 <CONFIG_MAIN_STACK_SIZE+0x14>
}
    1072:	b003      	add	sp, #12
    1074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1076:	bf00      	nop
    1078:	00008981 	.word	0x00008981
    107c:	00008951 	.word	0x00008951
    1080:	50003000 	.word	0x50003000
    1084:	000089a2 	.word	0x000089a2
    1088:	00008975 	.word	0x00008975
    108c:	0000896c 	.word	0x0000896c
    1090:	00008b53 	.word	0x00008b53
    1094:	000089bc 	.word	0x000089bc
    1098:	000095c7 	.word	0x000095c7

0000109c <config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int config_peripheral(uint8_t id, bool dma_present, bool lock)
    109c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    109e:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    10a0:	2b00      	cmp	r3, #0
    10a2:	db0c      	blt.n	10be <config_peripheral.constprop.0+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10a4:	2201      	movs	r2, #1
    10a6:	f000 011f 	and.w	r1, r0, #31
    10aa:	408a      	lsls	r2, r1
    10ac:	095b      	lsrs	r3, r3, #5
    10ae:	4910      	ldr	r1, [pc, #64]	; (10f0 <config_peripheral.constprop.0+0x54>)
    10b0:	3320      	adds	r3, #32
    10b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    10b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10ba:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    10be:	0083      	lsls	r3, r0, #2
    10c0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    10c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    10c8:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    10ca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    10ce:	d006      	beq.n	10de <config_peripheral.constprop.0+0x42>
	return present && (usel || split);
    10d0:	2a00      	cmp	r2, #0
    10d2:	da07      	bge.n	10e4 <config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    10d4:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    10d8:	3a02      	subs	r2, #2
    10da:	2a01      	cmp	r2, #1
    10dc:	d802      	bhi.n	10e4 <config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    10de:	4a05      	ldr	r2, [pc, #20]	; (10f4 <config_peripheral.constprop.0+0x58>)
    10e0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    10e4:	2101      	movs	r1, #1
    10e6:	f006 fdc7 	bl	7c78 <irq_target_state_set>
	return 0;
}
    10ea:	2000      	movs	r0, #0
    10ec:	bd08      	pop	{r3, pc}
    10ee:	bf00      	nop
    10f0:	e000e100 	.word	0xe000e100
    10f4:	80000100 	.word	0x80000100

000010f8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    10f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    10fa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    10fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1102:	481d      	ldr	r0, [pc, #116]	; (1178 <spm_jump+0x80>)
    1104:	f006 fd01 	bl	7b0a <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1108:	6821      	ldr	r1, [r4, #0]
    110a:	481c      	ldr	r0, [pc, #112]	; (117c <spm_jump+0x84>)
    110c:	f006 fcfd 	bl	7b0a <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1110:	6861      	ldr	r1, [r4, #4]
    1112:	481b      	ldr	r0, [pc, #108]	; (1180 <spm_jump+0x88>)
    1114:	f006 fcf9 	bl	7b0a <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1118:	2210      	movs	r2, #16
    111a:	2100      	movs	r1, #0
    111c:	4668      	mov	r0, sp
    111e:	f006 fe37 	bl	7d90 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1122:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1124:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1126:	9300      	str	r3, [sp, #0]
    1128:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    112a:	f000 fef1 	bl	1f10 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    112e:	2001      	movs	r0, #1
    1130:	f000 ff20 	bl	1f74 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1134:	2000      	movs	r0, #0
    1136:	f000 ff09 	bl	1f4c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    113a:	2000      	movs	r0, #0
    113c:	f000 ff2e 	bl	1f9c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1140:	2101      	movs	r1, #1
    1142:	2000      	movs	r0, #0
    1144:	f000 ff48 	bl	1fd8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1148:	f000 ff3c 	bl	1fc4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    114c:	6864      	ldr	r4, [r4, #4]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    114e:	480d      	ldr	r0, [pc, #52]	; (1184 <spm_jump+0x8c>)
    1150:	f006 fcdb 	bl	7b0a <printk>
	return config_peripheral(id, dma_present, true);
    1154:	2008      	movs	r0, #8
    1156:	f7ff ffa1 	bl	109c <config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    115a:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    115e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1162:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1166:	0864      	lsrs	r4, r4, #1
    1168:	0064      	lsls	r4, r4, #1
    116a:	4620      	mov	r0, r4
    116c:	4621      	mov	r1, r4
    116e:	4622      	mov	r2, r4
    1170:	4623      	mov	r3, r4
    1172:	f7ff f87d 	bl	270 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1176:	bf00      	nop
    1178:	000089bf 	.word	0x000089bf
    117c:	000089d6 	.word	0x000089d6
    1180:	000089eb 	.word	0x000089eb
    1184:	00008a09 	.word	0x00008a09

00001188 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    118c:	4852      	ldr	r0, [pc, #328]	; (12d8 <spm_config+0x150>)
    118e:	f006 fcbc 	bl	7b0a <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    1192:	2100      	movs	r1, #0
    1194:	f240 1317 	movw	r3, #279	; 0x117
    1198:	4608      	mov	r0, r1
    119a:	2202      	movs	r2, #2
    119c:	f7ff ff1e 	bl	fdc <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11a0:	4d4e      	ldr	r5, [pc, #312]	; (12dc <spm_config+0x154>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    11a2:	f240 1307 	movw	r3, #263	; 0x107
    11a6:	2220      	movs	r2, #32
    11a8:	2102      	movs	r1, #2
    11aa:	2000      	movs	r0, #0
    11ac:	f7ff ff16 	bl	fdc <config_regions>
	PRINT("\n");
    11b0:	484b      	ldr	r0, [pc, #300]	; (12e0 <spm_config+0x158>)
    11b2:	f006 fcaa 	bl	7b0a <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11b6:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11ba:	4b4a      	ldr	r3, [pc, #296]	; (12e4 <spm_config+0x15c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11bc:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11c0:	429c      	cmp	r4, r3
    11c2:	d208      	bcs.n	11d6 <spm_config+0x4e>
    11c4:	4948      	ldr	r1, [pc, #288]	; (12e8 <spm_config+0x160>)
    11c6:	4849      	ldr	r0, [pc, #292]	; (12ec <spm_config+0x164>)
    11c8:	2282      	movs	r2, #130	; 0x82
    11ca:	f006 fc9e 	bl	7b0a <printk>
    11ce:	2182      	movs	r1, #130	; 0x82
    11d0:	4845      	ldr	r0, [pc, #276]	; (12e8 <spm_config+0x160>)
    11d2:	f006 fd20 	bl	7c16 <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    11d6:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    11da:	4e45      	ldr	r6, [pc, #276]	; (12f0 <spm_config+0x168>)
    11dc:	f1c4 041b 	rsb	r4, r4, #27
    11e0:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
    11e4:	b2e4      	uxtb	r4, r4
    11e6:	05da      	lsls	r2, r3, #23
    11e8:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    11ec:	d50a      	bpl.n	1204 <spm_config+0x7c>
    11ee:	4941      	ldr	r1, [pc, #260]	; (12f4 <spm_config+0x16c>)
    11f0:	483e      	ldr	r0, [pc, #248]	; (12ec <spm_config+0x164>)
    11f2:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    11f6:	f006 fc88 	bl	7b0a <printk>
    11fa:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    11fe:	483d      	ldr	r0, [pc, #244]	; (12f4 <spm_config+0x16c>)
    1200:	f006 fd09 	bl	7c16 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1204:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1208:	05db      	lsls	r3, r3, #23
    120a:	d50a      	bpl.n	1222 <spm_config+0x9a>
    120c:	4939      	ldr	r1, [pc, #228]	; (12f4 <spm_config+0x16c>)
    120e:	4837      	ldr	r0, [pc, #220]	; (12ec <spm_config+0x164>)
    1210:	f240 127b 	movw	r2, #379	; 0x17b
    1214:	f006 fc79 	bl	7b0a <printk>
    1218:	f240 117b 	movw	r1, #379	; 0x17b
    121c:	4835      	ldr	r0, [pc, #212]	; (12f4 <spm_config+0x16c>)
    121e:	f006 fcfa 	bl	7c16 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1222:	4b33      	ldr	r3, [pc, #204]	; (12f0 <spm_config+0x168>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1224:	4834      	ldr	r0, [pc, #208]	; (12f8 <spm_config+0x170>)
    1226:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    122a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    122e:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1232:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1236:	0152      	lsls	r2, r2, #5
    1238:	f006 fc67 	bl	7b0a <printk>
	PRINT("\n");
    123c:	4828      	ldr	r0, [pc, #160]	; (12e0 <spm_config+0x158>)
    123e:	f006 fc64 	bl	7b0a <printk>
	int err = spm_secure_services_init();
    1242:	f000 f86f 	bl	1324 <spm_secure_services_init>
	if (err != 0) {
    1246:	4601      	mov	r1, r0
    1248:	b110      	cbz	r0, 1250 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    124a:	482c      	ldr	r0, [pc, #176]	; (12fc <spm_config+0x174>)
    124c:	f006 fc5d 	bl	7b0a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1250:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1252:	482b      	ldr	r0, [pc, #172]	; (1300 <spm_config+0x178>)
    1254:	f006 fc59 	bl	7b0a <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1258:	f240 1317 	movw	r3, #279	; 0x117
    125c:	2204      	movs	r2, #4
    125e:	2100      	movs	r1, #0
    1260:	2001      	movs	r0, #1
    1262:	f7ff febb 	bl	fdc <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1266:	4d22      	ldr	r5, [pc, #136]	; (12f0 <spm_config+0x168>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1268:	f240 1307 	movw	r3, #263	; 0x107
    126c:	2220      	movs	r2, #32
    126e:	2104      	movs	r1, #4
    1270:	2001      	movs	r0, #1
    1272:	f7ff feb3 	bl	fdc <config_regions>
	PRINT("\n");
    1276:	481a      	ldr	r0, [pc, #104]	; (12e0 <spm_config+0x158>)
    1278:	f006 fc47 	bl	7b0a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    127c:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1280:	4820      	ldr	r0, [pc, #128]	; (1304 <spm_config+0x17c>)
    1282:	f006 fc42 	bl	7b0a <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1286:	4f20      	ldr	r7, [pc, #128]	; (1308 <spm_config+0x180>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1288:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    128c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 130c <spm_config+0x184>
    1290:	4d1f      	ldr	r5, [pc, #124]	; (1310 <spm_config+0x188>)
    1292:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1314 <spm_config+0x18c>
    1296:	796e      	ldrb	r6, [r5, #5]
    1298:	4621      	mov	r1, r4
    129a:	2e00      	cmp	r6, #0
    129c:	bf14      	ite	ne
    129e:	463b      	movne	r3, r7
    12a0:	4643      	moveq	r3, r8
    12a2:	4648      	mov	r0, r9
    12a4:	682a      	ldr	r2, [r5, #0]
    12a6:	f006 fc30 	bl	7b0a <printk>
		if (!periph[i].nonsecure) {
    12aa:	b966      	cbnz	r6, 12c6 <spm_config+0x13e>
			PRINT("\tSKIP\n");
    12ac:	481a      	ldr	r0, [pc, #104]	; (1318 <spm_config+0x190>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12ae:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    12b0:	f006 fc2b 	bl	7b0a <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12b4:	2c20      	cmp	r4, #32
    12b6:	f105 0508 	add.w	r5, r5, #8
    12ba:	d1ec      	bne.n	1296 <spm_config+0x10e>
	PRINT("\n");
    12bc:	4808      	ldr	r0, [pc, #32]	; (12e0 <spm_config+0x158>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    12be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    12c2:	f006 bc22 	b.w	7b0a <printk>
	return config_peripheral(id, dma_present, true);
    12c6:	7928      	ldrb	r0, [r5, #4]
    12c8:	f7ff fee8 	bl	109c <config_peripheral.constprop.0>
		if (err) {
    12cc:	b108      	cbz	r0, 12d2 <spm_config+0x14a>
			PRINT("\tERROR\n");
    12ce:	4813      	ldr	r0, [pc, #76]	; (131c <spm_config+0x194>)
    12d0:	e7ed      	b.n	12ae <spm_config+0x126>
			PRINT("\tOK\n");
    12d2:	4813      	ldr	r0, [pc, #76]	; (1320 <spm_config+0x198>)
    12d4:	e7eb      	b.n	12ae <spm_config+0x126>
    12d6:	bf00      	nop
    12d8:	00008a3f 	.word	0x00008a3f
    12dc:	0000ffe0 	.word	0x0000ffe0
    12e0:	000095c7 	.word	0x000095c7
    12e4:	00000020 	.word	0x00000020
    12e8:	00008981 	.word	0x00008981
    12ec:	00008951 	.word	0x00008951
    12f0:	50003000 	.word	0x50003000
    12f4:	00008a63 	.word	0x00008a63
    12f8:	00008a95 	.word	0x00008a95
    12fc:	00008adb 	.word	0x00008adb
    1300:	00008b0b 	.word	0x00008b0b
    1304:	00008b2d 	.word	0x00008b2d
    1308:	00008a34 	.word	0x00008a34
    130c:	00008979 	.word	0x00008979
    1310:	00008538 	.word	0x00008538
    1314:	00008b49 	.word	0x00008b49
    1318:	00008b56 	.word	0x00008b56
    131c:	00008b5d 	.word	0x00008b5d
    1320:	00008b65 	.word	0x00008b65

00001324 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    1324:	2200      	movs	r2, #0
    1326:	4802      	ldr	r0, [pc, #8]	; (1330 <spm_secure_services_init+0xc>)
    1328:	4611      	mov	r1, r2
    132a:	f003 be6f 	b.w	500c <nrf_cc3xx_platform_ctr_drbg_init>
    132e:	bf00      	nop
    1330:	20000258 	.word	0x20000258

00001334 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1334:	b570      	push	{r4, r5, r6, lr}
    1336:	460c      	mov	r4, r1
    1338:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    133a:	4606      	mov	r6, r0
    133c:	b950      	cbnz	r0, 1354 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    133e:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1346:	4671      	mov	r1, lr
    1348:	4672      	mov	r2, lr
    134a:	4673      	mov	r3, lr
    134c:	46f4      	mov	ip, lr
    134e:	f38e 8c00 	msr	CPSR_fs, lr
    1352:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1354:	2a00      	cmp	r2, #0
    1356:	d0f2      	beq.n	133e <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1358:	f006 fcd1 	bl	7cfe <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    135c:	2801      	cmp	r0, #1
    135e:	d0ee      	beq.n	133e <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1360:	4b0b      	ldr	r3, [pc, #44]	; (1390 <__acle_se_spm_request_read_nse+0x5c>)
    1362:	429c      	cmp	r4, r3
    1364:	d90a      	bls.n	137c <__acle_se_spm_request_read_nse+0x48>
    1366:	192a      	adds	r2, r5, r4
    1368:	332d      	adds	r3, #45	; 0x2d
    136a:	429a      	cmp	r2, r3
    136c:	d809      	bhi.n	1382 <__acle_se_spm_request_read_nse+0x4e>
			memcpy(destination, (const void *)addr, len);
    136e:	462a      	mov	r2, r5
    1370:	4621      	mov	r1, r4
    1372:	4630      	mov	r0, r6
    1374:	f006 fd01 	bl	7d7a <memcpy>
			return 0;
    1378:	2000      	movs	r0, #0
    137a:	e7e2      	b.n	1342 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    137c:	4b05      	ldr	r3, [pc, #20]	; (1394 <__acle_se_spm_request_read_nse+0x60>)
    137e:	429c      	cmp	r4, r3
    1380:	d903      	bls.n	138a <__acle_se_spm_request_read_nse+0x56>
    1382:	4b05      	ldr	r3, [pc, #20]	; (1398 <__acle_se_spm_request_read_nse+0x64>)
    1384:	192a      	adds	r2, r5, r4
    1386:	429a      	cmp	r2, r3
    1388:	d9f1      	bls.n	136e <__acle_se_spm_request_read_nse+0x3a>
	return -EPERM;
    138a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    138e:	e7d8      	b.n	1342 <__acle_se_spm_request_read_nse+0xe>
    1390:	00ff01ff 	.word	0x00ff01ff
    1394:	00ff012f 	.word	0x00ff012f
    1398:	00ff0138 	.word	0x00ff0138

0000139c <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    139c:	b570      	push	{r4, r5, r6, lr}
    139e:	4606      	mov	r6, r0
    13a0:	460d      	mov	r5, r1
    13a2:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    13a4:	f006 fcab 	bl	7cfe <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    13a8:	2801      	cmp	r0, #1
    13aa:	d00d      	beq.n	13c8 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    13ac:	4620      	mov	r0, r4
    13ae:	f006 fca6 	bl	7cfe <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    13b2:	2801      	cmp	r0, #1
    13b4:	d008      	beq.n	13c8 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    13b6:	4623      	mov	r3, r4
    13b8:	462a      	mov	r2, r5
    13ba:	4631      	mov	r1, r6
    13bc:	4808      	ldr	r0, [pc, #32]	; (13e0 <__acle_se_spm_request_random_number_nse+0x44>)
    13be:	f003 fe59 	bl	5074 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    13c2:	6823      	ldr	r3, [r4, #0]
    13c4:	42ab      	cmp	r3, r5
    13c6:	d001      	beq.n	13cc <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    13c8:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    13cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    13d0:	4671      	mov	r1, lr
    13d2:	4672      	mov	r2, lr
    13d4:	4673      	mov	r3, lr
    13d6:	46f4      	mov	ip, lr
    13d8:	f38e 8c00 	msr	CPSR_fs, lr
    13dc:	4774      	bxns	lr
    13de:	bf00      	nop
    13e0:	20000258 	.word	0x20000258

000013e4 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    13e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13e8:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    13ea:	460d      	mov	r5, r1
{
    13ec:	b085      	sub	sp, #20
	if (info == NULL) {
    13ee:	b381      	cbz	r1, 1452 <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    13f0:	f006 fc85 	bl	7cfe <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    13f4:	2801      	cmp	r0, #1
    13f6:	d12c      	bne.n	1452 <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    13f8:	4628      	mov	r0, r5
    13fa:	f006 fc80 	bl	7cfe <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    13fe:	2801      	cmp	r0, #1
    1400:	d027      	beq.n	1452 <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1402:	f04f 0800 	mov.w	r8, #0
    1406:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1464 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    140a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1468 <__acle_se_spm_firmware_info_nse+0x84>
    140e:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1410:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1414:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1418:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    141a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    141e:	220c      	movs	r2, #12
    1420:	4639      	mov	r1, r7
    1422:	4630      	mov	r0, r6
    1424:	f006 fc80 	bl	7d28 <memcmp>
    1428:	4604      	mov	r4, r0
    142a:	b900      	cbnz	r0, 142e <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    142c:	b9a6      	cbnz	r6, 1458 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    142e:	f108 0801 	add.w	r8, r8, #1
    1432:	f1b8 0f05 	cmp.w	r8, #5
    1436:	d1eb      	bne.n	1410 <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1438:	f06f 040d 	mvn.w	r4, #13
}
    143c:	4620      	mov	r0, r4
    143e:	b005      	add	sp, #20
    1440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1444:	4671      	mov	r1, lr
    1446:	4672      	mov	r2, lr
    1448:	4673      	mov	r3, lr
    144a:	46f4      	mov	ip, lr
    144c:	f38e 8c00 	msr	CPSR_fs, lr
    1450:	4774      	bxns	lr
		return -EINVAL;
    1452:	f06f 0415 	mvn.w	r4, #21
    1456:	e7f1      	b.n	143c <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    1458:	223c      	movs	r2, #60	; 0x3c
    145a:	4631      	mov	r1, r6
    145c:	4628      	mov	r0, r5
    145e:	f006 fc8c 	bl	7d7a <memcpy>
		return 0;
    1462:	e7eb      	b.n	143c <__acle_se_spm_firmware_info_nse+0x58>
    1464:	00008638 	.word	0x00008638
    1468:	00008500 	.word	0x00008500

0000146c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    146c:	4801      	ldr	r0, [pc, #4]	; (1474 <nrf_cc3xx_platform_abort_init+0x8>)
    146e:	f003 bdc5 	b.w	4ffc <nrf_cc3xx_platform_set_abort>
    1472:	bf00      	nop
    1474:	0000864c 	.word	0x0000864c

00001478 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1478:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    147a:	4604      	mov	r4, r0
    147c:	b918      	cbnz	r0, 1486 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    147e:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <mutex_free_platform+0x3c>)
    1480:	480d      	ldr	r0, [pc, #52]	; (14b8 <mutex_free_platform+0x40>)
    1482:	685b      	ldr	r3, [r3, #4]
    1484:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1486:	6861      	ldr	r1, [r4, #4]
    1488:	2908      	cmp	r1, #8
    148a:	d00d      	beq.n	14a8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    148c:	f031 0304 	bics.w	r3, r1, #4
    1490:	d00a      	beq.n	14a8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1492:	f011 0102 	ands.w	r1, r1, #2
    1496:	d008      	beq.n	14aa <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1498:	4621      	mov	r1, r4
    149a:	4808      	ldr	r0, [pc, #32]	; (14bc <mutex_free_platform+0x44>)
    149c:	f001 fffa 	bl	3494 <k_mem_slab_free>
        mutex->mutex = NULL;
    14a0:	2300      	movs	r3, #0
    14a2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    14a4:	2300      	movs	r3, #0
    14a6:	6063      	str	r3, [r4, #4]
}
    14a8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    14aa:	2214      	movs	r2, #20
    14ac:	6820      	ldr	r0, [r4, #0]
    14ae:	f006 fc6f 	bl	7d90 <memset>
    14b2:	e7f7      	b.n	14a4 <mutex_free_platform+0x2c>
    14b4:	2000005c 	.word	0x2000005c
    14b8:	00008c9a 	.word	0x00008c9a
    14bc:	20000414 	.word	0x20000414

000014c0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14c0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    14c2:	b1e8      	cbz	r0, 1500 <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    14c4:	6843      	ldr	r3, [r0, #4]
    14c6:	2b04      	cmp	r3, #4
    14c8:	d10c      	bne.n	14e4 <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    14ca:	2201      	movs	r2, #1
    14cc:	6803      	ldr	r3, [r0, #0]
    14ce:	e8d3 1fef 	ldaex	r1, [r3]
    14d2:	2900      	cmp	r1, #0
    14d4:	d103      	bne.n	14de <mutex_lock_platform+0x1e>
    14d6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    14da:	2800      	cmp	r0, #0
    14dc:	d1f7      	bne.n	14ce <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14de:	d10b      	bne.n	14f8 <mutex_lock_platform+0x38>
    14e0:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    14e2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    14e4:	b153      	cbz	r3, 14fc <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    14e6:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    14e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14f0:	f002 f93e 	bl	3770 <z_impl_k_mutex_lock>
        if (ret == 0) {
    14f4:	2800      	cmp	r0, #0
    14f6:	d0f3      	beq.n	14e0 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14f8:	4803      	ldr	r0, [pc, #12]	; (1508 <mutex_lock_platform+0x48>)
    14fa:	e7f2      	b.n	14e2 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    14fc:	4803      	ldr	r0, [pc, #12]	; (150c <mutex_lock_platform+0x4c>)
    14fe:	e7f0      	b.n	14e2 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1500:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1504:	e7ed      	b.n	14e2 <mutex_lock_platform+0x22>
    1506:	bf00      	nop
    1508:	ffff8fe9 	.word	0xffff8fe9
    150c:	ffff8fea 	.word	0xffff8fea

00001510 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1510:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1512:	b1b0      	cbz	r0, 1542 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1514:	6843      	ldr	r3, [r0, #4]
    1516:	2b04      	cmp	r3, #4
    1518:	d10d      	bne.n	1536 <mutex_unlock_platform+0x26>
    151a:	2200      	movs	r2, #0
    151c:	6803      	ldr	r3, [r0, #0]
    151e:	e8d3 1fef 	ldaex	r1, [r3]
    1522:	2901      	cmp	r1, #1
    1524:	d103      	bne.n	152e <mutex_unlock_platform+0x1e>
    1526:	e8c3 2fe0 	stlex	r0, r2, [r3]
    152a:	2800      	cmp	r0, #0
    152c:	d1f7      	bne.n	151e <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    152e:	4807      	ldr	r0, [pc, #28]	; (154c <mutex_unlock_platform+0x3c>)
    1530:	bf08      	it	eq
    1532:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1534:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1536:	b13b      	cbz	r3, 1548 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1538:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    153a:	f002 f9eb 	bl	3914 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    153e:	2000      	movs	r0, #0
    1540:	e7f8      	b.n	1534 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1542:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1546:	e7f5      	b.n	1534 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1548:	4801      	ldr	r0, [pc, #4]	; (1550 <mutex_unlock_platform+0x40>)
    154a:	e7f3      	b.n	1534 <mutex_unlock_platform+0x24>
    154c:	ffff8fe9 	.word	0xffff8fe9
    1550:	ffff8fea 	.word	0xffff8fea

00001554 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1554:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1556:	4604      	mov	r4, r0
    1558:	b918      	cbnz	r0, 1562 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    155a:	4b16      	ldr	r3, [pc, #88]	; (15b4 <mutex_init_platform+0x60>)
    155c:	4816      	ldr	r0, [pc, #88]	; (15b8 <mutex_init_platform+0x64>)
    155e:	685b      	ldr	r3, [r3, #4]
    1560:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1562:	6863      	ldr	r3, [r4, #4]
    1564:	2b04      	cmp	r3, #4
    1566:	d023      	beq.n	15b0 <mutex_init_platform+0x5c>
    1568:	2b08      	cmp	r3, #8
    156a:	d021      	beq.n	15b0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    156c:	b9cb      	cbnz	r3, 15a2 <mutex_init_platform+0x4e>
    156e:	6823      	ldr	r3, [r4, #0]
    1570:	b9bb      	cbnz	r3, 15a2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    157a:	4621      	mov	r1, r4
    157c:	480f      	ldr	r0, [pc, #60]	; (15bc <mutex_init_platform+0x68>)
    157e:	f001 ff2f 	bl	33e0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1582:	b908      	cbnz	r0, 1588 <mutex_init_platform+0x34>
    1584:	6823      	ldr	r3, [r4, #0]
    1586:	b91b      	cbnz	r3, 1590 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1588:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <mutex_init_platform+0x60>)
    158a:	480d      	ldr	r0, [pc, #52]	; (15c0 <mutex_init_platform+0x6c>)
    158c:	685b      	ldr	r3, [r3, #4]
    158e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1590:	2214      	movs	r2, #20
    1592:	2100      	movs	r1, #0
    1594:	6820      	ldr	r0, [r4, #0]
    1596:	f006 fbfb 	bl	7d90 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    159a:	6863      	ldr	r3, [r4, #4]
    159c:	f043 0302 	orr.w	r3, r3, #2
    15a0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    15a2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    15a4:	f006 fdeb 	bl	817e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    15a8:	6863      	ldr	r3, [r4, #4]
    15aa:	f043 0301 	orr.w	r3, r3, #1
    15ae:	6063      	str	r3, [r4, #4]
}
    15b0:	bd10      	pop	{r4, pc}
    15b2:	bf00      	nop
    15b4:	2000005c 	.word	0x2000005c
    15b8:	00008c9a 	.word	0x00008c9a
    15bc:	20000414 	.word	0x20000414
    15c0:	00008cc0 	.word	0x00008cc0

000015c4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    15c4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    15c6:	4906      	ldr	r1, [pc, #24]	; (15e0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    15c8:	2340      	movs	r3, #64	; 0x40
    15ca:	2214      	movs	r2, #20
    15cc:	4805      	ldr	r0, [pc, #20]	; (15e4 <nrf_cc3xx_platform_mutex_init+0x20>)
    15ce:	f006 fda3 	bl	8118 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    15d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    15d6:	4904      	ldr	r1, [pc, #16]	; (15e8 <nrf_cc3xx_platform_mutex_init+0x24>)
    15d8:	4804      	ldr	r0, [pc, #16]	; (15ec <nrf_cc3xx_platform_mutex_init+0x28>)
    15da:	f003 bdc3 	b.w	5164 <nrf_cc3xx_platform_set_mutexes>
    15de:	bf00      	nop
    15e0:	20000434 	.word	0x20000434
    15e4:	20000414 	.word	0x20000414
    15e8:	00008664 	.word	0x00008664
    15ec:	00008654 	.word	0x00008654

000015f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    15f0:	4901      	ldr	r1, [pc, #4]	; (15f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    15f2:	2210      	movs	r2, #16
	str	r2, [r1]
    15f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    15f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    15f8:	e000ed10 	.word	0xe000ed10

000015fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    15fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    15fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1600:	f380 8811 	msr	BASEPRI, r0
	isb
    1604:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1608:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    160c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    160e:	b662      	cpsie	i
	isb
    1610:	f3bf 8f6f 	isb	sy

	bx	lr
    1614:	4770      	bx	lr
    1616:	bf00      	nop

00001618 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1618:	b537      	push	{r0, r1, r2, r4, r5, lr}
    161a:	4605      	mov	r5, r0

	if (esf != NULL) {
    161c:	460c      	mov	r4, r1
    161e:	b1c9      	cbz	r1, 1654 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1620:	688b      	ldr	r3, [r1, #8]
    1622:	4810      	ldr	r0, [pc, #64]	; (1664 <z_arm_fatal_error+0x4c>)
    1624:	9300      	str	r3, [sp, #0]
    1626:	e9d1 2300 	ldrd	r2, r3, [r1]
    162a:	2145      	movs	r1, #69	; 0x45
    162c:	f006 fb06 	bl	7c3c <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1630:	6963      	ldr	r3, [r4, #20]
    1632:	2145      	movs	r1, #69	; 0x45
    1634:	9300      	str	r3, [sp, #0]
    1636:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    163a:	480b      	ldr	r0, [pc, #44]	; (1668 <z_arm_fatal_error+0x50>)
    163c:	f006 fafe 	bl	7c3c <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1640:	2145      	movs	r1, #69	; 0x45
    1642:	69e2      	ldr	r2, [r4, #28]
    1644:	4809      	ldr	r0, [pc, #36]	; (166c <z_arm_fatal_error+0x54>)
    1646:	f006 faf9 	bl	7c3c <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    164a:	2145      	movs	r1, #69	; 0x45
    164c:	69a2      	ldr	r2, [r4, #24]
    164e:	4808      	ldr	r0, [pc, #32]	; (1670 <z_arm_fatal_error+0x58>)
    1650:	f006 faf4 	bl	7c3c <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1654:	4621      	mov	r1, r4
    1656:	4628      	mov	r0, r5
}
    1658:	b003      	add	sp, #12
    165a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    165e:	f001 bd67 	b.w	3130 <z_fatal_error>
    1662:	bf00      	nop
    1664:	00008ced 	.word	0x00008ced
    1668:	00008d21 	.word	0x00008d21
    166c:	00008d55 	.word	0x00008d55
    1670:	00008d69 	.word	0x00008d69

00001674 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1674:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1676:	2b00      	cmp	r3, #0
    1678:	db08      	blt.n	168c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    167a:	2201      	movs	r2, #1
    167c:	f000 001f 	and.w	r0, r0, #31
    1680:	fa02 f000 	lsl.w	r0, r2, r0
    1684:	4a02      	ldr	r2, [pc, #8]	; (1690 <arch_irq_enable+0x1c>)
    1686:	095b      	lsrs	r3, r3, #5
    1688:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    168c:	4770      	bx	lr
    168e:	bf00      	nop
    1690:	e000e100 	.word	0xe000e100

00001694 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1694:	4b05      	ldr	r3, [pc, #20]	; (16ac <arch_irq_is_enabled+0x18>)
    1696:	0942      	lsrs	r2, r0, #5
    1698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    169c:	2301      	movs	r3, #1
    169e:	f000 001f 	and.w	r0, r0, #31
    16a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    16a6:	4010      	ands	r0, r2
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	e000e100 	.word	0xe000e100

000016b0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    16b0:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    16b2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    16b4:	2c07      	cmp	r4, #7
{
    16b6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    16b8:	d908      	bls.n	16cc <z_arm_irq_priority_set+0x1c>
    16ba:	490d      	ldr	r1, [pc, #52]	; (16f0 <z_arm_irq_priority_set+0x40>)
    16bc:	480d      	ldr	r0, [pc, #52]	; (16f4 <z_arm_irq_priority_set+0x44>)
    16be:	2259      	movs	r2, #89	; 0x59
    16c0:	f006 fa23 	bl	7b0a <printk>
    16c4:	2159      	movs	r1, #89	; 0x59
    16c6:	480a      	ldr	r0, [pc, #40]	; (16f0 <z_arm_irq_priority_set+0x40>)
    16c8:	f006 faa5 	bl	7c16 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    16cc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    16ce:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16d0:	bfac      	ite	ge
    16d2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16d6:	4b08      	ldrlt	r3, [pc, #32]	; (16f8 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16d8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    16dc:	b2e4      	uxtb	r4, r4
    16de:	bfab      	itete	ge
    16e0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16e4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16e8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16ec:	555c      	strblt	r4, [r3, r5]
}
    16ee:	bd38      	pop	{r3, r4, r5, pc}
    16f0:	00008d9c 	.word	0x00008d9c
    16f4:	00008951 	.word	0x00008951
    16f8:	e000ed14 	.word	0xe000ed14

000016fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    16fc:	bf30      	wfi
    b z_SysNmiOnReset
    16fe:	f7ff bffd 	b.w	16fc <z_SysNmiOnReset>
    1702:	bf00      	nop

00001704 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1704:	4a0b      	ldr	r2, [pc, #44]	; (1734 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1706:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1708:	4b0b      	ldr	r3, [pc, #44]	; (1738 <z_arm_prep_c+0x34>)
    170a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    170e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1714:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1718:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    171c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1724:	f001 fda4 	bl	3270 <z_bss_zero>
	z_data_copy();
    1728:	f003 f96c 	bl	4a04 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    172c:	f000 fb5a 	bl	1de4 <z_arm_interrupt_init>
	z_cstart();
    1730:	f001 fda8 	bl	3284 <z_cstart>
    1734:	00000000 	.word	0x00000000
    1738:	e000ed00 	.word	0xe000ed00

0000173c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    173c:	4a09      	ldr	r2, [pc, #36]	; (1764 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    173e:	490a      	ldr	r1, [pc, #40]	; (1768 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1740:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1742:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1744:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    1746:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1748:	4908      	ldr	r1, [pc, #32]	; (176c <arch_swap+0x30>)
    174a:	684b      	ldr	r3, [r1, #4]
    174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1750:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1752:	2300      	movs	r3, #0
    1754:	f383 8811 	msr	BASEPRI, r3
    1758:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    175c:	6893      	ldr	r3, [r2, #8]
}
    175e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1760:	4770      	bx	lr
    1762:	bf00      	nop
    1764:	200009c4 	.word	0x200009c4
    1768:	00008758 	.word	0x00008758
    176c:	e000ed00 	.word	0xe000ed00

00001770 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1770:	4913      	ldr	r1, [pc, #76]	; (17c0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1772:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1774:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1778:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    177a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    177e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1782:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1784:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1788:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    178c:	4f0d      	ldr	r7, [pc, #52]	; (17c4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    178e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1792:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1794:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1796:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1798:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    179a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    179c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    179e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    17a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    17a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    17aa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    17ae:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    17b2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    17b4:	f006 fa96 	bl	7ce4 <configure_builtin_stack_guard>
    pop {r2, lr}
    17b8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    17bc:	4770      	bx	lr
    17be:	0000      	.short	0x0000
    ldr r1, =_kernel
    17c0:	200009c4 	.word	0x200009c4
    ldr v4, =_SCS_ICSR
    17c4:	e000ed04 	.word	0xe000ed04

000017c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    17c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    17cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    17ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    17d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    17d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    17d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    17dc:	2902      	cmp	r1, #2
    beq _oops
    17de:	d0ff      	beq.n	17e0 <_oops>

000017e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    17e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    17e2:	f006 fa41 	bl	7c68 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    17e6:	bd01      	pop	{r0, pc}

000017e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    17e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    17ec:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    17ee:	490b      	ldr	r1, [pc, #44]	; (181c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    17f0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    17f4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    17f6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    17fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    17fe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1800:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1804:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    180c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1810:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1812:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1814:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1816:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1818:	4770      	bx	lr
    181a:	bf00      	nop
    181c:	00007b4b 	.word	0x00007b4b

00001820 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1820:	4b08      	ldr	r3, [pc, #32]	; (1844 <arch_switch_to_main_thread+0x24>)
    1822:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1824:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1826:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    182a:	4610      	mov	r0, r2
    182c:	f381 8809 	msr	PSP, r1
    1830:	2100      	movs	r1, #0
    1832:	b663      	cpsie	if
    1834:	f381 8811 	msr	BASEPRI, r1
    1838:	f3bf 8f6f 	isb	sy
    183c:	2200      	movs	r2, #0
    183e:	2300      	movs	r3, #0
    1840:	f006 f983 	bl	7b4a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1844:	200009c4 	.word	0x200009c4

00001848 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1848:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    184a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    184c:	4a0b      	ldr	r2, [pc, #44]	; (187c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    184e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1850:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1852:	bf1e      	ittt	ne
	movne	r1, #0
    1854:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1856:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1858:	f006 fc82 	blne	8160 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    185c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    185e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1862:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1866:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    186a:	4905      	ldr	r1, [pc, #20]	; (1880 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    186c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    186e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1870:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1872:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1876:	4903      	ldr	r1, [pc, #12]	; (1884 <_isr_wrapper+0x3c>)
	bx r1
    1878:	4708      	bx	r1
    187a:	0000      	.short	0x0000
	ldr r2, =_kernel
    187c:	200009c4 	.word	0x200009c4
	ldr r1, =_sw_isr_table
    1880:	0000829c 	.word	0x0000829c
	ldr r1, =z_arm_int_exit
    1884:	00001889 	.word	0x00001889

00001888 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    188a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    188c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    188e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1890:	d003      	beq.n	189a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1892:	4903      	ldr	r1, [pc, #12]	; (18a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1898:	600a      	str	r2, [r1, #0]

0000189a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    189a:	4770      	bx	lr
	ldr r3, =_kernel
    189c:	200009c4 	.word	0x200009c4
	ldr r1, =_SCS_ICSR
    18a0:	e000ed04 	.word	0xe000ed04

000018a4 <secure_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    18a4:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    18a6:	4c24      	ldr	r4, [pc, #144]	; (1938 <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    18a8:	4824      	ldr	r0, [pc, #144]	; (193c <secure_fault.constprop.0+0x98>)
    18aa:	2145      	movs	r1, #69	; 0x45
    18ac:	f006 f9c6 	bl	7c3c <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    18b0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    18b4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    18b8:	0658      	lsls	r0, r3, #25
    18ba:	d503      	bpl.n	18c4 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
    18bc:	2145      	movs	r1, #69	; 0x45
    18be:	4820      	ldr	r0, [pc, #128]	; (1940 <secure_fault.constprop.0+0x9c>)
    18c0:	f006 f9bc 	bl	7c3c <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    18c4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    18c8:	07d9      	lsls	r1, r3, #31
    18ca:	d50b      	bpl.n	18e4 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
    18cc:	2145      	movs	r1, #69	; 0x45
    18ce:	481d      	ldr	r0, [pc, #116]	; (1944 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    18d0:	f006 f9b4 	bl	7c3c <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    18d4:	4a18      	ldr	r2, [pc, #96]	; (1938 <secure_fault.constprop.0+0x94>)
    18d6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    18da:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    18de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
    18e2:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    18e4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    18e8:	079a      	lsls	r2, r3, #30
    18ea:	d502      	bpl.n	18f2 <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
    18ec:	2145      	movs	r1, #69	; 0x45
    18ee:	4816      	ldr	r0, [pc, #88]	; (1948 <secure_fault.constprop.0+0xa4>)
    18f0:	e7ee      	b.n	18d0 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    18f2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    18f6:	075b      	lsls	r3, r3, #29
    18f8:	d502      	bpl.n	1900 <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
    18fa:	2145      	movs	r1, #69	; 0x45
    18fc:	4813      	ldr	r0, [pc, #76]	; (194c <secure_fault.constprop.0+0xa8>)
    18fe:	e7e7      	b.n	18d0 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1900:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1904:	0718      	lsls	r0, r3, #28
    1906:	d502      	bpl.n	190e <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
    1908:	2145      	movs	r1, #69	; 0x45
    190a:	4811      	ldr	r0, [pc, #68]	; (1950 <secure_fault.constprop.0+0xac>)
    190c:	e7e0      	b.n	18d0 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    190e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1912:	06d9      	lsls	r1, r3, #27
    1914:	d502      	bpl.n	191c <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
    1916:	2145      	movs	r1, #69	; 0x45
    1918:	480e      	ldr	r0, [pc, #56]	; (1954 <secure_fault.constprop.0+0xb0>)
    191a:	e7d9      	b.n	18d0 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    191c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1920:	069a      	lsls	r2, r3, #26
    1922:	d502      	bpl.n	192a <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
    1924:	2145      	movs	r1, #69	; 0x45
    1926:	480c      	ldr	r0, [pc, #48]	; (1958 <secure_fault.constprop.0+0xb4>)
    1928:	e7d2      	b.n	18d0 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    192a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    192e:	061b      	lsls	r3, r3, #24
    1930:	d5d0      	bpl.n	18d4 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
    1932:	2145      	movs	r1, #69	; 0x45
    1934:	4809      	ldr	r0, [pc, #36]	; (195c <secure_fault.constprop.0+0xb8>)
    1936:	e7cb      	b.n	18d0 <secure_fault.constprop.0+0x2c>
    1938:	e000ed00 	.word	0xe000ed00
    193c:	00008dd2 	.word	0x00008dd2
    1940:	00008df0 	.word	0x00008df0
    1944:	00008e05 	.word	0x00008e05
    1948:	00008e20 	.word	0x00008e20
    194c:	00008e43 	.word	0x00008e43
    1950:	00008e63 	.word	0x00008e63
    1954:	00008e85 	.word	0x00008e85
    1958:	00008e9f 	.word	0x00008e9f
    195c:	00008ebe 	.word	0x00008ebe

00001960 <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1960:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1962:	4c21      	ldr	r4, [pc, #132]	; (19e8 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1964:	2145      	movs	r1, #69	; 0x45
    1966:	4821      	ldr	r0, [pc, #132]	; (19ec <usage_fault.constprop.0+0x8c>)
    1968:	f006 f968 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    196c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    196e:	019d      	lsls	r5, r3, #6
    1970:	d503      	bpl.n	197a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1972:	2145      	movs	r1, #69	; 0x45
    1974:	481e      	ldr	r0, [pc, #120]	; (19f0 <usage_fault.constprop.0+0x90>)
    1976:	f006 f961 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    197a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    197c:	01dc      	lsls	r4, r3, #7
    197e:	d503      	bpl.n	1988 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1980:	2145      	movs	r1, #69	; 0x45
    1982:	481c      	ldr	r0, [pc, #112]	; (19f4 <usage_fault.constprop.0+0x94>)
    1984:	f006 f95a 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1988:	4d17      	ldr	r5, [pc, #92]	; (19e8 <usage_fault.constprop.0+0x88>)
    198a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    198c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1990:	d004      	beq.n	199c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1992:	2145      	movs	r1, #69	; 0x45
    1994:	4818      	ldr	r0, [pc, #96]	; (19f8 <usage_fault.constprop.0+0x98>)
    1996:	f006 f951 	bl	7c3c <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
    199a:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    199c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    199e:	0318      	lsls	r0, r3, #12
    19a0:	d503      	bpl.n	19aa <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    19a2:	2145      	movs	r1, #69	; 0x45
    19a4:	4815      	ldr	r0, [pc, #84]	; (19fc <usage_fault.constprop.0+0x9c>)
    19a6:	f006 f949 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    19aa:	4d0f      	ldr	r5, [pc, #60]	; (19e8 <usage_fault.constprop.0+0x88>)
    19ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19ae:	0359      	lsls	r1, r3, #13
    19b0:	d503      	bpl.n	19ba <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    19b2:	2145      	movs	r1, #69	; 0x45
    19b4:	4812      	ldr	r0, [pc, #72]	; (1a00 <usage_fault.constprop.0+0xa0>)
    19b6:	f006 f941 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    19ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19bc:	039a      	lsls	r2, r3, #14
    19be:	d503      	bpl.n	19c8 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    19c0:	2145      	movs	r1, #69	; 0x45
    19c2:	4810      	ldr	r0, [pc, #64]	; (1a04 <usage_fault.constprop.0+0xa4>)
    19c4:	f006 f93a 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    19c8:	4d07      	ldr	r5, [pc, #28]	; (19e8 <usage_fault.constprop.0+0x88>)
    19ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19cc:	03db      	lsls	r3, r3, #15
    19ce:	d503      	bpl.n	19d8 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    19d0:	2145      	movs	r1, #69	; 0x45
    19d2:	480d      	ldr	r0, [pc, #52]	; (1a08 <usage_fault.constprop.0+0xa8>)
    19d4:	f006 f932 	bl	7c3c <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    19d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
    19da:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    19dc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    19e0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    19e4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    19e6:	bd38      	pop	{r3, r4, r5, pc}
    19e8:	e000ed00 	.word	0xe000ed00
    19ec:	00008ed6 	.word	0x00008ed6
    19f0:	00008ef3 	.word	0x00008ef3
    19f4:	00008f0b 	.word	0x00008f0b
    19f8:	00008f2a 	.word	0x00008f2a
    19fc:	00008f59 	.word	0x00008f59
    1a00:	00008f7c 	.word	0x00008f7c
    1a04:	00008fa6 	.word	0x00008fa6
    1a08:	00008fc5 	.word	0x00008fc5

00001a0c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1a0c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a0e:	4c23      	ldr	r4, [pc, #140]	; (1a9c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1a10:	4606      	mov	r6, r0
    1a12:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1a14:	4822      	ldr	r0, [pc, #136]	; (1aa0 <bus_fault.constprop.0+0x94>)
    1a16:	2145      	movs	r1, #69	; 0x45
    1a18:	f006 f910 	bl	7c3c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a1e:	04d9      	lsls	r1, r3, #19
    1a20:	d503      	bpl.n	1a2a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1a22:	2145      	movs	r1, #69	; 0x45
    1a24:	481f      	ldr	r0, [pc, #124]	; (1aa4 <bus_fault.constprop.0+0x98>)
    1a26:	f006 f909 	bl	7c3c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a2c:	051a      	lsls	r2, r3, #20
    1a2e:	d503      	bpl.n	1a38 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1a30:	2145      	movs	r1, #69	; 0x45
    1a32:	481d      	ldr	r0, [pc, #116]	; (1aa8 <bus_fault.constprop.0+0x9c>)
    1a34:	f006 f902 	bl	7c3c <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a38:	4c18      	ldr	r4, [pc, #96]	; (1a9c <bus_fault.constprop.0+0x90>)
    1a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a3c:	059b      	lsls	r3, r3, #22
    1a3e:	d510      	bpl.n	1a62 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1a40:	481a      	ldr	r0, [pc, #104]	; (1aac <bus_fault.constprop.0+0xa0>)
    1a42:	2145      	movs	r1, #69	; 0x45
    1a44:	f006 f8fa 	bl	7c3c <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1a48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a4c:	0418      	lsls	r0, r3, #16
    1a4e:	d508      	bpl.n	1a62 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a50:	2145      	movs	r1, #69	; 0x45
    1a52:	4817      	ldr	r0, [pc, #92]	; (1ab0 <bus_fault.constprop.0+0xa4>)
    1a54:	f006 f8f2 	bl	7c3c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1a58:	b11e      	cbz	r6, 1a62 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a60:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a62:	4c0e      	ldr	r4, [pc, #56]	; (1a9c <bus_fault.constprop.0+0x90>)
    1a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a66:	0559      	lsls	r1, r3, #21
    1a68:	d503      	bpl.n	1a72 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a6a:	2145      	movs	r1, #69	; 0x45
    1a6c:	4811      	ldr	r0, [pc, #68]	; (1ab4 <bus_fault.constprop.0+0xa8>)
    1a6e:	f006 f8e5 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a74:	05da      	lsls	r2, r3, #23
    1a76:	d50b      	bpl.n	1a90 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1a78:	2145      	movs	r1, #69	; 0x45
    1a7a:	480f      	ldr	r0, [pc, #60]	; (1ab8 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a7c:	f006 f8de 	bl	7c3c <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    1a80:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a82:	4a06      	ldr	r2, [pc, #24]	; (1a9c <bus_fault.constprop.0+0x90>)
    1a84:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a86:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a8a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1a8c:	7028      	strb	r0, [r5, #0]
}
    1a8e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a92:	049b      	lsls	r3, r3, #18
    1a94:	d5f4      	bpl.n	1a80 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a96:	2145      	movs	r1, #69	; 0x45
    1a98:	4808      	ldr	r0, [pc, #32]	; (1abc <bus_fault.constprop.0+0xb0>)
    1a9a:	e7ef      	b.n	1a7c <bus_fault.constprop.0+0x70>
    1a9c:	e000ed00 	.word	0xe000ed00
    1aa0:	00008ff5 	.word	0x00008ff5
    1aa4:	00009010 	.word	0x00009010
    1aa8:	00009026 	.word	0x00009026
    1aac:	0000903e 	.word	0x0000903e
    1ab0:	0000905c 	.word	0x0000905c
    1ab4:	00009076 	.word	0x00009076
    1ab8:	00009096 	.word	0x00009096
    1abc:	000090b3 	.word	0x000090b3

00001ac0 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1ac0:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ac2:	4c2b      	ldr	r4, [pc, #172]	; (1b70 <mem_manage_fault.constprop.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1ac4:	4606      	mov	r6, r0
    1ac6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1ac8:	482a      	ldr	r0, [pc, #168]	; (1b74 <mem_manage_fault.constprop.0+0xb4>)
    1aca:	2145      	movs	r1, #69	; 0x45
    1acc:	f006 f8b6 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ad2:	06d8      	lsls	r0, r3, #27
    1ad4:	d503      	bpl.n	1ade <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1ad6:	2145      	movs	r1, #69	; 0x45
    1ad8:	4827      	ldr	r0, [pc, #156]	; (1b78 <mem_manage_fault.constprop.0+0xb8>)
    1ada:	f006 f8af 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ae0:	0719      	lsls	r1, r3, #28
    1ae2:	d503      	bpl.n	1aec <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1ae4:	2145      	movs	r1, #69	; 0x45
    1ae6:	4825      	ldr	r0, [pc, #148]	; (1b7c <mem_manage_fault.constprop.0+0xbc>)
    1ae8:	f006 f8a8 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1aec:	4c20      	ldr	r4, [pc, #128]	; (1b70 <mem_manage_fault.constprop.0+0xb0>)
    1aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1af0:	079a      	lsls	r2, r3, #30
    1af2:	d510      	bpl.n	1b16 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1af4:	2145      	movs	r1, #69	; 0x45
    1af6:	4822      	ldr	r0, [pc, #136]	; (1b80 <mem_manage_fault.constprop.0+0xc0>)
    1af8:	f006 f8a0 	bl	7c3c <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1afc:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b00:	061b      	lsls	r3, r3, #24
    1b02:	d508      	bpl.n	1b16 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1b04:	2145      	movs	r1, #69	; 0x45
    1b06:	481f      	ldr	r0, [pc, #124]	; (1b84 <mem_manage_fault.constprop.0+0xc4>)
    1b08:	f006 f898 	bl	7c3c <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1b0c:	b11e      	cbz	r6, 1b16 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1b14:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1b16:	4c16      	ldr	r4, [pc, #88]	; (1b70 <mem_manage_fault.constprop.0+0xb0>)
    1b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b1a:	07de      	lsls	r6, r3, #31
    1b1c:	d503      	bpl.n	1b26 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    1b1e:	2145      	movs	r1, #69	; 0x45
    1b20:	4819      	ldr	r0, [pc, #100]	; (1b88 <mem_manage_fault.constprop.0+0xc8>)
    1b22:	f006 f88b 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b28:	0698      	lsls	r0, r3, #26
    1b2a:	d503      	bpl.n	1b34 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    1b2c:	2145      	movs	r1, #69	; 0x45
    1b2e:	4817      	ldr	r0, [pc, #92]	; (1b8c <mem_manage_fault.constprop.0+0xcc>)
    1b30:	f006 f884 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b34:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <mem_manage_fault.constprop.0+0xb0>)
    1b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b38:	06d1      	lsls	r1, r2, #27
    1b3a:	d402      	bmi.n	1b42 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b3e:	0792      	lsls	r2, r2, #30
    1b40:	d50d      	bpl.n	1b5e <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b44:	06db      	lsls	r3, r3, #27
    1b46:	d50a      	bpl.n	1b5e <mem_manage_fault.constprop.0+0x9e>
    1b48:	4911      	ldr	r1, [pc, #68]	; (1b90 <mem_manage_fault.constprop.0+0xd0>)
    1b4a:	4812      	ldr	r0, [pc, #72]	; (1b94 <mem_manage_fault.constprop.0+0xd4>)
    1b4c:	f240 124f 	movw	r2, #335	; 0x14f
    1b50:	f005 ffdb 	bl	7b0a <printk>
    1b54:	f240 114f 	movw	r1, #335	; 0x14f
    1b58:	480d      	ldr	r0, [pc, #52]	; (1b90 <mem_manage_fault.constprop.0+0xd0>)
    1b5a:	f006 f85c 	bl	7c16 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
    1b5e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1b60:	4a03      	ldr	r2, [pc, #12]	; (1b70 <mem_manage_fault.constprop.0+0xb0>)
    1b62:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b68:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1b6a:	7028      	strb	r0, [r5, #0]
}
    1b6c:	bd70      	pop	{r4, r5, r6, pc}
    1b6e:	bf00      	nop
    1b70:	e000ed00 	.word	0xe000ed00
    1b74:	000090e7 	.word	0x000090e7
    1b78:	00009102 	.word	0x00009102
    1b7c:	00009026 	.word	0x00009026
    1b80:	0000913a 	.word	0x0000913a
    1b84:	00009157 	.word	0x00009157
    1b88:	00009172 	.word	0x00009172
    1b8c:	000090b3 	.word	0x000090b3
    1b90:	00009196 	.word	0x00009196
    1b94:	00008951 	.word	0x00008951

00001b98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b9c:	4b78      	ldr	r3, [pc, #480]	; (1d80 <z_arm_fault+0x1e8>)
{
    1b9e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ba0:	685c      	ldr	r4, [r3, #4]
    1ba2:	2600      	movs	r6, #0
{
    1ba4:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ba6:	f3c4 0708 	ubfx	r7, r4, #0, #9
    1baa:	f386 8811 	msr	BASEPRI, r6
    1bae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1bb2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1bb6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1bba:	d11e      	bne.n	1bfa <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1bbc:	f012 0301 	ands.w	r3, r2, #1
    1bc0:	d039      	beq.n	1c36 <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1bc2:	f012 0340 	ands.w	r3, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1bc6:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1bca:	f040 80d1 	bne.w	1d70 <z_arm_fault+0x1d8>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1bce:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    1bd0:	bf54      	ite	pl
    1bd2:	4605      	movpl	r5, r0
	*nested_exc = false;
    1bd4:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1bd6:	682a      	ldr	r2, [r5, #0]
    1bd8:	4b6a      	ldr	r3, [pc, #424]	; (1d84 <z_arm_fault+0x1ec>)
			*nested_exc = true;
    1bda:	bf58      	it	pl
    1bdc:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1bde:	4413      	add	r3, r2
    1be0:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    1be2:	bf98      	it	ls
    1be4:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    1be6:	2145      	movs	r1, #69	; 0x45
    1be8:	4867      	ldr	r0, [pc, #412]	; (1d88 <z_arm_fault+0x1f0>)
    1bea:	f006 f827 	bl	7c3c <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1bee:	f1b8 0f00 	cmp.w	r8, #0
    1bf2:	d01d      	beq.n	1c30 <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1bf4:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1bf8:	b95d      	cbnz	r5, 1c12 <z_arm_fault+0x7a>
    1bfa:	f240 32f2 	movw	r2, #1010	; 0x3f2
    1bfe:	4963      	ldr	r1, [pc, #396]	; (1d8c <z_arm_fault+0x1f4>)
    1c00:	4863      	ldr	r0, [pc, #396]	; (1d90 <z_arm_fault+0x1f8>)
    1c02:	f005 ff82 	bl	7b0a <printk>
    1c06:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1c0a:	4860      	ldr	r0, [pc, #384]	; (1d8c <z_arm_fault+0x1f4>)
    1c0c:	f006 f803 	bl	7c16 <assert_post_action>
    1c10:	2500      	movs	r5, #0
	*recoverable = false;
    1c12:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1c16:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    1c18:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1c1c:	2b09      	cmp	r3, #9
    1c1e:	f200 8095 	bhi.w	1d4c <z_arm_fault+0x1b4>
    1c22:	e8df f003 	tbb	[pc, r3]
    1c26:	840a      	.short	0x840a
    1c28:	938c6688 	.word	0x938c6688
    1c2c:	90939393 	.word	0x90939393
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1c30:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    1c34:	e7e0      	b.n	1bf8 <z_arm_fault+0x60>
	*nested_exc = false;
    1c36:	461e      	mov	r6, r3
    1c38:	e7df      	b.n	1bfa <z_arm_fault+0x62>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c3a:	4f51      	ldr	r7, [pc, #324]	; (1d80 <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1c3c:	2145      	movs	r1, #69	; 0x45
    1c3e:	4855      	ldr	r0, [pc, #340]	; (1d94 <z_arm_fault+0x1fc>)
    1c40:	f005 fffc 	bl	7c3c <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c44:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
    1c46:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c4a:	f014 0402 	ands.w	r4, r4, #2
    1c4e:	d004      	beq.n	1c5a <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    1c50:	2145      	movs	r1, #69	; 0x45
    1c52:	4851      	ldr	r0, [pc, #324]	; (1d98 <z_arm_fault+0x200>)
	PR_FAULT_INFO(
    1c54:	f005 fff2 	bl	7c3c <z_log_minimal_printk>
    1c58:	e073      	b.n	1d42 <z_arm_fault+0x1aa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	da1d      	bge.n	1c9c <z_arm_fault+0x104>
		PR_EXC("  Debug event");
    1c60:	2145      	movs	r1, #69	; 0x45
    1c62:	484e      	ldr	r0, [pc, #312]	; (1d9c <z_arm_fault+0x204>)
    1c64:	f005 ffea 	bl	7c3c <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1c68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c6c:	b99b      	cbnz	r3, 1c96 <z_arm_fault+0xfe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c6e:	2220      	movs	r2, #32
    1c70:	4629      	mov	r1, r5
    1c72:	a802      	add	r0, sp, #8
    1c74:	f006 f881 	bl	7d7a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c7a:	2e00      	cmp	r6, #0
    1c7c:	d073      	beq.n	1d66 <z_arm_fault+0x1ce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c82:	b922      	cbnz	r2, 1c8e <z_arm_fault+0xf6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c84:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c88:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c8c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c8e:	4620      	mov	r0, r4
    1c90:	a902      	add	r1, sp, #8
    1c92:	f7ff fcc1 	bl	1618 <z_arm_fatal_error>
}
    1c96:	b00a      	add	sp, #40	; 0x28
    1c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c9e:	005b      	lsls	r3, r3, #1
    1ca0:	d53c      	bpl.n	1d1c <z_arm_fault+0x184>
		PR_EXC("  Fault escalation (see below)");
    1ca2:	2145      	movs	r1, #69	; 0x45
    1ca4:	483e      	ldr	r0, [pc, #248]	; (1da0 <z_arm_fault+0x208>)
    1ca6:	f005 ffc9 	bl	7c3c <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1caa:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cac:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1cb0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d106      	bne.n	1cc6 <z_arm_fault+0x12e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1cb8:	2145      	movs	r1, #69	; 0x45
    1cba:	682a      	ldr	r2, [r5, #0]
    1cbc:	4839      	ldr	r0, [pc, #228]	; (1da4 <z_arm_fault+0x20c>)
    1cbe:	f005 ffbd 	bl	7c3c <z_log_minimal_printk>
			reason = esf->basic.r0;
    1cc2:	682c      	ldr	r4, [r5, #0]
    1cc4:	e7d0      	b.n	1c68 <z_arm_fault+0xd0>
		} else if (SCB_MMFSR != 0) {
    1cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1cca:	b133      	cbz	r3, 1cda <z_arm_fault+0x142>
			reason = mem_manage_fault(esf, 1, recoverable);
    1ccc:	2001      	movs	r0, #1
    1cce:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1cd2:	f7ff fef5 	bl	1ac0 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    1cd6:	4604      	mov	r4, r0
		break;
    1cd8:	e7c6      	b.n	1c68 <z_arm_fault+0xd0>
		} else if (SCB_BFSR != 0) {
    1cda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    1cde:	b12b      	cbz	r3, 1cec <z_arm_fault+0x154>
			reason = bus_fault(esf, 1, recoverable);
    1ce0:	2001      	movs	r0, #1
    1ce2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1ce6:	f7ff fe91 	bl	1a0c <bus_fault.constprop.0>
    1cea:	e7f4      	b.n	1cd6 <z_arm_fault+0x13e>
		} else if (SCB_UFSR != 0) {
    1cec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    1cee:	b29b      	uxth	r3, r3
    1cf0:	b113      	cbz	r3, 1cf8 <z_arm_fault+0x160>
		reason = usage_fault(esf);
    1cf2:	f7ff fe35 	bl	1960 <usage_fault.constprop.0>
    1cf6:	e7ee      	b.n	1cd6 <z_arm_fault+0x13e>
		} else if (SAU->SFSR != 0) {
    1cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1cfc:	b113      	cbz	r3, 1d04 <z_arm_fault+0x16c>
			secure_fault(esf);
    1cfe:	f7ff fdd1 	bl	18a4 <secure_fault.constprop.0>
    1d02:	e7b1      	b.n	1c68 <z_arm_fault+0xd0>
			__ASSERT(0,
    1d04:	4921      	ldr	r1, [pc, #132]	; (1d8c <z_arm_fault+0x1f4>)
    1d06:	f240 22c3 	movw	r2, #707	; 0x2c3
    1d0a:	4821      	ldr	r0, [pc, #132]	; (1d90 <z_arm_fault+0x1f8>)
    1d0c:	f005 fefd 	bl	7b0a <printk>
    1d10:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1d14:	481d      	ldr	r0, [pc, #116]	; (1d8c <z_arm_fault+0x1f4>)
    1d16:	f005 ff7e 	bl	7c16 <assert_post_action>
    1d1a:	e7a5      	b.n	1c68 <z_arm_fault+0xd0>
    1d1c:	491b      	ldr	r1, [pc, #108]	; (1d8c <z_arm_fault+0x1f4>)
    1d1e:	f240 22c7 	movw	r2, #711	; 0x2c7
    1d22:	481b      	ldr	r0, [pc, #108]	; (1d90 <z_arm_fault+0x1f8>)
    1d24:	f005 fef1 	bl	7b0a <printk>
    1d28:	f240 21c7 	movw	r1, #711	; 0x2c7
    1d2c:	e7f2      	b.n	1d14 <z_arm_fault+0x17c>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d2e:	2000      	movs	r0, #0
    1d30:	f10d 0107 	add.w	r1, sp, #7
    1d34:	e7cd      	b.n	1cd2 <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
    1d36:	2000      	movs	r0, #0
    1d38:	f10d 0107 	add.w	r1, sp, #7
    1d3c:	e7d3      	b.n	1ce6 <z_arm_fault+0x14e>
		secure_fault(esf);
    1d3e:	f7ff fdb1 	bl	18a4 <secure_fault.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d42:	2400      	movs	r4, #0
}
    1d44:	e790      	b.n	1c68 <z_arm_fault+0xd0>
	PR_FAULT_INFO(
    1d46:	2145      	movs	r1, #69	; 0x45
    1d48:	4817      	ldr	r0, [pc, #92]	; (1da8 <z_arm_fault+0x210>)
    1d4a:	e783      	b.n	1c54 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    1d4c:	4917      	ldr	r1, [pc, #92]	; (1dac <z_arm_fault+0x214>)
    1d4e:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    1d52:	4a17      	ldr	r2, [pc, #92]	; (1db0 <z_arm_fault+0x218>)
    1d54:	4817      	ldr	r0, [pc, #92]	; (1db4 <z_arm_fault+0x21c>)
    1d56:	bf08      	it	eq
    1d58:	460a      	moveq	r2, r1
    1d5a:	f1a7 0310 	sub.w	r3, r7, #16
    1d5e:	2145      	movs	r1, #69	; 0x45
    1d60:	f005 ff6c 	bl	7c3c <z_log_minimal_printk>
    1d64:	e7ed      	b.n	1d42 <z_arm_fault+0x1aa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1d6a:	f023 0301 	bic.w	r3, r3, #1
    1d6e:	e78d      	b.n	1c8c <z_arm_fault+0xf4>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1d70:	f1b8 0f00 	cmp.w	r8, #0
    1d74:	f47f af40 	bne.w	1bf8 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    1d78:	4605      	mov	r5, r0
			*nested_exc = true;
    1d7a:	2601      	movs	r6, #1
    1d7c:	e73c      	b.n	1bf8 <z_arm_fault+0x60>
    1d7e:	bf00      	nop
    1d80:	e000ed00 	.word	0xe000ed00
    1d84:	0105eda6 	.word	0x0105eda6
    1d88:	000091fe 	.word	0x000091fe
    1d8c:	00009196 	.word	0x00009196
    1d90:	00008951 	.word	0x00008951
    1d94:	00009222 	.word	0x00009222
    1d98:	0000923e 	.word	0x0000923e
    1d9c:	00009264 	.word	0x00009264
    1da0:	00009277 	.word	0x00009277
    1da4:	0000929b 	.word	0x0000929b
    1da8:	000092bc 	.word	0x000092bc
    1dac:	000091d0 	.word	0x000091d0
    1db0:	000091e5 	.word	0x000091e5
    1db4:	000092e5 	.word	0x000092e5

00001db8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1db8:	4b04      	ldr	r3, [pc, #16]	; (1dcc <z_arm_fault_init+0x14>)
    1dba:	695a      	ldr	r2, [r3, #20]
    1dbc:	f042 0210 	orr.w	r2, r2, #16
    1dc0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1dc2:	695a      	ldr	r2, [r3, #20]
    1dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1dc8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1dca:	4770      	bx	lr
    1dcc:	e000ed00 	.word	0xe000ed00

00001dd0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1dd0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1dd4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1dd8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1dda:	4672      	mov	r2, lr
	bl z_arm_fault
    1ddc:	f7ff fedc 	bl	1b98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1de0:	bd01      	pop	{r0, pc}
    1de2:	bf00      	nop

00001de4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1de4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1de6:	2120      	movs	r1, #32
    1de8:	4803      	ldr	r0, [pc, #12]	; (1df8 <z_arm_interrupt_init+0x14>)
    1dea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1dec:	3301      	adds	r3, #1
    1dee:	2b41      	cmp	r3, #65	; 0x41
    1df0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1df4:	d1f9      	bne.n	1dea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1df6:	4770      	bx	lr
    1df8:	e000e100 	.word	0xe000e100

00001dfc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1dfc:	2000      	movs	r0, #0
    msr CONTROL, r0
    1dfe:	f380 8814 	msr	CONTROL, r0
    isb
    1e02:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1e06:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1e08:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1e0c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1e10:	f006 f9e2 	bl	81d8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1e14:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1e16:	490e      	ldr	r1, [pc, #56]	; (1e50 <__start+0x54>)
    str r0, [r1]
    1e18:	6008      	str	r0, [r1, #0]
    dsb
    1e1a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e1e:	480d      	ldr	r0, [pc, #52]	; (1e54 <__start+0x58>)
    msr msp, r0
    1e20:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1e24:	f000 f83e 	bl	1ea4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e28:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e2a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e2e:	480a      	ldr	r0, [pc, #40]	; (1e58 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e34:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e36:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e3a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e3e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1e40:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1e42:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1e46:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1e4a:	f7ff fc5b 	bl	1704 <z_arm_prep_c>
    1e4e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1e50:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e54:	200025a8 	.word	0x200025a8
    ldr r0, =z_interrupt_stacks
    1e58:	200026e8 	.word	0x200026e8

00001e5c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1e5c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1e60:	4905      	ldr	r1, [pc, #20]	; (1e78 <sys_arch_reboot+0x1c>)
    1e62:	4b06      	ldr	r3, [pc, #24]	; (1e7c <sys_arch_reboot+0x20>)
    1e64:	68ca      	ldr	r2, [r1, #12]
    1e66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1e6a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1e6c:	60cb      	str	r3, [r1, #12]
    1e6e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1e72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1e74:	e7fd      	b.n	1e72 <sys_arch_reboot+0x16>
    1e76:	bf00      	nop
    1e78:	e000ed00 	.word	0xe000ed00
    1e7c:	05fa0004 	.word	0x05fa0004

00001e80 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1e80:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1e82:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1e84:	4906      	ldr	r1, [pc, #24]	; (1ea0 <z_arm_clear_arm_mpu_config+0x20>)
    1e86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    1e8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    1e8e:	4293      	cmp	r3, r2
    1e90:	d100      	bne.n	1e94 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1e92:	4770      	bx	lr
  mpu->RNR = rnr;
    1e94:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1e98:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1e9c:	3301      	adds	r3, #1
    1e9e:	e7f6      	b.n	1e8e <z_arm_clear_arm_mpu_config+0xe>
    1ea0:	e000ed00 	.word	0xe000ed00

00001ea4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1ea4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1ea6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1ea8:	2400      	movs	r4, #0
    1eaa:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1eae:	f7ff ffe7 	bl	1e80 <z_arm_clear_arm_mpu_config>
    1eb2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1eb8:	4a0b      	ldr	r2, [pc, #44]	; (1ee8 <z_arm_init_arch_hw_at_boot+0x44>)
    1eba:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1ebe:	3301      	adds	r3, #1
    1ec0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1ec2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1ec6:	d1f8      	bne.n	1eba <z_arm_init_arch_hw_at_boot+0x16>
    1ec8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ece:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1ed2:	3301      	adds	r3, #1
    1ed4:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1ed6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1eda:	d1f8      	bne.n	1ece <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    1edc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ee2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1ee6:	bd10      	pop	{r4, pc}
    1ee8:	e000e100 	.word	0xe000e100

00001eec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1eec:	4b06      	ldr	r3, [pc, #24]	; (1f08 <z_impl_k_thread_abort+0x1c>)
    1eee:	689b      	ldr	r3, [r3, #8]
    1ef0:	4283      	cmp	r3, r0
    1ef2:	d107      	bne.n	1f04 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ef4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1ef8:	b123      	cbz	r3, 1f04 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1efa:	4a04      	ldr	r2, [pc, #16]	; (1f0c <z_impl_k_thread_abort+0x20>)
    1efc:	6853      	ldr	r3, [r2, #4]
    1efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1f02:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1f04:	f002 bcea 	b.w	48dc <z_thread_abort>
    1f08:	200009c4 	.word	0x200009c4
    1f0c:	e000ed00 	.word	0xe000ed00

00001f10 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1f10:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1f12:	4b0d      	ldr	r3, [pc, #52]	; (1f48 <tz_nonsecure_state_setup+0x38>)
    1f14:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1f16:	6803      	ldr	r3, [r0, #0]
    1f18:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1f1c:	6843      	ldr	r3, [r0, #4]
    1f1e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1f22:	7b02      	ldrb	r2, [r0, #12]
    1f24:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1f28:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1f2c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1f30:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1f32:	bf48      	it	mi
    1f34:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1f38:	b109      	cbz	r1, 1f3e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1f3a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1f3e:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    1f42:	f3bf 8f6f 	isb	sy
}
    1f46:	4770      	bx	lr
    1f48:	e002ed00 	.word	0xe002ed00

00001f4c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1f4c:	4a08      	ldr	r2, [pc, #32]	; (1f70 <tz_nbanked_exception_target_state_set+0x24>)
    1f4e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1f50:	b148      	cbz	r0, 1f66 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1f56:	041b      	lsls	r3, r3, #16
    1f58:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1f5a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1f62:	60d3      	str	r3, [r2, #12]
}
    1f64:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1f66:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1f6c:	e7f5      	b.n	1f5a <tz_nbanked_exception_target_state_set+0xe>
    1f6e:	bf00      	nop
    1f70:	e000ed00 	.word	0xe000ed00

00001f74 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1f74:	4a08      	ldr	r2, [pc, #32]	; (1f98 <tz_nonsecure_exception_prio_config+0x24>)
    1f76:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1f78:	b140      	cbz	r0, 1f8c <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1f7a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1f88:	60d3      	str	r3, [r2, #12]
}
    1f8a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1f90:	041b      	lsls	r3, r3, #16
    1f92:	0c1b      	lsrs	r3, r3, #16
    1f94:	e7f4      	b.n	1f80 <tz_nonsecure_exception_prio_config+0xc>
    1f96:	bf00      	nop
    1f98:	e000ed00 	.word	0xe000ed00

00001f9c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1f9c:	4a08      	ldr	r2, [pc, #32]	; (1fc0 <tz_nonsecure_system_reset_req_block+0x24>)
    1f9e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1fa0:	b140      	cbz	r0, 1fb4 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fa2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1fa4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1fb0:	60d3      	str	r3, [r2, #12]
}
    1fb2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1fb4:	f023 0308 	bic.w	r3, r3, #8
    1fb8:	041b      	lsls	r3, r3, #16
    1fba:	0c1b      	lsrs	r3, r3, #16
    1fbc:	e7f4      	b.n	1fa8 <tz_nonsecure_system_reset_req_block+0xc>
    1fbe:	bf00      	nop
    1fc0:	e000ed00 	.word	0xe000ed00

00001fc4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1fc4:	4a03      	ldr	r2, [pc, #12]	; (1fd4 <tz_nonsecure_fpu_access_enable+0x10>)
    1fc6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1fca:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1fd2:	4770      	bx	lr
    1fd4:	e000ed00 	.word	0xe000ed00

00001fd8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    1fd8:	4b0a      	ldr	r3, [pc, #40]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    1fda:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    1fde:	b120      	cbz	r0, 1fea <tz_sau_configure+0x12>
    1fe0:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1fe4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
    1fe8:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    1fea:	f022 0201 	bic.w	r2, r2, #1
    1fee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1ff2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
    1ff6:	b111      	cbz	r1, 1ffe <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1ff8:	f042 0202 	orr.w	r2, r2, #2
    1ffc:	e7f2      	b.n	1fe4 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1ffe:	f022 0202 	bic.w	r2, r2, #2
    2002:	e7ef      	b.n	1fe4 <tz_sau_configure+0xc>
    2004:	e000ed00 	.word	0xe000ed00

00002008 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    200a:	4c09      	ldr	r4, [pc, #36]	; (2030 <z_arm_configure_static_mpu_regions+0x28>)
    200c:	4a09      	ldr	r2, [pc, #36]	; (2034 <z_arm_configure_static_mpu_regions+0x2c>)
    200e:	4623      	mov	r3, r4
    2010:	2101      	movs	r1, #1
    2012:	4809      	ldr	r0, [pc, #36]	; (2038 <z_arm_configure_static_mpu_regions+0x30>)
    2014:	f000 f92e 	bl	2274 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2018:	2300      	movs	r3, #0
    201a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    201c:	4b07      	ldr	r3, [pc, #28]	; (203c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    201e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2020:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2022:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2024:	9301      	str	r3, [sp, #4]
    2026:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2028:	f000 f940 	bl	22ac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    202c:	b004      	add	sp, #16
    202e:	bd10      	pop	{r4, pc}
    2030:	20008000 	.word	0x20008000
    2034:	20000000 	.word	0x20000000
    2038:	00008678 	.word	0x00008678
    203c:	20000130 	.word	0x20000130

00002040 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2040:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2042:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2044:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2046:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    204a:	f004 031f 	and.w	r3, r4, #31
    204e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2050:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2052:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2054:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2058:	4905      	ldr	r1, [pc, #20]	; (2070 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    205a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    205e:	f043 0301 	orr.w	r3, r3, #1
    2062:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    2066:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    206a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    206e:	bd10      	pop	{r4, pc}
    2070:	e000ed00 	.word	0xe000ed00

00002074 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2074:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2076:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2078:	680c      	ldr	r4, [r1, #0]
{
    207a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    207c:	890a      	ldrh	r2, [r1, #8]
    207e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    2080:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2082:	3b01      	subs	r3, #1
    2084:	f024 041f 	bic.w	r4, r4, #31
    2088:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    208a:	f002 021f 	and.w	r2, r2, #31
    208e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2092:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2096:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2098:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    209a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    209e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    20a0:	d909      	bls.n	20b6 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    20a2:	4602      	mov	r2, r0
    20a4:	2145      	movs	r1, #69	; 0x45
    20a6:	4806      	ldr	r0, [pc, #24]	; (20c0 <mpu_configure_region+0x4c>)
    20a8:	f005 fdc8 	bl	7c3c <z_log_minimal_printk>
    20ac:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    20b0:	4620      	mov	r0, r4
    20b2:	b005      	add	sp, #20
    20b4:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    20b6:	4669      	mov	r1, sp
    20b8:	f7ff ffc2 	bl	2040 <region_init>
	return region_allocate_and_init(index,
    20bc:	e7f8      	b.n	20b0 <mpu_configure_region+0x3c>
    20be:	bf00      	nop
    20c0:	00009301 	.word	0x00009301

000020c4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    20c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20c8:	4689      	mov	r9, r1
    20ca:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    20cc:	4606      	mov	r6, r0
    20ce:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    20d2:	4d59      	ldr	r5, [pc, #356]	; (2238 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    20d4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    20d6:	45c8      	cmp	r8, r9
    20d8:	da27      	bge.n	212a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    20da:	f8d6 a004 	ldr.w	sl, [r6, #4]
    20de:	f1ba 0f00 	cmp.w	sl, #0
    20e2:	d045      	beq.n	2170 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    20e4:	f1ba 0f1f 	cmp.w	sl, #31
    20e8:	d918      	bls.n	211c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    20ea:	f01a 0f1f 	tst.w	sl, #31
    20ee:	d115      	bne.n	211c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    20f0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    20f4:	f01b 0f1f 	tst.w	fp, #31
    20f8:	d110      	bne.n	211c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    20fa:	4658      	mov	r0, fp
    20fc:	f005 fdf6 	bl	7cec <arm_cmse_mpu_region_get>
    2100:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2102:	eb0a 000b 	add.w	r0, sl, fp
    2106:	3801      	subs	r0, #1
    2108:	f005 fdf0 	bl	7cec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    210c:	4287      	cmp	r7, r0
    210e:	d010      	beq.n	2132 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    2110:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2114:	463a      	mov	r2, r7
    2116:	2145      	movs	r1, #69	; 0x45
    2118:	4848      	ldr	r0, [pc, #288]	; (223c <mpu_configure_regions_and_partition.constprop.0+0x178>)
    211a:	e002      	b.n	2122 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    211c:	4642      	mov	r2, r8
    211e:	2145      	movs	r1, #69	; 0x45
    2120:	4847      	ldr	r0, [pc, #284]	; (2240 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2122:	f005 fd8b 	bl	7c3c <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2126:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    212a:	4620      	mov	r0, r4
    212c:	b005      	add	sp, #20
    212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2132:	f117 0f16 	cmn.w	r7, #22
    2136:	d0ed      	beq.n	2114 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    2138:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    213a:	42bb      	cmp	r3, r7
    213c:	dbea      	blt.n	2114 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    213e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2142:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    2146:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    214a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    214e:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2152:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2156:	e9d6 3200 	ldrd	r3, r2, [r6]
    215a:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    215c:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    215e:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    2162:	d11d      	bne.n	21a0 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    2164:	45d3      	cmp	fp, sl
    2166:	d107      	bne.n	2178 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    2168:	4631      	mov	r1, r6
    216a:	b2f8      	uxtb	r0, r7
    216c:	f7ff ff82 	bl	2074 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2170:	f108 0801 	add.w	r8, r8, #1
    2174:	360c      	adds	r6, #12
    2176:	e7ae      	b.n	20d6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2178:	4631      	mov	r1, r6
	MPU->RNR = index;
    217a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    217e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    2182:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2186:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    218a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    218c:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    2190:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2192:	f7ff ff6f 	bl	2074 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2196:	f110 0f16 	cmn.w	r0, #22
    219a:	d0c4      	beq.n	2126 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    219c:	1c44      	adds	r4, r0, #1
    219e:	e7e7      	b.n	2170 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    21a0:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    21a2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    21a4:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    21a6:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    21aa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    21ae:	d108      	bne.n	21c2 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21b0:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    21b4:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21b6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    21ba:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21bc:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    21c0:	e7e7      	b.n	2192 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21c2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    21c6:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    21ca:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21cc:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    21d0:	4631      	mov	r1, r6
    21d2:	f7ff ff4f 	bl	2074 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    21d6:	f110 0f16 	cmn.w	r0, #22
    21da:	d0a4      	beq.n	2126 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    21dc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    21e0:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    21e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    21e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    21ec:	f362 0304 	bfi	r3, r2, #0, #5
    21f0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    21f4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    21f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    21fc:	085b      	lsrs	r3, r3, #1
    21fe:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    2202:	e9d6 3100 	ldrd	r3, r1, [r6]
    2206:	440b      	add	r3, r1
    2208:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    220a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    220e:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2210:	445b      	add	r3, fp
    2212:	eba3 030a 	sub.w	r3, r3, sl
    2216:	b2c0      	uxtb	r0, r0
    2218:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    221c:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    221e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    2222:	9303      	str	r3, [sp, #12]
    2224:	d903      	bls.n	222e <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2226:	4602      	mov	r2, r0
    2228:	2145      	movs	r1, #69	; 0x45
    222a:	4806      	ldr	r0, [pc, #24]	; (2244 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    222c:	e779      	b.n	2122 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    222e:	4669      	mov	r1, sp
    2230:	f7ff ff06 	bl	2040 <region_init>
    2234:	e7b2      	b.n	219c <mpu_configure_regions_and_partition.constprop.0+0xd8>
    2236:	bf00      	nop
    2238:	e000ed00 	.word	0xe000ed00
    223c:	00009354 	.word	0x00009354
    2240:	0000932c 	.word	0x0000932c
    2244:	00009301 	.word	0x00009301

00002248 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2248:	2205      	movs	r2, #5
    224a:	4b04      	ldr	r3, [pc, #16]	; (225c <arm_core_mpu_enable+0x14>)
    224c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2254:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2258:	4770      	bx	lr
    225a:	bf00      	nop
    225c:	e000ed00 	.word	0xe000ed00

00002260 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2260:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2264:	2200      	movs	r2, #0
    2266:	4b02      	ldr	r3, [pc, #8]	; (2270 <arm_core_mpu_disable+0x10>)
    2268:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	e000ed00 	.word	0xe000ed00

00002274 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2274:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2276:	4c0a      	ldr	r4, [pc, #40]	; (22a0 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2278:	7822      	ldrb	r2, [r4, #0]
    227a:	f7ff ff23 	bl	20c4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    227e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2280:	3016      	adds	r0, #22
    2282:	d10c      	bne.n	229e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2284:	4907      	ldr	r1, [pc, #28]	; (22a4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2286:	4808      	ldr	r0, [pc, #32]	; (22a8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2288:	f240 1211 	movw	r2, #273	; 0x111
    228c:	f005 fc3d 	bl	7b0a <printk>
			regions_num);
	}
}
    2290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2294:	f240 1111 	movw	r1, #273	; 0x111
    2298:	4802      	ldr	r0, [pc, #8]	; (22a4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    229a:	f005 bcbc 	b.w	7c16 <assert_post_action>
}
    229e:	bd10      	pop	{r4, pc}
    22a0:	200013e4 	.word	0x200013e4
    22a4:	0000937c 	.word	0x0000937c
    22a8:	00008951 	.word	0x00008951

000022ac <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    22ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22b0:	4d30      	ldr	r5, [pc, #192]	; (2374 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    22b2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22b4:	4606      	mov	r6, r0
    22b6:	f04f 0800 	mov.w	r8, #0
    22ba:	46ab      	mov	fp, r5
	MPU->RNR = index;
    22bc:	4f2e      	ldr	r7, [pc, #184]	; (2378 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22be:	45d0      	cmp	r8, sl
    22c0:	db02      	blt.n	22c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    22c2:	b003      	add	sp, #12
    22c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    22c8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    22cc:	f1b9 0f00 	cmp.w	r9, #0
    22d0:	d04a      	beq.n	2368 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    22d2:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22d4:	4608      	mov	r0, r1
    22d6:	9101      	str	r1, [sp, #4]
    22d8:	f005 fd08 	bl	7cec <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22dc:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22de:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22e0:	eb09 0001 	add.w	r0, r9, r1
    22e4:	3801      	subs	r0, #1
    22e6:	f005 fd01 	bl	7cec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    22ea:	4284      	cmp	r4, r0
    22ec:	f04f 0214 	mov.w	r2, #20
    22f0:	4b22      	ldr	r3, [pc, #136]	; (237c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    22f2:	d013      	beq.n	231c <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    22f4:	f06f 0315 	mvn.w	r3, #21
    22f8:	fb02 f808 	mul.w	r8, r2, r8
    22fc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2300:	f240 1221 	movw	r2, #289	; 0x121
    2304:	491e      	ldr	r1, [pc, #120]	; (2380 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    2306:	481f      	ldr	r0, [pc, #124]	; (2384 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    2308:	f005 fbff 	bl	7b0a <printk>
    230c:	f240 1121 	movw	r1, #289	; 0x121
    2310:	481b      	ldr	r0, [pc, #108]	; (2380 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    2312:	b003      	add	sp, #12
    2314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2318:	f005 bc7d 	b.w	7c16 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    231c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2320:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2322:	d0ed      	beq.n	2300 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2324:	7819      	ldrb	r1, [r3, #0]
    2326:	42a1      	cmp	r1, r4
    2328:	ddea      	ble.n	2300 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    232a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    232e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    2332:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    2336:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    233a:	f100 0108 	add.w	r1, r0, #8
    233e:	7b00      	ldrb	r0, [r0, #12]
    2340:	f364 0004 	bfi	r0, r4, #0, #5
    2344:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2346:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    234a:	790c      	ldrb	r4, [r1, #4]
    234c:	0840      	lsrs	r0, r0, #1
    234e:	f360 1447 	bfi	r4, r0, #5, #3
    2352:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2354:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    2358:	f021 011f 	bic.w	r1, r1, #31
    235c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    235e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    2362:	f021 011f 	bic.w	r1, r1, #31
    2366:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2368:	f108 0801 	add.w	r8, r8, #1
    236c:	3514      	adds	r5, #20
    236e:	360c      	adds	r6, #12
    2370:	e7a5      	b.n	22be <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2372:	bf00      	nop
    2374:	20000934 	.word	0x20000934
    2378:	e000ed00 	.word	0xe000ed00
    237c:	200013e4 	.word	0x200013e4
    2380:	0000937c 	.word	0x0000937c
    2384:	00008951 	.word	0x00008951

00002388 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2388:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    238a:	4d1d      	ldr	r5, [pc, #116]	; (2400 <z_arm_mpu_init+0x78>)
    238c:	682c      	ldr	r4, [r5, #0]
    238e:	2c10      	cmp	r4, #16
    2390:	d90d      	bls.n	23ae <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2392:	f44f 72a4 	mov.w	r2, #328	; 0x148
    2396:	491b      	ldr	r1, [pc, #108]	; (2404 <z_arm_mpu_init+0x7c>)
    2398:	481b      	ldr	r0, [pc, #108]	; (2408 <z_arm_mpu_init+0x80>)
    239a:	f005 fbb6 	bl	7b0a <printk>
    239e:	4819      	ldr	r0, [pc, #100]	; (2404 <z_arm_mpu_init+0x7c>)
    23a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    23a4:	f005 fc37 	bl	7c16 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    23a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    23ac:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23ae:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    23b0:	f7ff ff56 	bl	2260 <arm_core_mpu_disable>
	MPU->MAIR0 =
    23b4:	4b15      	ldr	r3, [pc, #84]	; (240c <z_arm_mpu_init+0x84>)
    23b6:	4a16      	ldr	r2, [pc, #88]	; (2410 <z_arm_mpu_init+0x88>)
    23b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23bc:	4284      	cmp	r4, r0
    23be:	d117      	bne.n	23f0 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    23c0:	4b14      	ldr	r3, [pc, #80]	; (2414 <z_arm_mpu_init+0x8c>)
    23c2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    23c4:	f7ff ff40 	bl	2248 <arm_core_mpu_enable>
	__ASSERT(
    23c8:	4b10      	ldr	r3, [pc, #64]	; (240c <z_arm_mpu_init+0x84>)
    23ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    23ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
    23d2:	2b10      	cmp	r3, #16
    23d4:	d00a      	beq.n	23ec <z_arm_mpu_init+0x64>
    23d6:	490b      	ldr	r1, [pc, #44]	; (2404 <z_arm_mpu_init+0x7c>)
    23d8:	480b      	ldr	r0, [pc, #44]	; (2408 <z_arm_mpu_init+0x80>)
    23da:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    23de:	f005 fb94 	bl	7b0a <printk>
    23e2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    23e6:	4807      	ldr	r0, [pc, #28]	; (2404 <z_arm_mpu_init+0x7c>)
    23e8:	f005 fc15 	bl	7c16 <assert_post_action>
	return 0;
    23ec:	2000      	movs	r0, #0
    23ee:	e7dd      	b.n	23ac <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    23f0:	6869      	ldr	r1, [r5, #4]
    23f2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    23f6:	f7ff fe23 	bl	2040 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23fa:	3001      	adds	r0, #1
    23fc:	e7de      	b.n	23bc <z_arm_mpu_init+0x34>
    23fe:	bf00      	nop
    2400:	00008684 	.word	0x00008684
    2404:	0000937c 	.word	0x0000937c
    2408:	00008951 	.word	0x00008951
    240c:	e000ed00 	.word	0xe000ed00
    2410:	0044ffaa 	.word	0x0044ffaa
    2414:	200013e4 	.word	0x200013e4

00002418 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2418:	4b01      	ldr	r3, [pc, #4]	; (2420 <__stdout_hook_install+0x8>)
    241a:	6018      	str	r0, [r3, #0]
}
    241c:	4770      	bx	lr
    241e:	bf00      	nop
    2420:	20000024 	.word	0x20000024

00002424 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2424:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2426:	2340      	movs	r3, #64	; 0x40
{
    2428:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    242a:	490a      	ldr	r1, [pc, #40]	; (2454 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    242c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    242e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2430:	1149      	asrs	r1, r1, #5
{
    2432:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2434:	4623      	mov	r3, r4
    2436:	4a08      	ldr	r2, [pc, #32]	; (2458 <onoff_start+0x34>)
    2438:	4808      	ldr	r0, [pc, #32]	; (245c <onoff_start+0x38>)
    243a:	f005 fcc8 	bl	7dce <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    243e:	1e01      	subs	r1, r0, #0
    2440:	da05      	bge.n	244e <onoff_start+0x2a>
		notify(mgr, err);
    2442:	4628      	mov	r0, r5
    2444:	4623      	mov	r3, r4
	}
}
    2446:	b003      	add	sp, #12
    2448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    244c:	4718      	bx	r3
}
    244e:	b003      	add	sp, #12
    2450:	bd30      	pop	{r4, r5, pc}
    2452:	bf00      	nop
    2454:	20000948 	.word	0x20000948
    2458:	00007e3d 	.word	0x00007e3d
    245c:	0000823c 	.word	0x0000823c

00002460 <get_status>:
{
    2460:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2462:	b2cc      	uxtb	r4, r1
    2464:	2c01      	cmp	r4, #1
{
    2466:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2468:	d908      	bls.n	247c <get_status+0x1c>
    246a:	4908      	ldr	r1, [pc, #32]	; (248c <get_status+0x2c>)
    246c:	4808      	ldr	r0, [pc, #32]	; (2490 <get_status+0x30>)
    246e:	2279      	movs	r2, #121	; 0x79
    2470:	f005 fb4b 	bl	7b0a <printk>
    2474:	2179      	movs	r1, #121	; 0x79
    2476:	4805      	ldr	r0, [pc, #20]	; (248c <get_status+0x2c>)
    2478:	f005 fbcd 	bl	7c16 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    247c:	230c      	movs	r3, #12
    247e:	6929      	ldr	r1, [r5, #16]
    2480:	fb04 1403 	mla	r4, r4, r3, r1
    2484:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2486:	f000 0007 	and.w	r0, r0, #7
    248a:	bd38      	pop	{r3, r4, r5, pc}
    248c:	000093c2 	.word	0x000093c2
    2490:	00008951 	.word	0x00008951

00002494 <stop>:
{
    2494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2496:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2498:	2c01      	cmp	r4, #1
{
    249a:	4605      	mov	r5, r0
    249c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    249e:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24a0:	d90a      	bls.n	24b8 <stop+0x24>
    24a2:	4918      	ldr	r1, [pc, #96]	; (2504 <stop+0x70>)
    24a4:	4818      	ldr	r0, [pc, #96]	; (2508 <stop+0x74>)
    24a6:	f240 124d 	movw	r2, #333	; 0x14d
    24aa:	f005 fb2e 	bl	7b0a <printk>
    24ae:	f240 114d 	movw	r1, #333	; 0x14d
    24b2:	4814      	ldr	r0, [pc, #80]	; (2504 <stop+0x70>)
    24b4:	f005 fbaf 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    24b8:	f04f 0320 	mov.w	r3, #32
    24bc:	f3ef 8111 	mrs	r1, BASEPRI
    24c0:	f383 8812 	msr	BASEPRI_MAX, r3
    24c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    24c8:	220c      	movs	r2, #12
    24ca:	fb02 6304 	mla	r3, r2, r4, r6
    24ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    24d0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    24d4:	d001      	beq.n	24da <stop+0x46>
    24d6:	429f      	cmp	r7, r3
    24d8:	d111      	bne.n	24fe <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    24da:	2301      	movs	r3, #1
	int err = 0;
    24dc:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    24de:	fb02 6604 	mla	r6, r2, r4, r6
    24e2:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
    24e4:	f381 8811 	msr	BASEPRI, r1
    24e8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    24ec:	b930      	cbnz	r0, 24fc <stop+0x68>
	get_sub_config(dev, type)->stop();
    24ee:	230c      	movs	r3, #12
    24f0:	6869      	ldr	r1, [r5, #4]
    24f2:	fb03 1404 	mla	r4, r3, r4, r1
    24f6:	6863      	ldr	r3, [r4, #4]
    24f8:	4798      	blx	r3
	return 0;
    24fa:	2000      	movs	r0, #0
}
    24fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    24fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2502:	e7ef      	b.n	24e4 <stop+0x50>
    2504:	000093c2 	.word	0x000093c2
    2508:	00008951 	.word	0x00008951

0000250c <onoff_stop>:
{
    250c:	b570      	push	{r4, r5, r6, lr}
    250e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2510:	4906      	ldr	r1, [pc, #24]	; (252c <onoff_stop+0x20>)
{
    2512:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2514:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2516:	1149      	asrs	r1, r1, #5
    2518:	2240      	movs	r2, #64	; 0x40
    251a:	4805      	ldr	r0, [pc, #20]	; (2530 <onoff_stop+0x24>)
    251c:	f7ff ffba 	bl	2494 <stop>
	notify(mgr, res);
    2520:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2522:	4601      	mov	r1, r0
	notify(mgr, res);
    2524:	4620      	mov	r0, r4
}
    2526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    252a:	4718      	bx	r3
    252c:	20000948 	.word	0x20000948
    2530:	0000823c 	.word	0x0000823c

00002534 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2534:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2536:	2200      	movs	r2, #0
    2538:	2101      	movs	r1, #1
{
    253a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    253c:	2005      	movs	r0, #5
    253e:	f7ff f8b7 	bl	16b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2542:	2005      	movs	r0, #5
    2544:	f7ff f896 	bl	1674 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2548:	480f      	ldr	r0, [pc, #60]	; (2588 <clk_init+0x54>)
    254a:	f000 fcb5 	bl	2eb8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    254e:	4b0f      	ldr	r3, [pc, #60]	; (258c <clk_init+0x58>)
    2550:	4298      	cmp	r0, r3
    2552:	d115      	bne.n	2580 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2554:	f000 fcd0 	bl	2ef8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2558:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    255a:	490d      	ldr	r1, [pc, #52]	; (2590 <clk_init+0x5c>)
    255c:	4630      	mov	r0, r6
    255e:	f005 fae1 	bl	7b24 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2562:	2800      	cmp	r0, #0
    2564:	db0b      	blt.n	257e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2566:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    2568:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    256a:	4909      	ldr	r1, [pc, #36]	; (2590 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    256c:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    256e:	f104 0020 	add.w	r0, r4, #32
    2572:	f005 fad7 	bl	7b24 <onoff_manager_init>
		if (err < 0) {
    2576:	2800      	cmp	r0, #0
    2578:	db01      	blt.n	257e <clk_init+0x4a>
	}

	return 0;
    257a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    257c:	6565      	str	r5, [r4, #84]	; 0x54
}
    257e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2580:	f06f 0004 	mvn.w	r0, #4
    2584:	e7fb      	b.n	257e <clk_init+0x4a>
    2586:	bf00      	nop
    2588:	000025c9 	.word	0x000025c9
    258c:	0bad0000 	.word	0x0bad0000
    2590:	000086dc 	.word	0x000086dc

00002594 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2594:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2596:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2598:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    259a:	434b      	muls	r3, r1
    259c:	4808      	ldr	r0, [pc, #32]	; (25c0 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    259e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    25a0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    25a2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    25a4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25a8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    25aa:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25ac:	f005 fbfc 	bl	7da8 <set_on_state>
	if (callback) {
    25b0:	b12d      	cbz	r5, 25be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    25b2:	4632      	mov	r2, r6
    25b4:	462b      	mov	r3, r5
}
    25b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    25ba:	4802      	ldr	r0, [pc, #8]	; (25c4 <clkstarted_handle.constprop.0+0x30>)
    25bc:	4718      	bx	r3
}
    25be:	bd70      	pop	{r4, r5, r6, pc}
    25c0:	20000948 	.word	0x20000948
    25c4:	0000823c 	.word	0x0000823c

000025c8 <clock_event_handler>:
	switch (event) {
    25c8:	2801      	cmp	r0, #1
{
    25ca:	b508      	push	{r3, lr}
	switch (event) {
    25cc:	d006      	beq.n	25dc <clock_event_handler+0x14>
    25ce:	2803      	cmp	r0, #3
    25d0:	d008      	beq.n	25e4 <clock_event_handler+0x1c>
    25d2:	b9a0      	cbnz	r0, 25fe <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    25d4:	4b0f      	ldr	r3, [pc, #60]	; (2614 <clock_event_handler+0x4c>)
    25d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    25d8:	075b      	lsls	r3, r3, #29
    25da:	d119      	bne.n	2610 <clock_event_handler+0x48>
}
    25dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25e0:	f7ff bfd8 	b.w	2594 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    25e4:	490c      	ldr	r1, [pc, #48]	; (2618 <clock_event_handler+0x50>)
    25e6:	f240 225e 	movw	r2, #606	; 0x25e
    25ea:	480c      	ldr	r0, [pc, #48]	; (261c <clock_event_handler+0x54>)
    25ec:	f005 fa8d 	bl	7b0a <printk>
    25f0:	f240 215e 	movw	r1, #606	; 0x25e
}
    25f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    25f8:	4807      	ldr	r0, [pc, #28]	; (2618 <clock_event_handler+0x50>)
    25fa:	f005 bb0c 	b.w	7c16 <assert_post_action>
    25fe:	4906      	ldr	r1, [pc, #24]	; (2618 <clock_event_handler+0x50>)
    2600:	f240 2262 	movw	r2, #610	; 0x262
    2604:	4805      	ldr	r0, [pc, #20]	; (261c <clock_event_handler+0x54>)
    2606:	f005 fa80 	bl	7b0a <printk>
    260a:	f240 2162 	movw	r1, #610	; 0x262
    260e:	e7f1      	b.n	25f4 <clock_event_handler+0x2c>
}
    2610:	bd08      	pop	{r3, pc}
    2612:	bf00      	nop
    2614:	20000948 	.word	0x20000948
    2618:	000093c2 	.word	0x000093c2
    261c:	00008951 	.word	0x00008951

00002620 <generic_hfclk_start>:
{
    2620:	b508      	push	{r3, lr}
	__asm__ volatile(
    2622:	f04f 0320 	mov.w	r3, #32
    2626:	f3ef 8111 	mrs	r1, BASEPRI
    262a:	f383 8812 	msr	BASEPRI_MAX, r3
    262e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2632:	4a12      	ldr	r2, [pc, #72]	; (267c <generic_hfclk_start+0x5c>)
    2634:	6813      	ldr	r3, [r2, #0]
    2636:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    263a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    263e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2640:	d00c      	beq.n	265c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2642:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2646:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    264a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    264e:	f013 0301 	ands.w	r3, r3, #1
    2652:	d003      	beq.n	265c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2654:	480a      	ldr	r0, [pc, #40]	; (2680 <generic_hfclk_start+0x60>)
    2656:	f005 fba7 	bl	7da8 <set_on_state>
			already_started = true;
    265a:	2301      	movs	r3, #1
	__asm__ volatile(
    265c:	f381 8811 	msr	BASEPRI, r1
    2660:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2664:	b123      	cbz	r3, 2670 <generic_hfclk_start+0x50>
}
    2666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    266a:	2000      	movs	r0, #0
    266c:	f7ff bf92 	b.w	2594 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2670:	2001      	movs	r0, #1
}
    2672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2676:	f000 bc5d 	b.w	2f34 <nrfx_clock_start>
    267a:	bf00      	nop
    267c:	200009a0 	.word	0x200009a0
    2680:	20000990 	.word	0x20000990

00002684 <api_blocking_start>:
{
    2684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2686:	2200      	movs	r2, #0
    2688:	2301      	movs	r3, #1
    268a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    268e:	466b      	mov	r3, sp
    2690:	4a08      	ldr	r2, [pc, #32]	; (26b4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2692:	f8cd d000 	str.w	sp, [sp]
    2696:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    269a:	f005 fbc8 	bl	7e2e <api_start>
	if (err < 0) {
    269e:	2800      	cmp	r0, #0
    26a0:	db05      	blt.n	26ae <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    26a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26a6:	2300      	movs	r3, #0
    26a8:	4668      	mov	r0, sp
    26aa:	f001 fa01 	bl	3ab0 <z_impl_k_sem_take>
}
    26ae:	b005      	add	sp, #20
    26b0:	f85d fb04 	ldr.w	pc, [sp], #4
    26b4:	00007e5b 	.word	0x00007e5b

000026b8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26b8:	4b07      	ldr	r3, [pc, #28]	; (26d8 <generic_hfclk_stop+0x20>)
    26ba:	e8d3 2fef 	ldaex	r2, [r3]
    26be:	f022 0102 	bic.w	r1, r2, #2
    26c2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    26c6:	2800      	cmp	r0, #0
    26c8:	d1f7      	bne.n	26ba <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    26ca:	07d3      	lsls	r3, r2, #31
    26cc:	d402      	bmi.n	26d4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    26ce:	2001      	movs	r0, #1
    26d0:	f000 bc82 	b.w	2fd8 <nrfx_clock_stop>
}
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	200009a0 	.word	0x200009a0

000026dc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    26dc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    26de:	4808      	ldr	r0, [pc, #32]	; (2700 <uart_console_init+0x24>)
    26e0:	4b08      	ldr	r3, [pc, #32]	; (2704 <uart_console_init+0x28>)
    26e2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    26e4:	f005 fd0e 	bl	8104 <z_device_ready>
    26e8:	b138      	cbz	r0, 26fa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    26ea:	4807      	ldr	r0, [pc, #28]	; (2708 <uart_console_init+0x2c>)
    26ec:	f7ff fe94 	bl	2418 <__stdout_hook_install>
	__printk_hook_install(console_out);
    26f0:	4805      	ldr	r0, [pc, #20]	; (2708 <uart_console_init+0x2c>)
    26f2:	f7fd ff33 	bl	55c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    26f6:	2000      	movs	r0, #0
}
    26f8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    26fa:	f06f 0012 	mvn.w	r0, #18
    26fe:	e7fb      	b.n	26f8 <uart_console_init+0x1c>
    2700:	00008284 	.word	0x00008284
    2704:	200009a4 	.word	0x200009a4
    2708:	0000270d 	.word	0x0000270d

0000270c <console_out>:
	if ('\n' == c) {
    270c:	280a      	cmp	r0, #10
{
    270e:	b538      	push	{r3, r4, r5, lr}
    2710:	4604      	mov	r4, r0
    2712:	4d07      	ldr	r5, [pc, #28]	; (2730 <console_out+0x24>)
	if ('\n' == c) {
    2714:	d104      	bne.n	2720 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2716:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2718:	6883      	ldr	r3, [r0, #8]
    271a:	210d      	movs	r1, #13
    271c:	685b      	ldr	r3, [r3, #4]
    271e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2720:	6828      	ldr	r0, [r5, #0]
    2722:	6883      	ldr	r3, [r0, #8]
    2724:	b2e1      	uxtb	r1, r4
    2726:	685b      	ldr	r3, [r3, #4]
    2728:	4798      	blx	r3
}
    272a:	4620      	mov	r0, r4
    272c:	bd38      	pop	{r3, r4, r5, pc}
    272e:	bf00      	nop
    2730:	200009a4 	.word	0x200009a4

00002734 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2734:	6803      	ldr	r3, [r0, #0]
{
    2736:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    2738:	095a      	lsrs	r2, r3, #5
    273a:	bf0c      	ite	eq
    273c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    2740:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    2742:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2746:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    274a:	07db      	lsls	r3, r3, #31
{
    274c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    274e:	d40a      	bmi.n	2766 <nrf_gpio_pin_port_decode+0x32>
    2750:	490e      	ldr	r1, [pc, #56]	; (278c <nrf_gpio_pin_port_decode+0x58>)
    2752:	480f      	ldr	r0, [pc, #60]	; (2790 <nrf_gpio_pin_port_decode+0x5c>)
    2754:	f240 2229 	movw	r2, #553	; 0x229
    2758:	f005 f9d7 	bl	7b0a <printk>
    275c:	f240 2129 	movw	r1, #553	; 0x229
    2760:	480a      	ldr	r0, [pc, #40]	; (278c <nrf_gpio_pin_port_decode+0x58>)
    2762:	f005 fa58 	bl	7c16 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    2766:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2768:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    276c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    276e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2770:	d00a      	beq.n	2788 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    2772:	4906      	ldr	r1, [pc, #24]	; (278c <nrf_gpio_pin_port_decode+0x58>)
    2774:	4806      	ldr	r0, [pc, #24]	; (2790 <nrf_gpio_pin_port_decode+0x5c>)
    2776:	f240 222e 	movw	r2, #558	; 0x22e
    277a:	f005 f9c6 	bl	7b0a <printk>
    277e:	f240 212e 	movw	r1, #558	; 0x22e
    2782:	4802      	ldr	r0, [pc, #8]	; (278c <nrf_gpio_pin_port_decode+0x58>)
    2784:	f005 fa47 	bl	7c16 <assert_post_action>
}
    2788:	4802      	ldr	r0, [pc, #8]	; (2794 <nrf_gpio_pin_port_decode+0x60>)
    278a:	bd10      	pop	{r4, pc}
    278c:	00009419 	.word	0x00009419
    2790:	00008951 	.word	0x00008951
    2794:	50842500 	.word	0x50842500

00002798 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2798:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    279a:	794b      	ldrb	r3, [r1, #5]
    279c:	2b01      	cmp	r3, #1
    279e:	d026      	beq.n	27ee <uarte_nrfx_configure+0x56>
    27a0:	2b03      	cmp	r3, #3
    27a2:	d121      	bne.n	27e8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    27a4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    27a6:	798b      	ldrb	r3, [r1, #6]
    27a8:	2b03      	cmp	r3, #3
    27aa:	d11d      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    27ac:	79cc      	ldrb	r4, [r1, #7]
    27ae:	b10c      	cbz	r4, 27b4 <uarte_nrfx_configure+0x1c>
    27b0:	2c01      	cmp	r4, #1
    27b2:	d119      	bne.n	27e8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    27b4:	790a      	ldrb	r2, [r1, #4]
    27b6:	b112      	cbz	r2, 27be <uarte_nrfx_configure+0x26>
    27b8:	2a02      	cmp	r2, #2
    27ba:	d115      	bne.n	27e8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    27bc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    27be:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    27c0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    27c2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    27c6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    27c8:	d065      	beq.n	2896 <uarte_nrfx_configure+0xfe>
    27ca:	d82d      	bhi.n	2828 <uarte_nrfx_configure+0x90>
    27cc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    27d0:	d064      	beq.n	289c <uarte_nrfx_configure+0x104>
    27d2:	d816      	bhi.n	2802 <uarte_nrfx_configure+0x6a>
    27d4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    27d8:	d062      	beq.n	28a0 <uarte_nrfx_configure+0x108>
    27da:	d80a      	bhi.n	27f2 <uarte_nrfx_configure+0x5a>
    27dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    27e0:	d061      	beq.n	28a6 <uarte_nrfx_configure+0x10e>
    27e2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    27e6:	d061      	beq.n	28ac <uarte_nrfx_configure+0x114>
    27e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    27ec:	e052      	b.n	2894 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    27ee:	2600      	movs	r6, #0
    27f0:	e7d9      	b.n	27a6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    27f2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    27f6:	d05c      	beq.n	28b2 <uarte_nrfx_configure+0x11a>
    27f8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    27fc:	d1f4      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    27fe:	4b37      	ldr	r3, [pc, #220]	; (28dc <uarte_nrfx_configure+0x144>)
    2800:	e03c      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2802:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2806:	d057      	beq.n	28b8 <uarte_nrfx_configure+0x120>
    2808:	d807      	bhi.n	281a <uarte_nrfx_configure+0x82>
    280a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    280e:	d055      	beq.n	28bc <uarte_nrfx_configure+0x124>
    2810:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2814:	d1e8      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2816:	4b32      	ldr	r3, [pc, #200]	; (28e0 <uarte_nrfx_configure+0x148>)
    2818:	e030      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    281a:	f647 2712 	movw	r7, #31250	; 0x7a12
    281e:	42bb      	cmp	r3, r7
    2820:	d1e2      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2822:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2826:	e029      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2828:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    282c:	d048      	beq.n	28c0 <uarte_nrfx_configure+0x128>
    282e:	d813      	bhi.n	2858 <uarte_nrfx_configure+0xc0>
    2830:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2834:	d047      	beq.n	28c6 <uarte_nrfx_configure+0x12e>
    2836:	d809      	bhi.n	284c <uarte_nrfx_configure+0xb4>
    2838:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    283c:	42bb      	cmp	r3, r7
    283e:	d044      	beq.n	28ca <uarte_nrfx_configure+0x132>
    2840:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2844:	d1d0      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2846:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    284a:	e017      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    284c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2850:	d1ca      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2852:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2856:	e011      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2858:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    285c:	d038      	beq.n	28d0 <uarte_nrfx_configure+0x138>
    285e:	d808      	bhi.n	2872 <uarte_nrfx_configure+0xda>
    2860:	4f20      	ldr	r7, [pc, #128]	; (28e4 <uarte_nrfx_configure+0x14c>)
    2862:	42bb      	cmp	r3, r7
    2864:	d037      	beq.n	28d6 <uarte_nrfx_configure+0x13e>
    2866:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    286a:	d1bd      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    286c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2870:	e004      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2872:	4f1d      	ldr	r7, [pc, #116]	; (28e8 <uarte_nrfx_configure+0x150>)
    2874:	42bb      	cmp	r3, r7
    2876:	d1b7      	bne.n	27e8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    287c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2880:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2882:	4334      	orrs	r4, r6
    2884:	4322      	orrs	r2, r4
    2886:	3304      	adds	r3, #4
    2888:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    288a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    288e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2892:	2000      	movs	r0, #0
}
    2894:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2896:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    289a:	e7ef      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    289c:	4b13      	ldr	r3, [pc, #76]	; (28ec <uarte_nrfx_configure+0x154>)
    289e:	e7ed      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    28a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    28a4:	e7ea      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    28a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    28aa:	e7e7      	b.n	287c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    28ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    28b0:	e7e4      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    28b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    28b6:	e7e1      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    28b8:	4b0d      	ldr	r3, [pc, #52]	; (28f0 <uarte_nrfx_configure+0x158>)
    28ba:	e7df      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    28bc:	4b0d      	ldr	r3, [pc, #52]	; (28f4 <uarte_nrfx_configure+0x15c>)
    28be:	e7dd      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    28c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    28c4:	e7da      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    28c6:	4b0c      	ldr	r3, [pc, #48]	; (28f8 <uarte_nrfx_configure+0x160>)
    28c8:	e7d8      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    28ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    28ce:	e7d5      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    28d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    28d4:	e7d2      	b.n	287c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    28d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    28da:	e7cf      	b.n	287c <uarte_nrfx_configure+0xe4>
    28dc:	0013b000 	.word	0x0013b000
    28e0:	004ea000 	.word	0x004ea000
    28e4:	0003d090 	.word	0x0003d090
    28e8:	000f4240 	.word	0x000f4240
    28ec:	00275000 	.word	0x00275000
    28f0:	0075c000 	.word	0x0075c000
    28f4:	003af000 	.word	0x003af000
    28f8:	013a9000 	.word	0x013a9000

000028fc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    28fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28fe:	4605      	mov	r5, r0
    2900:	460f      	mov	r7, r1
	return dev->data;
    2902:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2904:	f005 fc24 	bl	8150 <k_is_in_isr>
    2908:	b910      	cbnz	r0, 2910 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    290a:	4b2c      	ldr	r3, [pc, #176]	; (29bc <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	b983      	cbnz	r3, 2932 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2910:	f04f 0320 	mov.w	r3, #32
    2914:	f3ef 8411 	mrs	r4, BASEPRI
    2918:	f383 8812 	msr	BASEPRI_MAX, r3
    291c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2920:	6868      	ldr	r0, [r5, #4]
    2922:	f005 facc 	bl	7ebe <is_tx_ready.isra.0>
    2926:	bb28      	cbnz	r0, 2974 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2928:	f384 8811 	msr	BASEPRI, r4
    292c:	f3bf 8f6f 	isb	sy
}
    2930:	e7ee      	b.n	2910 <uarte_nrfx_poll_out+0x14>
{
    2932:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2934:	6868      	ldr	r0, [r5, #4]
    2936:	f005 fac2 	bl	7ebe <is_tx_ready.isra.0>
    293a:	b970      	cbnz	r0, 295a <uarte_nrfx_poll_out+0x5e>
    293c:	2001      	movs	r0, #1
    293e:	f005 fbde 	bl	80fe <nrfx_busy_wait>
    2942:	3c01      	subs	r4, #1
    2944:	d1f6      	bne.n	2934 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    2946:	2100      	movs	r1, #0
    2948:	2021      	movs	r0, #33	; 0x21
    294a:	f001 ff91 	bl	4870 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    294e:	e7f0      	b.n	2932 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2950:	f384 8811 	msr	BASEPRI, r4
    2954:	f3bf 8f6f 	isb	sy
}
    2958:	e7f5      	b.n	2946 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    295a:	f04f 0320 	mov.w	r3, #32
    295e:	f3ef 8411 	mrs	r4, BASEPRI
    2962:	f383 8812 	msr	BASEPRI_MAX, r3
    2966:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    296a:	6868      	ldr	r0, [r5, #4]
    296c:	f005 faa7 	bl	7ebe <is_tx_ready.isra.0>
    2970:	2800      	cmp	r0, #0
    2972:	d0ed      	beq.n	2950 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2974:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2976:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    297a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    297c:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    297e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2982:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2986:	2200      	movs	r2, #0
    2988:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    298c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2990:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2994:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2998:	684a      	ldr	r2, [r1, #4]
    299a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    299c:	bf41      	itttt	mi
    299e:	2208      	movmi	r2, #8
    29a0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    29a4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    29a8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29ac:	2201      	movs	r2, #1
    29ae:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    29b0:	f384 8811 	msr	BASEPRI, r4
    29b4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    29b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29ba:	bf00      	nop
    29bc:	200013e5 	.word	0x200013e5

000029c0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    29c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29c2:	460f      	mov	r7, r1
    29c4:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    29c6:	b940      	cbnz	r0, 29da <entropy_cc3xx_rng_get_entropy+0x1a>
    29c8:	4918      	ldr	r1, [pc, #96]	; (2a2c <entropy_cc3xx_rng_get_entropy+0x6c>)
    29ca:	4819      	ldr	r0, [pc, #100]	; (2a30 <entropy_cc3xx_rng_get_entropy+0x70>)
    29cc:	2224      	movs	r2, #36	; 0x24
    29ce:	f005 f89c 	bl	7b0a <printk>
    29d2:	2124      	movs	r1, #36	; 0x24
    29d4:	4815      	ldr	r0, [pc, #84]	; (2a2c <entropy_cc3xx_rng_get_entropy+0x6c>)
    29d6:	f005 f91e 	bl	7c16 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    29da:	b947      	cbnz	r7, 29ee <entropy_cc3xx_rng_get_entropy+0x2e>
    29dc:	4913      	ldr	r1, [pc, #76]	; (2a2c <entropy_cc3xx_rng_get_entropy+0x6c>)
    29de:	4814      	ldr	r0, [pc, #80]	; (2a30 <entropy_cc3xx_rng_get_entropy+0x70>)
    29e0:	2225      	movs	r2, #37	; 0x25
    29e2:	f005 f892 	bl	7b0a <printk>
    29e6:	2125      	movs	r1, #37	; 0x25
    29e8:	4810      	ldr	r0, [pc, #64]	; (2a2c <entropy_cc3xx_rng_get_entropy+0x6c>)
    29ea:	f005 f914 	bl	7c16 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    29ee:	f44f 6580 	mov.w	r5, #1024	; 0x400
    29f2:	2400      	movs	r4, #0
    29f4:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    29f8:	42a6      	cmp	r6, r4
    29fa:	d801      	bhi.n	2a00 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    29fc:	b003      	add	sp, #12
    29fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2a00:	1b33      	subs	r3, r6, r4
    2a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2a06:	bf38      	it	cc
    2a08:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    2a0a:	2000      	movs	r0, #0
    2a0c:	ab01      	add	r3, sp, #4
    2a0e:	462a      	mov	r2, r5
    2a10:	1939      	adds	r1, r7, r4
    2a12:	f002 fb2f 	bl	5074 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    2a16:	9b01      	ldr	r3, [sp, #4]
    2a18:	42ab      	cmp	r3, r5
    2a1a:	d103      	bne.n	2a24 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d1ed      	bne.n	29fc <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    2a20:	442c      	add	r4, r5
    2a22:	e7e9      	b.n	29f8 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    2a24:	f06f 0015 	mvn.w	r0, #21
    2a28:	e7e8      	b.n	29fc <entropy_cc3xx_rng_get_entropy+0x3c>
    2a2a:	bf00      	nop
    2a2c:	0000946a 	.word	0x0000946a
    2a30:	00008951 	.word	0x00008951

00002a34 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    2a34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a38:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    2a3a:	6919      	ldr	r1, [r3, #16]
{
    2a3c:	b510      	push	{r4, lr}
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2a3e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
	uint32_t val2 = SysTick->VAL;	/* C */
    2a42:	6998      	ldr	r0, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2a44:	4908      	ldr	r1, [pc, #32]	; (2a68 <elapsed+0x34>)
    2a46:	4b09      	ldr	r3, [pc, #36]	; (2a6c <elapsed+0x38>)
    2a48:	d101      	bne.n	2a4e <elapsed+0x1a>
	    || (val1 < val2)) {
    2a4a:	4282      	cmp	r2, r0
    2a4c:	d206      	bcs.n	2a5c <elapsed+0x28>
		overflow_cyc += last_load;
    2a4e:	681a      	ldr	r2, [r3, #0]
    2a50:	680c      	ldr	r4, [r1, #0]
    2a52:	4422      	add	r2, r4
    2a54:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    2a56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2a5a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	680a      	ldr	r2, [r1, #0]
    2a60:	4413      	add	r3, r2
}
    2a62:	1a18      	subs	r0, r3, r0
    2a64:	bd10      	pop	{r4, pc}
    2a66:	bf00      	nop
    2a68:	200009b0 	.word	0x200009b0
    2a6c:	200009b8 	.word	0x200009b8

00002a70 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a70:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    2a72:	2000      	movs	r0, #0
    2a74:	4b07      	ldr	r3, [pc, #28]	; (2a94 <sys_clock_driver_init+0x24>)
    2a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    2a7a:	4b07      	ldr	r3, [pc, #28]	; (2a98 <sys_clock_driver_init+0x28>)
    2a7c:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    2a7e:	4b07      	ldr	r3, [pc, #28]	; (2a9c <sys_clock_driver_init+0x2c>)
    2a80:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    2a82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a86:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    2a88:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    2a8a:	691a      	ldr	r2, [r3, #16]
    2a8c:	f042 0207 	orr.w	r2, r2, #7
    2a90:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    2a92:	4770      	bx	lr
    2a94:	e000ed00 	.word	0xe000ed00
    2a98:	200009b0 	.word	0x200009b0
    2a9c:	200009b8 	.word	0x200009b8

00002aa0 <sys_clock_isr>:
{
    2aa0:	b508      	push	{r3, lr}
	elapsed();
    2aa2:	f7ff ffc7 	bl	2a34 <elapsed>
	cycle_count += overflow_cyc;
    2aa6:	4a09      	ldr	r2, [pc, #36]	; (2acc <sys_clock_isr+0x2c>)
    2aa8:	4909      	ldr	r1, [pc, #36]	; (2ad0 <sys_clock_isr+0x30>)
    2aaa:	6813      	ldr	r3, [r2, #0]
    2aac:	6808      	ldr	r0, [r1, #0]
    2aae:	4403      	add	r3, r0
    2ab0:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    2ab2:	2100      	movs	r1, #0
    2ab4:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2ab6:	4a07      	ldr	r2, [pc, #28]	; (2ad4 <sys_clock_isr+0x34>)
    2ab8:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    2aba:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    2abc:	1a18      	subs	r0, r3, r0
    2abe:	f002 f965 	bl	4d8c <sys_clock_announce>
}
    2ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    2ac6:	f7fe bedf 	b.w	1888 <z_arm_exc_exit>
    2aca:	bf00      	nop
    2acc:	200009b8 	.word	0x200009b8
    2ad0:	200009ac 	.word	0x200009ac
    2ad4:	200009a8 	.word	0x200009a8

00002ad8 <sys_clock_set_timeout>:
{
    2ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ada:	4f39      	ldr	r7, [pc, #228]	; (2bc0 <sys_clock_set_timeout+0xe8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    2adc:	b159      	cbz	r1, 2af6 <sys_clock_set_timeout+0x1e>
    2ade:	1c43      	adds	r3, r0, #1
    2ae0:	d109      	bne.n	2af6 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2ae2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2ae6:	6913      	ldr	r3, [r2, #16]
    2ae8:	f023 0301 	bic.w	r3, r3, #1
    2aec:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
    2aee:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    2af2:	603b      	str	r3, [r7, #0]
}
    2af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2af6:	4b33      	ldr	r3, [pc, #204]	; (2bc4 <sys_clock_set_timeout+0xec>)
	uint32_t last_load_ = last_load;
    2af8:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2afa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2afe:	bf08      	it	eq
    2b00:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b02:	1e44      	subs	r4, r0, #1
    2b04:	2c00      	cmp	r4, #0
    2b06:	dd53      	ble.n	2bb0 <sys_clock_set_timeout+0xd8>
    2b08:	429c      	cmp	r4, r3
    2b0a:	bfa8      	it	ge
    2b0c:	461c      	movge	r4, r3
	__asm__ volatile(
    2b0e:	f04f 0320 	mov.w	r3, #32
    2b12:	f3ef 8611 	mrs	r6, BASEPRI
    2b16:	f383 8812 	msr	BASEPRI_MAX, r3
    2b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b1e:	482a      	ldr	r0, [pc, #168]	; (2bc8 <sys_clock_set_timeout+0xf0>)
    2b20:	f000 fdda 	bl	36d8 <z_spin_lock_valid>
    2b24:	b940      	cbnz	r0, 2b38 <sys_clock_set_timeout+0x60>
    2b26:	4929      	ldr	r1, [pc, #164]	; (2bcc <sys_clock_set_timeout+0xf4>)
    2b28:	4829      	ldr	r0, [pc, #164]	; (2bd0 <sys_clock_set_timeout+0xf8>)
    2b2a:	2281      	movs	r2, #129	; 0x81
    2b2c:	f004 ffed 	bl	7b0a <printk>
    2b30:	2181      	movs	r1, #129	; 0x81
    2b32:	4826      	ldr	r0, [pc, #152]	; (2bcc <sys_clock_set_timeout+0xf4>)
    2b34:	f005 f86f 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    2b38:	4823      	ldr	r0, [pc, #140]	; (2bc8 <sys_clock_set_timeout+0xf0>)
    2b3a:	f000 fde9 	bl	3710 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    2b3e:	f7ff ff79 	bl	2a34 <elapsed>
	overflow_cyc = 0U;
    2b42:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    2b46:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	cycle_count += pending;
    2b4a:	4922      	ldr	r1, [pc, #136]	; (2bd4 <sys_clock_set_timeout+0xfc>)
	val1 = SysTick->VAL;
    2b4c:	6993      	ldr	r3, [r2, #24]
	cycle_count += pending;
    2b4e:	f8d1 c000 	ldr.w	ip, [r1]
    2b52:	4460      	add	r0, ip
	overflow_cyc = 0U;
    2b54:	f8df c080 	ldr.w	ip, [pc, #128]	; 2bd8 <sys_clock_set_timeout+0x100>
	cycle_count += pending;
    2b58:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
    2b5a:	f8cc e000 	str.w	lr, [ip]
	uint32_t unannounced = cycle_count - announced_cycles;
    2b5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2bdc <sys_clock_set_timeout+0x104>
    2b62:	f8dc c000 	ldr.w	ip, [ip]
    2b66:	eba0 0c0c 	sub.w	ip, r0, ip
	if ((int32_t)unannounced < 0) {
    2b6a:	45f4      	cmp	ip, lr
    2b6c:	da22      	bge.n	2bb4 <sys_clock_set_timeout+0xdc>
		last_load = MIN_DELAY;
    2b6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
			last_load = delay;
    2b72:	603c      	str	r4, [r7, #0]
	SysTick->LOAD = last_load - 1;
    2b74:	683f      	ldr	r7, [r7, #0]
	val2 = SysTick->VAL;
    2b76:	6994      	ldr	r4, [r2, #24]
	SysTick->LOAD = last_load - 1;
    2b78:	3f01      	subs	r7, #1
    2b7a:	6157      	str	r7, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
    2b7c:	2700      	movs	r7, #0
	if (val1 < val2) {
    2b7e:	42a3      	cmp	r3, r4
		cycle_count += (val1 + (last_load_ - val2));
    2b80:	bf38      	it	cc
    2b82:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
    2b84:	1b1b      	subs	r3, r3, r4
    2b86:	4418      	add	r0, r3
	SysTick->VAL = 0; /* resets timer to last_load */
    2b88:	6197      	str	r7, [r2, #24]
		cycle_count += (val1 - val2);
    2b8a:	6008      	str	r0, [r1, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2b8c:	480e      	ldr	r0, [pc, #56]	; (2bc8 <sys_clock_set_timeout+0xf0>)
    2b8e:	f000 fdb1 	bl	36f4 <z_spin_unlock_valid>
    2b92:	b940      	cbnz	r0, 2ba6 <sys_clock_set_timeout+0xce>
    2b94:	490d      	ldr	r1, [pc, #52]	; (2bcc <sys_clock_set_timeout+0xf4>)
    2b96:	480e      	ldr	r0, [pc, #56]	; (2bd0 <sys_clock_set_timeout+0xf8>)
    2b98:	22ac      	movs	r2, #172	; 0xac
    2b9a:	f004 ffb6 	bl	7b0a <printk>
    2b9e:	21ac      	movs	r1, #172	; 0xac
    2ba0:	480a      	ldr	r0, [pc, #40]	; (2bcc <sys_clock_set_timeout+0xf4>)
    2ba2:	f005 f838 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    2ba6:	f386 8811 	msr	BASEPRI, r6
    2baa:	f3bf 8f6f 	isb	sy
    2bae:	e7a1      	b.n	2af4 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2bb0:	2400      	movs	r4, #0
    2bb2:	e7ac      	b.n	2b0e <sys_clock_set_timeout+0x36>
			last_load = delay;
    2bb4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2bb8:	bfb8      	it	lt
    2bba:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    2bbe:	e7d8      	b.n	2b72 <sys_clock_set_timeout+0x9a>
    2bc0:	200009b0 	.word	0x200009b0
    2bc4:	00fffffe 	.word	0x00fffffe
    2bc8:	200009b4 	.word	0x200009b4
    2bcc:	0000892b 	.word	0x0000892b
    2bd0:	00008951 	.word	0x00008951
    2bd4:	200009ac 	.word	0x200009ac
    2bd8:	200009b8 	.word	0x200009b8
    2bdc:	200009a8 	.word	0x200009a8

00002be0 <sys_clock_elapsed>:
{
    2be0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2be2:	f04f 0320 	mov.w	r3, #32
    2be6:	f3ef 8511 	mrs	r5, BASEPRI
    2bea:	f383 8812 	msr	BASEPRI_MAX, r3
    2bee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2bf2:	4815      	ldr	r0, [pc, #84]	; (2c48 <sys_clock_elapsed+0x68>)
    2bf4:	f000 fd70 	bl	36d8 <z_spin_lock_valid>
    2bf8:	b940      	cbnz	r0, 2c0c <sys_clock_elapsed+0x2c>
    2bfa:	4914      	ldr	r1, [pc, #80]	; (2c4c <sys_clock_elapsed+0x6c>)
    2bfc:	4814      	ldr	r0, [pc, #80]	; (2c50 <sys_clock_elapsed+0x70>)
    2bfe:	2281      	movs	r2, #129	; 0x81
    2c00:	f004 ff83 	bl	7b0a <printk>
    2c04:	2181      	movs	r1, #129	; 0x81
    2c06:	4811      	ldr	r0, [pc, #68]	; (2c4c <sys_clock_elapsed+0x6c>)
    2c08:	f005 f805 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    2c0c:	480e      	ldr	r0, [pc, #56]	; (2c48 <sys_clock_elapsed+0x68>)
    2c0e:	f000 fd7f 	bl	3710 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    2c12:	f7ff ff0f 	bl	2a34 <elapsed>
    2c16:	4b0f      	ldr	r3, [pc, #60]	; (2c54 <sys_clock_elapsed+0x74>)
    2c18:	681c      	ldr	r4, [r3, #0]
    2c1a:	4b0f      	ldr	r3, [pc, #60]	; (2c58 <sys_clock_elapsed+0x78>)
    2c1c:	681b      	ldr	r3, [r3, #0]
    2c1e:	1ae4      	subs	r4, r4, r3
    2c20:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c22:	4809      	ldr	r0, [pc, #36]	; (2c48 <sys_clock_elapsed+0x68>)
    2c24:	f000 fd66 	bl	36f4 <z_spin_unlock_valid>
    2c28:	b940      	cbnz	r0, 2c3c <sys_clock_elapsed+0x5c>
    2c2a:	4908      	ldr	r1, [pc, #32]	; (2c4c <sys_clock_elapsed+0x6c>)
    2c2c:	4808      	ldr	r0, [pc, #32]	; (2c50 <sys_clock_elapsed+0x70>)
    2c2e:	22ac      	movs	r2, #172	; 0xac
    2c30:	f004 ff6b 	bl	7b0a <printk>
    2c34:	21ac      	movs	r1, #172	; 0xac
    2c36:	4805      	ldr	r0, [pc, #20]	; (2c4c <sys_clock_elapsed+0x6c>)
    2c38:	f004 ffed 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    2c3c:	f385 8811 	msr	BASEPRI, r5
    2c40:	f3bf 8f6f 	isb	sy
}
    2c44:	4620      	mov	r0, r4
    2c46:	bd38      	pop	{r3, r4, r5, pc}
    2c48:	200009b4 	.word	0x200009b4
    2c4c:	0000892b 	.word	0x0000892b
    2c50:	00008951 	.word	0x00008951
    2c54:	200009ac 	.word	0x200009ac
    2c58:	200009a8 	.word	0x200009a8

00002c5c <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    2c5c:	4b05      	ldr	r3, [pc, #20]	; (2c74 <sys_clock_idle_exit+0x18>)
    2c5e:	681b      	ldr	r3, [r3, #0]
    2c60:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    2c64:	bf01      	itttt	eq
    2c66:	f04f 22e0 	moveq.w	r2, #3758153728	; 0xe000e000
    2c6a:	6913      	ldreq	r3, [r2, #16]
    2c6c:	f043 0301 	orreq.w	r3, r3, #1
    2c70:	6113      	streq	r3, [r2, #16]
}
    2c72:	4770      	bx	lr
    2c74:	200009b0 	.word	0x200009b0

00002c78 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2c78:	4803      	ldr	r0, [pc, #12]	; (2c88 <k_sys_fatal_error_handler+0x10>)
    2c7a:	2145      	movs	r1, #69	; 0x45
{
    2c7c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    2c7e:	f004 ffdd 	bl	7c3c <z_log_minimal_printk>
		sys_arch_reboot(0);
    2c82:	2000      	movs	r0, #0
    2c84:	f7ff f8ea 	bl	1e5c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2c88:	000094a5 	.word	0x000094a5

00002c8c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    2c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2c90:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    2c92:	4c21      	ldr	r4, [pc, #132]	; (2d18 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    2c94:	4e21      	ldr	r6, [pc, #132]	; (2d1c <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2c96:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    2c9a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2d20 <check_ext_api_requests+0x94>
{
    2c9e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2ca0:	45a8      	cmp	r8, r5
    2ca2:	d803      	bhi.n	2cac <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    2ca4:	2000      	movs	r0, #0
    2ca6:	b005      	add	sp, #20
    2ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    2cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2cae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2cb2:	681f      	ldr	r7, [r3, #0]
    2cb4:	ab01      	add	r3, sp, #4
    2cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    2cba:	220c      	movs	r2, #12
    2cbc:	4619      	mov	r1, r3
    2cbe:	4638      	mov	r0, r7
    2cc0:	f005 f832 	bl	7d28 <memcmp>
    2cc4:	b990      	cbnz	r0, 2cec <check_ext_api_requests+0x60>
    2cc6:	b18f      	cbz	r7, 2cec <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    2cca:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2ccc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    2cce:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2cd0:	4291      	cmp	r1, r2
    2cd2:	d10b      	bne.n	2cec <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    2cd4:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    2cd6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    2cd8:	4291      	cmp	r1, r2
    2cda:	d807      	bhi.n	2cec <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    2cdc:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    2cde:	4291      	cmp	r1, r2
    2ce0:	d904      	bls.n	2cec <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    2ce2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2ce4:	695b      	ldr	r3, [r3, #20]
    2ce6:	ea32 0303 	bics.w	r3, r2, r3
    2cea:	d00a      	beq.n	2d02 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    2cec:	6a27      	ldr	r7, [r4, #32]
    2cee:	b167      	cbz	r7, 2d0a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    2cf0:	480c      	ldr	r0, [pc, #48]	; (2d24 <check_ext_api_requests+0x98>)
    2cf2:	f004 ff0a 	bl	7b0a <printk>
			k_panic();
    2cf6:	4040      	eors	r0, r0
    2cf8:	f380 8811 	msr	BASEPRI, r0
    2cfc:	f04f 0004 	mov.w	r0, #4
    2d00:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    2d02:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d04:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    2d06:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d08:	e7ca      	b.n	2ca0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    2d0a:	4648      	mov	r0, r9
    2d0c:	f004 fefd 	bl	7b0a <printk>
			*ext_api_req->ext_api = NULL;
    2d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d12:	601f      	str	r7, [r3, #0]
    2d14:	e7f5      	b.n	2d02 <check_ext_api_requests+0x76>
    2d16:	bf00      	nop
    2d18:	0000023c 	.word	0x0000023c
    2d1c:	0000850c 	.word	0x0000850c
    2d20:	000094f0 	.word	0x000094f0
    2d24:	000094c7 	.word	0x000094c7

00002d28 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2d28:	4a5b      	ldr	r2, [pc, #364]	; (2e98 <SystemInit+0x170>)
{
    2d2a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2d2c:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    2d30:	f043 0302 	orr.w	r3, r3, #2
    2d34:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d38:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d40:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    2d44:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2d48:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2d4a:	bf01      	itttt	eq
    2d4c:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    2d50:	2200      	moveq	r2, #0
    2d52:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    2d56:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2d5a:	f005 f9bf 	bl	80dc <nrf91_errata_14>
    2d5e:	b128      	cbz	r0, 2d6c <SystemInit+0x44>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    2d60:	2201      	movs	r2, #1
    2d62:	4b4e      	ldr	r3, [pc, #312]	; (2e9c <SystemInit+0x174>)
    2d64:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2d68:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2d74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2d78:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2d7c:	2a09      	cmp	r2, #9
    2d7e:	d105      	bne.n	2d8c <SystemInit+0x64>
            {
                switch(var2)
    2d80:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2d82:	bf1e      	ittt	ne
    2d84:	2201      	movne	r2, #1
    2d86:	4b45      	ldrne	r3, [pc, #276]	; (2e9c <SystemInit+0x174>)
    2d88:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    2d8c:	f005 f9a6 	bl	80dc <nrf91_errata_14>
    2d90:	b118      	cbz	r0, 2d9a <SystemInit+0x72>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    2d92:	220e      	movs	r2, #14
    2d94:	4b42      	ldr	r3, [pc, #264]	; (2ea0 <SystemInit+0x178>)
    2d96:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2d9a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2d9e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2da2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2da6:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    2daa:	2a09      	cmp	r2, #9
    2dac:	d106      	bne.n	2dbc <SystemInit+0x94>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    2dae:	2200      	movs	r2, #0
    2db0:	4b3a      	ldr	r3, [pc, #232]	; (2e9c <SystemInit+0x174>)
    2db2:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    2db6:	2201      	movs	r2, #1
    2db8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    2dbc:	2200      	movs	r2, #0
    2dbe:	00d3      	lsls	r3, r2, #3
    2dc0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    2dc4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2dc8:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2dcc:	3101      	adds	r1, #1
    2dce:	d008      	beq.n	2de2 <SystemInit+0xba>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2dd0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2dd4:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2dd6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2dda:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2dde:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2de0:	d1ed      	bne.n	2dbe <SystemInit+0x96>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2de2:	4b30      	ldr	r3, [pc, #192]	; (2ea4 <SystemInit+0x17c>)
    2de4:	69da      	ldr	r2, [r3, #28]
    2de6:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    2dea:	07d1      	lsls	r1, r2, #31
    2dec:	d543      	bpl.n	2e76 <SystemInit+0x14e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2dee:	4b2e      	ldr	r3, [pc, #184]	; (2ea8 <SystemInit+0x180>)
    2df0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2df4:	2a01      	cmp	r2, #1
    2df6:	d1fb      	bne.n	2df0 <SystemInit+0xc8>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2df8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2dfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2e00:	2a01      	cmp	r2, #1
    2e02:	d1fb      	bne.n	2dfc <SystemInit+0xd4>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2e04:	4b27      	ldr	r3, [pc, #156]	; (2ea4 <SystemInit+0x17c>)
    2e06:	69da      	ldr	r2, [r3, #28]
    2e08:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    2e0c:	07d2      	lsls	r2, r2, #31
    2e0e:	d50a      	bpl.n	2e26 <SystemInit+0xfe>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    2e10:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2e12:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    2e16:	61da      	str	r2, [r3, #28]
    2e18:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2e1c:	4a22      	ldr	r2, [pc, #136]	; (2ea8 <SystemInit+0x180>)
    2e1e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2e22:	2b01      	cmp	r3, #1
    2e24:	d1fb      	bne.n	2e1e <SystemInit+0xf6>
        uint32_t val = *word;
    2e26:	4a1f      	ldr	r2, [pc, #124]	; (2ea4 <SystemInit+0x17c>)
    2e28:	6a13      	ldr	r3, [r2, #32]
    2e2a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2e2e:	3301      	adds	r3, #1
    2e30:	d10c      	bne.n	2e4c <SystemInit+0x124>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2e32:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2e34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2e38:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    2e3c:	6213      	str	r3, [r2, #32]
    2e3e:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2e42:	4a19      	ldr	r2, [pc, #100]	; (2ea8 <SystemInit+0x180>)
    2e44:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2e48:	2b01      	cmp	r3, #1
    2e4a:	d1fb      	bne.n	2e44 <SystemInit+0x11c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    2e4c:	2200      	movs	r2, #0
    2e4e:	4b16      	ldr	r3, [pc, #88]	; (2ea8 <SystemInit+0x180>)
    2e50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2e54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2e58:	2a01      	cmp	r2, #1
    2e5a:	d1fb      	bne.n	2e54 <SystemInit+0x12c>
    2e5c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e60:	490d      	ldr	r1, [pc, #52]	; (2e98 <SystemInit+0x170>)
    2e62:	4b12      	ldr	r3, [pc, #72]	; (2eac <SystemInit+0x184>)
    2e64:	68ca      	ldr	r2, [r1, #12]
    2e66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e6a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e6c:	60cb      	str	r3, [r1, #12]
    2e6e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2e72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e74:	e7fd      	b.n	2e72 <SystemInit+0x14a>
        uint32_t val = *word;
    2e76:	6a1b      	ldr	r3, [r3, #32]
    2e78:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2e7c:	3301      	adds	r3, #1
    2e7e:	d0b6      	beq.n	2dee <SystemInit+0xc6>
        SCB->NSACR |= (3UL << 10);
    2e80:	4a05      	ldr	r2, [pc, #20]	; (2e98 <SystemInit+0x170>)
    2e82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2e86:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    2e8e:	4b08      	ldr	r3, [pc, #32]	; (2eb0 <SystemInit+0x188>)
    2e90:	4a08      	ldr	r2, [pc, #32]	; (2eb4 <SystemInit+0x18c>)
    2e92:	601a      	str	r2, [r3, #0]
}
    2e94:	bd08      	pop	{r3, pc}
    2e96:	bf00      	nop
    2e98:	e000ed00 	.word	0xe000ed00
    2e9c:	50004000 	.word	0x50004000
    2ea0:	5003a000 	.word	0x5003a000
    2ea4:	00ff8000 	.word	0x00ff8000
    2ea8:	50039000 	.word	0x50039000
    2eac:	05fa0004 	.word	0x05fa0004
    2eb0:	20000050 	.word	0x20000050
    2eb4:	03d09000 	.word	0x03d09000

00002eb8 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    2eb8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    2eba:	4604      	mov	r4, r0
    2ebc:	b940      	cbnz	r0, 2ed0 <nrfx_clock_init+0x18>
    2ebe:	4909      	ldr	r1, [pc, #36]	; (2ee4 <nrfx_clock_init+0x2c>)
    2ec0:	4809      	ldr	r0, [pc, #36]	; (2ee8 <nrfx_clock_init+0x30>)
    2ec2:	22bd      	movs	r2, #189	; 0xbd
    2ec4:	f004 fe21 	bl	7b0a <printk>
    2ec8:	21bd      	movs	r1, #189	; 0xbd
    2eca:	4806      	ldr	r0, [pc, #24]	; (2ee4 <nrfx_clock_init+0x2c>)
    2ecc:	f004 fea3 	bl	7c16 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2ed0:	4b06      	ldr	r3, [pc, #24]	; (2eec <nrfx_clock_init+0x34>)
    2ed2:	791a      	ldrb	r2, [r3, #4]
    2ed4:	b922      	cbnz	r2, 2ee0 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2ed6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    2ed8:	4805      	ldr	r0, [pc, #20]	; (2ef0 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    2eda:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    2edc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2ede:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2ee0:	4804      	ldr	r0, [pc, #16]	; (2ef4 <nrfx_clock_init+0x3c>)
    return err_code;
    2ee2:	e7fc      	b.n	2ede <nrfx_clock_init+0x26>
    2ee4:	00009523 	.word	0x00009523
    2ee8:	00008951 	.word	0x00008951
    2eec:	200009bc 	.word	0x200009bc
    2ef0:	0bad0000 	.word	0x0bad0000
    2ef4:	0bad000c 	.word	0x0bad000c

00002ef8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    2ef8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2efa:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <nrfx_clock_enable+0x30>)
    2efc:	791b      	ldrb	r3, [r3, #4]
    2efe:	b943      	cbnz	r3, 2f12 <nrfx_clock_enable+0x1a>
    2f00:	490a      	ldr	r1, [pc, #40]	; (2f2c <nrfx_clock_enable+0x34>)
    2f02:	480b      	ldr	r0, [pc, #44]	; (2f30 <nrfx_clock_enable+0x38>)
    2f04:	22d6      	movs	r2, #214	; 0xd6
    2f06:	f004 fe00 	bl	7b0a <printk>
    2f0a:	21d6      	movs	r1, #214	; 0xd6
    2f0c:	4807      	ldr	r0, [pc, #28]	; (2f2c <nrfx_clock_enable+0x34>)
    2f0e:	f004 fe82 	bl	7c16 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    2f12:	2005      	movs	r0, #5
    2f14:	f7fe fbbe 	bl	1694 <arch_irq_is_enabled>
    2f18:	b920      	cbnz	r0, 2f24 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    2f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    2f1e:	2005      	movs	r0, #5
    2f20:	f7fe bba8 	b.w	1674 <arch_irq_enable>
    2f24:	bd08      	pop	{r3, pc}
    2f26:	bf00      	nop
    2f28:	200009bc 	.word	0x200009bc
    2f2c:	00009523 	.word	0x00009523
    2f30:	00008951 	.word	0x00008951

00002f34 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2f34:	4b25      	ldr	r3, [pc, #148]	; (2fcc <nrfx_clock_start+0x98>)
{
    2f36:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2f38:	791b      	ldrb	r3, [r3, #4]
{
    2f3a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2f3c:	b953      	cbnz	r3, 2f54 <nrfx_clock_start+0x20>
    2f3e:	4924      	ldr	r1, [pc, #144]	; (2fd0 <nrfx_clock_start+0x9c>)
    2f40:	4824      	ldr	r0, [pc, #144]	; (2fd4 <nrfx_clock_start+0xa0>)
    2f42:	f44f 7289 	mov.w	r2, #274	; 0x112
    2f46:	f004 fde0 	bl	7b0a <printk>
    2f4a:	f44f 7189 	mov.w	r1, #274	; 0x112
    2f4e:	4820      	ldr	r0, [pc, #128]	; (2fd0 <nrfx_clock_start+0x9c>)
    2f50:	f004 fe61 	bl	7c16 <assert_post_action>
    switch (domain)
    2f54:	b174      	cbz	r4, 2f74 <nrfx_clock_start+0x40>
    2f56:	2c01      	cmp	r4, #1
    2f58:	d02d      	beq.n	2fb6 <nrfx_clock_start+0x82>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    2f5a:	491d      	ldr	r1, [pc, #116]	; (2fd0 <nrfx_clock_start+0x9c>)
    2f5c:	481d      	ldr	r0, [pc, #116]	; (2fd4 <nrfx_clock_start+0xa0>)
    2f5e:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2f62:	f004 fdd2 	bl	7b0a <printk>
            break;
    }
}
    2f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    2f6a:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2f6e:	4818      	ldr	r0, [pc, #96]	; (2fd0 <nrfx_clock_start+0x9c>)
    2f70:	f004 be51 	b.w	7c16 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2f74:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2f78:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2f7c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2f80:	03c9      	lsls	r1, r1, #15
    2f82:	d512      	bpl.n	2faa <nrfx_clock_start+0x76>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2f84:	f003 0303 	and.w	r3, r3, #3
    2f88:	2b02      	cmp	r3, #2
    2f8a:	d10e      	bne.n	2faa <nrfx_clock_start+0x76>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    2f8c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f94:	2200      	movs	r2, #0
    2f96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2f9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    2f9e:	2202      	movs	r2, #2
    2fa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fa4:	2201      	movs	r2, #1
    2fa6:	609a      	str	r2, [r3, #8]
}
    2fa8:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    2faa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fae:	2201      	movs	r2, #1
    2fb0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    2fb4:	e7ec      	b.n	2f90 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fb6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fba:	2200      	movs	r2, #0
    2fbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2fc0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2fc4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fc8:	601c      	str	r4, [r3, #0]
}
    2fca:	e7ed      	b.n	2fa8 <nrfx_clock_start+0x74>
    2fcc:	200009bc 	.word	0x200009bc
    2fd0:	00009523 	.word	0x00009523
    2fd4:	00008951 	.word	0x00008951

00002fd8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2fda:	4b28      	ldr	r3, [pc, #160]	; (307c <nrfx_clock_stop+0xa4>)
{
    2fdc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    2fde:	791b      	ldrb	r3, [r3, #4]
    2fe0:	b953      	cbnz	r3, 2ff8 <nrfx_clock_stop+0x20>
    2fe2:	4927      	ldr	r1, [pc, #156]	; (3080 <nrfx_clock_stop+0xa8>)
    2fe4:	4827      	ldr	r0, [pc, #156]	; (3084 <nrfx_clock_stop+0xac>)
    2fe6:	f240 124b 	movw	r2, #331	; 0x14b
    2fea:	f004 fd8e 	bl	7b0a <printk>
    2fee:	f240 114b 	movw	r1, #331	; 0x14b
    2ff2:	4823      	ldr	r0, [pc, #140]	; (3080 <nrfx_clock_stop+0xa8>)
    2ff4:	f004 fe0f 	bl	7c16 <assert_post_action>
    switch (domain)
    2ff8:	b174      	cbz	r4, 3018 <nrfx_clock_stop+0x40>
    2ffa:	2c01      	cmp	r4, #1
    2ffc:	d023      	beq.n	3046 <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    2ffe:	4920      	ldr	r1, [pc, #128]	; (3080 <nrfx_clock_stop+0xa8>)
    3000:	4820      	ldr	r0, [pc, #128]	; (3084 <nrfx_clock_stop+0xac>)
    3002:	f240 1267 	movw	r2, #359	; 0x167
    3006:	f004 fd80 	bl	7b0a <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    300a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
    300e:	f240 1167 	movw	r1, #359	; 0x167
    3012:	481b      	ldr	r0, [pc, #108]	; (3080 <nrfx_clock_stop+0xa8>)
    3014:	f004 bdff 	b.w	7c16 <assert_post_action>
    p_reg->INTENCLR = mask;
    3018:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    301c:	2302      	movs	r3, #2
    301e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3022:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3026:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    302a:	2301      	movs	r3, #1
    302c:	f242 7410 	movw	r4, #10000	; 0x2710
    3030:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3032:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
    3036:	03db      	lsls	r3, r3, #15
    3038:	d51f      	bpl.n	307a <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    303a:	2001      	movs	r0, #1
    303c:	f005 f85f 	bl	80fe <nrfx_busy_wait>
    3040:	3c01      	subs	r4, #1
    3042:	d1f6      	bne.n	3032 <nrfx_clock_stop+0x5a>
    3044:	e019      	b.n	307a <nrfx_clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    3046:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    304a:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    304c:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3050:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    3054:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3058:	606c      	str	r4, [r5, #4]
    305a:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    305e:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3062:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3066:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    306a:	03d2      	lsls	r2, r2, #15
    306c:	d505      	bpl.n	307a <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    306e:	b123      	cbz	r3, 307a <nrfx_clock_stop+0xa2>
    3070:	2001      	movs	r0, #1
    3072:	f005 f844 	bl	80fe <nrfx_busy_wait>
    3076:	3c01      	subs	r4, #1
    3078:	d1f1      	bne.n	305e <nrfx_clock_stop+0x86>
}
    307a:	bd38      	pop	{r3, r4, r5, pc}
    307c:	200009bc 	.word	0x200009bc
    3080:	00009523 	.word	0x00009523
    3084:	00008951 	.word	0x00008951

00003088 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3088:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    308c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3090:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3092:	b152      	cbz	r2, 30aa <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3094:	2000      	movs	r0, #0
    3096:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    309a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    309e:	2201      	movs	r2, #1
    30a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    30a4:	4b11      	ldr	r3, [pc, #68]	; (30ec <nrfx_power_clock_irq_handler+0x64>)
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    30b2:	b18a      	cbz	r2, 30d8 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30b4:	2200      	movs	r2, #0
    30b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    30ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30be:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30c2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    30c6:	f002 0203 	and.w	r2, r2, #3
    30ca:	2a01      	cmp	r2, #1
    30cc:	f04f 0102 	mov.w	r1, #2
    30d0:	d103      	bne.n	30da <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    30d2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30d6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    30d8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    30da:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    30de:	4b03      	ldr	r3, [pc, #12]	; (30ec <nrfx_power_clock_irq_handler+0x64>)
    30e0:	2001      	movs	r0, #1
}
    30e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    30e6:	681b      	ldr	r3, [r3, #0]
    30e8:	4718      	bx	r3
    30ea:	bf00      	nop
    30ec:	200009bc 	.word	0x200009bc

000030f0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    30f0:	4b0e      	ldr	r3, [pc, #56]	; (312c <z_sys_init_run_level+0x3c>)
{
    30f2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    30f4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    30f8:	3001      	adds	r0, #1
    30fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    30fe:	42a6      	cmp	r6, r4
    3100:	d800      	bhi.n	3104 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3102:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3104:	e9d4 3500 	ldrd	r3, r5, [r4]
    3108:	4628      	mov	r0, r5
    310a:	4798      	blx	r3
		if (dev != NULL) {
    310c:	b165      	cbz	r5, 3128 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    310e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3110:	b130      	cbz	r0, 3120 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3112:	2800      	cmp	r0, #0
    3114:	bfb8      	it	lt
    3116:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3118:	28ff      	cmp	r0, #255	; 0xff
    311a:	bfa8      	it	ge
    311c:	20ff      	movge	r0, #255	; 0xff
    311e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3120:	785a      	ldrb	r2, [r3, #1]
    3122:	f042 0201 	orr.w	r2, r2, #1
    3126:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3128:	3408      	adds	r4, #8
    312a:	e7e8      	b.n	30fe <z_sys_init_run_level+0xe>
    312c:	00008744 	.word	0x00008744

00003130 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3132:	4604      	mov	r4, r0
    3134:	460e      	mov	r6, r1
	__asm__ volatile(
    3136:	f04f 0320 	mov.w	r3, #32
    313a:	f3ef 8711 	mrs	r7, BASEPRI
    313e:	f383 8812 	msr	BASEPRI_MAX, r3
    3142:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3146:	f001 fbc3 	bl	48d0 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    314a:	2200      	movs	r2, #0
    314c:	2c04      	cmp	r4, #4
    314e:	bf98      	it	ls
    3150:	4b1d      	ldrls	r3, [pc, #116]	; (31c8 <z_fatal_error+0x98>)
    3152:	4605      	mov	r5, r0
	switch (reason) {
    3154:	bf94      	ite	ls
    3156:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    315a:	4b1c      	ldrhi	r3, [pc, #112]	; (31cc <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    315c:	9200      	str	r2, [sp, #0]
    315e:	2145      	movs	r1, #69	; 0x45
    3160:	4622      	mov	r2, r4
    3162:	481b      	ldr	r0, [pc, #108]	; (31d0 <z_fatal_error+0xa0>)
    3164:	f004 fd6a 	bl	7c3c <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3168:	b13e      	cbz	r6, 317a <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    316a:	69f3      	ldr	r3, [r6, #28]
    316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3170:	b11b      	cbz	r3, 317a <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    3172:	2145      	movs	r1, #69	; 0x45
    3174:	4817      	ldr	r0, [pc, #92]	; (31d4 <z_fatal_error+0xa4>)
    3176:	f004 fd61 	bl	7c3c <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    317a:	b135      	cbz	r5, 318a <z_fatal_error+0x5a>
    317c:	4628      	mov	r0, r5
    317e:	f004 ffed 	bl	815c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    3182:	4603      	mov	r3, r0
    3184:	b108      	cbz	r0, 318a <z_fatal_error+0x5a>
    3186:	7802      	ldrb	r2, [r0, #0]
    3188:	b902      	cbnz	r2, 318c <z_fatal_error+0x5c>
		thread_name = "unknown";
    318a:	4b13      	ldr	r3, [pc, #76]	; (31d8 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    318c:	462a      	mov	r2, r5
    318e:	2145      	movs	r1, #69	; 0x45
    3190:	4812      	ldr	r0, [pc, #72]	; (31dc <z_fatal_error+0xac>)
    3192:	f004 fd53 	bl	7c3c <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3196:	4631      	mov	r1, r6
    3198:	4620      	mov	r0, r4
    319a:	f7ff fd6d 	bl	2c78 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    319e:	2c04      	cmp	r4, #4
    31a0:	d108      	bne.n	31b4 <z_fatal_error+0x84>
    31a2:	490f      	ldr	r1, [pc, #60]	; (31e0 <z_fatal_error+0xb0>)
    31a4:	480f      	ldr	r0, [pc, #60]	; (31e4 <z_fatal_error+0xb4>)
    31a6:	228f      	movs	r2, #143	; 0x8f
    31a8:	f004 fcaf 	bl	7b0a <printk>
    31ac:	218f      	movs	r1, #143	; 0x8f
    31ae:	480c      	ldr	r0, [pc, #48]	; (31e0 <z_fatal_error+0xb0>)
    31b0:	f004 fd31 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    31b4:	f387 8811 	msr	BASEPRI, r7
    31b8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    31bc:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    31be:	b003      	add	sp, #12
    31c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    31c4:	f7fe be92 	b.w	1eec <z_impl_k_thread_abort>
    31c8:	0000875c 	.word	0x0000875c
    31cc:	00009560 	.word	0x00009560
    31d0:	00009576 	.word	0x00009576
    31d4:	000095a3 	.word	0x000095a3
    31d8:	0000956e 	.word	0x0000956e
    31dc:	000095c9 	.word	0x000095c9
    31e0:	000095e6 	.word	0x000095e6
    31e4:	00008951 	.word	0x00008951

000031e8 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    31e8:	2300      	movs	r3, #0
    31ea:	2201      	movs	r2, #1
{
    31ec:	b510      	push	{r4, lr}
    31ee:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    31f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    31f4:	220f      	movs	r2, #15
    31f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    31fa:	2218      	movs	r2, #24
	z_setup_new_thread(thread, stack,
    31fc:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    31fe:	4b0b      	ldr	r3, [pc, #44]	; (322c <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    3200:	4c0b      	ldr	r4, [pc, #44]	; (3230 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3202:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    3206:	f44f 72a0 	mov.w	r2, #320	; 0x140
    320a:	490a      	ldr	r1, [pc, #40]	; (3234 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
    320c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
    3210:	fb02 1100 	mla	r1, r2, r0, r1
    3214:	9300      	str	r3, [sp, #0]
    3216:	4620      	mov	r0, r4
    3218:	4b07      	ldr	r3, [pc, #28]	; (3238 <init_idle_thread+0x50>)
    321a:	f000 f98d 	bl	3538 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    321e:	7b63      	ldrb	r3, [r4, #13]
    3220:	f023 0304 	bic.w	r3, r3, #4
    3224:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3226:	b006      	add	sp, #24
    3228:	bd10      	pop	{r4, pc}
    322a:	bf00      	nop
    322c:	200009c4 	.word	0x200009c4
    3230:	20000130 	.word	0x20000130
    3234:	200025a8 	.word	0x200025a8
    3238:	00003721 	.word	0x00003721

0000323c <bg_thread_main>:
	z_sys_post_kernel = true;
    323c:	2201      	movs	r2, #1
{
    323e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3240:	4b09      	ldr	r3, [pc, #36]	; (3268 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3242:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3244:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3246:	f7ff ff53 	bl	30f0 <z_sys_init_run_level>
	boot_banner();
    324a:	f001 fe7b 	bl	4f44 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    324e:	2003      	movs	r0, #3
    3250:	f7ff ff4e 	bl	30f0 <z_sys_init_run_level>
	z_init_static_threads();
    3254:	f000 f9c4 	bl	35e0 <z_init_static_threads>
	main();
    3258:	f004 fc4e 	bl	7af8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    325c:	4a03      	ldr	r2, [pc, #12]	; (326c <bg_thread_main+0x30>)
    325e:	7b13      	ldrb	r3, [r2, #12]
    3260:	f023 0301 	bic.w	r3, r3, #1
    3264:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3266:	bd08      	pop	{r3, pc}
    3268:	200013e5 	.word	0x200013e5
    326c:	200001b0 	.word	0x200001b0

00003270 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3270:	4802      	ldr	r0, [pc, #8]	; (327c <z_bss_zero+0xc>)
    3272:	4a03      	ldr	r2, [pc, #12]	; (3280 <z_bss_zero+0x10>)
    3274:	2100      	movs	r1, #0
    3276:	1a12      	subs	r2, r2, r0
    3278:	f004 bd8a 	b.w	7d90 <memset>
    327c:	20000130 	.word	0x20000130
    3280:	200015a4 	.word	0x200015a4

00003284 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3284:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3286:	4b35      	ldr	r3, [pc, #212]	; (335c <z_cstart+0xd8>)
    3288:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    328a:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    328e:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3292:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3296:	2400      	movs	r4, #0
    3298:	23e0      	movs	r3, #224	; 0xe0
    329a:	4d31      	ldr	r5, [pc, #196]	; (3360 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    329c:	4e31      	ldr	r6, [pc, #196]	; (3364 <z_cstart+0xe0>)
    329e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    32a2:	77ec      	strb	r4, [r5, #31]
    32a4:	762c      	strb	r4, [r5, #24]
    32a6:	766c      	strb	r4, [r5, #25]
    32a8:	76ac      	strb	r4, [r5, #26]
    32aa:	f885 4020 	strb.w	r4, [r5, #32]
    32ae:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    32b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32b2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3368 <z_cstart+0xe4>
    32b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    32ba:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    32bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    32be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    32c2:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    32c4:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    32c6:	68eb      	ldr	r3, [r5, #12]
    32c8:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    32ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    32ce:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    32d2:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    32d4:	f7fe fd70 	bl	1db8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    32d8:	f7fe f98a 	bl	15f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    32dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32e0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    32e2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    32e4:	f7ff f850 	bl	2388 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    32e8:	f7fe fe8e 	bl	2008 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    32ec:	f240 1301 	movw	r3, #257	; 0x101
    32f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    32f4:	ab06      	add	r3, sp, #24
    32f6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    32f8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    32fc:	f004 ff01 	bl	8102 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3300:	4620      	mov	r0, r4
    3302:	f7ff fef5 	bl	30f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3306:	2001      	movs	r0, #1
    3308:	f7ff fef2 	bl	30f0 <z_sys_init_run_level>
	z_sched_init();
    330c:	f001 f996 	bl	463c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3310:	4b16      	ldr	r3, [pc, #88]	; (336c <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    3312:	4d17      	ldr	r5, [pc, #92]	; (3370 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3314:	9305      	str	r3, [sp, #20]
    3316:	2301      	movs	r3, #1
    3318:	4916      	ldr	r1, [pc, #88]	; (3374 <z_cstart+0xf0>)
    331a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    331e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3322:	4628      	mov	r0, r5
    3324:	464b      	mov	r3, r9
    3326:	e9cd 4401 	strd	r4, r4, [sp, #4]
    332a:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    332c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    332e:	f000 f903 	bl	3538 <z_setup_new_thread>
    3332:	4680      	mov	r8, r0
    3334:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    3336:	4628      	mov	r0, r5
    3338:	f022 0204 	bic.w	r2, r2, #4
    333c:	736a      	strb	r2, [r5, #13]
    333e:	f000 fe7f 	bl	4040 <z_ready_thread>
		init_idle_thread(i);
    3342:	4620      	mov	r0, r4
    3344:	f7ff ff50 	bl	31e8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3348:	4b0b      	ldr	r3, [pc, #44]	; (3378 <z_cstart+0xf4>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    334a:	464a      	mov	r2, r9
    334c:	4641      	mov	r1, r8
    334e:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3350:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    3352:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3354:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3356:	f7fe fa63 	bl	1820 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    335a:	bf00      	nop
    335c:	200026e8 	.word	0x200026e8
    3360:	e000ed00 	.word	0xe000ed00
    3364:	200009c4 	.word	0x200009c4
    3368:	0000323d 	.word	0x0000323d
    336c:	00009652 	.word	0x00009652
    3370:	200001b0 	.word	0x200001b0
    3374:	200015a8 	.word	0x200015a8
    3378:	20000130 	.word	0x20000130

0000337c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    337e:	4c14      	ldr	r4, [pc, #80]	; (33d0 <init_mem_slab_module+0x54>)
    3380:	4d14      	ldr	r5, [pc, #80]	; (33d4 <init_mem_slab_module+0x58>)
    3382:	4e15      	ldr	r6, [pc, #84]	; (33d8 <init_mem_slab_module+0x5c>)
    3384:	42ac      	cmp	r4, r5
    3386:	d908      	bls.n	339a <init_mem_slab_module+0x1e>
    3388:	4631      	mov	r1, r6
    338a:	4814      	ldr	r0, [pc, #80]	; (33dc <init_mem_slab_module+0x60>)
    338c:	223c      	movs	r2, #60	; 0x3c
    338e:	f004 fbbc 	bl	7b0a <printk>
    3392:	213c      	movs	r1, #60	; 0x3c
    3394:	4630      	mov	r0, r6
    3396:	f004 fc3e 	bl	7c16 <assert_post_action>
    339a:	42ac      	cmp	r4, r5
    339c:	d301      	bcc.n	33a2 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
    339e:	2000      	movs	r0, #0
	return rc;
}
    33a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    33a2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    33a6:	ea42 0301 	orr.w	r3, r2, r1
    33aa:	f013 0303 	ands.w	r3, r3, #3
    33ae:	d10b      	bne.n	33c8 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
    33b0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    33b2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    33b4:	4283      	cmp	r3, r0
    33b6:	d101      	bne.n	33bc <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    33b8:	3420      	adds	r4, #32
    33ba:	e7e3      	b.n	3384 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    33bc:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    33be:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    33c0:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    33c2:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    33c4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    33c6:	e7f5      	b.n	33b4 <init_mem_slab_module+0x38>
	return rc;
    33c8:	f06f 0015 	mvn.w	r0, #21
    33cc:	e7e8      	b.n	33a0 <init_mem_slab_module+0x24>
    33ce:	bf00      	nop
    33d0:	200000dc 	.word	0x200000dc
    33d4:	200000dc 	.word	0x200000dc
    33d8:	0000965a 	.word	0x0000965a
    33dc:	00008951 	.word	0x00008951

000033e0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    33e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    33e4:	4604      	mov	r4, r0
    33e6:	460d      	mov	r5, r1
    33e8:	4690      	mov	r8, r2
    33ea:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    33ec:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    33f0:	f04f 0320 	mov.w	r3, #32
    33f4:	f3ef 8911 	mrs	r9, BASEPRI
    33f8:	f383 8812 	msr	BASEPRI_MAX, r3
    33fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3400:	4630      	mov	r0, r6
    3402:	f000 f969 	bl	36d8 <z_spin_lock_valid>
    3406:	b940      	cbnz	r0, 341a <k_mem_slab_alloc+0x3a>
    3408:	491f      	ldr	r1, [pc, #124]	; (3488 <k_mem_slab_alloc+0xa8>)
    340a:	4820      	ldr	r0, [pc, #128]	; (348c <k_mem_slab_alloc+0xac>)
    340c:	2281      	movs	r2, #129	; 0x81
    340e:	f004 fb7c 	bl	7b0a <printk>
    3412:	2181      	movs	r1, #129	; 0x81
    3414:	481c      	ldr	r0, [pc, #112]	; (3488 <k_mem_slab_alloc+0xa8>)
    3416:	f004 fbfe 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    341a:	4630      	mov	r0, r6
    341c:	f000 f978 	bl	3710 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3420:	69a3      	ldr	r3, [r4, #24]
    3422:	b1c3      	cbz	r3, 3456 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    3424:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    342a:	69e3      	ldr	r3, [r4, #28]
    342c:	3301      	adds	r3, #1
    342e:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3430:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3432:	4630      	mov	r0, r6
    3434:	f000 f95e 	bl	36f4 <z_spin_unlock_valid>
    3438:	b940      	cbnz	r0, 344c <k_mem_slab_alloc+0x6c>
    343a:	4913      	ldr	r1, [pc, #76]	; (3488 <k_mem_slab_alloc+0xa8>)
    343c:	4813      	ldr	r0, [pc, #76]	; (348c <k_mem_slab_alloc+0xac>)
    343e:	22ac      	movs	r2, #172	; 0xac
    3440:	f004 fb63 	bl	7b0a <printk>
    3444:	21ac      	movs	r1, #172	; 0xac
    3446:	4810      	ldr	r0, [pc, #64]	; (3488 <k_mem_slab_alloc+0xa8>)
    3448:	f004 fbe5 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    344c:	f389 8811 	msr	BASEPRI, r9
    3450:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3454:	e013      	b.n	347e <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3456:	ea58 0207 	orrs.w	r2, r8, r7
    345a:	d103      	bne.n	3464 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    345c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3460:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3462:	e7e6      	b.n	3432 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3464:	4622      	mov	r2, r4
    3466:	4649      	mov	r1, r9
    3468:	4630      	mov	r0, r6
    346a:	e9cd 8700 	strd	r8, r7, [sp]
    346e:	f000 ff4b 	bl	4308 <z_pend_curr>
		if (result == 0) {
    3472:	4604      	mov	r4, r0
    3474:	b918      	cbnz	r0, 347e <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    3476:	4b06      	ldr	r3, [pc, #24]	; (3490 <k_mem_slab_alloc+0xb0>)
    3478:	689b      	ldr	r3, [r3, #8]
    347a:	695b      	ldr	r3, [r3, #20]
    347c:	602b      	str	r3, [r5, #0]
}
    347e:	4620      	mov	r0, r4
    3480:	b003      	add	sp, #12
    3482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3486:	bf00      	nop
    3488:	0000892b 	.word	0x0000892b
    348c:	00008951 	.word	0x00008951
    3490:	200009c4 	.word	0x200009c4

00003494 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3498:	4604      	mov	r4, r0
    349a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    349c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    34a0:	f04f 0320 	mov.w	r3, #32
    34a4:	f3ef 8711 	mrs	r7, BASEPRI
    34a8:	f383 8812 	msr	BASEPRI_MAX, r3
    34ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    34b0:	4630      	mov	r0, r6
    34b2:	f000 f911 	bl	36d8 <z_spin_lock_valid>
    34b6:	b940      	cbnz	r0, 34ca <k_mem_slab_free+0x36>
    34b8:	491d      	ldr	r1, [pc, #116]	; (3530 <k_mem_slab_free+0x9c>)
    34ba:	481e      	ldr	r0, [pc, #120]	; (3534 <k_mem_slab_free+0xa0>)
    34bc:	2281      	movs	r2, #129	; 0x81
    34be:	f004 fb24 	bl	7b0a <printk>
    34c2:	2181      	movs	r1, #129	; 0x81
    34c4:	481a      	ldr	r0, [pc, #104]	; (3530 <k_mem_slab_free+0x9c>)
    34c6:	f004 fba6 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    34ca:	4630      	mov	r0, r6
    34cc:	f000 f920 	bl	3710 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    34d0:	f8d4 8018 	ldr.w	r8, [r4, #24]
    34d4:	f1b8 0f00 	cmp.w	r8, #0
    34d8:	d10f      	bne.n	34fa <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    34da:	4620      	mov	r0, r4
    34dc:	f001 f870 	bl	45c0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    34e0:	b158      	cbz	r0, 34fa <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    34e2:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    34e4:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    34e8:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    34ea:	f000 fda9 	bl	4040 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    34ee:	4639      	mov	r1, r7
    34f0:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    34f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    34f6:	f000 bbaf 	b.w	3c58 <z_reschedule>
	**(char ***) mem = slab->free_list;
    34fa:	682b      	ldr	r3, [r5, #0]
    34fc:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    34fe:	4630      	mov	r0, r6
    3500:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3502:	682b      	ldr	r3, [r5, #0]
    3504:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    3506:	69e3      	ldr	r3, [r4, #28]
    3508:	3b01      	subs	r3, #1
    350a:	61e3      	str	r3, [r4, #28]
    350c:	f000 f8f2 	bl	36f4 <z_spin_unlock_valid>
    3510:	b940      	cbnz	r0, 3524 <k_mem_slab_free+0x90>
    3512:	4907      	ldr	r1, [pc, #28]	; (3530 <k_mem_slab_free+0x9c>)
    3514:	4807      	ldr	r0, [pc, #28]	; (3534 <k_mem_slab_free+0xa0>)
    3516:	22ac      	movs	r2, #172	; 0xac
    3518:	f004 faf7 	bl	7b0a <printk>
    351c:	21ac      	movs	r1, #172	; 0xac
    351e:	4804      	ldr	r0, [pc, #16]	; (3530 <k_mem_slab_free+0x9c>)
    3520:	f004 fb79 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3524:	f387 8811 	msr	BASEPRI, r7
    3528:	f3bf 8f6f 	isb	sy
}
    352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3530:	0000892b 	.word	0x0000892b
    3534:	00008951 	.word	0x00008951

00003538 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    353c:	b085      	sub	sp, #20
    353e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3542:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    3544:	f1b9 0f0f 	cmp.w	r9, #15
{
    3548:	460f      	mov	r7, r1
    354a:	4615      	mov	r5, r2
    354c:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    354e:	d12e      	bne.n	35ae <z_setup_new_thread+0x76>
    3550:	4b1f      	ldr	r3, [pc, #124]	; (35d0 <z_setup_new_thread+0x98>)
    3552:	4598      	cmp	r8, r3
    3554:	d12f      	bne.n	35b6 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3556:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    355a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    355e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    3560:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    3562:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3564:	2304      	movs	r3, #4
    3566:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    356a:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    356c:	9302      	str	r3, [sp, #8]
    356e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3570:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3574:	9301      	str	r3, [sp, #4]
    3576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    3578:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    357a:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    357e:	9300      	str	r3, [sp, #0]
    3580:	462a      	mov	r2, r5
    3582:	4643      	mov	r3, r8
    3584:	4639      	mov	r1, r7
    3586:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3588:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    358c:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    358e:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    3592:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    3594:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3596:	f7fe f927 	bl	17e8 <arch_new_thread>
	if (!_current) {
    359a:	4b0e      	ldr	r3, [pc, #56]	; (35d4 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    359c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    359e:	689b      	ldr	r3, [r3, #8]
    35a0:	b103      	cbz	r3, 35a4 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    35a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    35a4:	4628      	mov	r0, r5
    35a6:	6723      	str	r3, [r4, #112]	; 0x70
    35a8:	b005      	add	sp, #20
    35aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    35ae:	f109 0310 	add.w	r3, r9, #16
    35b2:	2b1e      	cmp	r3, #30
    35b4:	d9cf      	bls.n	3556 <z_setup_new_thread+0x1e>
    35b6:	f240 12ff 	movw	r2, #511	; 0x1ff
    35ba:	4907      	ldr	r1, [pc, #28]	; (35d8 <z_setup_new_thread+0xa0>)
    35bc:	4807      	ldr	r0, [pc, #28]	; (35dc <z_setup_new_thread+0xa4>)
    35be:	f004 faa4 	bl	7b0a <printk>
    35c2:	f240 11ff 	movw	r1, #511	; 0x1ff
    35c6:	4804      	ldr	r0, [pc, #16]	; (35d8 <z_setup_new_thread+0xa0>)
    35c8:	f004 fb25 	bl	7c16 <assert_post_action>
    35cc:	e7c3      	b.n	3556 <z_setup_new_thread+0x1e>
    35ce:	bf00      	nop
    35d0:	00003721 	.word	0x00003721
    35d4:	200009c4 	.word	0x200009c4
    35d8:	0000967f 	.word	0x0000967f
    35dc:	00008951 	.word	0x00008951

000035e0 <z_init_static_threads>:
{
    35e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35e4:	4c37      	ldr	r4, [pc, #220]	; (36c4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    35e6:	4d38      	ldr	r5, [pc, #224]	; (36c8 <z_init_static_threads+0xe8>)
    35e8:	4f38      	ldr	r7, [pc, #224]	; (36cc <z_init_static_threads+0xec>)
{
    35ea:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    35ec:	42ac      	cmp	r4, r5
    35ee:	4626      	mov	r6, r4
    35f0:	d90a      	bls.n	3608 <z_init_static_threads+0x28>
    35f2:	4639      	mov	r1, r7
    35f4:	4836      	ldr	r0, [pc, #216]	; (36d0 <z_init_static_threads+0xf0>)
    35f6:	f240 22cf 	movw	r2, #719	; 0x2cf
    35fa:	f004 fa86 	bl	7b0a <printk>
    35fe:	f240 21cf 	movw	r1, #719	; 0x2cf
    3602:	4638      	mov	r0, r7
    3604:	f004 fb07 	bl	7c16 <assert_post_action>
    3608:	42ae      	cmp	r6, r5
    360a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    360e:	d31b      	bcc.n	3648 <z_init_static_threads+0x68>
	k_sched_lock();
    3610:	f000 fb58 	bl	3cc4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3614:	4c2b      	ldr	r4, [pc, #172]	; (36c4 <z_init_static_threads+0xe4>)
    3616:	4e2d      	ldr	r6, [pc, #180]	; (36cc <z_init_static_threads+0xec>)
    3618:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 36d0 <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    361c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 36d4 <z_init_static_threads+0xf4>
    3620:	42ac      	cmp	r4, r5
    3622:	d90a      	bls.n	363a <z_init_static_threads+0x5a>
    3624:	4631      	mov	r1, r6
    3626:	4640      	mov	r0, r8
    3628:	f240 22ee 	movw	r2, #750	; 0x2ee
    362c:	f004 fa6d 	bl	7b0a <printk>
    3630:	f240 21ee 	movw	r1, #750	; 0x2ee
    3634:	4630      	mov	r0, r6
    3636:	f004 faee 	bl	7c16 <assert_post_action>
    363a:	42ac      	cmp	r4, r5
    363c:	d320      	bcc.n	3680 <z_init_static_threads+0xa0>
}
    363e:	b007      	add	sp, #28
    3640:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3644:	f000 bf60 	b.w	4508 <k_sched_unlock>
		z_setup_new_thread(
    3648:	f854 3c04 	ldr.w	r3, [r4, #-4]
    364c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3650:	9305      	str	r3, [sp, #20]
    3652:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3656:	9304      	str	r3, [sp, #16]
    3658:	f854 3c14 	ldr.w	r3, [r4, #-20]
    365c:	9303      	str	r3, [sp, #12]
    365e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3662:	9302      	str	r3, [sp, #8]
    3664:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3668:	9301      	str	r3, [sp, #4]
    366a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    366e:	9300      	str	r3, [sp, #0]
    3670:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3674:	f7ff ff60 	bl	3538 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3678:	f854 3c30 	ldr.w	r3, [r4, #-48]
    367c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    367e:	e7b5      	b.n	35ec <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3680:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3682:	1c5a      	adds	r2, r3, #1
    3684:	d00f      	beq.n	36a6 <z_init_static_threads+0xc6>
		} else {
			return (t * to_hz + off) / from_hz;
    3686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    368a:	f240 30e7 	movw	r0, #999	; 0x3e7
    368e:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
    3690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3694:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3698:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    369c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    369e:	d104      	bne.n	36aa <z_init_static_threads+0xca>
	z_sched_start(thread);
    36a0:	4638      	mov	r0, r7
    36a2:	f000 fd03 	bl	40ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    36a6:	3430      	adds	r4, #48	; 0x30
    36a8:	e7ba      	b.n	3620 <z_init_static_threads+0x40>
    36aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    36ae:	2300      	movs	r3, #0
    36b0:	f7fc fdc4 	bl	23c <__aeabi_uldivmod>
    36b4:	4602      	mov	r2, r0
    36b6:	460b      	mov	r3, r1
    36b8:	f107 0018 	add.w	r0, r7, #24
    36bc:	4649      	mov	r1, r9
    36be:	f001 fa07 	bl	4ad0 <z_add_timeout>
    36c2:	e7f0      	b.n	36a6 <z_init_static_threads+0xc6>
    36c4:	200000dc 	.word	0x200000dc
    36c8:	200000dc 	.word	0x200000dc
    36cc:	0000967f 	.word	0x0000967f
    36d0:	00008951 	.word	0x00008951
    36d4:	00004131 	.word	0x00004131

000036d8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    36d8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    36da:	b138      	cbz	r0, 36ec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    36dc:	4b04      	ldr	r3, [pc, #16]	; (36f0 <z_spin_lock_valid+0x18>)
    36de:	f000 0003 	and.w	r0, r0, #3
    36e2:	7d1b      	ldrb	r3, [r3, #20]
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	bf18      	it	ne
    36e8:	2001      	movne	r0, #1
    36ea:	4770      	bx	lr
			return false;
		}
	}
	return true;
    36ec:	2001      	movs	r0, #1
}
    36ee:	4770      	bx	lr
    36f0:	200009c4 	.word	0x200009c4

000036f4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    36f4:	4905      	ldr	r1, [pc, #20]	; (370c <z_spin_unlock_valid+0x18>)
{
    36f6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    36f8:	688a      	ldr	r2, [r1, #8]
    36fa:	7d08      	ldrb	r0, [r1, #20]
    36fc:	6819      	ldr	r1, [r3, #0]
    36fe:	4302      	orrs	r2, r0
    3700:	2000      	movs	r0, #0
    3702:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    3704:	bf04      	itt	eq
    3706:	6018      	streq	r0, [r3, #0]
	return true;
    3708:	2001      	moveq	r0, #1
}
    370a:	4770      	bx	lr
    370c:	200009c4 	.word	0x200009c4

00003710 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3710:	4a02      	ldr	r2, [pc, #8]	; (371c <z_spin_lock_set_owner+0xc>)
    3712:	7d11      	ldrb	r1, [r2, #20]
    3714:	6893      	ldr	r3, [r2, #8]
    3716:	430b      	orrs	r3, r1
    3718:	6003      	str	r3, [r0, #0]
}
    371a:	4770      	bx	lr
    371c:	200009c4 	.word	0x200009c4

00003720 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3720:	4c10      	ldr	r4, [pc, #64]	; (3764 <idle+0x44>)
{
    3722:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3724:	68a3      	ldr	r3, [r4, #8]
    3726:	f993 300e 	ldrsb.w	r3, [r3, #14]
    372a:	2b00      	cmp	r3, #0
    372c:	da08      	bge.n	3740 <idle+0x20>
    372e:	490e      	ldr	r1, [pc, #56]	; (3768 <idle+0x48>)
    3730:	480e      	ldr	r0, [pc, #56]	; (376c <idle+0x4c>)
    3732:	2227      	movs	r2, #39	; 0x27
    3734:	f004 f9e9 	bl	7b0a <printk>
    3738:	2127      	movs	r1, #39	; 0x27
    373a:	480b      	ldr	r0, [pc, #44]	; (3768 <idle+0x48>)
    373c:	f004 fa6b 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3740:	f04f 0220 	mov.w	r2, #32
    3744:	f3ef 8311 	mrs	r3, BASEPRI
    3748:	f382 8812 	msr	BASEPRI_MAX, r2
    374c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3750:	f001 faa8 	bl	4ca4 <z_get_next_timeout_expiry>
    3754:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    3756:	f7fd fbcb 	bl	ef0 <pm_system_suspend>
    375a:	2800      	cmp	r0, #0
    375c:	d1f0      	bne.n	3740 <idle+0x20>
	arch_cpu_idle();
    375e:	f7fd ff4d 	bl	15fc <arch_cpu_idle>
}
    3762:	e7ed      	b.n	3740 <idle+0x20>
    3764:	200009c4 	.word	0x200009c4
    3768:	000096a2 	.word	0x000096a2
    376c:	00008951 	.word	0x00008951

00003770 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3774:	4604      	mov	r4, r0
    3776:	4617      	mov	r7, r2
    3778:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    377a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    377e:	b143      	cbz	r3, 3792 <z_impl_k_mutex_lock+0x22>
    3780:	495f      	ldr	r1, [pc, #380]	; (3900 <z_impl_k_mutex_lock+0x190>)
    3782:	4860      	ldr	r0, [pc, #384]	; (3904 <z_impl_k_mutex_lock+0x194>)
    3784:	2265      	movs	r2, #101	; 0x65
    3786:	f004 f9c0 	bl	7b0a <printk>
    378a:	2165      	movs	r1, #101	; 0x65
    378c:	485c      	ldr	r0, [pc, #368]	; (3900 <z_impl_k_mutex_lock+0x190>)
    378e:	f004 fa42 	bl	7c16 <assert_post_action>
    3792:	f04f 0320 	mov.w	r3, #32
    3796:	f3ef 8811 	mrs	r8, BASEPRI
    379a:	f383 8812 	msr	BASEPRI_MAX, r3
    379e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    37a2:	4859      	ldr	r0, [pc, #356]	; (3908 <z_impl_k_mutex_lock+0x198>)
    37a4:	f7ff ff98 	bl	36d8 <z_spin_lock_valid>
    37a8:	b940      	cbnz	r0, 37bc <z_impl_k_mutex_lock+0x4c>
    37aa:	4958      	ldr	r1, [pc, #352]	; (390c <z_impl_k_mutex_lock+0x19c>)
    37ac:	4855      	ldr	r0, [pc, #340]	; (3904 <z_impl_k_mutex_lock+0x194>)
    37ae:	2281      	movs	r2, #129	; 0x81
    37b0:	f004 f9ab 	bl	7b0a <printk>
    37b4:	2181      	movs	r1, #129	; 0x81
    37b6:	4855      	ldr	r0, [pc, #340]	; (390c <z_impl_k_mutex_lock+0x19c>)
    37b8:	f004 fa2d 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    37bc:	4852      	ldr	r0, [pc, #328]	; (3908 <z_impl_k_mutex_lock+0x198>)
    37be:	f7ff ffa7 	bl	3710 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    37c2:	68e3      	ldr	r3, [r4, #12]
    37c4:	4a52      	ldr	r2, [pc, #328]	; (3910 <z_impl_k_mutex_lock+0x1a0>)
    37c6:	b1d3      	cbz	r3, 37fe <z_impl_k_mutex_lock+0x8e>
    37c8:	68a0      	ldr	r0, [r4, #8]
    37ca:	6891      	ldr	r1, [r2, #8]
    37cc:	4288      	cmp	r0, r1
    37ce:	d033      	beq.n	3838 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    37d0:	ea57 0306 	orrs.w	r3, r7, r6
    37d4:	d132      	bne.n	383c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    37d6:	484c      	ldr	r0, [pc, #304]	; (3908 <z_impl_k_mutex_lock+0x198>)
    37d8:	f7ff ff8c 	bl	36f4 <z_spin_unlock_valid>
    37dc:	b940      	cbnz	r0, 37f0 <z_impl_k_mutex_lock+0x80>
    37de:	494b      	ldr	r1, [pc, #300]	; (390c <z_impl_k_mutex_lock+0x19c>)
    37e0:	4848      	ldr	r0, [pc, #288]	; (3904 <z_impl_k_mutex_lock+0x194>)
    37e2:	22ac      	movs	r2, #172	; 0xac
    37e4:	f004 f991 	bl	7b0a <printk>
    37e8:	21ac      	movs	r1, #172	; 0xac
    37ea:	4848      	ldr	r0, [pc, #288]	; (390c <z_impl_k_mutex_lock+0x19c>)
    37ec:	f004 fa13 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    37f0:	f388 8811 	msr	BASEPRI, r8
    37f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    37f8:	f06f 000f 	mvn.w	r0, #15
    37fc:	e019      	b.n	3832 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    37fe:	6891      	ldr	r1, [r2, #8]
    3800:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3804:	3301      	adds	r3, #1
    3806:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3808:	6893      	ldr	r3, [r2, #8]
    380a:	483f      	ldr	r0, [pc, #252]	; (3908 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    380c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    380e:	60a3      	str	r3, [r4, #8]
    3810:	f7ff ff70 	bl	36f4 <z_spin_unlock_valid>
    3814:	b940      	cbnz	r0, 3828 <z_impl_k_mutex_lock+0xb8>
    3816:	493d      	ldr	r1, [pc, #244]	; (390c <z_impl_k_mutex_lock+0x19c>)
    3818:	483a      	ldr	r0, [pc, #232]	; (3904 <z_impl_k_mutex_lock+0x194>)
    381a:	22ac      	movs	r2, #172	; 0xac
    381c:	f004 f975 	bl	7b0a <printk>
    3820:	21ac      	movs	r1, #172	; 0xac
    3822:	483a      	ldr	r0, [pc, #232]	; (390c <z_impl_k_mutex_lock+0x19c>)
    3824:	f004 f9f7 	bl	7c16 <assert_post_action>
    3828:	f388 8811 	msr	BASEPRI, r8
    382c:	f3bf 8f6f 	isb	sy
		return 0;
    3830:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3832:	b002      	add	sp, #8
    3834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3838:	6921      	ldr	r1, [r4, #16]
    383a:	e7e3      	b.n	3804 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    383c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3840:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3844:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3848:	4299      	cmp	r1, r3
    384a:	bfa8      	it	ge
    384c:	4619      	movge	r1, r3
    384e:	4291      	cmp	r1, r2
    3850:	bfb8      	it	lt
    3852:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3854:	428b      	cmp	r3, r1
    3856:	dd3e      	ble.n	38d6 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    3858:	f004 fc89 	bl	816e <adjust_owner_prio.isra.0>
    385c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    385e:	4622      	mov	r2, r4
    3860:	4641      	mov	r1, r8
    3862:	e9cd 7600 	strd	r7, r6, [sp]
    3866:	4828      	ldr	r0, [pc, #160]	; (3908 <z_impl_k_mutex_lock+0x198>)
    3868:	f000 fd4e 	bl	4308 <z_pend_curr>
	if (got_mutex == 0) {
    386c:	2800      	cmp	r0, #0
    386e:	d0e0      	beq.n	3832 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    3870:	f04f 0320 	mov.w	r3, #32
    3874:	f3ef 8611 	mrs	r6, BASEPRI
    3878:	f383 8812 	msr	BASEPRI_MAX, r3
    387c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3880:	4821      	ldr	r0, [pc, #132]	; (3908 <z_impl_k_mutex_lock+0x198>)
    3882:	f7ff ff29 	bl	36d8 <z_spin_lock_valid>
    3886:	b940      	cbnz	r0, 389a <z_impl_k_mutex_lock+0x12a>
    3888:	4920      	ldr	r1, [pc, #128]	; (390c <z_impl_k_mutex_lock+0x19c>)
    388a:	481e      	ldr	r0, [pc, #120]	; (3904 <z_impl_k_mutex_lock+0x194>)
    388c:	2281      	movs	r2, #129	; 0x81
    388e:	f004 f93c 	bl	7b0a <printk>
    3892:	2181      	movs	r1, #129	; 0x81
    3894:	481d      	ldr	r0, [pc, #116]	; (390c <z_impl_k_mutex_lock+0x19c>)
    3896:	f004 f9be 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    389a:	481b      	ldr	r0, [pc, #108]	; (3908 <z_impl_k_mutex_lock+0x198>)
    389c:	f7ff ff38 	bl	3710 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    38a0:	6823      	ldr	r3, [r4, #0]
    38a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38a4:	429c      	cmp	r4, r3
    38a6:	d00a      	beq.n	38be <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    38a8:	b14b      	cbz	r3, 38be <z_impl_k_mutex_lock+0x14e>
    38aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    38ae:	4299      	cmp	r1, r3
    38b0:	bfa8      	it	ge
    38b2:	4619      	movge	r1, r3
    38b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    38b8:	4299      	cmp	r1, r3
    38ba:	bfb8      	it	lt
    38bc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    38be:	68a0      	ldr	r0, [r4, #8]
    38c0:	f004 fc55 	bl	816e <adjust_owner_prio.isra.0>
    38c4:	b900      	cbnz	r0, 38c8 <z_impl_k_mutex_lock+0x158>
	if (resched) {
    38c6:	b145      	cbz	r5, 38da <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
    38c8:	4631      	mov	r1, r6
    38ca:	480f      	ldr	r0, [pc, #60]	; (3908 <z_impl_k_mutex_lock+0x198>)
    38cc:	f000 f9c4 	bl	3c58 <z_reschedule>
	return -EAGAIN;
    38d0:	f06f 000a 	mvn.w	r0, #10
    38d4:	e7ad      	b.n	3832 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    38d6:	2500      	movs	r5, #0
    38d8:	e7c1      	b.n	385e <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    38da:	480b      	ldr	r0, [pc, #44]	; (3908 <z_impl_k_mutex_lock+0x198>)
    38dc:	f7ff ff0a 	bl	36f4 <z_spin_unlock_valid>
    38e0:	b940      	cbnz	r0, 38f4 <z_impl_k_mutex_lock+0x184>
    38e2:	490a      	ldr	r1, [pc, #40]	; (390c <z_impl_k_mutex_lock+0x19c>)
    38e4:	4807      	ldr	r0, [pc, #28]	; (3904 <z_impl_k_mutex_lock+0x194>)
    38e6:	22ac      	movs	r2, #172	; 0xac
    38e8:	f004 f90f 	bl	7b0a <printk>
    38ec:	21ac      	movs	r1, #172	; 0xac
    38ee:	4807      	ldr	r0, [pc, #28]	; (390c <z_impl_k_mutex_lock+0x19c>)
    38f0:	f004 f991 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    38f4:	f386 8811 	msr	BASEPRI, r6
    38f8:	f3bf 8f6f 	isb	sy
    38fc:	e7e8      	b.n	38d0 <z_impl_k_mutex_lock+0x160>
    38fe:	bf00      	nop
    3900:	000096c3 	.word	0x000096c3
    3904:	00008951 	.word	0x00008951
    3908:	200009ec 	.word	0x200009ec
    390c:	0000892b 	.word	0x0000892b
    3910:	200009c4 	.word	0x200009c4

00003914 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3914:	b538      	push	{r3, r4, r5, lr}
    3916:	4604      	mov	r4, r0
    3918:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    391c:	b143      	cbz	r3, 3930 <z_impl_k_mutex_unlock+0x1c>
    391e:	4943      	ldr	r1, [pc, #268]	; (3a2c <z_impl_k_mutex_unlock+0x118>)
    3920:	4843      	ldr	r0, [pc, #268]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    3922:	22c7      	movs	r2, #199	; 0xc7
    3924:	f004 f8f1 	bl	7b0a <printk>
    3928:	21c7      	movs	r1, #199	; 0xc7
    392a:	4840      	ldr	r0, [pc, #256]	; (3a2c <z_impl_k_mutex_unlock+0x118>)
    392c:	f004 f973 	bl	7c16 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3930:	68a3      	ldr	r3, [r4, #8]
    3932:	2b00      	cmp	r3, #0
    3934:	d074      	beq.n	3a20 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3936:	4d3f      	ldr	r5, [pc, #252]	; (3a34 <z_impl_k_mutex_unlock+0x120>)
    3938:	68aa      	ldr	r2, [r5, #8]
    393a:	4293      	cmp	r3, r2
    393c:	d173      	bne.n	3a26 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    393e:	68e3      	ldr	r3, [r4, #12]
    3940:	b943      	cbnz	r3, 3954 <z_impl_k_mutex_unlock+0x40>
    3942:	493a      	ldr	r1, [pc, #232]	; (3a2c <z_impl_k_mutex_unlock+0x118>)
    3944:	483a      	ldr	r0, [pc, #232]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    3946:	22df      	movs	r2, #223	; 0xdf
    3948:	f004 f8df 	bl	7b0a <printk>
    394c:	21df      	movs	r1, #223	; 0xdf
    394e:	4837      	ldr	r0, [pc, #220]	; (3a2c <z_impl_k_mutex_unlock+0x118>)
    3950:	f004 f961 	bl	7c16 <assert_post_action>
    3954:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    3958:	b143      	cbz	r3, 396c <z_impl_k_mutex_unlock+0x58>
    395a:	4937      	ldr	r1, [pc, #220]	; (3a38 <z_impl_k_mutex_unlock+0x124>)
    395c:	4834      	ldr	r0, [pc, #208]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    395e:	22fd      	movs	r2, #253	; 0xfd
    3960:	f004 f8d3 	bl	7b0a <printk>
    3964:	21fd      	movs	r1, #253	; 0xfd
    3966:	4834      	ldr	r0, [pc, #208]	; (3a38 <z_impl_k_mutex_unlock+0x124>)
    3968:	f004 f955 	bl	7c16 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    396c:	68ab      	ldr	r3, [r5, #8]
    396e:	7bdb      	ldrb	r3, [r3, #15]
    3970:	2b01      	cmp	r3, #1
    3972:	d108      	bne.n	3986 <z_impl_k_mutex_unlock+0x72>
    3974:	4930      	ldr	r1, [pc, #192]	; (3a38 <z_impl_k_mutex_unlock+0x124>)
    3976:	482e      	ldr	r0, [pc, #184]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    3978:	22fe      	movs	r2, #254	; 0xfe
    397a:	f004 f8c6 	bl	7b0a <printk>
    397e:	21fe      	movs	r1, #254	; 0xfe
    3980:	482d      	ldr	r0, [pc, #180]	; (3a38 <z_impl_k_mutex_unlock+0x124>)
    3982:	f004 f948 	bl	7c16 <assert_post_action>

	--_current->base.sched_locked;
    3986:	68aa      	ldr	r2, [r5, #8]
    3988:	7bd3      	ldrb	r3, [r2, #15]
    398a:	3b01      	subs	r3, #1
    398c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    398e:	68e3      	ldr	r3, [r4, #12]
    3990:	2b01      	cmp	r3, #1
    3992:	d905      	bls.n	39a0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    3994:	3b01      	subs	r3, #1
    3996:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3998:	f000 fdb6 	bl	4508 <k_sched_unlock>

	return 0;
    399c:	2000      	movs	r0, #0
}
    399e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    39a0:	f04f 0320 	mov.w	r3, #32
    39a4:	f3ef 8511 	mrs	r5, BASEPRI
    39a8:	f383 8812 	msr	BASEPRI_MAX, r3
    39ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39b0:	4822      	ldr	r0, [pc, #136]	; (3a3c <z_impl_k_mutex_unlock+0x128>)
    39b2:	f7ff fe91 	bl	36d8 <z_spin_lock_valid>
    39b6:	b940      	cbnz	r0, 39ca <z_impl_k_mutex_unlock+0xb6>
    39b8:	4921      	ldr	r1, [pc, #132]	; (3a40 <z_impl_k_mutex_unlock+0x12c>)
    39ba:	481d      	ldr	r0, [pc, #116]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    39bc:	2281      	movs	r2, #129	; 0x81
    39be:	f004 f8a4 	bl	7b0a <printk>
    39c2:	2181      	movs	r1, #129	; 0x81
    39c4:	481e      	ldr	r0, [pc, #120]	; (3a40 <z_impl_k_mutex_unlock+0x12c>)
    39c6:	f004 f926 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    39ca:	481c      	ldr	r0, [pc, #112]	; (3a3c <z_impl_k_mutex_unlock+0x128>)
    39cc:	f7ff fea0 	bl	3710 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    39d0:	6921      	ldr	r1, [r4, #16]
    39d2:	68a0      	ldr	r0, [r4, #8]
    39d4:	f004 fbcb 	bl	816e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    39d8:	4620      	mov	r0, r4
    39da:	f000 fdf1 	bl	45c0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    39de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    39e0:	b158      	cbz	r0, 39fa <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
    39e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    39e6:	6122      	str	r2, [r4, #16]
    39e8:	2200      	movs	r2, #0
    39ea:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    39ec:	f000 fb28 	bl	4040 <z_ready_thread>
		z_reschedule(&lock, key);
    39f0:	4629      	mov	r1, r5
    39f2:	4812      	ldr	r0, [pc, #72]	; (3a3c <z_impl_k_mutex_unlock+0x128>)
    39f4:	f000 f930 	bl	3c58 <z_reschedule>
    39f8:	e7ce      	b.n	3998 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    39fa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    39fc:	480f      	ldr	r0, [pc, #60]	; (3a3c <z_impl_k_mutex_unlock+0x128>)
    39fe:	f7ff fe79 	bl	36f4 <z_spin_unlock_valid>
    3a02:	b940      	cbnz	r0, 3a16 <z_impl_k_mutex_unlock+0x102>
    3a04:	490e      	ldr	r1, [pc, #56]	; (3a40 <z_impl_k_mutex_unlock+0x12c>)
    3a06:	480a      	ldr	r0, [pc, #40]	; (3a30 <z_impl_k_mutex_unlock+0x11c>)
    3a08:	22ac      	movs	r2, #172	; 0xac
    3a0a:	f004 f87e 	bl	7b0a <printk>
    3a0e:	21ac      	movs	r1, #172	; 0xac
    3a10:	480b      	ldr	r0, [pc, #44]	; (3a40 <z_impl_k_mutex_unlock+0x12c>)
    3a12:	f004 f900 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3a16:	f385 8811 	msr	BASEPRI, r5
    3a1a:	f3bf 8f6f 	isb	sy
    3a1e:	e7bb      	b.n	3998 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    3a20:	f06f 0015 	mvn.w	r0, #21
    3a24:	e7bb      	b.n	399e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    3a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a2a:	e7b8      	b.n	399e <z_impl_k_mutex_unlock+0x8a>
    3a2c:	000096c3 	.word	0x000096c3
    3a30:	00008951 	.word	0x00008951
    3a34:	200009c4 	.word	0x200009c4
    3a38:	000096e5 	.word	0x000096e5
    3a3c:	200009ec 	.word	0x200009ec
    3a40:	0000892b 	.word	0x0000892b

00003a44 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3a44:	b538      	push	{r3, r4, r5, lr}
    3a46:	4604      	mov	r4, r0
	__asm__ volatile(
    3a48:	f04f 0320 	mov.w	r3, #32
    3a4c:	f3ef 8511 	mrs	r5, BASEPRI
    3a50:	f383 8812 	msr	BASEPRI_MAX, r3
    3a54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a58:	4812      	ldr	r0, [pc, #72]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a5a:	f7ff fe3d 	bl	36d8 <z_spin_lock_valid>
    3a5e:	b940      	cbnz	r0, 3a72 <z_impl_k_sem_give+0x2e>
    3a60:	4911      	ldr	r1, [pc, #68]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a62:	4812      	ldr	r0, [pc, #72]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a64:	2281      	movs	r2, #129	; 0x81
    3a66:	f004 f850 	bl	7b0a <printk>
    3a6a:	2181      	movs	r1, #129	; 0x81
    3a6c:	480e      	ldr	r0, [pc, #56]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a6e:	f004 f8d2 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    3a72:	480c      	ldr	r0, [pc, #48]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a74:	f7ff fe4c 	bl	3710 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3a78:	4620      	mov	r0, r4
    3a7a:	f000 fda1 	bl	45c0 <z_unpend_first_thread>

	if (thread != NULL) {
    3a7e:	b148      	cbz	r0, 3a94 <z_impl_k_sem_give+0x50>
    3a80:	2200      	movs	r2, #0
    3a82:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3a84:	f000 fadc 	bl	4040 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3a88:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3a8e:	4805      	ldr	r0, [pc, #20]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a90:	f000 b8e2 	b.w	3c58 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3a94:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3a98:	429a      	cmp	r2, r3
    3a9a:	bf18      	it	ne
    3a9c:	3301      	addne	r3, #1
    3a9e:	60a3      	str	r3, [r4, #8]
}
    3aa0:	e7f2      	b.n	3a88 <z_impl_k_sem_give+0x44>
    3aa2:	bf00      	nop
    3aa4:	200009f0 	.word	0x200009f0
    3aa8:	0000892b 	.word	0x0000892b
    3aac:	00008951 	.word	0x00008951

00003ab0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ab2:	4604      	mov	r4, r0
    3ab4:	4616      	mov	r6, r2
    3ab6:	461d      	mov	r5, r3
    3ab8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    3abc:	b15b      	cbz	r3, 3ad6 <z_impl_k_sem_take+0x26>
    3abe:	ea52 0305 	orrs.w	r3, r2, r5
    3ac2:	d008      	beq.n	3ad6 <z_impl_k_sem_take+0x26>
    3ac4:	492b      	ldr	r1, [pc, #172]	; (3b74 <z_impl_k_sem_take+0xc4>)
    3ac6:	482c      	ldr	r0, [pc, #176]	; (3b78 <z_impl_k_sem_take+0xc8>)
    3ac8:	2279      	movs	r2, #121	; 0x79
    3aca:	f004 f81e 	bl	7b0a <printk>
    3ace:	2179      	movs	r1, #121	; 0x79
    3ad0:	4828      	ldr	r0, [pc, #160]	; (3b74 <z_impl_k_sem_take+0xc4>)
    3ad2:	f004 f8a0 	bl	7c16 <assert_post_action>
    3ad6:	f04f 0320 	mov.w	r3, #32
    3ada:	f3ef 8711 	mrs	r7, BASEPRI
    3ade:	f383 8812 	msr	BASEPRI_MAX, r3
    3ae2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ae6:	4825      	ldr	r0, [pc, #148]	; (3b7c <z_impl_k_sem_take+0xcc>)
    3ae8:	f7ff fdf6 	bl	36d8 <z_spin_lock_valid>
    3aec:	b940      	cbnz	r0, 3b00 <z_impl_k_sem_take+0x50>
    3aee:	4924      	ldr	r1, [pc, #144]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3af0:	4821      	ldr	r0, [pc, #132]	; (3b78 <z_impl_k_sem_take+0xc8>)
    3af2:	2281      	movs	r2, #129	; 0x81
    3af4:	f004 f809 	bl	7b0a <printk>
    3af8:	2181      	movs	r1, #129	; 0x81
    3afa:	4821      	ldr	r0, [pc, #132]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3afc:	f004 f88b 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    3b00:	481e      	ldr	r0, [pc, #120]	; (3b7c <z_impl_k_sem_take+0xcc>)
    3b02:	f7ff fe05 	bl	3710 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3b06:	68a3      	ldr	r3, [r4, #8]
    3b08:	b1ab      	cbz	r3, 3b36 <z_impl_k_sem_take+0x86>
		sem->count--;
    3b0a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3b0c:	481b      	ldr	r0, [pc, #108]	; (3b7c <z_impl_k_sem_take+0xcc>)
    3b0e:	60a3      	str	r3, [r4, #8]
    3b10:	f7ff fdf0 	bl	36f4 <z_spin_unlock_valid>
    3b14:	b940      	cbnz	r0, 3b28 <z_impl_k_sem_take+0x78>
    3b16:	491a      	ldr	r1, [pc, #104]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3b18:	4817      	ldr	r0, [pc, #92]	; (3b78 <z_impl_k_sem_take+0xc8>)
    3b1a:	22ac      	movs	r2, #172	; 0xac
    3b1c:	f003 fff5 	bl	7b0a <printk>
    3b20:	21ac      	movs	r1, #172	; 0xac
    3b22:	4817      	ldr	r0, [pc, #92]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3b24:	f004 f877 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3b28:	f387 8811 	msr	BASEPRI, r7
    3b2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3b30:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3b32:	b003      	add	sp, #12
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3b36:	ea56 0305 	orrs.w	r3, r6, r5
    3b3a:	d113      	bne.n	3b64 <z_impl_k_sem_take+0xb4>
    3b3c:	480f      	ldr	r0, [pc, #60]	; (3b7c <z_impl_k_sem_take+0xcc>)
    3b3e:	f7ff fdd9 	bl	36f4 <z_spin_unlock_valid>
    3b42:	b940      	cbnz	r0, 3b56 <z_impl_k_sem_take+0xa6>
    3b44:	490e      	ldr	r1, [pc, #56]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3b46:	480c      	ldr	r0, [pc, #48]	; (3b78 <z_impl_k_sem_take+0xc8>)
    3b48:	22ac      	movs	r2, #172	; 0xac
    3b4a:	f003 ffde 	bl	7b0a <printk>
    3b4e:	21ac      	movs	r1, #172	; 0xac
    3b50:	480b      	ldr	r0, [pc, #44]	; (3b80 <z_impl_k_sem_take+0xd0>)
    3b52:	f004 f860 	bl	7c16 <assert_post_action>
    3b56:	f387 8811 	msr	BASEPRI, r7
    3b5a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3b5e:	f06f 000f 	mvn.w	r0, #15
    3b62:	e7e6      	b.n	3b32 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b64:	4622      	mov	r2, r4
    3b66:	4639      	mov	r1, r7
    3b68:	e9cd 6500 	strd	r6, r5, [sp]
    3b6c:	4803      	ldr	r0, [pc, #12]	; (3b7c <z_impl_k_sem_take+0xcc>)
    3b6e:	f000 fbcb 	bl	4308 <z_pend_curr>
	return ret;
    3b72:	e7de      	b.n	3b32 <z_impl_k_sem_take+0x82>
    3b74:	00009710 	.word	0x00009710
    3b78:	00008951 	.word	0x00008951
    3b7c:	200009f0 	.word	0x200009f0
    3b80:	0000892b 	.word	0x0000892b

00003b84 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3b84:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3b86:	4c08      	ldr	r4, [pc, #32]	; (3ba8 <z_reset_time_slice+0x24>)
    3b88:	6823      	ldr	r3, [r4, #0]
    3b8a:	b15b      	cbz	r3, 3ba4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3b8c:	f7ff f828 	bl	2be0 <sys_clock_elapsed>
    3b90:	4603      	mov	r3, r0
    3b92:	6820      	ldr	r0, [r4, #0]
    3b94:	4a05      	ldr	r2, [pc, #20]	; (3bac <z_reset_time_slice+0x28>)
    3b96:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3b98:	2100      	movs	r1, #0
	}
}
    3b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    3b9e:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    3ba0:	f001 b8b6 	b.w	4d10 <z_set_timeout_expiry>
}
    3ba4:	bd10      	pop	{r4, pc}
    3ba6:	bf00      	nop
    3ba8:	20000a00 	.word	0x20000a00
    3bac:	200009c4 	.word	0x200009c4

00003bb0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb2:	4604      	mov	r4, r0
    3bb4:	460d      	mov	r5, r1
	__asm__ volatile(
    3bb6:	f04f 0320 	mov.w	r3, #32
    3bba:	f3ef 8611 	mrs	r6, BASEPRI
    3bbe:	f383 8812 	msr	BASEPRI_MAX, r3
    3bc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3bc6:	481e      	ldr	r0, [pc, #120]	; (3c40 <k_sched_time_slice_set+0x90>)
    3bc8:	f7ff fd86 	bl	36d8 <z_spin_lock_valid>
    3bcc:	b940      	cbnz	r0, 3be0 <k_sched_time_slice_set+0x30>
    3bce:	491d      	ldr	r1, [pc, #116]	; (3c44 <k_sched_time_slice_set+0x94>)
    3bd0:	481d      	ldr	r0, [pc, #116]	; (3c48 <k_sched_time_slice_set+0x98>)
    3bd2:	2281      	movs	r2, #129	; 0x81
    3bd4:	f003 ff99 	bl	7b0a <printk>
    3bd8:	2181      	movs	r1, #129	; 0x81
    3bda:	481a      	ldr	r0, [pc, #104]	; (3c44 <k_sched_time_slice_set+0x94>)
    3bdc:	f004 f81b 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    3be0:	4817      	ldr	r0, [pc, #92]	; (3c40 <k_sched_time_slice_set+0x90>)
    3be2:	f7ff fd95 	bl	3710 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3be6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3bea:	2100      	movs	r1, #0
    3bec:	f240 30e7 	movw	r0, #999	; 0x3e7
    3bf0:	4b16      	ldr	r3, [pc, #88]	; (3c4c <k_sched_time_slice_set+0x9c>)
    3bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3bf6:	6119      	str	r1, [r3, #16]
    3bf8:	2300      	movs	r3, #0
    3bfa:	fbe4 0107 	umlal	r0, r1, r4, r7
    3bfe:	f7fc fb1d 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3c02:	2c00      	cmp	r4, #0
    3c04:	4b12      	ldr	r3, [pc, #72]	; (3c50 <k_sched_time_slice_set+0xa0>)
    3c06:	dc16      	bgt.n	3c36 <k_sched_time_slice_set+0x86>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    3c08:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3c0a:	4b12      	ldr	r3, [pc, #72]	; (3c54 <k_sched_time_slice_set+0xa4>)
    3c0c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3c0e:	f7ff ffb9 	bl	3b84 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c12:	480b      	ldr	r0, [pc, #44]	; (3c40 <k_sched_time_slice_set+0x90>)
    3c14:	f7ff fd6e 	bl	36f4 <z_spin_unlock_valid>
    3c18:	b940      	cbnz	r0, 3c2c <k_sched_time_slice_set+0x7c>
    3c1a:	490a      	ldr	r1, [pc, #40]	; (3c44 <k_sched_time_slice_set+0x94>)
    3c1c:	480a      	ldr	r0, [pc, #40]	; (3c48 <k_sched_time_slice_set+0x98>)
    3c1e:	22ac      	movs	r2, #172	; 0xac
    3c20:	f003 ff73 	bl	7b0a <printk>
    3c24:	21ac      	movs	r1, #172	; 0xac
    3c26:	4807      	ldr	r0, [pc, #28]	; (3c44 <k_sched_time_slice_set+0x94>)
    3c28:	f003 fff5 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3c2c:	f386 8811 	msr	BASEPRI, r6
    3c30:	f3bf 8f6f 	isb	sy
	}
}
    3c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    3c36:	2802      	cmp	r0, #2
    3c38:	bfb8      	it	lt
    3c3a:	2002      	movlt	r0, #2
    3c3c:	e7e4      	b.n	3c08 <k_sched_time_slice_set+0x58>
    3c3e:	bf00      	nop
    3c40:	200009f8 	.word	0x200009f8
    3c44:	0000892b 	.word	0x0000892b
    3c48:	00008951 	.word	0x00008951
    3c4c:	200009c4 	.word	0x200009c4
    3c50:	20000a00 	.word	0x20000a00
    3c54:	200009fc 	.word	0x200009fc

00003c58 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3c58:	b510      	push	{r4, lr}
    3c5a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c5c:	460c      	mov	r4, r1
    3c5e:	b9c1      	cbnz	r1, 3c92 <z_reschedule+0x3a>
    3c60:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    3c64:	b9aa      	cbnz	r2, 3c92 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    3c66:	4a14      	ldr	r2, [pc, #80]	; (3cb8 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    3c68:	69d1      	ldr	r1, [r2, #28]
    3c6a:	6892      	ldr	r2, [r2, #8]
    3c6c:	4291      	cmp	r1, r2
    3c6e:	d010      	beq.n	3c92 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c70:	f7ff fd40 	bl	36f4 <z_spin_unlock_valid>
    3c74:	b940      	cbnz	r0, 3c88 <z_reschedule+0x30>
    3c76:	4911      	ldr	r1, [pc, #68]	; (3cbc <z_reschedule+0x64>)
    3c78:	4811      	ldr	r0, [pc, #68]	; (3cc0 <z_reschedule+0x68>)
    3c7a:	22c3      	movs	r2, #195	; 0xc3
    3c7c:	f003 ff45 	bl	7b0a <printk>
    3c80:	21c3      	movs	r1, #195	; 0xc3
    3c82:	480e      	ldr	r0, [pc, #56]	; (3cbc <z_reschedule+0x64>)
    3c84:	f003 ffc7 	bl	7c16 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    3c8c:	2000      	movs	r0, #0
    3c8e:	f7fd bd55 	b.w	173c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c92:	4618      	mov	r0, r3
    3c94:	f7ff fd2e 	bl	36f4 <z_spin_unlock_valid>
    3c98:	b940      	cbnz	r0, 3cac <z_reschedule+0x54>
    3c9a:	4908      	ldr	r1, [pc, #32]	; (3cbc <z_reschedule+0x64>)
    3c9c:	4808      	ldr	r0, [pc, #32]	; (3cc0 <z_reschedule+0x68>)
    3c9e:	22ac      	movs	r2, #172	; 0xac
    3ca0:	f003 ff33 	bl	7b0a <printk>
    3ca4:	21ac      	movs	r1, #172	; 0xac
    3ca6:	4805      	ldr	r0, [pc, #20]	; (3cbc <z_reschedule+0x64>)
    3ca8:	f003 ffb5 	bl	7c16 <assert_post_action>
    3cac:	f384 8811 	msr	BASEPRI, r4
    3cb0:	f3bf 8f6f 	isb	sy
    3cb4:	bd10      	pop	{r4, pc}
    3cb6:	bf00      	nop
    3cb8:	200009c4 	.word	0x200009c4
    3cbc:	0000892b 	.word	0x0000892b
    3cc0:	00008951 	.word	0x00008951

00003cc4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    3cc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3cc6:	f04f 0320 	mov.w	r3, #32
    3cca:	f3ef 8511 	mrs	r5, BASEPRI
    3cce:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3cd6:	4820      	ldr	r0, [pc, #128]	; (3d58 <k_sched_lock+0x94>)
    3cd8:	f7ff fcfe 	bl	36d8 <z_spin_lock_valid>
    3cdc:	b940      	cbnz	r0, 3cf0 <k_sched_lock+0x2c>
    3cde:	491f      	ldr	r1, [pc, #124]	; (3d5c <k_sched_lock+0x98>)
    3ce0:	481f      	ldr	r0, [pc, #124]	; (3d60 <k_sched_lock+0x9c>)
    3ce2:	2281      	movs	r2, #129	; 0x81
    3ce4:	f003 ff11 	bl	7b0a <printk>
    3ce8:	2181      	movs	r1, #129	; 0x81
    3cea:	481c      	ldr	r0, [pc, #112]	; (3d5c <k_sched_lock+0x98>)
    3cec:	f003 ff93 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    3cf0:	4819      	ldr	r0, [pc, #100]	; (3d58 <k_sched_lock+0x94>)
    3cf2:	f7ff fd0d 	bl	3710 <z_spin_lock_set_owner>
    3cf6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    3cfa:	b143      	cbz	r3, 3d0e <k_sched_lock+0x4a>
    3cfc:	4919      	ldr	r1, [pc, #100]	; (3d64 <k_sched_lock+0xa0>)
    3cfe:	4818      	ldr	r0, [pc, #96]	; (3d60 <k_sched_lock+0x9c>)
    3d00:	22fd      	movs	r2, #253	; 0xfd
    3d02:	f003 ff02 	bl	7b0a <printk>
    3d06:	21fd      	movs	r1, #253	; 0xfd
    3d08:	4816      	ldr	r0, [pc, #88]	; (3d64 <k_sched_lock+0xa0>)
    3d0a:	f003 ff84 	bl	7c16 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3d0e:	4c16      	ldr	r4, [pc, #88]	; (3d68 <k_sched_lock+0xa4>)
    3d10:	68a3      	ldr	r3, [r4, #8]
    3d12:	7bdb      	ldrb	r3, [r3, #15]
    3d14:	2b01      	cmp	r3, #1
    3d16:	d108      	bne.n	3d2a <k_sched_lock+0x66>
    3d18:	4912      	ldr	r1, [pc, #72]	; (3d64 <k_sched_lock+0xa0>)
    3d1a:	4811      	ldr	r0, [pc, #68]	; (3d60 <k_sched_lock+0x9c>)
    3d1c:	22fe      	movs	r2, #254	; 0xfe
    3d1e:	f003 fef4 	bl	7b0a <printk>
    3d22:	21fe      	movs	r1, #254	; 0xfe
    3d24:	480f      	ldr	r0, [pc, #60]	; (3d64 <k_sched_lock+0xa0>)
    3d26:	f003 ff76 	bl	7c16 <assert_post_action>
	--_current->base.sched_locked;
    3d2a:	68a2      	ldr	r2, [r4, #8]
    3d2c:	7bd3      	ldrb	r3, [r2, #15]
    3d2e:	3b01      	subs	r3, #1
    3d30:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d32:	4809      	ldr	r0, [pc, #36]	; (3d58 <k_sched_lock+0x94>)
    3d34:	f7ff fcde 	bl	36f4 <z_spin_unlock_valid>
    3d38:	b940      	cbnz	r0, 3d4c <k_sched_lock+0x88>
    3d3a:	4908      	ldr	r1, [pc, #32]	; (3d5c <k_sched_lock+0x98>)
    3d3c:	4808      	ldr	r0, [pc, #32]	; (3d60 <k_sched_lock+0x9c>)
    3d3e:	22ac      	movs	r2, #172	; 0xac
    3d40:	f003 fee3 	bl	7b0a <printk>
    3d44:	21ac      	movs	r1, #172	; 0xac
    3d46:	4805      	ldr	r0, [pc, #20]	; (3d5c <k_sched_lock+0x98>)
    3d48:	f003 ff65 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3d4c:	f385 8811 	msr	BASEPRI, r5
    3d50:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3d54:	bd38      	pop	{r3, r4, r5, pc}
    3d56:	bf00      	nop
    3d58:	200009f8 	.word	0x200009f8
    3d5c:	0000892b 	.word	0x0000892b
    3d60:	00008951 	.word	0x00008951
    3d64:	000096e5 	.word	0x000096e5
    3d68:	200009c4 	.word	0x200009c4

00003d6c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3d6c:	4b0b      	ldr	r3, [pc, #44]	; (3d9c <z_priq_dumb_remove+0x30>)
{
    3d6e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3d70:	4299      	cmp	r1, r3
{
    3d72:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3d74:	d10a      	bne.n	3d8c <z_priq_dumb_remove+0x20>
    3d76:	490a      	ldr	r1, [pc, #40]	; (3da0 <z_priq_dumb_remove+0x34>)
    3d78:	480a      	ldr	r0, [pc, #40]	; (3da4 <z_priq_dumb_remove+0x38>)
    3d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
    3d7e:	f003 fec4 	bl	7b0a <printk>
    3d82:	f240 31e7 	movw	r1, #999	; 0x3e7
    3d86:	4806      	ldr	r0, [pc, #24]	; (3da0 <z_priq_dumb_remove+0x34>)
    3d88:	f003 ff45 	bl	7c16 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3d8c:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    3d90:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3d92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3d94:	2300      	movs	r3, #0
	node->prev = NULL;
    3d96:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3d9a:	bd10      	pop	{r4, pc}
    3d9c:	20000130 	.word	0x20000130
    3da0:	00009730 	.word	0x00009730
    3da4:	00008951 	.word	0x00008951

00003da8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    3da8:	6883      	ldr	r3, [r0, #8]
{
    3daa:	b510      	push	{r4, lr}
    3dac:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    3dae:	b953      	cbnz	r3, 3dc6 <unpend_thread_no_timeout+0x1e>
    3db0:	490a      	ldr	r1, [pc, #40]	; (3ddc <unpend_thread_no_timeout+0x34>)
    3db2:	480b      	ldr	r0, [pc, #44]	; (3de0 <unpend_thread_no_timeout+0x38>)
    3db4:	f240 2283 	movw	r2, #643	; 0x283
    3db8:	f003 fea7 	bl	7b0a <printk>
    3dbc:	f240 2183 	movw	r1, #643	; 0x283
    3dc0:	4806      	ldr	r0, [pc, #24]	; (3ddc <unpend_thread_no_timeout+0x34>)
    3dc2:	f003 ff28 	bl	7c16 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    3dc6:	4621      	mov	r1, r4
    3dc8:	68a0      	ldr	r0, [r4, #8]
    3dca:	f7ff ffcf 	bl	3d6c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3dce:	7b63      	ldrb	r3, [r4, #13]
    3dd0:	f023 0302 	bic.w	r3, r3, #2
    3dd4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    3dd6:	2300      	movs	r3, #0
    3dd8:	60a3      	str	r3, [r4, #8]
}
    3dda:	bd10      	pop	{r4, pc}
    3ddc:	00009730 	.word	0x00009730
    3de0:	00008951 	.word	0x00008951

00003de4 <update_cache>:
{
    3de4:	b538      	push	{r3, r4, r5, lr}
    3de6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3de8:	4812      	ldr	r0, [pc, #72]	; (3e34 <update_cache+0x50>)
    3dea:	f004 f9e5 	bl	81b8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3dee:	4d12      	ldr	r5, [pc, #72]	; (3e38 <update_cache+0x54>)
    3df0:	4604      	mov	r4, r0
    3df2:	b900      	cbnz	r0, 3df6 <update_cache+0x12>
    3df4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    3df6:	b9aa      	cbnz	r2, 3e24 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    3df8:	68ab      	ldr	r3, [r5, #8]
    3dfa:	b943      	cbnz	r3, 3e0e <update_cache+0x2a>
    3dfc:	490f      	ldr	r1, [pc, #60]	; (3e3c <update_cache+0x58>)
    3dfe:	4810      	ldr	r0, [pc, #64]	; (3e40 <update_cache+0x5c>)
    3e00:	2289      	movs	r2, #137	; 0x89
    3e02:	f003 fe82 	bl	7b0a <printk>
    3e06:	2189      	movs	r1, #137	; 0x89
    3e08:	480c      	ldr	r0, [pc, #48]	; (3e3c <update_cache+0x58>)
    3e0a:	f003 ff04 	bl	7c16 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    3e0e:	68ab      	ldr	r3, [r5, #8]
    3e10:	7b5a      	ldrb	r2, [r3, #13]
    3e12:	06d2      	lsls	r2, r2, #27
    3e14:	d106      	bne.n	3e24 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3e16:	69a2      	ldr	r2, [r4, #24]
    3e18:	b922      	cbnz	r2, 3e24 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    3e1a:	89da      	ldrh	r2, [r3, #14]
    3e1c:	2a7f      	cmp	r2, #127	; 0x7f
    3e1e:	d901      	bls.n	3e24 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3e20:	61eb      	str	r3, [r5, #28]
}
    3e22:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3e24:	68ab      	ldr	r3, [r5, #8]
    3e26:	42a3      	cmp	r3, r4
    3e28:	d001      	beq.n	3e2e <update_cache+0x4a>
			z_reset_time_slice();
    3e2a:	f7ff feab 	bl	3b84 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3e2e:	61ec      	str	r4, [r5, #28]
}
    3e30:	e7f7      	b.n	3e22 <update_cache+0x3e>
    3e32:	bf00      	nop
    3e34:	200009e4 	.word	0x200009e4
    3e38:	200009c4 	.word	0x200009c4
    3e3c:	00009730 	.word	0x00009730
    3e40:	00008951 	.word	0x00008951

00003e44 <move_thread_to_end_of_prio_q>:
{
    3e44:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3e46:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3e4a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    3e4c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3e4e:	7b43      	ldrb	r3, [r0, #13]
    3e50:	da06      	bge.n	3e60 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    3e56:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e58:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3e5a:	481d      	ldr	r0, [pc, #116]	; (3ed0 <move_thread_to_end_of_prio_q+0x8c>)
    3e5c:	f7ff ff86 	bl	3d6c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3e60:	7b63      	ldrb	r3, [r4, #13]
    3e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e66:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3e68:	4b1a      	ldr	r3, [pc, #104]	; (3ed4 <move_thread_to_end_of_prio_q+0x90>)
    3e6a:	429c      	cmp	r4, r3
    3e6c:	d108      	bne.n	3e80 <move_thread_to_end_of_prio_q+0x3c>
    3e6e:	491a      	ldr	r1, [pc, #104]	; (3ed8 <move_thread_to_end_of_prio_q+0x94>)
    3e70:	481a      	ldr	r0, [pc, #104]	; (3edc <move_thread_to_end_of_prio_q+0x98>)
    3e72:	22ba      	movs	r2, #186	; 0xba
    3e74:	f003 fe49 	bl	7b0a <printk>
    3e78:	21ba      	movs	r1, #186	; 0xba
    3e7a:	4817      	ldr	r0, [pc, #92]	; (3ed8 <move_thread_to_end_of_prio_q+0x94>)
    3e7c:	f003 fecb 	bl	7c16 <assert_post_action>
	return list->head == list;
    3e80:	4a17      	ldr	r2, [pc, #92]	; (3ee0 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e82:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    3e86:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e8a:	42ab      	cmp	r3, r5
    3e8c:	d01b      	beq.n	3ec6 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e8e:	b1d3      	cbz	r3, 3ec6 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
    3e90:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3e94:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3e98:	428e      	cmp	r6, r1
    3e9a:	d00f      	beq.n	3ebc <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
    3e9c:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3e9e:	2900      	cmp	r1, #0
    3ea0:	dd0c      	ble.n	3ebc <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
    3ea2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3ea4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    3ea8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3eaa:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    3eac:	6890      	ldr	r0, [r2, #8]
    3eae:	1b03      	subs	r3, r0, r4
    3eb0:	4258      	negs	r0, r3
    3eb2:	4158      	adcs	r0, r3
}
    3eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3eb8:	f7ff bf94 	b.w	3de4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3ebc:	4283      	cmp	r3, r0
    3ebe:	d002      	beq.n	3ec6 <move_thread_to_end_of_prio_q+0x82>
    3ec0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d1e6      	bne.n	3e94 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
    3ec6:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    3eca:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3ecc:	6254      	str	r4, [r2, #36]	; 0x24
}
    3ece:	e7ed      	b.n	3eac <move_thread_to_end_of_prio_q+0x68>
    3ed0:	200009e4 	.word	0x200009e4
    3ed4:	20000130 	.word	0x20000130
    3ed8:	00009730 	.word	0x00009730
    3edc:	00008951 	.word	0x00008951
    3ee0:	200009c4 	.word	0x200009c4

00003ee4 <z_time_slice>:
{
    3ee4:	b538      	push	{r3, r4, r5, lr}
    3ee6:	4604      	mov	r4, r0
	__asm__ volatile(
    3ee8:	f04f 0320 	mov.w	r3, #32
    3eec:	f3ef 8511 	mrs	r5, BASEPRI
    3ef0:	f383 8812 	msr	BASEPRI_MAX, r3
    3ef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ef8:	4824      	ldr	r0, [pc, #144]	; (3f8c <z_time_slice+0xa8>)
    3efa:	f7ff fbed 	bl	36d8 <z_spin_lock_valid>
    3efe:	b940      	cbnz	r0, 3f12 <z_time_slice+0x2e>
    3f00:	4923      	ldr	r1, [pc, #140]	; (3f90 <z_time_slice+0xac>)
    3f02:	4824      	ldr	r0, [pc, #144]	; (3f94 <z_time_slice+0xb0>)
    3f04:	2281      	movs	r2, #129	; 0x81
    3f06:	f003 fe00 	bl	7b0a <printk>
    3f0a:	2181      	movs	r1, #129	; 0x81
    3f0c:	4820      	ldr	r0, [pc, #128]	; (3f90 <z_time_slice+0xac>)
    3f0e:	f003 fe82 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    3f12:	481e      	ldr	r0, [pc, #120]	; (3f8c <z_time_slice+0xa8>)
    3f14:	f7ff fbfc 	bl	3710 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    3f18:	4b1f      	ldr	r3, [pc, #124]	; (3f98 <z_time_slice+0xb4>)
    3f1a:	4a20      	ldr	r2, [pc, #128]	; (3f9c <z_time_slice+0xb8>)
    3f1c:	6898      	ldr	r0, [r3, #8]
    3f1e:	6811      	ldr	r1, [r2, #0]
    3f20:	4288      	cmp	r0, r1
    3f22:	d113      	bne.n	3f4c <z_time_slice+0x68>
			z_reset_time_slice();
    3f24:	f7ff fe2e 	bl	3b84 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f28:	4818      	ldr	r0, [pc, #96]	; (3f8c <z_time_slice+0xa8>)
    3f2a:	f7ff fbe3 	bl	36f4 <z_spin_unlock_valid>
    3f2e:	b940      	cbnz	r0, 3f42 <z_time_slice+0x5e>
    3f30:	4917      	ldr	r1, [pc, #92]	; (3f90 <z_time_slice+0xac>)
    3f32:	4818      	ldr	r0, [pc, #96]	; (3f94 <z_time_slice+0xb0>)
    3f34:	22ac      	movs	r2, #172	; 0xac
    3f36:	f003 fde8 	bl	7b0a <printk>
    3f3a:	21ac      	movs	r1, #172	; 0xac
    3f3c:	4814      	ldr	r0, [pc, #80]	; (3f90 <z_time_slice+0xac>)
    3f3e:	f003 fe6a 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    3f42:	f385 8811 	msr	BASEPRI, r5
    3f46:	f3bf 8f6f 	isb	sy
}
    3f4a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3f4c:	2100      	movs	r1, #0
    3f4e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3f50:	4a13      	ldr	r2, [pc, #76]	; (3fa0 <z_time_slice+0xbc>)
    3f52:	6812      	ldr	r2, [r2, #0]
    3f54:	b1ba      	cbz	r2, 3f86 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
    3f56:	89c2      	ldrh	r2, [r0, #14]
    3f58:	2a7f      	cmp	r2, #127	; 0x7f
    3f5a:	d814      	bhi.n	3f86 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
    3f5c:	7b42      	ldrb	r2, [r0, #13]
    3f5e:	06d2      	lsls	r2, r2, #27
    3f60:	d111      	bne.n	3f86 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3f62:	4a10      	ldr	r2, [pc, #64]	; (3fa4 <z_time_slice+0xc0>)
    3f64:	f990 100e 	ldrsb.w	r1, [r0, #14]
    3f68:	6812      	ldr	r2, [r2, #0]
    3f6a:	4291      	cmp	r1, r2
    3f6c:	db0b      	blt.n	3f86 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
    3f6e:	4a0e      	ldr	r2, [pc, #56]	; (3fa8 <z_time_slice+0xc4>)
    3f70:	4290      	cmp	r0, r2
    3f72:	d008      	beq.n	3f86 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
    3f74:	691a      	ldr	r2, [r3, #16]
    3f76:	42a2      	cmp	r2, r4
    3f78:	dc02      	bgt.n	3f80 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
    3f7a:	f7ff ff63 	bl	3e44 <move_thread_to_end_of_prio_q>
    3f7e:	e7d1      	b.n	3f24 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
    3f80:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
    3f82:	611a      	str	r2, [r3, #16]
    3f84:	e7d0      	b.n	3f28 <z_time_slice+0x44>
    3f86:	2200      	movs	r2, #0
    3f88:	e7fb      	b.n	3f82 <z_time_slice+0x9e>
    3f8a:	bf00      	nop
    3f8c:	200009f8 	.word	0x200009f8
    3f90:	0000892b 	.word	0x0000892b
    3f94:	00008951 	.word	0x00008951
    3f98:	200009c4 	.word	0x200009c4
    3f9c:	200009f4 	.word	0x200009f4
    3fa0:	20000a00 	.word	0x20000a00
    3fa4:	200009fc 	.word	0x200009fc
    3fa8:	20000130 	.word	0x20000130

00003fac <ready_thread>:
{
    3fac:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3fae:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3fb2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3fb4:	2a00      	cmp	r2, #0
    3fb6:	7b43      	ldrb	r3, [r0, #13]
    3fb8:	db38      	blt.n	402c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x30>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3fba:	06da      	lsls	r2, r3, #27
    3fbc:	d136      	bne.n	402c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x30>
    3fbe:	6982      	ldr	r2, [r0, #24]
    3fc0:	2a00      	cmp	r2, #0
    3fc2:	d133      	bne.n	402c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x30>
	thread->base.thread_state |= _THREAD_QUEUED;
    3fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3fc8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3fca:	4b19      	ldr	r3, [pc, #100]	; (4030 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x34>)
    3fcc:	4298      	cmp	r0, r3
    3fce:	d108      	bne.n	3fe2 <ready_thread+0x36>
    3fd0:	4918      	ldr	r1, [pc, #96]	; (4034 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x38>)
    3fd2:	4819      	ldr	r0, [pc, #100]	; (4038 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x3c>)
    3fd4:	22ba      	movs	r2, #186	; 0xba
    3fd6:	f003 fd98 	bl	7b0a <printk>
    3fda:	21ba      	movs	r1, #186	; 0xba
    3fdc:	4815      	ldr	r0, [pc, #84]	; (4034 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x38>)
    3fde:	f003 fe1a 	bl	7c16 <assert_post_action>
	return list->head == list;
    3fe2:	4a16      	ldr	r2, [pc, #88]	; (403c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x40>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fe4:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    3fe8:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fec:	42ab      	cmp	r3, r5
    3fee:	d018      	beq.n	4022 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x26>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ff0:	b1bb      	cbz	r3, 4022 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x26>
	int32_t b1 = thread_1->base.prio;
    3ff2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3ff6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3ffa:	428e      	cmp	r6, r1
    3ffc:	d00c      	beq.n	4018 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x1c>
		return b2 - b1;
    3ffe:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4000:	2900      	cmp	r1, #0
    4002:	dd09      	ble.n	4018 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x1c>
	sys_dnode_t *const prev = successor->prev;
    4004:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4006:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    400a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    400c:	605c      	str	r4, [r3, #4]
		update_cache(0);
    400e:	2000      	movs	r0, #0
}
    4010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4014:	f7ff bee6 	b.w	3de4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4018:	4298      	cmp	r0, r3
    401a:	d002      	beq.n	4022 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x26>
    401c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    401e:	2b00      	cmp	r3, #0
    4020:	d1e9      	bne.n	3ff6 <ready_thread+0x4a>
	node->prev = tail;
    4022:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    4026:	6004      	str	r4, [r0, #0]
	list->tail = node;
    4028:	6254      	str	r4, [r2, #36]	; 0x24
}
    402a:	e7f0      	b.n	400e <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x12>
}
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	bf00      	nop
    4030:	20000130 	.word	0x20000130
    4034:	00009730 	.word	0x00009730
    4038:	00008951 	.word	0x00008951
    403c:	200009c4 	.word	0x200009c4

00004040 <z_ready_thread>:
{
    4040:	b538      	push	{r3, r4, r5, lr}
    4042:	4604      	mov	r4, r0
	__asm__ volatile(
    4044:	f04f 0320 	mov.w	r3, #32
    4048:	f3ef 8511 	mrs	r5, BASEPRI
    404c:	f383 8812 	msr	BASEPRI_MAX, r3
    4050:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4054:	4812      	ldr	r0, [pc, #72]	; (40a0 <z_ready_thread+0x60>)
    4056:	f7ff fb3f 	bl	36d8 <z_spin_lock_valid>
    405a:	b940      	cbnz	r0, 406e <z_ready_thread+0x2e>
    405c:	4911      	ldr	r1, [pc, #68]	; (40a4 <z_ready_thread+0x64>)
    405e:	4812      	ldr	r0, [pc, #72]	; (40a8 <z_ready_thread+0x68>)
    4060:	2281      	movs	r2, #129	; 0x81
    4062:	f003 fd52 	bl	7b0a <printk>
    4066:	2181      	movs	r1, #129	; 0x81
    4068:	480e      	ldr	r0, [pc, #56]	; (40a4 <z_ready_thread+0x64>)
    406a:	f003 fdd4 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    406e:	480c      	ldr	r0, [pc, #48]	; (40a0 <z_ready_thread+0x60>)
    4070:	f7ff fb4e 	bl	3710 <z_spin_lock_set_owner>
			ready_thread(thread);
    4074:	4620      	mov	r0, r4
    4076:	f7ff ff99 	bl	3fac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    407a:	4809      	ldr	r0, [pc, #36]	; (40a0 <z_ready_thread+0x60>)
    407c:	f7ff fb3a 	bl	36f4 <z_spin_unlock_valid>
    4080:	b940      	cbnz	r0, 4094 <z_ready_thread+0x54>
    4082:	4908      	ldr	r1, [pc, #32]	; (40a4 <z_ready_thread+0x64>)
    4084:	4808      	ldr	r0, [pc, #32]	; (40a8 <z_ready_thread+0x68>)
    4086:	22ac      	movs	r2, #172	; 0xac
    4088:	f003 fd3f 	bl	7b0a <printk>
    408c:	21ac      	movs	r1, #172	; 0xac
    408e:	4805      	ldr	r0, [pc, #20]	; (40a4 <z_ready_thread+0x64>)
    4090:	f003 fdc1 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4094:	f385 8811 	msr	BASEPRI, r5
    4098:	f3bf 8f6f 	isb	sy
}
    409c:	bd38      	pop	{r3, r4, r5, pc}
    409e:	bf00      	nop
    40a0:	200009f8 	.word	0x200009f8
    40a4:	0000892b 	.word	0x0000892b
    40a8:	00008951 	.word	0x00008951

000040ac <z_sched_start>:
{
    40ac:	b538      	push	{r3, r4, r5, lr}
    40ae:	4604      	mov	r4, r0
	__asm__ volatile(
    40b0:	f04f 0320 	mov.w	r3, #32
    40b4:	f3ef 8511 	mrs	r5, BASEPRI
    40b8:	f383 8812 	msr	BASEPRI_MAX, r3
    40bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40c0:	4818      	ldr	r0, [pc, #96]	; (4124 <z_sched_start+0x78>)
    40c2:	f7ff fb09 	bl	36d8 <z_spin_lock_valid>
    40c6:	b940      	cbnz	r0, 40da <z_sched_start+0x2e>
    40c8:	4917      	ldr	r1, [pc, #92]	; (4128 <z_sched_start+0x7c>)
    40ca:	4818      	ldr	r0, [pc, #96]	; (412c <z_sched_start+0x80>)
    40cc:	2281      	movs	r2, #129	; 0x81
    40ce:	f003 fd1c 	bl	7b0a <printk>
    40d2:	2181      	movs	r1, #129	; 0x81
    40d4:	4814      	ldr	r0, [pc, #80]	; (4128 <z_sched_start+0x7c>)
    40d6:	f003 fd9e 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    40da:	4812      	ldr	r0, [pc, #72]	; (4124 <z_sched_start+0x78>)
    40dc:	f7ff fb18 	bl	3710 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    40e0:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    40e2:	075a      	lsls	r2, r3, #29
    40e4:	d411      	bmi.n	410a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40e6:	480f      	ldr	r0, [pc, #60]	; (4124 <z_sched_start+0x78>)
    40e8:	f7ff fb04 	bl	36f4 <z_spin_unlock_valid>
    40ec:	b940      	cbnz	r0, 4100 <z_sched_start+0x54>
    40ee:	490e      	ldr	r1, [pc, #56]	; (4128 <z_sched_start+0x7c>)
    40f0:	480e      	ldr	r0, [pc, #56]	; (412c <z_sched_start+0x80>)
    40f2:	22ac      	movs	r2, #172	; 0xac
    40f4:	f003 fd09 	bl	7b0a <printk>
    40f8:	21ac      	movs	r1, #172	; 0xac
    40fa:	480b      	ldr	r0, [pc, #44]	; (4128 <z_sched_start+0x7c>)
    40fc:	f003 fd8b 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4100:	f385 8811 	msr	BASEPRI, r5
    4104:	f3bf 8f6f 	isb	sy
}
    4108:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    410a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    410e:	4620      	mov	r0, r4
    4110:	7363      	strb	r3, [r4, #13]
    4112:	f7ff ff4b 	bl	3fac <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4116:	4629      	mov	r1, r5
}
    4118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    411c:	4801      	ldr	r0, [pc, #4]	; (4124 <z_sched_start+0x78>)
    411e:	f7ff bd9b 	b.w	3c58 <z_reschedule>
    4122:	bf00      	nop
    4124:	200009f8 	.word	0x200009f8
    4128:	0000892b 	.word	0x0000892b
    412c:	00008951 	.word	0x00008951

00004130 <z_thread_timeout>:
{
    4130:	b570      	push	{r4, r5, r6, lr}
    4132:	4604      	mov	r4, r0
	__asm__ volatile(
    4134:	f04f 0320 	mov.w	r3, #32
    4138:	f3ef 8611 	mrs	r6, BASEPRI
    413c:	f383 8812 	msr	BASEPRI_MAX, r3
    4140:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4144:	481b      	ldr	r0, [pc, #108]	; (41b4 <z_thread_timeout+0x84>)
    4146:	f7ff fac7 	bl	36d8 <z_spin_lock_valid>
    414a:	b940      	cbnz	r0, 415e <z_thread_timeout+0x2e>
    414c:	491a      	ldr	r1, [pc, #104]	; (41b8 <z_thread_timeout+0x88>)
    414e:	481b      	ldr	r0, [pc, #108]	; (41bc <z_thread_timeout+0x8c>)
    4150:	2281      	movs	r2, #129	; 0x81
    4152:	f003 fcda 	bl	7b0a <printk>
    4156:	2181      	movs	r1, #129	; 0x81
    4158:	4817      	ldr	r0, [pc, #92]	; (41b8 <z_thread_timeout+0x88>)
    415a:	f003 fd5c 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    415e:	4815      	ldr	r0, [pc, #84]	; (41b4 <z_thread_timeout+0x84>)
    4160:	f7ff fad6 	bl	3710 <z_spin_lock_set_owner>
		if (!killed) {
    4164:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4168:	f013 0f28 	tst.w	r3, #40	; 0x28
    416c:	d110      	bne.n	4190 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    416e:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4172:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4176:	b113      	cbz	r3, 417e <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    4178:	4628      	mov	r0, r5
    417a:	f7ff fe15 	bl	3da8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    417e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4182:	4628      	mov	r0, r5
    4184:	f023 0314 	bic.w	r3, r3, #20
    4188:	f804 3c0b 	strb.w	r3, [r4, #-11]
    418c:	f7ff ff0e 	bl	3fac <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4190:	4808      	ldr	r0, [pc, #32]	; (41b4 <z_thread_timeout+0x84>)
    4192:	f7ff faaf 	bl	36f4 <z_spin_unlock_valid>
    4196:	b940      	cbnz	r0, 41aa <z_thread_timeout+0x7a>
    4198:	4907      	ldr	r1, [pc, #28]	; (41b8 <z_thread_timeout+0x88>)
    419a:	4808      	ldr	r0, [pc, #32]	; (41bc <z_thread_timeout+0x8c>)
    419c:	22ac      	movs	r2, #172	; 0xac
    419e:	f003 fcb4 	bl	7b0a <printk>
    41a2:	21ac      	movs	r1, #172	; 0xac
    41a4:	4804      	ldr	r0, [pc, #16]	; (41b8 <z_thread_timeout+0x88>)
    41a6:	f003 fd36 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    41aa:	f386 8811 	msr	BASEPRI, r6
    41ae:	f3bf 8f6f 	isb	sy
}
    41b2:	bd70      	pop	{r4, r5, r6, pc}
    41b4:	200009f8 	.word	0x200009f8
    41b8:	0000892b 	.word	0x0000892b
    41bc:	00008951 	.word	0x00008951

000041c0 <unready_thread>:
{
    41c0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    41c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    41c6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    41c8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    41ca:	7b43      	ldrb	r3, [r0, #13]
    41cc:	da06      	bge.n	41dc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    41d2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41d4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    41d6:	4806      	ldr	r0, [pc, #24]	; (41f0 <unready_thread+0x30>)
    41d8:	f7ff fdc8 	bl	3d6c <z_priq_dumb_remove>
	update_cache(thread == _current);
    41dc:	4b05      	ldr	r3, [pc, #20]	; (41f4 <unready_thread+0x34>)
    41de:	6898      	ldr	r0, [r3, #8]
    41e0:	1b03      	subs	r3, r0, r4
    41e2:	4258      	negs	r0, r3
    41e4:	4158      	adcs	r0, r3
}
    41e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    41ea:	f7ff bdfb 	b.w	3de4 <update_cache>
    41ee:	bf00      	nop
    41f0:	200009e4 	.word	0x200009e4
    41f4:	200009c4 	.word	0x200009c4

000041f8 <add_to_waitq_locked>:
{
    41f8:	b538      	push	{r3, r4, r5, lr}
    41fa:	4604      	mov	r4, r0
    41fc:	460d      	mov	r5, r1
	unready_thread(thread);
    41fe:	f7ff ffdf 	bl	41c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4202:	7b63      	ldrb	r3, [r4, #13]
    4204:	f043 0302 	orr.w	r3, r3, #2
    4208:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    420a:	b1f5      	cbz	r5, 424a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    420c:	4b15      	ldr	r3, [pc, #84]	; (4264 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    420e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4210:	429c      	cmp	r4, r3
    4212:	d108      	bne.n	4226 <add_to_waitq_locked+0x2e>
    4214:	4914      	ldr	r1, [pc, #80]	; (4268 <add_to_waitq_locked+0x70>)
    4216:	4815      	ldr	r0, [pc, #84]	; (426c <add_to_waitq_locked+0x74>)
    4218:	22ba      	movs	r2, #186	; 0xba
    421a:	f003 fc76 	bl	7b0a <printk>
    421e:	21ba      	movs	r1, #186	; 0xba
    4220:	4811      	ldr	r0, [pc, #68]	; (4268 <add_to_waitq_locked+0x70>)
    4222:	f003 fcf8 	bl	7c16 <assert_post_action>
	return list->head == list;
    4226:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4228:	429d      	cmp	r5, r3
    422a:	d015      	beq.n	4258 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    422c:	b1a3      	cbz	r3, 4258 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
    422e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4232:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4236:	4291      	cmp	r1, r2
    4238:	d008      	beq.n	424c <add_to_waitq_locked+0x54>
		return b2 - b1;
    423a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    423c:	2a00      	cmp	r2, #0
    423e:	dd05      	ble.n	424c <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
    4240:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4242:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4246:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4248:	605c      	str	r4, [r3, #4]
}
    424a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    424c:	686a      	ldr	r2, [r5, #4]
    424e:	4293      	cmp	r3, r2
    4250:	d002      	beq.n	4258 <add_to_waitq_locked+0x60>
    4252:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4254:	2b00      	cmp	r3, #0
    4256:	d1ec      	bne.n	4232 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
    4258:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    425a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    425e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4260:	606c      	str	r4, [r5, #4]
}
    4262:	e7f2      	b.n	424a <add_to_waitq_locked+0x52>
    4264:	20000130 	.word	0x20000130
    4268:	00009730 	.word	0x00009730
    426c:	00008951 	.word	0x00008951

00004270 <pend>:
{
    4270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4274:	4604      	mov	r4, r0
    4276:	4688      	mov	r8, r1
    4278:	4616      	mov	r6, r2
    427a:	461d      	mov	r5, r3
	__asm__ volatile(
    427c:	f04f 0320 	mov.w	r3, #32
    4280:	f3ef 8711 	mrs	r7, BASEPRI
    4284:	f383 8812 	msr	BASEPRI_MAX, r3
    4288:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    428c:	481a      	ldr	r0, [pc, #104]	; (42f8 <pend+0x88>)
    428e:	f7ff fa23 	bl	36d8 <z_spin_lock_valid>
    4292:	b940      	cbnz	r0, 42a6 <pend+0x36>
    4294:	4919      	ldr	r1, [pc, #100]	; (42fc <pend+0x8c>)
    4296:	481a      	ldr	r0, [pc, #104]	; (4300 <pend+0x90>)
    4298:	2281      	movs	r2, #129	; 0x81
    429a:	f003 fc36 	bl	7b0a <printk>
    429e:	2181      	movs	r1, #129	; 0x81
    42a0:	4816      	ldr	r0, [pc, #88]	; (42fc <pend+0x8c>)
    42a2:	f003 fcb8 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    42a6:	4814      	ldr	r0, [pc, #80]	; (42f8 <pend+0x88>)
    42a8:	f7ff fa32 	bl	3710 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    42ac:	4620      	mov	r0, r4
    42ae:	4641      	mov	r1, r8
    42b0:	f7ff ffa2 	bl	41f8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42b4:	4810      	ldr	r0, [pc, #64]	; (42f8 <pend+0x88>)
    42b6:	f7ff fa1d 	bl	36f4 <z_spin_unlock_valid>
    42ba:	b940      	cbnz	r0, 42ce <pend+0x5e>
    42bc:	490f      	ldr	r1, [pc, #60]	; (42fc <pend+0x8c>)
    42be:	4810      	ldr	r0, [pc, #64]	; (4300 <pend+0x90>)
    42c0:	22ac      	movs	r2, #172	; 0xac
    42c2:	f003 fc22 	bl	7b0a <printk>
    42c6:	21ac      	movs	r1, #172	; 0xac
    42c8:	480c      	ldr	r0, [pc, #48]	; (42fc <pend+0x8c>)
    42ca:	f003 fca4 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    42ce:	f387 8811 	msr	BASEPRI, r7
    42d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    42da:	bf08      	it	eq
    42dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    42e0:	d008      	beq.n	42f4 <pend+0x84>
    42e2:	4632      	mov	r2, r6
    42e4:	462b      	mov	r3, r5
    42e6:	f104 0018 	add.w	r0, r4, #24
    42ea:	4906      	ldr	r1, [pc, #24]	; (4304 <pend+0x94>)
}
    42ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42f0:	f000 bbee 	b.w	4ad0 <z_add_timeout>
    42f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42f8:	200009f8 	.word	0x200009f8
    42fc:	0000892b 	.word	0x0000892b
    4300:	00008951 	.word	0x00008951
    4304:	00004131 	.word	0x00004131

00004308 <z_pend_curr>:
{
    4308:	b538      	push	{r3, r4, r5, lr}
    430a:	4605      	mov	r5, r0
	pending_current = _current;
    430c:	4b0d      	ldr	r3, [pc, #52]	; (4344 <z_pend_curr+0x3c>)
{
    430e:	460c      	mov	r4, r1
	pending_current = _current;
    4310:	6898      	ldr	r0, [r3, #8]
    4312:	4b0d      	ldr	r3, [pc, #52]	; (4348 <z_pend_curr+0x40>)
{
    4314:	4611      	mov	r1, r2
	pending_current = _current;
    4316:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    431c:	f7ff ffa8 	bl	4270 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4320:	4628      	mov	r0, r5
    4322:	f7ff f9e7 	bl	36f4 <z_spin_unlock_valid>
    4326:	b940      	cbnz	r0, 433a <z_pend_curr+0x32>
    4328:	4908      	ldr	r1, [pc, #32]	; (434c <z_pend_curr+0x44>)
    432a:	4809      	ldr	r0, [pc, #36]	; (4350 <z_pend_curr+0x48>)
    432c:	22c3      	movs	r2, #195	; 0xc3
    432e:	f003 fbec 	bl	7b0a <printk>
    4332:	21c3      	movs	r1, #195	; 0xc3
    4334:	4805      	ldr	r0, [pc, #20]	; (434c <z_pend_curr+0x44>)
    4336:	f003 fc6e 	bl	7c16 <assert_post_action>
    433a:	4620      	mov	r0, r4
}
    433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4340:	f7fd b9fc 	b.w	173c <arch_swap>
    4344:	200009c4 	.word	0x200009c4
    4348:	200009f4 	.word	0x200009f4
    434c:	0000892b 	.word	0x0000892b
    4350:	00008951 	.word	0x00008951

00004354 <z_set_prio>:
{
    4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4356:	4604      	mov	r4, r0
    4358:	460d      	mov	r5, r1
	__asm__ volatile(
    435a:	f04f 0320 	mov.w	r3, #32
    435e:	f3ef 8611 	mrs	r6, BASEPRI
    4362:	f383 8812 	msr	BASEPRI_MAX, r3
    4366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    436a:	4834      	ldr	r0, [pc, #208]	; (443c <z_set_prio+0xe8>)
    436c:	f7ff f9b4 	bl	36d8 <z_spin_lock_valid>
    4370:	b940      	cbnz	r0, 4384 <z_set_prio+0x30>
    4372:	4933      	ldr	r1, [pc, #204]	; (4440 <z_set_prio+0xec>)
    4374:	4833      	ldr	r0, [pc, #204]	; (4444 <z_set_prio+0xf0>)
    4376:	2281      	movs	r2, #129	; 0x81
    4378:	f003 fbc7 	bl	7b0a <printk>
    437c:	2181      	movs	r1, #129	; 0x81
    437e:	4830      	ldr	r0, [pc, #192]	; (4440 <z_set_prio+0xec>)
    4380:	f003 fc49 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4384:	482d      	ldr	r0, [pc, #180]	; (443c <z_set_prio+0xe8>)
    4386:	f7ff f9c3 	bl	3710 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    438a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    438c:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    438e:	06da      	lsls	r2, r3, #27
    4390:	d151      	bne.n	4436 <z_set_prio+0xe2>
		if (need_sched) {
    4392:	69a2      	ldr	r2, [r4, #24]
    4394:	2a00      	cmp	r2, #0
    4396:	d14e      	bne.n	4436 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    439c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    439e:	4621      	mov	r1, r4
    43a0:	4829      	ldr	r0, [pc, #164]	; (4448 <z_set_prio+0xf4>)
    43a2:	f7ff fce3 	bl	3d6c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    43a6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    43a8:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    43aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43ae:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    43b0:	4b26      	ldr	r3, [pc, #152]	; (444c <z_set_prio+0xf8>)
    43b2:	429c      	cmp	r4, r3
    43b4:	d108      	bne.n	43c8 <z_set_prio+0x74>
    43b6:	4926      	ldr	r1, [pc, #152]	; (4450 <z_set_prio+0xfc>)
    43b8:	4822      	ldr	r0, [pc, #136]	; (4444 <z_set_prio+0xf0>)
    43ba:	22ba      	movs	r2, #186	; 0xba
    43bc:	f003 fba5 	bl	7b0a <printk>
    43c0:	21ba      	movs	r1, #186	; 0xba
    43c2:	4823      	ldr	r0, [pc, #140]	; (4450 <z_set_prio+0xfc>)
    43c4:	f003 fc27 	bl	7c16 <assert_post_action>
	return list->head == list;
    43c8:	4a22      	ldr	r2, [pc, #136]	; (4454 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43ca:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    43ce:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43d2:	42ab      	cmp	r3, r5
    43d4:	d02a      	beq.n	442c <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43d6:	b34b      	cbz	r3, 442c <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
    43d8:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    43dc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    43e0:	428f      	cmp	r7, r1
    43e2:	d01e      	beq.n	4422 <z_set_prio+0xce>
		return b2 - b1;
    43e4:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    43e6:	2900      	cmp	r1, #0
    43e8:	dd1b      	ble.n	4422 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
    43ea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43ec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    43f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    43f2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    43f4:	2001      	movs	r0, #1
    43f6:	f7ff fcf5 	bl	3de4 <update_cache>
    43fa:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43fc:	480f      	ldr	r0, [pc, #60]	; (443c <z_set_prio+0xe8>)
    43fe:	f7ff f979 	bl	36f4 <z_spin_unlock_valid>
    4402:	b940      	cbnz	r0, 4416 <z_set_prio+0xc2>
    4404:	490e      	ldr	r1, [pc, #56]	; (4440 <z_set_prio+0xec>)
    4406:	480f      	ldr	r0, [pc, #60]	; (4444 <z_set_prio+0xf0>)
    4408:	22ac      	movs	r2, #172	; 0xac
    440a:	f003 fb7e 	bl	7b0a <printk>
    440e:	21ac      	movs	r1, #172	; 0xac
    4410:	480b      	ldr	r0, [pc, #44]	; (4440 <z_set_prio+0xec>)
    4412:	f003 fc00 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4416:	f386 8811 	msr	BASEPRI, r6
    441a:	f3bf 8f6f 	isb	sy
}
    441e:	4620      	mov	r0, r4
    4420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4422:	4283      	cmp	r3, r0
    4424:	d002      	beq.n	442c <z_set_prio+0xd8>
    4426:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4428:	2b00      	cmp	r3, #0
    442a:	d1d7      	bne.n	43dc <z_set_prio+0x88>
	node->prev = tail;
    442c:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    4430:	6004      	str	r4, [r0, #0]
	list->tail = node;
    4432:	6254      	str	r4, [r2, #36]	; 0x24
}
    4434:	e7de      	b.n	43f4 <z_set_prio+0xa0>
			thread->base.prio = prio;
    4436:	73a5      	strb	r5, [r4, #14]
    4438:	2400      	movs	r4, #0
    443a:	e7df      	b.n	43fc <z_set_prio+0xa8>
    443c:	200009f8 	.word	0x200009f8
    4440:	0000892b 	.word	0x0000892b
    4444:	00008951 	.word	0x00008951
    4448:	200009e4 	.word	0x200009e4
    444c:	20000130 	.word	0x20000130
    4450:	00009730 	.word	0x00009730
    4454:	200009c4 	.word	0x200009c4

00004458 <z_impl_k_thread_suspend>:
{
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    445c:	3018      	adds	r0, #24
    445e:	f000 fbe5 	bl	4c2c <z_abort_timeout>
	__asm__ volatile(
    4462:	f04f 0320 	mov.w	r3, #32
    4466:	f3ef 8611 	mrs	r6, BASEPRI
    446a:	f383 8812 	msr	BASEPRI_MAX, r3
    446e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4472:	4820      	ldr	r0, [pc, #128]	; (44f4 <z_impl_k_thread_suspend+0x9c>)
    4474:	f7ff f930 	bl	36d8 <z_spin_lock_valid>
    4478:	b940      	cbnz	r0, 448c <z_impl_k_thread_suspend+0x34>
    447a:	491f      	ldr	r1, [pc, #124]	; (44f8 <z_impl_k_thread_suspend+0xa0>)
    447c:	481f      	ldr	r0, [pc, #124]	; (44fc <z_impl_k_thread_suspend+0xa4>)
    447e:	2281      	movs	r2, #129	; 0x81
    4480:	f003 fb43 	bl	7b0a <printk>
    4484:	2181      	movs	r1, #129	; 0x81
    4486:	481c      	ldr	r0, [pc, #112]	; (44f8 <z_impl_k_thread_suspend+0xa0>)
    4488:	f003 fbc5 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    448c:	4819      	ldr	r0, [pc, #100]	; (44f4 <z_impl_k_thread_suspend+0x9c>)
    448e:	f7ff f93f 	bl	3710 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    4492:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4496:	7b63      	ldrb	r3, [r4, #13]
    4498:	2a00      	cmp	r2, #0
    449a:	da06      	bge.n	44aa <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    449c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    44a0:	4621      	mov	r1, r4
    44a2:	4817      	ldr	r0, [pc, #92]	; (4500 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44a4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    44a6:	f7ff fc61 	bl	3d6c <z_priq_dumb_remove>
		update_cache(thread == _current);
    44aa:	4d16      	ldr	r5, [pc, #88]	; (4504 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    44ac:	7b63      	ldrb	r3, [r4, #13]
    44ae:	68a8      	ldr	r0, [r5, #8]
    44b0:	f043 0310 	orr.w	r3, r3, #16
    44b4:	7363      	strb	r3, [r4, #13]
    44b6:	1b03      	subs	r3, r0, r4
    44b8:	4258      	negs	r0, r3
    44ba:	4158      	adcs	r0, r3
    44bc:	f7ff fc92 	bl	3de4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    44c0:	480c      	ldr	r0, [pc, #48]	; (44f4 <z_impl_k_thread_suspend+0x9c>)
    44c2:	f7ff f917 	bl	36f4 <z_spin_unlock_valid>
    44c6:	b940      	cbnz	r0, 44da <z_impl_k_thread_suspend+0x82>
    44c8:	490b      	ldr	r1, [pc, #44]	; (44f8 <z_impl_k_thread_suspend+0xa0>)
    44ca:	480c      	ldr	r0, [pc, #48]	; (44fc <z_impl_k_thread_suspend+0xa4>)
    44cc:	22ac      	movs	r2, #172	; 0xac
    44ce:	f003 fb1c 	bl	7b0a <printk>
    44d2:	21ac      	movs	r1, #172	; 0xac
    44d4:	4808      	ldr	r0, [pc, #32]	; (44f8 <z_impl_k_thread_suspend+0xa0>)
    44d6:	f003 fb9e 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    44da:	f386 8811 	msr	BASEPRI, r6
    44de:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    44e2:	68ab      	ldr	r3, [r5, #8]
    44e4:	42a3      	cmp	r3, r4
    44e6:	d103      	bne.n	44f0 <z_impl_k_thread_suspend+0x98>
}
    44e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    44ec:	f003 be5a 	b.w	81a4 <z_reschedule_unlocked>
}
    44f0:	bd70      	pop	{r4, r5, r6, pc}
    44f2:	bf00      	nop
    44f4:	200009f8 	.word	0x200009f8
    44f8:	0000892b 	.word	0x0000892b
    44fc:	00008951 	.word	0x00008951
    4500:	200009e4 	.word	0x200009e4
    4504:	200009c4 	.word	0x200009c4

00004508 <k_sched_unlock>:
{
    4508:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    450a:	f04f 0320 	mov.w	r3, #32
    450e:	f3ef 8511 	mrs	r5, BASEPRI
    4512:	f383 8812 	msr	BASEPRI_MAX, r3
    4516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    451a:	4824      	ldr	r0, [pc, #144]	; (45ac <k_sched_unlock+0xa4>)
    451c:	f7ff f8dc 	bl	36d8 <z_spin_lock_valid>
    4520:	b940      	cbnz	r0, 4534 <k_sched_unlock+0x2c>
    4522:	4923      	ldr	r1, [pc, #140]	; (45b0 <k_sched_unlock+0xa8>)
    4524:	4823      	ldr	r0, [pc, #140]	; (45b4 <k_sched_unlock+0xac>)
    4526:	2281      	movs	r2, #129	; 0x81
    4528:	f003 faef 	bl	7b0a <printk>
    452c:	2181      	movs	r1, #129	; 0x81
    452e:	4820      	ldr	r0, [pc, #128]	; (45b0 <k_sched_unlock+0xa8>)
    4530:	f003 fb71 	bl	7c16 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4534:	4c20      	ldr	r4, [pc, #128]	; (45b8 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    4536:	481d      	ldr	r0, [pc, #116]	; (45ac <k_sched_unlock+0xa4>)
    4538:	f7ff f8ea 	bl	3710 <z_spin_lock_set_owner>
    453c:	68a3      	ldr	r3, [r4, #8]
    453e:	7bdb      	ldrb	r3, [r3, #15]
    4540:	b953      	cbnz	r3, 4558 <k_sched_unlock+0x50>
    4542:	491e      	ldr	r1, [pc, #120]	; (45bc <k_sched_unlock+0xb4>)
    4544:	481b      	ldr	r0, [pc, #108]	; (45b4 <k_sched_unlock+0xac>)
    4546:	f240 3285 	movw	r2, #901	; 0x385
    454a:	f003 fade 	bl	7b0a <printk>
    454e:	f240 3185 	movw	r1, #901	; 0x385
    4552:	481a      	ldr	r0, [pc, #104]	; (45bc <k_sched_unlock+0xb4>)
    4554:	f003 fb5f 	bl	7c16 <assert_post_action>
    4558:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    455c:	b153      	cbz	r3, 4574 <k_sched_unlock+0x6c>
    455e:	4917      	ldr	r1, [pc, #92]	; (45bc <k_sched_unlock+0xb4>)
    4560:	4814      	ldr	r0, [pc, #80]	; (45b4 <k_sched_unlock+0xac>)
    4562:	f240 3286 	movw	r2, #902	; 0x386
    4566:	f003 fad0 	bl	7b0a <printk>
    456a:	f240 3186 	movw	r1, #902	; 0x386
    456e:	4813      	ldr	r0, [pc, #76]	; (45bc <k_sched_unlock+0xb4>)
    4570:	f003 fb51 	bl	7c16 <assert_post_action>
		++_current->base.sched_locked;
    4574:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    4576:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4578:	7bd3      	ldrb	r3, [r2, #15]
    457a:	3301      	adds	r3, #1
    457c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    457e:	f7ff fc31 	bl	3de4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4582:	480a      	ldr	r0, [pc, #40]	; (45ac <k_sched_unlock+0xa4>)
    4584:	f7ff f8b6 	bl	36f4 <z_spin_unlock_valid>
    4588:	b940      	cbnz	r0, 459c <k_sched_unlock+0x94>
    458a:	4909      	ldr	r1, [pc, #36]	; (45b0 <k_sched_unlock+0xa8>)
    458c:	4809      	ldr	r0, [pc, #36]	; (45b4 <k_sched_unlock+0xac>)
    458e:	22ac      	movs	r2, #172	; 0xac
    4590:	f003 fabb 	bl	7b0a <printk>
    4594:	21ac      	movs	r1, #172	; 0xac
    4596:	4806      	ldr	r0, [pc, #24]	; (45b0 <k_sched_unlock+0xa8>)
    4598:	f003 fb3d 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    459c:	f385 8811 	msr	BASEPRI, r5
    45a0:	f3bf 8f6f 	isb	sy
}
    45a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    45a8:	f003 bdfc 	b.w	81a4 <z_reschedule_unlocked>
    45ac:	200009f8 	.word	0x200009f8
    45b0:	0000892b 	.word	0x0000892b
    45b4:	00008951 	.word	0x00008951
    45b8:	200009c4 	.word	0x200009c4
    45bc:	00009730 	.word	0x00009730

000045c0 <z_unpend_first_thread>:
{
    45c0:	b538      	push	{r3, r4, r5, lr}
    45c2:	4604      	mov	r4, r0
	__asm__ volatile(
    45c4:	f04f 0320 	mov.w	r3, #32
    45c8:	f3ef 8511 	mrs	r5, BASEPRI
    45cc:	f383 8812 	msr	BASEPRI_MAX, r3
    45d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    45d4:	4816      	ldr	r0, [pc, #88]	; (4630 <z_unpend_first_thread+0x70>)
    45d6:	f7ff f87f 	bl	36d8 <z_spin_lock_valid>
    45da:	b940      	cbnz	r0, 45ee <z_unpend_first_thread+0x2e>
    45dc:	4915      	ldr	r1, [pc, #84]	; (4634 <z_unpend_first_thread+0x74>)
    45de:	4816      	ldr	r0, [pc, #88]	; (4638 <z_unpend_first_thread+0x78>)
    45e0:	2281      	movs	r2, #129	; 0x81
    45e2:	f003 fa92 	bl	7b0a <printk>
    45e6:	2181      	movs	r1, #129	; 0x81
    45e8:	4812      	ldr	r0, [pc, #72]	; (4634 <z_unpend_first_thread+0x74>)
    45ea:	f003 fb14 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    45ee:	4810      	ldr	r0, [pc, #64]	; (4630 <z_unpend_first_thread+0x70>)
    45f0:	f7ff f88e 	bl	3710 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    45f4:	4620      	mov	r0, r4
    45f6:	f003 fddf 	bl	81b8 <z_priq_dumb_best>
		if (thread != NULL) {
    45fa:	4604      	mov	r4, r0
    45fc:	b128      	cbz	r0, 460a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    45fe:	f7ff fbd3 	bl	3da8 <unpend_thread_no_timeout>
    4602:	f104 0018 	add.w	r0, r4, #24
    4606:	f000 fb11 	bl	4c2c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    460a:	4809      	ldr	r0, [pc, #36]	; (4630 <z_unpend_first_thread+0x70>)
    460c:	f7ff f872 	bl	36f4 <z_spin_unlock_valid>
    4610:	b940      	cbnz	r0, 4624 <z_unpend_first_thread+0x64>
    4612:	4908      	ldr	r1, [pc, #32]	; (4634 <z_unpend_first_thread+0x74>)
    4614:	4808      	ldr	r0, [pc, #32]	; (4638 <z_unpend_first_thread+0x78>)
    4616:	22ac      	movs	r2, #172	; 0xac
    4618:	f003 fa77 	bl	7b0a <printk>
    461c:	21ac      	movs	r1, #172	; 0xac
    461e:	4805      	ldr	r0, [pc, #20]	; (4634 <z_unpend_first_thread+0x74>)
    4620:	f003 faf9 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4624:	f385 8811 	msr	BASEPRI, r5
    4628:	f3bf 8f6f 	isb	sy
}
    462c:	4620      	mov	r0, r4
    462e:	bd38      	pop	{r3, r4, r5, pc}
    4630:	200009f8 	.word	0x200009f8
    4634:	0000892b 	.word	0x0000892b
    4638:	00008951 	.word	0x00008951

0000463c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    463c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <z_sched_init+0x14>)
    4640:	4608      	mov	r0, r1
    4642:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4646:	e9c3 2208 	strd	r2, r2, [r3, #32]
    464a:	f7ff bab1 	b.w	3bb0 <k_sched_time_slice_set>
    464e:	bf00      	nop
    4650:	200009c4 	.word	0x200009c4

00004654 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4656:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    465a:	b153      	cbz	r3, 4672 <z_impl_k_yield+0x1e>
    465c:	4938      	ldr	r1, [pc, #224]	; (4740 <z_impl_k_yield+0xec>)
    465e:	4839      	ldr	r0, [pc, #228]	; (4744 <z_impl_k_yield+0xf0>)
    4660:	f240 42dc 	movw	r2, #1244	; 0x4dc
    4664:	f003 fa51 	bl	7b0a <printk>
    4668:	f240 41dc 	movw	r1, #1244	; 0x4dc
    466c:	4834      	ldr	r0, [pc, #208]	; (4740 <z_impl_k_yield+0xec>)
    466e:	f003 fad2 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4672:	f04f 0320 	mov.w	r3, #32
    4676:	f3ef 8611 	mrs	r6, BASEPRI
    467a:	f383 8812 	msr	BASEPRI_MAX, r3
    467e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4682:	4831      	ldr	r0, [pc, #196]	; (4748 <z_impl_k_yield+0xf4>)
    4684:	f7ff f828 	bl	36d8 <z_spin_lock_valid>
    4688:	b940      	cbnz	r0, 469c <z_impl_k_yield+0x48>
    468a:	4930      	ldr	r1, [pc, #192]	; (474c <z_impl_k_yield+0xf8>)
    468c:	482d      	ldr	r0, [pc, #180]	; (4744 <z_impl_k_yield+0xf0>)
    468e:	2281      	movs	r2, #129	; 0x81
    4690:	f003 fa3b 	bl	7b0a <printk>
    4694:	2181      	movs	r1, #129	; 0x81
    4696:	482d      	ldr	r0, [pc, #180]	; (474c <z_impl_k_yield+0xf8>)
    4698:	f003 fabd 	bl	7c16 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    469c:	4d2c      	ldr	r5, [pc, #176]	; (4750 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
    469e:	482a      	ldr	r0, [pc, #168]	; (4748 <z_impl_k_yield+0xf4>)
    46a0:	f7ff f836 	bl	3710 <z_spin_lock_set_owner>
    46a4:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
    46a6:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46aa:	7b4b      	ldrb	r3, [r1, #13]
    46ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46b0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    46b2:	f7ff fb5b 	bl	3d6c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    46b6:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    46b8:	7b63      	ldrb	r3, [r4, #13]
    46ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    46be:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    46c0:	4b24      	ldr	r3, [pc, #144]	; (4754 <z_impl_k_yield+0x100>)
    46c2:	429c      	cmp	r4, r3
    46c4:	d108      	bne.n	46d8 <z_impl_k_yield+0x84>
    46c6:	491e      	ldr	r1, [pc, #120]	; (4740 <z_impl_k_yield+0xec>)
    46c8:	481e      	ldr	r0, [pc, #120]	; (4744 <z_impl_k_yield+0xf0>)
    46ca:	22ba      	movs	r2, #186	; 0xba
    46cc:	f003 fa1d 	bl	7b0a <printk>
    46d0:	21ba      	movs	r1, #186	; 0xba
    46d2:	481b      	ldr	r0, [pc, #108]	; (4740 <z_impl_k_yield+0xec>)
    46d4:	f003 fa9f 	bl	7c16 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    46d8:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46dc:	481e      	ldr	r0, [pc, #120]	; (4758 <z_impl_k_yield+0x104>)
    46de:	4283      	cmp	r3, r0
    46e0:	d028      	beq.n	4734 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46e2:	b33b      	cbz	r3, 4734 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
    46e4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    46e8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    46ec:	4297      	cmp	r7, r2
    46ee:	d01c      	beq.n	472a <z_impl_k_yield+0xd6>
		return b2 - b1;
    46f0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    46f2:	2a00      	cmp	r2, #0
    46f4:	dd19      	ble.n	472a <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
    46f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    46f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    46fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    46fe:	605c      	str	r4, [r3, #4]
	update_cache(1);
    4700:	2001      	movs	r0, #1
    4702:	f7ff fb6f 	bl	3de4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4706:	4810      	ldr	r0, [pc, #64]	; (4748 <z_impl_k_yield+0xf4>)
    4708:	f7fe fff4 	bl	36f4 <z_spin_unlock_valid>
    470c:	b940      	cbnz	r0, 4720 <z_impl_k_yield+0xcc>
    470e:	490f      	ldr	r1, [pc, #60]	; (474c <z_impl_k_yield+0xf8>)
    4710:	480c      	ldr	r0, [pc, #48]	; (4744 <z_impl_k_yield+0xf0>)
    4712:	22c3      	movs	r2, #195	; 0xc3
    4714:	f003 f9f9 	bl	7b0a <printk>
    4718:	21c3      	movs	r1, #195	; 0xc3
    471a:	480c      	ldr	r0, [pc, #48]	; (474c <z_impl_k_yield+0xf8>)
    471c:	f003 fa7b 	bl	7c16 <assert_post_action>
    4720:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4726:	f7fd b809 	b.w	173c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    472a:	428b      	cmp	r3, r1
    472c:	d002      	beq.n	4734 <z_impl_k_yield+0xe0>
    472e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4730:	2b00      	cmp	r3, #0
    4732:	d1d9      	bne.n	46e8 <z_impl_k_yield+0x94>
	node->prev = tail;
    4734:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4738:	600c      	str	r4, [r1, #0]
	list->tail = node;
    473a:	626c      	str	r4, [r5, #36]	; 0x24
}
    473c:	e7e0      	b.n	4700 <z_impl_k_yield+0xac>
    473e:	bf00      	nop
    4740:	00009730 	.word	0x00009730
    4744:	00008951 	.word	0x00008951
    4748:	200009f8 	.word	0x200009f8
    474c:	0000892b 	.word	0x0000892b
    4750:	200009c4 	.word	0x200009c4
    4754:	20000130 	.word	0x20000130
    4758:	200009e4 	.word	0x200009e4

0000475c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4760:	4605      	mov	r5, r0
    4762:	460e      	mov	r6, r1
    4764:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4768:	b153      	cbz	r3, 4780 <z_tick_sleep+0x24>
    476a:	493a      	ldr	r1, [pc, #232]	; (4854 <z_tick_sleep+0xf8>)
    476c:	483a      	ldr	r0, [pc, #232]	; (4858 <z_tick_sleep+0xfc>)
    476e:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
    4772:	f003 f9ca 	bl	7b0a <printk>
    4776:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    477a:	4836      	ldr	r0, [pc, #216]	; (4854 <z_tick_sleep+0xf8>)
    477c:	f003 fa4b 	bl	7c16 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4780:	ea55 0306 	orrs.w	r3, r5, r6
    4784:	d103      	bne.n	478e <z_tick_sleep+0x32>
	z_impl_k_yield();
    4786:	f7ff ff65 	bl	4654 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    478a:	2000      	movs	r0, #0
    478c:	e05f      	b.n	484e <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
    478e:	f06f 0401 	mvn.w	r4, #1
    4792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4796:	1b64      	subs	r4, r4, r5
    4798:	eb63 0306 	sbc.w	r3, r3, r6
    479c:	2c01      	cmp	r4, #1
    479e:	f173 0300 	sbcs.w	r3, r3, #0
    47a2:	da02      	bge.n	47aa <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    47a4:	f003 fd0e 	bl	81c4 <sys_clock_tick_get_32>
    47a8:	1944      	adds	r4, r0, r5
    47aa:	f04f 0320 	mov.w	r3, #32
    47ae:	f3ef 8811 	mrs	r8, BASEPRI
    47b2:	f383 8812 	msr	BASEPRI_MAX, r3
    47b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47ba:	4828      	ldr	r0, [pc, #160]	; (485c <z_tick_sleep+0x100>)
    47bc:	f7fe ff8c 	bl	36d8 <z_spin_lock_valid>
    47c0:	b940      	cbnz	r0, 47d4 <z_tick_sleep+0x78>
    47c2:	4927      	ldr	r1, [pc, #156]	; (4860 <z_tick_sleep+0x104>)
    47c4:	4824      	ldr	r0, [pc, #144]	; (4858 <z_tick_sleep+0xfc>)
    47c6:	2281      	movs	r2, #129	; 0x81
    47c8:	f003 f99f 	bl	7b0a <printk>
    47cc:	2181      	movs	r1, #129	; 0x81
    47ce:	4824      	ldr	r0, [pc, #144]	; (4860 <z_tick_sleep+0x104>)
    47d0:	f003 fa21 	bl	7c16 <assert_post_action>
	pending_current = _current;
    47d4:	4f23      	ldr	r7, [pc, #140]	; (4864 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
    47d6:	4821      	ldr	r0, [pc, #132]	; (485c <z_tick_sleep+0x100>)
    47d8:	f7fe ff9a 	bl	3710 <z_spin_lock_set_owner>
    47dc:	68b8      	ldr	r0, [r7, #8]
    47de:	4b22      	ldr	r3, [pc, #136]	; (4868 <z_tick_sleep+0x10c>)
    47e0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    47e2:	f7ff fced 	bl	41c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    47e6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    47e8:	462a      	mov	r2, r5
    47ea:	4633      	mov	r3, r6
    47ec:	3018      	adds	r0, #24
    47ee:	491f      	ldr	r1, [pc, #124]	; (486c <z_tick_sleep+0x110>)
    47f0:	f000 f96e 	bl	4ad0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    47f4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    47f6:	4819      	ldr	r0, [pc, #100]	; (485c <z_tick_sleep+0x100>)
    47f8:	7b53      	ldrb	r3, [r2, #13]
    47fa:	f043 0310 	orr.w	r3, r3, #16
    47fe:	7353      	strb	r3, [r2, #13]
    4800:	f7fe ff78 	bl	36f4 <z_spin_unlock_valid>
    4804:	b940      	cbnz	r0, 4818 <z_tick_sleep+0xbc>
    4806:	4916      	ldr	r1, [pc, #88]	; (4860 <z_tick_sleep+0x104>)
    4808:	4813      	ldr	r0, [pc, #76]	; (4858 <z_tick_sleep+0xfc>)
    480a:	22c3      	movs	r2, #195	; 0xc3
    480c:	f003 f97d 	bl	7b0a <printk>
    4810:	21c3      	movs	r1, #195	; 0xc3
    4812:	4813      	ldr	r0, [pc, #76]	; (4860 <z_tick_sleep+0x104>)
    4814:	f003 f9ff 	bl	7c16 <assert_post_action>
    4818:	4640      	mov	r0, r8
    481a:	f7fc ff8f 	bl	173c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    481e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    4820:	7b5b      	ldrb	r3, [r3, #13]
    4822:	06db      	lsls	r3, r3, #27
    4824:	d50a      	bpl.n	483c <z_tick_sleep+0xe0>
    4826:	490b      	ldr	r1, [pc, #44]	; (4854 <z_tick_sleep+0xf8>)
    4828:	480b      	ldr	r0, [pc, #44]	; (4858 <z_tick_sleep+0xfc>)
    482a:	f240 5219 	movw	r2, #1305	; 0x519
    482e:	f003 f96c 	bl	7b0a <printk>
    4832:	f240 5119 	movw	r1, #1305	; 0x519
    4836:	4807      	ldr	r0, [pc, #28]	; (4854 <z_tick_sleep+0xf8>)
    4838:	f003 f9ed 	bl	7c16 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    483c:	f003 fcc2 	bl	81c4 <sys_clock_tick_get_32>
    4840:	1a20      	subs	r0, r4, r0
    4842:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4846:	2801      	cmp	r0, #1
    4848:	f173 0300 	sbcs.w	r3, r3, #0
    484c:	db9d      	blt.n	478a <z_tick_sleep+0x2e>
}
    484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4852:	bf00      	nop
    4854:	00009730 	.word	0x00009730
    4858:	00008951 	.word	0x00008951
    485c:	200009f8 	.word	0x200009f8
    4860:	0000892b 	.word	0x0000892b
    4864:	200009c4 	.word	0x200009c4
    4868:	200009f4 	.word	0x200009f4
    486c:	00004131 	.word	0x00004131

00004870 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4870:	b538      	push	{r3, r4, r5, lr}
    4872:	4605      	mov	r5, r0
    4874:	460c      	mov	r4, r1
    4876:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    487a:	b153      	cbz	r3, 4892 <z_impl_k_sleep+0x22>
    487c:	4911      	ldr	r1, [pc, #68]	; (48c4 <z_impl_k_sleep+0x54>)
    487e:	4812      	ldr	r0, [pc, #72]	; (48c8 <z_impl_k_sleep+0x58>)
    4880:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    4884:	f003 f941 	bl	7b0a <printk>
    4888:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    488c:	480d      	ldr	r0, [pc, #52]	; (48c4 <z_impl_k_sleep+0x54>)
    488e:	f003 f9c2 	bl	7c16 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4892:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4896:	bf08      	it	eq
    4898:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    489c:	d106      	bne.n	48ac <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
    489e:	4b0b      	ldr	r3, [pc, #44]	; (48cc <z_impl_k_sleep+0x5c>)
    48a0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    48a2:	f7ff fdd9 	bl	4458 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    48a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    48aa:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    48ac:	4628      	mov	r0, r5
    48ae:	4621      	mov	r1, r4
    48b0:	f7ff ff54 	bl	475c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    48b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    48b8:	fb80 0303 	smull	r0, r3, r0, r3
    48bc:	0bc0      	lsrs	r0, r0, #15
    48be:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    48c2:	e7f2      	b.n	48aa <z_impl_k_sleep+0x3a>
    48c4:	00009730 	.word	0x00009730
    48c8:	00008951 	.word	0x00008951
    48cc:	200009c4 	.word	0x200009c4

000048d0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    48d0:	4b01      	ldr	r3, [pc, #4]	; (48d8 <z_impl_z_current_get+0x8>)
    48d2:	6898      	ldr	r0, [r3, #8]
    48d4:	4770      	bx	lr
    48d6:	bf00      	nop
    48d8:	200009c4 	.word	0x200009c4

000048dc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    48dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48e0:	4604      	mov	r4, r0
    48e2:	f04f 0320 	mov.w	r3, #32
    48e6:	f3ef 8611 	mrs	r6, BASEPRI
    48ea:	f383 8812 	msr	BASEPRI_MAX, r3
    48ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48f2:	483e      	ldr	r0, [pc, #248]	; (49ec <z_thread_abort+0x110>)
    48f4:	f7fe fef0 	bl	36d8 <z_spin_lock_valid>
    48f8:	b940      	cbnz	r0, 490c <z_thread_abort+0x30>
    48fa:	493d      	ldr	r1, [pc, #244]	; (49f0 <z_thread_abort+0x114>)
    48fc:	483d      	ldr	r0, [pc, #244]	; (49f4 <z_thread_abort+0x118>)
    48fe:	2281      	movs	r2, #129	; 0x81
    4900:	f003 f903 	bl	7b0a <printk>
    4904:	2181      	movs	r1, #129	; 0x81
    4906:	483a      	ldr	r0, [pc, #232]	; (49f0 <z_thread_abort+0x114>)
    4908:	f003 f985 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    490c:	4837      	ldr	r0, [pc, #220]	; (49ec <z_thread_abort+0x110>)
    490e:	f7fe feff 	bl	3710 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4912:	7b63      	ldrb	r3, [r4, #13]
    4914:	071a      	lsls	r2, r3, #28
    4916:	d512      	bpl.n	493e <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4918:	4834      	ldr	r0, [pc, #208]	; (49ec <z_thread_abort+0x110>)
    491a:	f7fe feeb 	bl	36f4 <z_spin_unlock_valid>
    491e:	b940      	cbnz	r0, 4932 <z_thread_abort+0x56>
    4920:	4933      	ldr	r1, [pc, #204]	; (49f0 <z_thread_abort+0x114>)
    4922:	4834      	ldr	r0, [pc, #208]	; (49f4 <z_thread_abort+0x118>)
    4924:	22ac      	movs	r2, #172	; 0xac
    4926:	f003 f8f0 	bl	7b0a <printk>
    492a:	21ac      	movs	r1, #172	; 0xac
    492c:	4830      	ldr	r0, [pc, #192]	; (49f0 <z_thread_abort+0x114>)
    492e:	f003 f972 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4932:	f386 8811 	msr	BASEPRI, r6
    4936:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    493e:	f023 0220 	bic.w	r2, r3, #32
    4942:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4946:	09d2      	lsrs	r2, r2, #7
    4948:	d138      	bne.n	49bc <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    494a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    494c:	68a3      	ldr	r3, [r4, #8]
    494e:	b113      	cbz	r3, 4956 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    4950:	4620      	mov	r0, r4
    4952:	f7ff fa29 	bl	3da8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4956:	f104 0018 	add.w	r0, r4, #24
    495a:	f000 f967 	bl	4c2c <z_abort_timeout>
    495e:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4962:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4966:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4968:	42bd      	cmp	r5, r7
    496a:	d000      	beq.n	496e <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    496c:	bb85      	cbnz	r5, 49d0 <z_thread_abort+0xf4>
		update_cache(1);
    496e:	2001      	movs	r0, #1
    4970:	f7ff fa38 	bl	3de4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4974:	4b20      	ldr	r3, [pc, #128]	; (49f8 <z_thread_abort+0x11c>)
    4976:	689b      	ldr	r3, [r3, #8]
    4978:	42a3      	cmp	r3, r4
    497a:	d1cd      	bne.n	4918 <z_thread_abort+0x3c>
    497c:	f3ef 8305 	mrs	r3, IPSR
    4980:	2b00      	cmp	r3, #0
    4982:	d1c9      	bne.n	4918 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4984:	4819      	ldr	r0, [pc, #100]	; (49ec <z_thread_abort+0x110>)
    4986:	f7fe feb5 	bl	36f4 <z_spin_unlock_valid>
    498a:	b940      	cbnz	r0, 499e <z_thread_abort+0xc2>
    498c:	4918      	ldr	r1, [pc, #96]	; (49f0 <z_thread_abort+0x114>)
    498e:	4819      	ldr	r0, [pc, #100]	; (49f4 <z_thread_abort+0x118>)
    4990:	22c3      	movs	r2, #195	; 0xc3
    4992:	f003 f8ba 	bl	7b0a <printk>
    4996:	21c3      	movs	r1, #195	; 0xc3
    4998:	4815      	ldr	r0, [pc, #84]	; (49f0 <z_thread_abort+0x114>)
    499a:	f003 f93c 	bl	7c16 <assert_post_action>
    499e:	4630      	mov	r0, r6
    49a0:	f7fc fecc 	bl	173c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    49a4:	f240 624b 	movw	r2, #1611	; 0x64b
    49a8:	4914      	ldr	r1, [pc, #80]	; (49fc <z_thread_abort+0x120>)
    49aa:	4812      	ldr	r0, [pc, #72]	; (49f4 <z_thread_abort+0x118>)
    49ac:	f003 f8ad 	bl	7b0a <printk>
    49b0:	f240 614b 	movw	r1, #1611	; 0x64b
    49b4:	4811      	ldr	r0, [pc, #68]	; (49fc <z_thread_abort+0x120>)
    49b6:	f003 f92e 	bl	7c16 <assert_post_action>
    49ba:	e7ad      	b.n	4918 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49bc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    49c0:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    49c4:	4621      	mov	r1, r4
    49c6:	480e      	ldr	r0, [pc, #56]	; (4a00 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49c8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    49ca:	f7ff f9cf 	bl	3d6c <z_priq_dumb_remove>
}
    49ce:	e7bd      	b.n	494c <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    49d0:	4628      	mov	r0, r5
    49d2:	f7ff f9e9 	bl	3da8 <unpend_thread_no_timeout>
    49d6:	f105 0018 	add.w	r0, r5, #24
    49da:	f000 f927 	bl	4c2c <z_abort_timeout>
		ready_thread(thread);
    49de:	4628      	mov	r0, r5
    49e0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    49e4:	f7ff fae2 	bl	3fac <ready_thread>
    49e8:	e7bd      	b.n	4966 <z_thread_abort+0x8a>
    49ea:	bf00      	nop
    49ec:	200009f8 	.word	0x200009f8
    49f0:	0000892b 	.word	0x0000892b
    49f4:	00008951 	.word	0x00008951
    49f8:	200009c4 	.word	0x200009c4
    49fc:	00009730 	.word	0x00009730
    4a00:	200009e4 	.word	0x200009e4

00004a04 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4a04:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    4a06:	4806      	ldr	r0, [pc, #24]	; (4a20 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4a08:	4a06      	ldr	r2, [pc, #24]	; (4a24 <z_data_copy+0x20>)
    4a0a:	4907      	ldr	r1, [pc, #28]	; (4a28 <z_data_copy+0x24>)
    4a0c:	1a12      	subs	r2, r2, r0
    4a0e:	f003 f9b4 	bl	7d7a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4a16:	4a05      	ldr	r2, [pc, #20]	; (4a2c <z_data_copy+0x28>)
    4a18:	4905      	ldr	r1, [pc, #20]	; (4a30 <z_data_copy+0x2c>)
    4a1a:	4806      	ldr	r0, [pc, #24]	; (4a34 <z_data_copy+0x30>)
    4a1c:	f003 b9ad 	b.w	7d7a <memcpy>
    4a20:	20000000 	.word	0x20000000
    4a24:	2000012c 	.word	0x2000012c
    4a28:	000097b0 	.word	0x000097b0
    4a2c:	00000000 	.word	0x00000000
    4a30:	000097b0 	.word	0x000097b0
    4a34:	20000000 	.word	0x20000000

00004a38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4a38:	4b03      	ldr	r3, [pc, #12]	; (4a48 <elapsed+0x10>)
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	b90b      	cbnz	r3, 4a42 <elapsed+0xa>
    4a3e:	f7fe b8cf 	b.w	2be0 <sys_clock_elapsed>
}
    4a42:	2000      	movs	r0, #0
    4a44:	4770      	bx	lr
    4a46:	bf00      	nop
    4a48:	20000a04 	.word	0x20000a04

00004a4c <next_timeout>:
	return list->head == list;
    4a4c:	4b11      	ldr	r3, [pc, #68]	; (4a94 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    4a4e:	b510      	push	{r4, lr}
    4a50:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a52:	429c      	cmp	r4, r3
    4a54:	bf08      	it	eq
    4a56:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4a58:	f7ff ffee 	bl	4a38 <elapsed>
    4a5c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4a5e:	b16c      	cbz	r4, 4a7c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4a60:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    4a64:	1ac0      	subs	r0, r0, r3
    4a66:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4a6a:	2801      	cmp	r0, #1
    4a6c:	f173 0200 	sbcs.w	r2, r3, #0
    4a70:	db0d      	blt.n	4a8e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4a72:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    4a76:	f173 0300 	sbcs.w	r3, r3, #0
    4a7a:	db01      	blt.n	4a80 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    4a7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4a80:	4b05      	ldr	r3, [pc, #20]	; (4a98 <next_timeout+0x4c>)
    4a82:	691b      	ldr	r3, [r3, #16]
    4a84:	b113      	cbz	r3, 4a8c <next_timeout+0x40>
    4a86:	4298      	cmp	r0, r3
    4a88:	bfa8      	it	ge
    4a8a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4a8c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4a8e:	2000      	movs	r0, #0
    4a90:	e7f6      	b.n	4a80 <next_timeout+0x34>
    4a92:	bf00      	nop
    4a94:	20000054 	.word	0x20000054
    4a98:	200009c4 	.word	0x200009c4

00004a9c <remove_timeout>:
{
    4a9c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    4a9e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4aa0:	b168      	cbz	r0, 4abe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4aa2:	4a0a      	ldr	r2, [pc, #40]	; (4acc <remove_timeout+0x30>)
    4aa4:	6852      	ldr	r2, [r2, #4]
    4aa6:	4290      	cmp	r0, r2
    4aa8:	d009      	beq.n	4abe <remove_timeout+0x22>
	if (next(t) != NULL) {
    4aaa:	b143      	cbz	r3, 4abe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4aac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4ab0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4ab4:	1912      	adds	r2, r2, r4
    4ab6:	eb41 0105 	adc.w	r1, r1, r5
    4aba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    4abe:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    4ac0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4ac2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4ac4:	2300      	movs	r3, #0
	node->prev = NULL;
    4ac6:	e9c0 3300 	strd	r3, r3, [r0]
}
    4aca:	bd30      	pop	{r4, r5, pc}
    4acc:	20000054 	.word	0x20000054

00004ad0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4ad4:	bf08      	it	eq
    4ad6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ade:	4604      	mov	r4, r0
    4ae0:	460e      	mov	r6, r1
    4ae2:	4698      	mov	r8, r3
    4ae4:	4615      	mov	r5, r2
    4ae6:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4ae8:	f000 8090 	beq.w	4c0c <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    4aec:	6803      	ldr	r3, [r0, #0]
    4aee:	b143      	cbz	r3, 4b02 <z_add_timeout+0x32>
    4af0:	4947      	ldr	r1, [pc, #284]	; (4c10 <z_add_timeout+0x140>)
    4af2:	4848      	ldr	r0, [pc, #288]	; (4c14 <z_add_timeout+0x144>)
    4af4:	225d      	movs	r2, #93	; 0x5d
    4af6:	f003 f808 	bl	7b0a <printk>
    4afa:	215d      	movs	r1, #93	; 0x5d
    4afc:	4844      	ldr	r0, [pc, #272]	; (4c10 <z_add_timeout+0x140>)
    4afe:	f003 f88a 	bl	7c16 <assert_post_action>
	to->fn = fn;
    4b02:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    4b04:	f04f 0320 	mov.w	r3, #32
    4b08:	f3ef 8611 	mrs	r6, BASEPRI
    4b0c:	f383 8812 	msr	BASEPRI_MAX, r3
    4b10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b14:	4840      	ldr	r0, [pc, #256]	; (4c18 <z_add_timeout+0x148>)
    4b16:	f7fe fddf 	bl	36d8 <z_spin_lock_valid>
    4b1a:	b940      	cbnz	r0, 4b2e <z_add_timeout+0x5e>
    4b1c:	493f      	ldr	r1, [pc, #252]	; (4c1c <z_add_timeout+0x14c>)
    4b1e:	483d      	ldr	r0, [pc, #244]	; (4c14 <z_add_timeout+0x144>)
    4b20:	2281      	movs	r2, #129	; 0x81
    4b22:	f002 fff2 	bl	7b0a <printk>
    4b26:	2181      	movs	r1, #129	; 0x81
    4b28:	483c      	ldr	r0, [pc, #240]	; (4c1c <z_add_timeout+0x14c>)
    4b2a:	f003 f874 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b2e:	483a      	ldr	r0, [pc, #232]	; (4c18 <z_add_timeout+0x148>)
    4b30:	f7fe fdee 	bl	3710 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4b34:	f06f 0201 	mvn.w	r2, #1
    4b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b3c:	1b53      	subs	r3, r2, r5
    4b3e:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4b42:	2b00      	cmp	r3, #0
    4b44:	db1b      	blt.n	4b7e <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4b46:	4b36      	ldr	r3, [pc, #216]	; (4c20 <z_add_timeout+0x150>)
    4b48:	e9d3 1300 	ldrd	r1, r3, [r3]
    4b4c:	1a52      	subs	r2, r2, r1
    4b4e:	eb60 0303 	sbc.w	r3, r0, r3
    4b52:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    4b54:	eb63 0707 	sbc.w	r7, r3, r7
    4b58:	2d01      	cmp	r5, #1
    4b5a:	f177 0300 	sbcs.w	r3, r7, #0
    4b5e:	bfbc      	itt	lt
    4b60:	2501      	movlt	r5, #1
    4b62:	2700      	movlt	r7, #0
    4b64:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    4b68:	4a2e      	ldr	r2, [pc, #184]	; (4c24 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
    4b6a:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b6e:	4293      	cmp	r3, r2
    4b70:	d118      	bne.n	4ba4 <z_add_timeout+0xd4>
	node->prev = tail;
    4b72:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    4b76:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4b7a:	6054      	str	r4, [r2, #4]
}
    4b7c:	e026      	b.n	4bcc <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4b7e:	f7ff ff5b 	bl	4a38 <elapsed>
    4b82:	3501      	adds	r5, #1
    4b84:	f148 0800 	adc.w	r8, r8, #0
    4b88:	182d      	adds	r5, r5, r0
    4b8a:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    4b8e:	e9c4 5004 	strd	r5, r0, [r4, #16]
    4b92:	e7e9      	b.n	4b68 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4b94:	1a09      	subs	r1, r1, r0
    4b96:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4b9a:	459c      	cmp	ip, r3
    4b9c:	e9c4 1504 	strd	r1, r5, [r4, #16]
    4ba0:	d0e7      	beq.n	4b72 <z_add_timeout+0xa2>
    4ba2:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d0e4      	beq.n	4b72 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
    4ba8:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    4bac:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    4bb0:	4281      	cmp	r1, r0
    4bb2:	eb75 0e07 	sbcs.w	lr, r5, r7
    4bb6:	daed      	bge.n	4b94 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
    4bb8:	1a41      	subs	r1, r0, r1
    4bba:	eb67 0505 	sbc.w	r5, r7, r5
    4bbe:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4bc2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4bc4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4bc8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4bca:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4bcc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bce:	4293      	cmp	r3, r2
    4bd0:	d00b      	beq.n	4bea <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4bd2:	429c      	cmp	r4, r3
    4bd4:	d109      	bne.n	4bea <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4bd6:	f7ff ff39 	bl	4a4c <next_timeout>

			if (next_time == 0 ||
    4bda:	b118      	cbz	r0, 4be4 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
    4bdc:	4b12      	ldr	r3, [pc, #72]	; (4c28 <z_add_timeout+0x158>)
			if (next_time == 0 ||
    4bde:	691b      	ldr	r3, [r3, #16]
    4be0:	4283      	cmp	r3, r0
    4be2:	d002      	beq.n	4bea <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
    4be4:	2100      	movs	r1, #0
    4be6:	f7fd ff77 	bl	2ad8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bea:	480b      	ldr	r0, [pc, #44]	; (4c18 <z_add_timeout+0x148>)
    4bec:	f7fe fd82 	bl	36f4 <z_spin_unlock_valid>
    4bf0:	b940      	cbnz	r0, 4c04 <z_add_timeout+0x134>
    4bf2:	490a      	ldr	r1, [pc, #40]	; (4c1c <z_add_timeout+0x14c>)
    4bf4:	4807      	ldr	r0, [pc, #28]	; (4c14 <z_add_timeout+0x144>)
    4bf6:	22ac      	movs	r2, #172	; 0xac
    4bf8:	f002 ff87 	bl	7b0a <printk>
    4bfc:	21ac      	movs	r1, #172	; 0xac
    4bfe:	4807      	ldr	r0, [pc, #28]	; (4c1c <z_add_timeout+0x14c>)
    4c00:	f003 f809 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4c04:	f386 8811 	msr	BASEPRI, r6
    4c08:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c10:	00009752 	.word	0x00009752
    4c14:	00008951 	.word	0x00008951
    4c18:	20000a08 	.word	0x20000a08
    4c1c:	0000892b 	.word	0x0000892b
    4c20:	20000230 	.word	0x20000230
    4c24:	20000054 	.word	0x20000054
    4c28:	200009c4 	.word	0x200009c4

00004c2c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    4c2c:	b538      	push	{r3, r4, r5, lr}
    4c2e:	4604      	mov	r4, r0
	__asm__ volatile(
    4c30:	f04f 0320 	mov.w	r3, #32
    4c34:	f3ef 8511 	mrs	r5, BASEPRI
    4c38:	f383 8812 	msr	BASEPRI_MAX, r3
    4c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c40:	4815      	ldr	r0, [pc, #84]	; (4c98 <z_abort_timeout+0x6c>)
    4c42:	f7fe fd49 	bl	36d8 <z_spin_lock_valid>
    4c46:	b940      	cbnz	r0, 4c5a <z_abort_timeout+0x2e>
    4c48:	4914      	ldr	r1, [pc, #80]	; (4c9c <z_abort_timeout+0x70>)
    4c4a:	4815      	ldr	r0, [pc, #84]	; (4ca0 <z_abort_timeout+0x74>)
    4c4c:	2281      	movs	r2, #129	; 0x81
    4c4e:	f002 ff5c 	bl	7b0a <printk>
    4c52:	2181      	movs	r1, #129	; 0x81
    4c54:	4811      	ldr	r0, [pc, #68]	; (4c9c <z_abort_timeout+0x70>)
    4c56:	f002 ffde 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c5a:	480f      	ldr	r0, [pc, #60]	; (4c98 <z_abort_timeout+0x6c>)
    4c5c:	f7fe fd58 	bl	3710 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    4c60:	6823      	ldr	r3, [r4, #0]
    4c62:	b1b3      	cbz	r3, 4c92 <z_abort_timeout+0x66>
			remove_timeout(to);
    4c64:	4620      	mov	r0, r4
    4c66:	f7ff ff19 	bl	4a9c <remove_timeout>
			ret = 0;
    4c6a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c6c:	480a      	ldr	r0, [pc, #40]	; (4c98 <z_abort_timeout+0x6c>)
    4c6e:	f7fe fd41 	bl	36f4 <z_spin_unlock_valid>
    4c72:	b940      	cbnz	r0, 4c86 <z_abort_timeout+0x5a>
    4c74:	4909      	ldr	r1, [pc, #36]	; (4c9c <z_abort_timeout+0x70>)
    4c76:	480a      	ldr	r0, [pc, #40]	; (4ca0 <z_abort_timeout+0x74>)
    4c78:	22ac      	movs	r2, #172	; 0xac
    4c7a:	f002 ff46 	bl	7b0a <printk>
    4c7e:	21ac      	movs	r1, #172	; 0xac
    4c80:	4806      	ldr	r0, [pc, #24]	; (4c9c <z_abort_timeout+0x70>)
    4c82:	f002 ffc8 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4c86:	f385 8811 	msr	BASEPRI, r5
    4c8a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4c8e:	4620      	mov	r0, r4
    4c90:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    4c92:	f06f 0415 	mvn.w	r4, #21
    4c96:	e7e9      	b.n	4c6c <z_abort_timeout+0x40>
    4c98:	20000a08 	.word	0x20000a08
    4c9c:	0000892b 	.word	0x0000892b
    4ca0:	00008951 	.word	0x00008951

00004ca4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    4ca4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ca6:	f04f 0320 	mov.w	r3, #32
    4caa:	f3ef 8511 	mrs	r5, BASEPRI
    4cae:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cb6:	4813      	ldr	r0, [pc, #76]	; (4d04 <z_get_next_timeout_expiry+0x60>)
    4cb8:	f7fe fd0e 	bl	36d8 <z_spin_lock_valid>
    4cbc:	b940      	cbnz	r0, 4cd0 <z_get_next_timeout_expiry+0x2c>
    4cbe:	4912      	ldr	r1, [pc, #72]	; (4d08 <z_get_next_timeout_expiry+0x64>)
    4cc0:	4812      	ldr	r0, [pc, #72]	; (4d0c <z_get_next_timeout_expiry+0x68>)
    4cc2:	2281      	movs	r2, #129	; 0x81
    4cc4:	f002 ff21 	bl	7b0a <printk>
    4cc8:	2181      	movs	r1, #129	; 0x81
    4cca:	480f      	ldr	r0, [pc, #60]	; (4d08 <z_get_next_timeout_expiry+0x64>)
    4ccc:	f002 ffa3 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cd0:	480c      	ldr	r0, [pc, #48]	; (4d04 <z_get_next_timeout_expiry+0x60>)
    4cd2:	f7fe fd1d 	bl	3710 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    4cd6:	f7ff feb9 	bl	4a4c <next_timeout>
    4cda:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cdc:	4809      	ldr	r0, [pc, #36]	; (4d04 <z_get_next_timeout_expiry+0x60>)
    4cde:	f7fe fd09 	bl	36f4 <z_spin_unlock_valid>
    4ce2:	b940      	cbnz	r0, 4cf6 <z_get_next_timeout_expiry+0x52>
    4ce4:	4908      	ldr	r1, [pc, #32]	; (4d08 <z_get_next_timeout_expiry+0x64>)
    4ce6:	4809      	ldr	r0, [pc, #36]	; (4d0c <z_get_next_timeout_expiry+0x68>)
    4ce8:	22ac      	movs	r2, #172	; 0xac
    4cea:	f002 ff0e 	bl	7b0a <printk>
    4cee:	21ac      	movs	r1, #172	; 0xac
    4cf0:	4805      	ldr	r0, [pc, #20]	; (4d08 <z_get_next_timeout_expiry+0x64>)
    4cf2:	f002 ff90 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4cf6:	f385 8811 	msr	BASEPRI, r5
    4cfa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    4cfe:	4620      	mov	r0, r4
    4d00:	bd38      	pop	{r3, r4, r5, pc}
    4d02:	bf00      	nop
    4d04:	20000a08 	.word	0x20000a08
    4d08:	0000892b 	.word	0x0000892b
    4d0c:	00008951 	.word	0x00008951

00004d10 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    4d10:	b570      	push	{r4, r5, r6, lr}
    4d12:	4604      	mov	r4, r0
    4d14:	460d      	mov	r5, r1
	__asm__ volatile(
    4d16:	f04f 0320 	mov.w	r3, #32
    4d1a:	f3ef 8611 	mrs	r6, BASEPRI
    4d1e:	f383 8812 	msr	BASEPRI_MAX, r3
    4d22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d26:	4816      	ldr	r0, [pc, #88]	; (4d80 <z_set_timeout_expiry+0x70>)
    4d28:	f7fe fcd6 	bl	36d8 <z_spin_lock_valid>
    4d2c:	b940      	cbnz	r0, 4d40 <z_set_timeout_expiry+0x30>
    4d2e:	4915      	ldr	r1, [pc, #84]	; (4d84 <z_set_timeout_expiry+0x74>)
    4d30:	4815      	ldr	r0, [pc, #84]	; (4d88 <z_set_timeout_expiry+0x78>)
    4d32:	2281      	movs	r2, #129	; 0x81
    4d34:	f002 fee9 	bl	7b0a <printk>
    4d38:	2181      	movs	r1, #129	; 0x81
    4d3a:	4812      	ldr	r0, [pc, #72]	; (4d84 <z_set_timeout_expiry+0x74>)
    4d3c:	f002 ff6b 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d40:	480f      	ldr	r0, [pc, #60]	; (4d80 <z_set_timeout_expiry+0x70>)
    4d42:	f7fe fce5 	bl	3710 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    4d46:	f7ff fe81 	bl	4a4c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4d4a:	2801      	cmp	r0, #1
    4d4c:	dd05      	ble.n	4d5a <z_set_timeout_expiry+0x4a>
    4d4e:	42a0      	cmp	r0, r4
    4d50:	db03      	blt.n	4d5a <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4d52:	4629      	mov	r1, r5
    4d54:	4620      	mov	r0, r4
    4d56:	f7fd febf 	bl	2ad8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d5a:	4809      	ldr	r0, [pc, #36]	; (4d80 <z_set_timeout_expiry+0x70>)
    4d5c:	f7fe fcca 	bl	36f4 <z_spin_unlock_valid>
    4d60:	b940      	cbnz	r0, 4d74 <z_set_timeout_expiry+0x64>
    4d62:	4908      	ldr	r1, [pc, #32]	; (4d84 <z_set_timeout_expiry+0x74>)
    4d64:	4808      	ldr	r0, [pc, #32]	; (4d88 <z_set_timeout_expiry+0x78>)
    4d66:	22ac      	movs	r2, #172	; 0xac
    4d68:	f002 fecf 	bl	7b0a <printk>
    4d6c:	21ac      	movs	r1, #172	; 0xac
    4d6e:	4805      	ldr	r0, [pc, #20]	; (4d84 <z_set_timeout_expiry+0x74>)
    4d70:	f002 ff51 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4d74:	f386 8811 	msr	BASEPRI, r6
    4d78:	f3bf 8f6f 	isb	sy
		}
	}
}
    4d7c:	bd70      	pop	{r4, r5, r6, pc}
    4d7e:	bf00      	nop
    4d80:	20000a08 	.word	0x20000a08
    4d84:	0000892b 	.word	0x0000892b
    4d88:	00008951 	.word	0x00008951

00004d8c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    4d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d90:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4d92:	f7ff f8a7 	bl	3ee4 <z_time_slice>
	__asm__ volatile(
    4d96:	f04f 0320 	mov.w	r3, #32
    4d9a:	f3ef 8511 	mrs	r5, BASEPRI
    4d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    4da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4da6:	4842      	ldr	r0, [pc, #264]	; (4eb0 <sys_clock_announce+0x124>)
    4da8:	f7fe fc96 	bl	36d8 <z_spin_lock_valid>
    4dac:	b940      	cbnz	r0, 4dc0 <sys_clock_announce+0x34>
    4dae:	4941      	ldr	r1, [pc, #260]	; (4eb4 <sys_clock_announce+0x128>)
    4db0:	4841      	ldr	r0, [pc, #260]	; (4eb8 <sys_clock_announce+0x12c>)
    4db2:	2281      	movs	r2, #129	; 0x81
    4db4:	f002 fea9 	bl	7b0a <printk>
    4db8:	2181      	movs	r1, #129	; 0x81
    4dba:	483e      	ldr	r0, [pc, #248]	; (4eb4 <sys_clock_announce+0x128>)
    4dbc:	f002 ff2b 	bl	7c16 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4dc0:	4f3e      	ldr	r7, [pc, #248]	; (4ebc <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
    4dc2:	483b      	ldr	r0, [pc, #236]	; (4eb0 <sys_clock_announce+0x124>)
	return list->head == list;
    4dc4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 4ec0 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4dc8:	4e3e      	ldr	r6, [pc, #248]	; (4ec4 <sys_clock_announce+0x138>)
    4dca:	f7fe fca1 	bl	3710 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    4dce:	603c      	str	r4, [r7, #0]
    4dd0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4dd4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dd6:	4544      	cmp	r4, r8
    4dd8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
    4ddc:	e9d6 1e00 	ldrd	r1, lr, [r6]
    4de0:	d00b      	beq.n	4dfa <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4de2:	b154      	cbz	r4, 4dfa <sys_clock_announce+0x6e>
    4de4:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    4de8:	429a      	cmp	r2, r3
    4dea:	eb70 090c 	sbcs.w	r9, r0, ip
    4dee:	da23      	bge.n	4e38 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4df0:	1a9b      	subs	r3, r3, r2
    4df2:	eb6c 0c00 	sbc.w	ip, ip, r0
    4df6:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4dfa:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4dfc:	1852      	adds	r2, r2, r1
    4dfe:	eb4e 0000 	adc.w	r0, lr, r0
    4e02:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    4e06:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4e08:	f7ff fe20 	bl	4a4c <next_timeout>
    4e0c:	4621      	mov	r1, r4
    4e0e:	f7fd fe63 	bl	2ad8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e12:	4827      	ldr	r0, [pc, #156]	; (4eb0 <sys_clock_announce+0x124>)
    4e14:	f7fe fc6e 	bl	36f4 <z_spin_unlock_valid>
    4e18:	b940      	cbnz	r0, 4e2c <sys_clock_announce+0xa0>
    4e1a:	4926      	ldr	r1, [pc, #152]	; (4eb4 <sys_clock_announce+0x128>)
    4e1c:	4826      	ldr	r0, [pc, #152]	; (4eb8 <sys_clock_announce+0x12c>)
    4e1e:	22ac      	movs	r2, #172	; 0xac
    4e20:	f002 fe73 	bl	7b0a <printk>
    4e24:	21ac      	movs	r1, #172	; 0xac
    4e26:	4823      	ldr	r0, [pc, #140]	; (4eb4 <sys_clock_announce+0x128>)
    4e28:	f002 fef5 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4e2c:	f385 8811 	msr	BASEPRI, r5
    4e30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4e38:	1859      	adds	r1, r3, r1
    4e3a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    4e3e:	1ad3      	subs	r3, r2, r3
    4e40:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    4e42:	2200      	movs	r2, #0
    4e44:	2300      	movs	r3, #0
		curr_tick += dt;
    4e46:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    4e4a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4e4e:	4620      	mov	r0, r4
    4e50:	f7ff fe24 	bl	4a9c <remove_timeout>
    4e54:	4816      	ldr	r0, [pc, #88]	; (4eb0 <sys_clock_announce+0x124>)
    4e56:	f7fe fc4d 	bl	36f4 <z_spin_unlock_valid>
    4e5a:	b940      	cbnz	r0, 4e6e <sys_clock_announce+0xe2>
    4e5c:	4915      	ldr	r1, [pc, #84]	; (4eb4 <sys_clock_announce+0x128>)
    4e5e:	4816      	ldr	r0, [pc, #88]	; (4eb8 <sys_clock_announce+0x12c>)
    4e60:	22ac      	movs	r2, #172	; 0xac
    4e62:	f002 fe52 	bl	7b0a <printk>
    4e66:	21ac      	movs	r1, #172	; 0xac
    4e68:	4812      	ldr	r0, [pc, #72]	; (4eb4 <sys_clock_announce+0x128>)
    4e6a:	f002 fed4 	bl	7c16 <assert_post_action>
    4e6e:	f385 8811 	msr	BASEPRI, r5
    4e72:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4e76:	4620      	mov	r0, r4
    4e78:	68a3      	ldr	r3, [r4, #8]
    4e7a:	4798      	blx	r3
	__asm__ volatile(
    4e7c:	f04f 0320 	mov.w	r3, #32
    4e80:	f3ef 8511 	mrs	r5, BASEPRI
    4e84:	f383 8812 	msr	BASEPRI_MAX, r3
    4e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e8c:	4808      	ldr	r0, [pc, #32]	; (4eb0 <sys_clock_announce+0x124>)
    4e8e:	f7fe fc23 	bl	36d8 <z_spin_lock_valid>
    4e92:	b940      	cbnz	r0, 4ea6 <sys_clock_announce+0x11a>
    4e94:	4907      	ldr	r1, [pc, #28]	; (4eb4 <sys_clock_announce+0x128>)
    4e96:	4808      	ldr	r0, [pc, #32]	; (4eb8 <sys_clock_announce+0x12c>)
    4e98:	2281      	movs	r2, #129	; 0x81
    4e9a:	f002 fe36 	bl	7b0a <printk>
    4e9e:	2181      	movs	r1, #129	; 0x81
    4ea0:	4804      	ldr	r0, [pc, #16]	; (4eb4 <sys_clock_announce+0x128>)
    4ea2:	f002 feb8 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ea6:	4802      	ldr	r0, [pc, #8]	; (4eb0 <sys_clock_announce+0x124>)
    4ea8:	f7fe fc32 	bl	3710 <z_spin_lock_set_owner>
	return k;
    4eac:	e790      	b.n	4dd0 <sys_clock_announce+0x44>
    4eae:	bf00      	nop
    4eb0:	20000a08 	.word	0x20000a08
    4eb4:	0000892b 	.word	0x0000892b
    4eb8:	00008951 	.word	0x00008951
    4ebc:	20000a04 	.word	0x20000a04
    4ec0:	20000054 	.word	0x20000054
    4ec4:	20000230 	.word	0x20000230

00004ec8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4ec8:	b570      	push	{r4, r5, r6, lr}
    4eca:	f04f 0320 	mov.w	r3, #32
    4ece:	f3ef 8611 	mrs	r6, BASEPRI
    4ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ed6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4eda:	4816      	ldr	r0, [pc, #88]	; (4f34 <sys_clock_tick_get+0x6c>)
    4edc:	f7fe fbfc 	bl	36d8 <z_spin_lock_valid>
    4ee0:	b940      	cbnz	r0, 4ef4 <sys_clock_tick_get+0x2c>
    4ee2:	4915      	ldr	r1, [pc, #84]	; (4f38 <sys_clock_tick_get+0x70>)
    4ee4:	4815      	ldr	r0, [pc, #84]	; (4f3c <sys_clock_tick_get+0x74>)
    4ee6:	2281      	movs	r2, #129	; 0x81
    4ee8:	f002 fe0f 	bl	7b0a <printk>
    4eec:	2181      	movs	r1, #129	; 0x81
    4eee:	4812      	ldr	r0, [pc, #72]	; (4f38 <sys_clock_tick_get+0x70>)
    4ef0:	f002 fe91 	bl	7c16 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ef4:	480f      	ldr	r0, [pc, #60]	; (4f34 <sys_clock_tick_get+0x6c>)
    4ef6:	f7fe fc0b 	bl	3710 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    4efa:	f7fd fe71 	bl	2be0 <sys_clock_elapsed>
    4efe:	4b10      	ldr	r3, [pc, #64]	; (4f40 <sys_clock_tick_get+0x78>)
    4f00:	e9d3 4500 	ldrd	r4, r5, [r3]
    4f04:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f06:	480b      	ldr	r0, [pc, #44]	; (4f34 <sys_clock_tick_get+0x6c>)
    4f08:	f145 0500 	adc.w	r5, r5, #0
    4f0c:	f7fe fbf2 	bl	36f4 <z_spin_unlock_valid>
    4f10:	b940      	cbnz	r0, 4f24 <sys_clock_tick_get+0x5c>
    4f12:	4909      	ldr	r1, [pc, #36]	; (4f38 <sys_clock_tick_get+0x70>)
    4f14:	4809      	ldr	r0, [pc, #36]	; (4f3c <sys_clock_tick_get+0x74>)
    4f16:	22ac      	movs	r2, #172	; 0xac
    4f18:	f002 fdf7 	bl	7b0a <printk>
    4f1c:	21ac      	movs	r1, #172	; 0xac
    4f1e:	4806      	ldr	r0, [pc, #24]	; (4f38 <sys_clock_tick_get+0x70>)
    4f20:	f002 fe79 	bl	7c16 <assert_post_action>
	__asm__ volatile(
    4f24:	f386 8811 	msr	BASEPRI, r6
    4f28:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4f2c:	4620      	mov	r0, r4
    4f2e:	4629      	mov	r1, r5
    4f30:	bd70      	pop	{r4, r5, r6, pc}
    4f32:	bf00      	nop
    4f34:	20000a08 	.word	0x20000a08
    4f38:	0000892b 	.word	0x0000892b
    4f3c:	00008951 	.word	0x00008951
    4f40:	20000230 	.word	0x20000230

00004f44 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4f44:	4a02      	ldr	r2, [pc, #8]	; (4f50 <boot_banner+0xc>)
    4f46:	4903      	ldr	r1, [pc, #12]	; (4f54 <boot_banner+0x10>)
    4f48:	4803      	ldr	r0, [pc, #12]	; (4f58 <boot_banner+0x14>)
    4f4a:	f002 bdde 	b.w	7b0a <printk>
    4f4e:	bf00      	nop
    4f50:	00008974 	.word	0x00008974
    4f54:	00009776 	.word	0x00009776
    4f58:	00009785 	.word	0x00009785

00004f5c <nrf_cc3xx_platform_init>:
    4f5c:	b510      	push	{r4, lr}
    4f5e:	4c0c      	ldr	r4, [pc, #48]	; (4f90 <nrf_cc3xx_platform_init+0x34>)
    4f60:	6823      	ldr	r3, [r4, #0]
    4f62:	b113      	cbz	r3, 4f6a <nrf_cc3xx_platform_init+0xe>
    4f64:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <nrf_cc3xx_platform_init+0x38>)
    4f66:	681b      	ldr	r3, [r3, #0]
    4f68:	b92b      	cbnz	r3, 4f76 <nrf_cc3xx_platform_init+0x1a>
    4f6a:	f000 fe73 	bl	5c54 <CC_LibInit>
    4f6e:	b930      	cbnz	r0, 4f7e <nrf_cc3xx_platform_init+0x22>
    4f70:	2201      	movs	r2, #1
    4f72:	4b08      	ldr	r3, [pc, #32]	; (4f94 <nrf_cc3xx_platform_init+0x38>)
    4f74:	601a      	str	r2, [r3, #0]
    4f76:	2301      	movs	r3, #1
    4f78:	2000      	movs	r0, #0
    4f7a:	6023      	str	r3, [r4, #0]
    4f7c:	bd10      	pop	{r4, pc}
    4f7e:	3801      	subs	r0, #1
    4f80:	2806      	cmp	r0, #6
    4f82:	d901      	bls.n	4f88 <nrf_cc3xx_platform_init+0x2c>
    4f84:	4804      	ldr	r0, [pc, #16]	; (4f98 <nrf_cc3xx_platform_init+0x3c>)
    4f86:	bd10      	pop	{r4, pc}
    4f88:	4b04      	ldr	r3, [pc, #16]	; (4f9c <nrf_cc3xx_platform_init+0x40>)
    4f8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4f8e:	bd10      	pop	{r4, pc}
    4f90:	20000a0c 	.word	0x20000a0c
    4f94:	20000a10 	.word	0x20000a10
    4f98:	ffff8ffe 	.word	0xffff8ffe
    4f9c:	00008770 	.word	0x00008770

00004fa0 <nrf_cc3xx_platform_abort>:
    4fa0:	f3bf 8f4f 	dsb	sy
    4fa4:	4905      	ldr	r1, [pc, #20]	; (4fbc <nrf_cc3xx_platform_abort+0x1c>)
    4fa6:	4b06      	ldr	r3, [pc, #24]	; (4fc0 <nrf_cc3xx_platform_abort+0x20>)
    4fa8:	68ca      	ldr	r2, [r1, #12]
    4faa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4fae:	4313      	orrs	r3, r2
    4fb0:	60cb      	str	r3, [r1, #12]
    4fb2:	f3bf 8f4f 	dsb	sy
    4fb6:	bf00      	nop
    4fb8:	e7fd      	b.n	4fb6 <nrf_cc3xx_platform_abort+0x16>
    4fba:	bf00      	nop
    4fbc:	e000ed00 	.word	0xe000ed00
    4fc0:	05fa0004 	.word	0x05fa0004

00004fc4 <CC_PalAbort>:
    4fc4:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4fc8:	2100      	movs	r1, #0
    4fca:	b430      	push	{r4, r5}
    4fcc:	4a06      	ldr	r2, [pc, #24]	; (4fe8 <CC_PalAbort+0x24>)
    4fce:	4d07      	ldr	r5, [pc, #28]	; (4fec <CC_PalAbort+0x28>)
    4fd0:	4c07      	ldr	r4, [pc, #28]	; (4ff0 <CC_PalAbort+0x2c>)
    4fd2:	602b      	str	r3, [r5, #0]
    4fd4:	6013      	str	r3, [r2, #0]
    4fd6:	6023      	str	r3, [r4, #0]
    4fd8:	4a06      	ldr	r2, [pc, #24]	; (4ff4 <CC_PalAbort+0x30>)
    4fda:	4c07      	ldr	r4, [pc, #28]	; (4ff8 <CC_PalAbort+0x34>)
    4fdc:	60eb      	str	r3, [r5, #12]
    4fde:	6863      	ldr	r3, [r4, #4]
    4fe0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4fe4:	bc30      	pop	{r4, r5}
    4fe6:	4718      	bx	r3
    4fe8:	50841404 	.word	0x50841404
    4fec:	50841400 	.word	0x50841400
    4ff0:	50841408 	.word	0x50841408
    4ff4:	50840000 	.word	0x50840000
    4ff8:	2000005c 	.word	0x2000005c

00004ffc <nrf_cc3xx_platform_set_abort>:
    4ffc:	4b02      	ldr	r3, [pc, #8]	; (5008 <nrf_cc3xx_platform_set_abort+0xc>)
    4ffe:	e9d0 1200 	ldrd	r1, r2, [r0]
    5002:	e9c3 1200 	strd	r1, r2, [r3]
    5006:	4770      	bx	lr
    5008:	2000005c 	.word	0x2000005c

0000500c <nrf_cc3xx_platform_ctr_drbg_init>:
    500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5010:	4c15      	ldr	r4, [pc, #84]	; (5068 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    5012:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5070 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    5016:	2800      	cmp	r0, #0
    5018:	bf18      	it	ne
    501a:	4604      	movne	r4, r0
    501c:	6820      	ldr	r0, [r4, #0]
    501e:	b083      	sub	sp, #12
    5020:	4540      	cmp	r0, r8
    5022:	d01d      	beq.n	5060 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    5024:	4616      	mov	r6, r2
    5026:	460d      	mov	r5, r1
    5028:	4620      	mov	r0, r4
    502a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    502e:	f104 0904 	add.w	r9, r4, #4
    5032:	f000 f8d3 	bl	51dc <mbedtls_platform_zeroize>
    5036:	f504 778c 	add.w	r7, r4, #280	; 0x118
    503a:	4648      	mov	r0, r9
    503c:	f000 fcf2 	bl	5a24 <cc_mbedtls_entropy_init>
    5040:	4638      	mov	r0, r7
    5042:	f000 fb1d 	bl	5680 <cc_mbedtls_ctr_drbg_init>
    5046:	464a      	mov	r2, r9
    5048:	4638      	mov	r0, r7
    504a:	462b      	mov	r3, r5
    504c:	4907      	ldr	r1, [pc, #28]	; (506c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    504e:	9600      	str	r6, [sp, #0]
    5050:	f000 fb2c 	bl	56ac <cc_mbedtls_ctr_drbg_seed>
    5054:	b908      	cbnz	r0, 505a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    5056:	f8c4 8000 	str.w	r8, [r4]
    505a:	b003      	add	sp, #12
    505c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5060:	2000      	movs	r0, #0
    5062:	b003      	add	sp, #12
    5064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5068:	200013e8 	.word	0x200013e8
    506c:	00005aa5 	.word	0x00005aa5
    5070:	5ac9bca5 	.word	0x5ac9bca5

00005074 <nrf_cc3xx_platform_ctr_drbg_get>:
    5074:	b5f0      	push	{r4, r5, r6, r7, lr}
    5076:	4c0d      	ldr	r4, [pc, #52]	; (50ac <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    5078:	4e0d      	ldr	r6, [pc, #52]	; (50b0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    507a:	2800      	cmp	r0, #0
    507c:	bf08      	it	eq
    507e:	4620      	moveq	r0, r4
    5080:	6807      	ldr	r7, [r0, #0]
    5082:	b083      	sub	sp, #12
    5084:	42b7      	cmp	r7, r6
    5086:	d10e      	bne.n	50a6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    5088:	2600      	movs	r6, #0
    508a:	461d      	mov	r5, r3
    508c:	f500 708c 	add.w	r0, r0, #280	; 0x118
    5090:	4633      	mov	r3, r6
    5092:	9600      	str	r6, [sp, #0]
    5094:	4614      	mov	r4, r2
    5096:	f000 fb57 	bl	5748 <cc_mbedtls_ctr_drbg_random_with_add>
    509a:	2800      	cmp	r0, #0
    509c:	bf18      	it	ne
    509e:	4634      	movne	r4, r6
    50a0:	602c      	str	r4, [r5, #0]
    50a2:	b003      	add	sp, #12
    50a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50a6:	4803      	ldr	r0, [pc, #12]	; (50b4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    50a8:	e7fb      	b.n	50a2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    50aa:	bf00      	nop
    50ac:	200013e8 	.word	0x200013e8
    50b0:	5ac9bca5 	.word	0x5ac9bca5
    50b4:	ffff8fe8 	.word	0xffff8fe8

000050b8 <mutex_free>:
    50b8:	b510      	push	{r4, lr}
    50ba:	4604      	mov	r4, r0
    50bc:	b130      	cbz	r0, 50cc <mutex_free+0x14>
    50be:	6863      	ldr	r3, [r4, #4]
    50c0:	06db      	lsls	r3, r3, #27
    50c2:	d502      	bpl.n	50ca <mutex_free+0x12>
    50c4:	2300      	movs	r3, #0
    50c6:	6023      	str	r3, [r4, #0]
    50c8:	6063      	str	r3, [r4, #4]
    50ca:	bd10      	pop	{r4, pc}
    50cc:	4b02      	ldr	r3, [pc, #8]	; (50d8 <mutex_free+0x20>)
    50ce:	4803      	ldr	r0, [pc, #12]	; (50dc <mutex_free+0x24>)
    50d0:	685b      	ldr	r3, [r3, #4]
    50d2:	4798      	blx	r3
    50d4:	e7f3      	b.n	50be <mutex_free+0x6>
    50d6:	bf00      	nop
    50d8:	2000005c 	.word	0x2000005c
    50dc:	0000878c 	.word	0x0000878c

000050e0 <mutex_unlock>:
    50e0:	b168      	cbz	r0, 50fe <mutex_unlock+0x1e>
    50e2:	6843      	ldr	r3, [r0, #4]
    50e4:	b13b      	cbz	r3, 50f6 <mutex_unlock+0x16>
    50e6:	06db      	lsls	r3, r3, #27
    50e8:	d507      	bpl.n	50fa <mutex_unlock+0x1a>
    50ea:	f3bf 8f5f 	dmb	sy
    50ee:	2300      	movs	r3, #0
    50f0:	6003      	str	r3, [r0, #0]
    50f2:	4618      	mov	r0, r3
    50f4:	4770      	bx	lr
    50f6:	4803      	ldr	r0, [pc, #12]	; (5104 <mutex_unlock+0x24>)
    50f8:	4770      	bx	lr
    50fa:	4803      	ldr	r0, [pc, #12]	; (5108 <mutex_unlock+0x28>)
    50fc:	4770      	bx	lr
    50fe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5102:	4770      	bx	lr
    5104:	ffff8fea 	.word	0xffff8fea
    5108:	ffff8fe9 	.word	0xffff8fe9

0000510c <mutex_init>:
    510c:	b510      	push	{r4, lr}
    510e:	4604      	mov	r4, r0
    5110:	b120      	cbz	r0, 511c <mutex_init+0x10>
    5112:	2200      	movs	r2, #0
    5114:	2311      	movs	r3, #17
    5116:	6022      	str	r2, [r4, #0]
    5118:	6063      	str	r3, [r4, #4]
    511a:	bd10      	pop	{r4, pc}
    511c:	4801      	ldr	r0, [pc, #4]	; (5124 <mutex_init+0x18>)
    511e:	f7ff ff51 	bl	4fc4 <CC_PalAbort>
    5122:	e7f6      	b.n	5112 <mutex_init+0x6>
    5124:	000087b4 	.word	0x000087b4

00005128 <mutex_lock>:
    5128:	b1a0      	cbz	r0, 5154 <mutex_lock+0x2c>
    512a:	6843      	ldr	r3, [r0, #4]
    512c:	b183      	cbz	r3, 5150 <mutex_lock+0x28>
    512e:	06db      	lsls	r3, r3, #27
    5130:	d50c      	bpl.n	514c <mutex_lock+0x24>
    5132:	2201      	movs	r2, #1
    5134:	e8d0 3fef 	ldaex	r3, [r0]
    5138:	e8c0 2fe1 	stlex	r1, r2, [r0]
    513c:	2900      	cmp	r1, #0
    513e:	d1f9      	bne.n	5134 <mutex_lock+0xc>
    5140:	2b01      	cmp	r3, #1
    5142:	d0f7      	beq.n	5134 <mutex_lock+0xc>
    5144:	f3bf 8f5f 	dmb	sy
    5148:	2000      	movs	r0, #0
    514a:	4770      	bx	lr
    514c:	4803      	ldr	r0, [pc, #12]	; (515c <mutex_lock+0x34>)
    514e:	4770      	bx	lr
    5150:	4803      	ldr	r0, [pc, #12]	; (5160 <mutex_lock+0x38>)
    5152:	4770      	bx	lr
    5154:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5158:	4770      	bx	lr
    515a:	bf00      	nop
    515c:	ffff8fe9 	.word	0xffff8fe9
    5160:	ffff8fea 	.word	0xffff8fea

00005164 <nrf_cc3xx_platform_set_mutexes>:
    5164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5168:	4c14      	ldr	r4, [pc, #80]	; (51bc <nrf_cc3xx_platform_set_mutexes+0x58>)
    516a:	6802      	ldr	r2, [r0, #0]
    516c:	68c3      	ldr	r3, [r0, #12]
    516e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    5172:	e9c4 6302 	strd	r6, r3, [r4, #8]
    5176:	e9c4 2500 	strd	r2, r5, [r4]
    517a:	4b11      	ldr	r3, [pc, #68]	; (51c0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    517c:	680e      	ldr	r6, [r1, #0]
    517e:	6848      	ldr	r0, [r1, #4]
    5180:	4d10      	ldr	r5, [pc, #64]	; (51c4 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5182:	e9c3 6000 	strd	r6, r0, [r3]
    5186:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    518a:	6908      	ldr	r0, [r1, #16]
    518c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5190:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5194:	6118      	str	r0, [r3, #16]
    5196:	06cb      	lsls	r3, r1, #27
    5198:	d50d      	bpl.n	51b6 <nrf_cc3xx_platform_set_mutexes+0x52>
    519a:	2300      	movs	r3, #0
    519c:	f505 7088 	add.w	r0, r5, #272	; 0x110
    51a0:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    51a4:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    51a8:	4790      	blx	r2
    51aa:	6823      	ldr	r3, [r4, #0]
    51ac:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    51b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    51b4:	4718      	bx	r3
    51b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51ba:	bf00      	nop
    51bc:	2000006c 	.word	0x2000006c
    51c0:	2000007c 	.word	0x2000007c
    51c4:	200013e8 	.word	0x200013e8

000051c8 <mbedtls_zeroize_internal>:
    51c8:	b138      	cbz	r0, 51da <mbedtls_zeroize_internal+0x12>
    51ca:	b131      	cbz	r1, 51da <mbedtls_zeroize_internal+0x12>
    51cc:	2200      	movs	r2, #0
    51ce:	4401      	add	r1, r0
    51d0:	4603      	mov	r3, r0
    51d2:	3001      	adds	r0, #1
    51d4:	4281      	cmp	r1, r0
    51d6:	701a      	strb	r2, [r3, #0]
    51d8:	d1fa      	bne.n	51d0 <mbedtls_zeroize_internal+0x8>
    51da:	4770      	bx	lr

000051dc <mbedtls_platform_zeroize>:
    51dc:	b138      	cbz	r0, 51ee <mbedtls_platform_zeroize+0x12>
    51de:	b131      	cbz	r1, 51ee <mbedtls_platform_zeroize+0x12>
    51e0:	2200      	movs	r2, #0
    51e2:	4401      	add	r1, r0
    51e4:	4603      	mov	r3, r0
    51e6:	3001      	adds	r0, #1
    51e8:	4288      	cmp	r0, r1
    51ea:	701a      	strb	r2, [r3, #0]
    51ec:	d1fa      	bne.n	51e4 <mbedtls_platform_zeroize+0x8>
    51ee:	4770      	bx	lr

000051f0 <block_cipher_df>:
    51f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51f4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    51f8:	b0af      	sub	sp, #188	; 0xbc
    51fa:	f200 812c 	bhi.w	5456 <block_cipher_df+0x266>
    51fe:	f8df 926c 	ldr.w	r9, [pc, #620]	; 546c <block_cipher_df+0x27c>
    5202:	4690      	mov	r8, r2
    5204:	460c      	mov	r4, r1
    5206:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    520a:	2100      	movs	r1, #0
    520c:	4682      	mov	sl, r0
    520e:	4648      	mov	r0, r9
    5210:	f002 fdbe 	bl	7d90 <memset>
    5214:	a811      	add	r0, sp, #68	; 0x44
    5216:	f001 f9e9 	bl	65ec <cc_mbedtls_aes_init>
    521a:	2200      	movs	r2, #0
    521c:	2320      	movs	r3, #32
    521e:	4621      	mov	r1, r4
    5220:	f8a9 2010 	strh.w	r2, [r9, #16]
    5224:	fa98 f498 	rev16.w	r4, r8
    5228:	4642      	mov	r2, r8
    522a:	f109 0018 	add.w	r0, r9, #24
    522e:	f8a9 4012 	strh.w	r4, [r9, #18]
    5232:	f889 3017 	strb.w	r3, [r9, #23]
    5236:	f002 fda0 	bl	7d7a <memcpy>
    523a:	2280      	movs	r2, #128	; 0x80
    523c:	4b87      	ldr	r3, [pc, #540]	; (545c <block_cipher_df+0x26c>)
    523e:	4988      	ldr	r1, [pc, #544]	; (5460 <block_cipher_df+0x270>)
    5240:	4c88      	ldr	r4, [pc, #544]	; (5464 <block_cipher_df+0x274>)
    5242:	eb09 0008 	add.w	r0, r9, r8
    5246:	e9cd 4102 	strd	r4, r1, [sp, #8]
    524a:	7602      	strb	r2, [r0, #24]
    524c:	9301      	str	r3, [sp, #4]
    524e:	a811      	add	r0, sp, #68	; 0x44
    5250:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    5254:	a901      	add	r1, sp, #4
    5256:	9304      	str	r3, [sp, #16]
    5258:	f001 f9de 	bl	6618 <cc_mbedtls_aes_setkey_enc>
    525c:	4607      	mov	r7, r0
    525e:	2800      	cmp	r0, #0
    5260:	f040 80d8 	bne.w	5414 <block_cipher_df+0x224>
    5264:	f108 0819 	add.w	r8, r8, #25
    5268:	ae05      	add	r6, sp, #20
    526a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    526e:	2210      	movs	r2, #16
    5270:	2100      	movs	r1, #0
    5272:	4630      	mov	r0, r6
    5274:	f002 fd8c 	bl	7d90 <memset>
    5278:	4645      	mov	r5, r8
    527a:	4c7b      	ldr	r4, [pc, #492]	; (5468 <block_cipher_df+0x278>)
    527c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    5280:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    5284:	f89d c015 	ldrb.w	ip, [sp, #21]
    5288:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    528c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    5290:	4053      	eors	r3, r2
    5292:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    5296:	ea8c 0c01 	eor.w	ip, ip, r1
    529a:	4050      	eors	r0, r2
    529c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    52a0:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    52a4:	f89d e018 	ldrb.w	lr, [sp, #24]
    52a8:	4051      	eors	r1, r2
    52aa:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    52ae:	f88d 3014 	strb.w	r3, [sp, #20]
    52b2:	ea8e 0202 	eor.w	r2, lr, r2
    52b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    52ba:	f89d e019 	ldrb.w	lr, [sp, #25]
    52be:	f88d c015 	strb.w	ip, [sp, #21]
    52c2:	ea8e 0303 	eor.w	r3, lr, r3
    52c6:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    52ca:	f89d e01a 	ldrb.w	lr, [sp, #26]
    52ce:	f88d 0016 	strb.w	r0, [sp, #22]
    52d2:	ea8e 0c0c 	eor.w	ip, lr, ip
    52d6:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    52da:	f89d e01b 	ldrb.w	lr, [sp, #27]
    52de:	f88d 1017 	strb.w	r1, [sp, #23]
    52e2:	ea8e 0000 	eor.w	r0, lr, r0
    52e6:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    52ea:	f89d e01c 	ldrb.w	lr, [sp, #28]
    52ee:	f88d 2018 	strb.w	r2, [sp, #24]
    52f2:	ea8e 0101 	eor.w	r1, lr, r1
    52f6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    52fa:	f89d e01d 	ldrb.w	lr, [sp, #29]
    52fe:	f88d 3019 	strb.w	r3, [sp, #25]
    5302:	ea8e 0202 	eor.w	r2, lr, r2
    5306:	f89d 301e 	ldrb.w	r3, [sp, #30]
    530a:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    530e:	f88d c01a 	strb.w	ip, [sp, #26]
    5312:	ea83 030e 	eor.w	r3, r3, lr
    5316:	f88d 001b 	strb.w	r0, [sp, #27]
    531a:	f88d 101c 	strb.w	r1, [sp, #28]
    531e:	f88d 201d 	strb.w	r2, [sp, #29]
    5322:	f88d 301e 	strb.w	r3, [sp, #30]
    5326:	f89d 101f 	ldrb.w	r1, [sp, #31]
    532a:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    532e:	f89d c020 	ldrb.w	ip, [sp, #32]
    5332:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    5336:	404b      	eors	r3, r1
    5338:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    533c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    5340:	ea8c 0202 	eor.w	r2, ip, r2
    5344:	4041      	eors	r1, r0
    5346:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    534a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    534e:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    5352:	ea8c 0000 	eor.w	r0, ip, r0
    5356:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    535a:	f88d 301f 	strb.w	r3, [sp, #31]
    535e:	ea8e 0c0c 	eor.w	ip, lr, ip
    5362:	f88d 2020 	strb.w	r2, [sp, #32]
    5366:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    536a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    536e:	4633      	mov	r3, r6
    5370:	4632      	mov	r2, r6
    5372:	2101      	movs	r1, #1
    5374:	a811      	add	r0, sp, #68	; 0x44
    5376:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    537a:	f001 f967 	bl	664c <cc_mbedtls_aes_crypt_ecb>
    537e:	2d10      	cmp	r5, #16
    5380:	bf94      	ite	ls
    5382:	1b6d      	subls	r5, r5, r5
    5384:	3d10      	subhi	r5, #16
    5386:	2800      	cmp	r0, #0
    5388:	d163      	bne.n	5452 <block_cipher_df+0x262>
    538a:	3410      	adds	r4, #16
    538c:	2d00      	cmp	r5, #0
    538e:	f47f af75 	bne.w	527c <block_cipher_df+0x8c>
    5392:	eb0b 0007 	add.w	r0, fp, r7
    5396:	2210      	movs	r2, #16
    5398:	4631      	mov	r1, r6
    539a:	f002 fcee 	bl	7d7a <memcpy>
    539e:	f899 3003 	ldrb.w	r3, [r9, #3]
    53a2:	3710      	adds	r7, #16
    53a4:	3301      	adds	r3, #1
    53a6:	2f20      	cmp	r7, #32
    53a8:	f889 3003 	strb.w	r3, [r9, #3]
    53ac:	f47f af5f 	bne.w	526e <block_cipher_df+0x7e>
    53b0:	2280      	movs	r2, #128	; 0x80
    53b2:	4659      	mov	r1, fp
    53b4:	a811      	add	r0, sp, #68	; 0x44
    53b6:	f001 f92f 	bl	6618 <cc_mbedtls_aes_setkey_enc>
    53ba:	4607      	mov	r7, r0
    53bc:	bb68      	cbnz	r0, 541a <block_cipher_df+0x22a>
    53be:	4654      	mov	r4, sl
    53c0:	f10a 0520 	add.w	r5, sl, #32
    53c4:	ab0d      	add	r3, sp, #52	; 0x34
    53c6:	461a      	mov	r2, r3
    53c8:	2101      	movs	r1, #1
    53ca:	a811      	add	r0, sp, #68	; 0x44
    53cc:	f001 f93e 	bl	664c <cc_mbedtls_aes_crypt_ecb>
    53d0:	4607      	mov	r7, r0
    53d2:	bb10      	cbnz	r0, 541a <block_cipher_df+0x22a>
    53d4:	2210      	movs	r2, #16
    53d6:	4620      	mov	r0, r4
    53d8:	a90d      	add	r1, sp, #52	; 0x34
    53da:	4414      	add	r4, r2
    53dc:	f002 fccd 	bl	7d7a <memcpy>
    53e0:	42ac      	cmp	r4, r5
    53e2:	d1ef      	bne.n	53c4 <block_cipher_df+0x1d4>
    53e4:	a811      	add	r0, sp, #68	; 0x44
    53e6:	f001 f911 	bl	660c <cc_mbedtls_aes_free>
    53ea:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    53ee:	481f      	ldr	r0, [pc, #124]	; (546c <block_cipher_df+0x27c>)
    53f0:	f7ff fef4 	bl	51dc <mbedtls_platform_zeroize>
    53f4:	4658      	mov	r0, fp
    53f6:	2120      	movs	r1, #32
    53f8:	f7ff fef0 	bl	51dc <mbedtls_platform_zeroize>
    53fc:	a801      	add	r0, sp, #4
    53fe:	2110      	movs	r1, #16
    5400:	f7ff feec 	bl	51dc <mbedtls_platform_zeroize>
    5404:	4630      	mov	r0, r6
    5406:	2110      	movs	r1, #16
    5408:	f7ff fee8 	bl	51dc <mbedtls_platform_zeroize>
    540c:	4638      	mov	r0, r7
    540e:	b02f      	add	sp, #188	; 0xbc
    5410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5414:	ae05      	add	r6, sp, #20
    5416:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    541a:	a811      	add	r0, sp, #68	; 0x44
    541c:	f001 f8f6 	bl	660c <cc_mbedtls_aes_free>
    5420:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5424:	4811      	ldr	r0, [pc, #68]	; (546c <block_cipher_df+0x27c>)
    5426:	f7ff fed9 	bl	51dc <mbedtls_platform_zeroize>
    542a:	4658      	mov	r0, fp
    542c:	2120      	movs	r1, #32
    542e:	f7ff fed5 	bl	51dc <mbedtls_platform_zeroize>
    5432:	2110      	movs	r1, #16
    5434:	a801      	add	r0, sp, #4
    5436:	f7ff fed1 	bl	51dc <mbedtls_platform_zeroize>
    543a:	4630      	mov	r0, r6
    543c:	2110      	movs	r1, #16
    543e:	f7ff fecd 	bl	51dc <mbedtls_platform_zeroize>
    5442:	4650      	mov	r0, sl
    5444:	2120      	movs	r1, #32
    5446:	f7ff fec9 	bl	51dc <mbedtls_platform_zeroize>
    544a:	4638      	mov	r0, r7
    544c:	b02f      	add	sp, #188	; 0xbc
    544e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5452:	4607      	mov	r7, r0
    5454:	e7e1      	b.n	541a <block_cipher_df+0x22a>
    5456:	f06f 0737 	mvn.w	r7, #55	; 0x37
    545a:	e7f6      	b.n	544a <block_cipher_df+0x25a>
    545c:	03020100 	.word	0x03020100
    5460:	0b0a0908 	.word	0x0b0a0908
    5464:	07060504 	.word	0x07060504
    5468:	20000a34 	.word	0x20000a34
    546c:	20000a24 	.word	0x20000a24

00005470 <ctr_drbg_update_internal>:
    5470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5474:	2220      	movs	r2, #32
    5476:	4604      	mov	r4, r0
    5478:	b088      	sub	sp, #32
    547a:	460d      	mov	r5, r1
    547c:	4668      	mov	r0, sp
    547e:	2100      	movs	r1, #0
    5480:	18a6      	adds	r6, r4, r2
    5482:	466f      	mov	r7, sp
    5484:	f002 fc84 	bl	7d90 <memset>
    5488:	7be2      	ldrb	r2, [r4, #15]
    548a:	3201      	adds	r2, #1
    548c:	b2d2      	uxtb	r2, r2
    548e:	73e2      	strb	r2, [r4, #15]
    5490:	2a00      	cmp	r2, #0
    5492:	d14d      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    5494:	7ba2      	ldrb	r2, [r4, #14]
    5496:	3201      	adds	r2, #1
    5498:	b2d2      	uxtb	r2, r2
    549a:	73a2      	strb	r2, [r4, #14]
    549c:	2a00      	cmp	r2, #0
    549e:	d147      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    54a0:	7b63      	ldrb	r3, [r4, #13]
    54a2:	3301      	adds	r3, #1
    54a4:	b2db      	uxtb	r3, r3
    54a6:	7363      	strb	r3, [r4, #13]
    54a8:	2b00      	cmp	r3, #0
    54aa:	d141      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    54ac:	7b23      	ldrb	r3, [r4, #12]
    54ae:	3301      	adds	r3, #1
    54b0:	b2db      	uxtb	r3, r3
    54b2:	7323      	strb	r3, [r4, #12]
    54b4:	2b00      	cmp	r3, #0
    54b6:	d13b      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    54b8:	7ae3      	ldrb	r3, [r4, #11]
    54ba:	3301      	adds	r3, #1
    54bc:	b2db      	uxtb	r3, r3
    54be:	72e3      	strb	r3, [r4, #11]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d135      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    54c4:	7aa3      	ldrb	r3, [r4, #10]
    54c6:	3301      	adds	r3, #1
    54c8:	b2db      	uxtb	r3, r3
    54ca:	72a3      	strb	r3, [r4, #10]
    54cc:	2b00      	cmp	r3, #0
    54ce:	d12f      	bne.n	5530 <ctr_drbg_update_internal+0xc0>
    54d0:	7a63      	ldrb	r3, [r4, #9]
    54d2:	3301      	adds	r3, #1
    54d4:	b2db      	uxtb	r3, r3
    54d6:	7263      	strb	r3, [r4, #9]
    54d8:	bb53      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    54da:	7a23      	ldrb	r3, [r4, #8]
    54dc:	3301      	adds	r3, #1
    54de:	b2db      	uxtb	r3, r3
    54e0:	7223      	strb	r3, [r4, #8]
    54e2:	bb2b      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    54e4:	79e3      	ldrb	r3, [r4, #7]
    54e6:	3301      	adds	r3, #1
    54e8:	b2db      	uxtb	r3, r3
    54ea:	71e3      	strb	r3, [r4, #7]
    54ec:	bb03      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    54ee:	79a3      	ldrb	r3, [r4, #6]
    54f0:	3301      	adds	r3, #1
    54f2:	b2db      	uxtb	r3, r3
    54f4:	71a3      	strb	r3, [r4, #6]
    54f6:	b9db      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    54f8:	7963      	ldrb	r3, [r4, #5]
    54fa:	3301      	adds	r3, #1
    54fc:	b2db      	uxtb	r3, r3
    54fe:	7163      	strb	r3, [r4, #5]
    5500:	b9b3      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    5502:	7923      	ldrb	r3, [r4, #4]
    5504:	3301      	adds	r3, #1
    5506:	b2db      	uxtb	r3, r3
    5508:	7123      	strb	r3, [r4, #4]
    550a:	b98b      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    550c:	78e3      	ldrb	r3, [r4, #3]
    550e:	3301      	adds	r3, #1
    5510:	b2db      	uxtb	r3, r3
    5512:	70e3      	strb	r3, [r4, #3]
    5514:	b963      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    5516:	78a3      	ldrb	r3, [r4, #2]
    5518:	3301      	adds	r3, #1
    551a:	b2db      	uxtb	r3, r3
    551c:	70a3      	strb	r3, [r4, #2]
    551e:	b93b      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    5520:	7863      	ldrb	r3, [r4, #1]
    5522:	3301      	adds	r3, #1
    5524:	b2db      	uxtb	r3, r3
    5526:	7063      	strb	r3, [r4, #1]
    5528:	b913      	cbnz	r3, 5530 <ctr_drbg_update_internal+0xc0>
    552a:	7823      	ldrb	r3, [r4, #0]
    552c:	3301      	adds	r3, #1
    552e:	7023      	strb	r3, [r4, #0]
    5530:	463b      	mov	r3, r7
    5532:	4622      	mov	r2, r4
    5534:	2101      	movs	r1, #1
    5536:	4630      	mov	r0, r6
    5538:	f001 f888 	bl	664c <cc_mbedtls_aes_crypt_ecb>
    553c:	4680      	mov	r8, r0
    553e:	2800      	cmp	r0, #0
    5540:	d12a      	bne.n	5598 <ctr_drbg_update_internal+0x128>
    5542:	3710      	adds	r7, #16
    5544:	ab08      	add	r3, sp, #32
    5546:	429f      	cmp	r7, r3
    5548:	d19e      	bne.n	5488 <ctr_drbg_update_internal+0x18>
    554a:	9900      	ldr	r1, [sp, #0]
    554c:	682b      	ldr	r3, [r5, #0]
    554e:	686a      	ldr	r2, [r5, #4]
    5550:	404b      	eors	r3, r1
    5552:	9901      	ldr	r1, [sp, #4]
    5554:	4630      	mov	r0, r6
    5556:	404a      	eors	r2, r1
    5558:	68ae      	ldr	r6, [r5, #8]
    555a:	9902      	ldr	r1, [sp, #8]
    555c:	9300      	str	r3, [sp, #0]
    555e:	4071      	eors	r1, r6
    5560:	68eb      	ldr	r3, [r5, #12]
    5562:	9e03      	ldr	r6, [sp, #12]
    5564:	9201      	str	r2, [sp, #4]
    5566:	4073      	eors	r3, r6
    5568:	692a      	ldr	r2, [r5, #16]
    556a:	9e04      	ldr	r6, [sp, #16]
    556c:	9102      	str	r1, [sp, #8]
    556e:	4056      	eors	r6, r2
    5570:	9905      	ldr	r1, [sp, #20]
    5572:	696a      	ldr	r2, [r5, #20]
    5574:	9303      	str	r3, [sp, #12]
    5576:	4051      	eors	r1, r2
    5578:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    557c:	9d06      	ldr	r5, [sp, #24]
    557e:	9105      	str	r1, [sp, #20]
    5580:	4055      	eors	r5, r2
    5582:	9a07      	ldr	r2, [sp, #28]
    5584:	4669      	mov	r1, sp
    5586:	4053      	eors	r3, r2
    5588:	2280      	movs	r2, #128	; 0x80
    558a:	e9cd 5306 	strd	r5, r3, [sp, #24]
    558e:	9604      	str	r6, [sp, #16]
    5590:	f001 f842 	bl	6618 <cc_mbedtls_aes_setkey_enc>
    5594:	4680      	mov	r8, r0
    5596:	b138      	cbz	r0, 55a8 <ctr_drbg_update_internal+0x138>
    5598:	4668      	mov	r0, sp
    559a:	2120      	movs	r1, #32
    559c:	f7ff fe1e 	bl	51dc <mbedtls_platform_zeroize>
    55a0:	4640      	mov	r0, r8
    55a2:	b008      	add	sp, #32
    55a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55a8:	2210      	movs	r2, #16
    55aa:	4620      	mov	r0, r4
    55ac:	eb0d 0102 	add.w	r1, sp, r2
    55b0:	f002 fbe3 	bl	7d7a <memcpy>
    55b4:	e7f0      	b.n	5598 <ctr_drbg_update_internal+0x128>
    55b6:	bf00      	nop

000055b8 <mbedtls_ctr_drbg_reseed_internal>:
    55b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55bc:	4604      	mov	r4, r0
    55be:	6980      	ldr	r0, [r0, #24]
    55c0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    55c4:	d854      	bhi.n	5670 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    55c6:	461d      	mov	r5, r3
    55c8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    55cc:	42ab      	cmp	r3, r5
    55ce:	d34f      	bcc.n	5670 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    55d0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    55d4:	1a18      	subs	r0, r3, r0
    55d6:	4290      	cmp	r0, r2
    55d8:	4616      	mov	r6, r2
    55da:	d349      	bcc.n	5670 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    55dc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 567c <mbedtls_ctr_drbg_reseed_internal+0xc4>
    55e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
    55e4:	460f      	mov	r7, r1
    55e6:	4648      	mov	r0, r9
    55e8:	2100      	movs	r1, #0
    55ea:	f002 fbd1 	bl	7d90 <memset>
    55ee:	4649      	mov	r1, r9
    55f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    55f4:	69a2      	ldr	r2, [r4, #24]
    55f6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    55fa:	4798      	blx	r3
    55fc:	2800      	cmp	r0, #0
    55fe:	d13a      	bne.n	5676 <mbedtls_ctr_drbg_reseed_internal+0xbe>
    5600:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5604:	b14d      	cbz	r5, 561a <mbedtls_ctr_drbg_reseed_internal+0x62>
    5606:	462a      	mov	r2, r5
    5608:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    560c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5610:	eb09 0108 	add.w	r1, r9, r8
    5614:	4798      	blx	r3
    5616:	bb70      	cbnz	r0, 5676 <mbedtls_ctr_drbg_reseed_internal+0xbe>
    5618:	44a8      	add	r8, r5
    561a:	b107      	cbz	r7, 561e <mbedtls_ctr_drbg_reseed_internal+0x66>
    561c:	b9c6      	cbnz	r6, 5650 <mbedtls_ctr_drbg_reseed_internal+0x98>
    561e:	4917      	ldr	r1, [pc, #92]	; (567c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5620:	4642      	mov	r2, r8
    5622:	4608      	mov	r0, r1
    5624:	f7ff fde4 	bl	51f0 <block_cipher_df>
    5628:	4605      	mov	r5, r0
    562a:	b138      	cbz	r0, 563c <mbedtls_ctr_drbg_reseed_internal+0x84>
    562c:	f44f 71c0 	mov.w	r1, #384	; 0x180
    5630:	4812      	ldr	r0, [pc, #72]	; (567c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5632:	f7ff fdd3 	bl	51dc <mbedtls_platform_zeroize>
    5636:	4628      	mov	r0, r5
    5638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    563c:	4620      	mov	r0, r4
    563e:	490f      	ldr	r1, [pc, #60]	; (567c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5640:	f7ff ff16 	bl	5470 <ctr_drbg_update_internal>
    5644:	4605      	mov	r5, r0
    5646:	2800      	cmp	r0, #0
    5648:	d1f0      	bne.n	562c <mbedtls_ctr_drbg_reseed_internal+0x74>
    564a:	2301      	movs	r3, #1
    564c:	6123      	str	r3, [r4, #16]
    564e:	e7ed      	b.n	562c <mbedtls_ctr_drbg_reseed_internal+0x74>
    5650:	4639      	mov	r1, r7
    5652:	4632      	mov	r2, r6
    5654:	eb09 0008 	add.w	r0, r9, r8
    5658:	f002 fb8f 	bl	7d7a <memcpy>
    565c:	4907      	ldr	r1, [pc, #28]	; (567c <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    565e:	44b0      	add	r8, r6
    5660:	4642      	mov	r2, r8
    5662:	4608      	mov	r0, r1
    5664:	f7ff fdc4 	bl	51f0 <block_cipher_df>
    5668:	4605      	mov	r5, r0
    566a:	2800      	cmp	r0, #0
    566c:	d1de      	bne.n	562c <mbedtls_ctr_drbg_reseed_internal+0x74>
    566e:	e7e5      	b.n	563c <mbedtls_ctr_drbg_reseed_internal+0x84>
    5670:	f06f 0537 	mvn.w	r5, #55	; 0x37
    5674:	e7df      	b.n	5636 <mbedtls_ctr_drbg_reseed_internal+0x7e>
    5676:	f06f 0533 	mvn.w	r5, #51	; 0x33
    567a:	e7dc      	b.n	5636 <mbedtls_ctr_drbg_reseed_internal+0x7e>
    567c:	20000bc4 	.word	0x20000bc4

00005680 <cc_mbedtls_ctr_drbg_init>:
    5680:	b510      	push	{r4, lr}
    5682:	22a4      	movs	r2, #164	; 0xa4
    5684:	2100      	movs	r1, #0
    5686:	4604      	mov	r4, r0
    5688:	f002 fb82 	bl	7d90 <memset>
    568c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5690:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    5694:	4b04      	ldr	r3, [pc, #16]	; (56a8 <cc_mbedtls_ctr_drbg_init+0x28>)
    5696:	6121      	str	r1, [r4, #16]
    5698:	61e2      	str	r2, [r4, #28]
    569a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    569e:	681b      	ldr	r3, [r3, #0]
    56a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56a4:	4718      	bx	r3
    56a6:	bf00      	nop
    56a8:	200000c0 	.word	0x200000c0

000056ac <cc_mbedtls_ctr_drbg_seed>:
    56ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56b0:	4605      	mov	r5, r0
    56b2:	b085      	sub	sp, #20
    56b4:	460f      	mov	r7, r1
    56b6:	4616      	mov	r6, r2
    56b8:	4668      	mov	r0, sp
    56ba:	2210      	movs	r2, #16
    56bc:	2100      	movs	r1, #0
    56be:	4699      	mov	r9, r3
    56c0:	f002 fb66 	bl	7d90 <memset>
    56c4:	4b1e      	ldr	r3, [pc, #120]	; (5740 <cc_mbedtls_ctr_drbg_seed+0x94>)
    56c6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    56ca:	4640      	mov	r0, r8
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	4798      	blx	r3
    56d0:	b120      	cbz	r0, 56dc <cc_mbedtls_ctr_drbg_seed+0x30>
    56d2:	4604      	mov	r4, r0
    56d4:	4620      	mov	r0, r4
    56d6:	b005      	add	sp, #20
    56d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    56dc:	f105 0420 	add.w	r4, r5, #32
    56e0:	4620      	mov	r0, r4
    56e2:	f000 ff83 	bl	65ec <cc_mbedtls_aes_init>
    56e6:	69aa      	ldr	r2, [r5, #24]
    56e8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    56ec:	b9ea      	cbnz	r2, 572a <cc_mbedtls_ctr_drbg_seed+0x7e>
    56ee:	2220      	movs	r2, #32
    56f0:	692e      	ldr	r6, [r5, #16]
    56f2:	61aa      	str	r2, [r5, #24]
    56f4:	2e00      	cmp	r6, #0
    56f6:	db20      	blt.n	573a <cc_mbedtls_ctr_drbg_seed+0x8e>
    56f8:	4620      	mov	r0, r4
    56fa:	4669      	mov	r1, sp
    56fc:	2280      	movs	r2, #128	; 0x80
    56fe:	f000 ff8b 	bl	6618 <cc_mbedtls_aes_setkey_enc>
    5702:	4604      	mov	r4, r0
    5704:	b930      	cbnz	r0, 5714 <cc_mbedtls_ctr_drbg_seed+0x68>
    5706:	4633      	mov	r3, r6
    5708:	4649      	mov	r1, r9
    570a:	4628      	mov	r0, r5
    570c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    570e:	f7ff ff53 	bl	55b8 <mbedtls_ctr_drbg_reseed_internal>
    5712:	4604      	mov	r4, r0
    5714:	4b0b      	ldr	r3, [pc, #44]	; (5744 <cc_mbedtls_ctr_drbg_seed+0x98>)
    5716:	4640      	mov	r0, r8
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	4798      	blx	r3
    571c:	2800      	cmp	r0, #0
    571e:	bf18      	it	ne
    5720:	4604      	movne	r4, r0
    5722:	4620      	mov	r0, r4
    5724:	b005      	add	sp, #20
    5726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    572a:	692e      	ldr	r6, [r5, #16]
    572c:	2e00      	cmp	r6, #0
    572e:	dae3      	bge.n	56f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    5730:	2a17      	cmp	r2, #23
    5732:	d802      	bhi.n	573a <cc_mbedtls_ctr_drbg_seed+0x8e>
    5734:	1c53      	adds	r3, r2, #1
    5736:	085e      	lsrs	r6, r3, #1
    5738:	e7de      	b.n	56f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    573a:	2600      	movs	r6, #0
    573c:	e7dc      	b.n	56f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    573e:	bf00      	nop
    5740:	200000c4 	.word	0x200000c4
    5744:	200000c8 	.word	0x200000c8

00005748 <cc_mbedtls_ctr_drbg_random_with_add>:
    5748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    574c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5750:	b08d      	sub	sp, #52	; 0x34
    5752:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    5756:	f200 80e4 	bhi.w	5922 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    575a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    575e:	f200 80dd 	bhi.w	591c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    5762:	4604      	mov	r4, r0
    5764:	4615      	mov	r5, r2
    5766:	460e      	mov	r6, r1
    5768:	2220      	movs	r2, #32
    576a:	2100      	movs	r1, #0
    576c:	a804      	add	r0, sp, #16
    576e:	461f      	mov	r7, r3
    5770:	f002 fb0e 	bl	7d90 <memset>
    5774:	4b6c      	ldr	r3, [pc, #432]	; (5928 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    5776:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    577a:	4648      	mov	r0, r9
    577c:	681b      	ldr	r3, [r3, #0]
    577e:	4798      	blx	r3
    5780:	4683      	mov	fp, r0
    5782:	2800      	cmp	r0, #0
    5784:	f040 8093 	bne.w	58ae <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5788:	6922      	ldr	r2, [r4, #16]
    578a:	69e3      	ldr	r3, [r4, #28]
    578c:	429a      	cmp	r2, r3
    578e:	f300 8092 	bgt.w	58b6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    5792:	6963      	ldr	r3, [r4, #20]
    5794:	2b00      	cmp	r3, #0
    5796:	f040 808e 	bne.w	58b6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    579a:	f1b8 0f00 	cmp.w	r8, #0
    579e:	f040 80a9 	bne.w	58f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    57a2:	f8df a188 	ldr.w	sl, [pc, #392]	; 592c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    57a6:	466f      	mov	r7, sp
    57a8:	2d00      	cmp	r5, #0
    57aa:	f000 8098 	beq.w	58de <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    57ae:	466f      	mov	r7, sp
    57b0:	f104 0820 	add.w	r8, r4, #32
    57b4:	e00e      	b.n	57d4 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    57b6:	2d10      	cmp	r5, #16
    57b8:	46ab      	mov	fp, r5
    57ba:	bf28      	it	cs
    57bc:	f04f 0b10 	movcs.w	fp, #16
    57c0:	4630      	mov	r0, r6
    57c2:	4639      	mov	r1, r7
    57c4:	465a      	mov	r2, fp
    57c6:	f002 fad8 	bl	7d7a <memcpy>
    57ca:	ebb5 050b 	subs.w	r5, r5, fp
    57ce:	445e      	add	r6, fp
    57d0:	f000 8085 	beq.w	58de <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    57d4:	7be3      	ldrb	r3, [r4, #15]
    57d6:	3301      	adds	r3, #1
    57d8:	b2db      	uxtb	r3, r3
    57da:	73e3      	strb	r3, [r4, #15]
    57dc:	2b00      	cmp	r3, #0
    57de:	d14d      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    57e0:	7ba3      	ldrb	r3, [r4, #14]
    57e2:	3301      	adds	r3, #1
    57e4:	b2db      	uxtb	r3, r3
    57e6:	73a3      	strb	r3, [r4, #14]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d147      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    57ec:	7b63      	ldrb	r3, [r4, #13]
    57ee:	3301      	adds	r3, #1
    57f0:	b2db      	uxtb	r3, r3
    57f2:	7363      	strb	r3, [r4, #13]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d141      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    57f8:	7b23      	ldrb	r3, [r4, #12]
    57fa:	3301      	adds	r3, #1
    57fc:	b2db      	uxtb	r3, r3
    57fe:	7323      	strb	r3, [r4, #12]
    5800:	2b00      	cmp	r3, #0
    5802:	d13b      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5804:	7ae3      	ldrb	r3, [r4, #11]
    5806:	3301      	adds	r3, #1
    5808:	b2db      	uxtb	r3, r3
    580a:	72e3      	strb	r3, [r4, #11]
    580c:	2b00      	cmp	r3, #0
    580e:	d135      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5810:	7aa3      	ldrb	r3, [r4, #10]
    5812:	3301      	adds	r3, #1
    5814:	b2db      	uxtb	r3, r3
    5816:	72a3      	strb	r3, [r4, #10]
    5818:	2b00      	cmp	r3, #0
    581a:	d12f      	bne.n	587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    581c:	7a63      	ldrb	r3, [r4, #9]
    581e:	3301      	adds	r3, #1
    5820:	b2db      	uxtb	r3, r3
    5822:	7263      	strb	r3, [r4, #9]
    5824:	bb53      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5826:	7a23      	ldrb	r3, [r4, #8]
    5828:	3301      	adds	r3, #1
    582a:	b2db      	uxtb	r3, r3
    582c:	7223      	strb	r3, [r4, #8]
    582e:	bb2b      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5830:	79e3      	ldrb	r3, [r4, #7]
    5832:	3301      	adds	r3, #1
    5834:	b2db      	uxtb	r3, r3
    5836:	71e3      	strb	r3, [r4, #7]
    5838:	bb03      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    583a:	79a3      	ldrb	r3, [r4, #6]
    583c:	3301      	adds	r3, #1
    583e:	b2db      	uxtb	r3, r3
    5840:	71a3      	strb	r3, [r4, #6]
    5842:	b9db      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5844:	7963      	ldrb	r3, [r4, #5]
    5846:	3301      	adds	r3, #1
    5848:	b2db      	uxtb	r3, r3
    584a:	7163      	strb	r3, [r4, #5]
    584c:	b9b3      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    584e:	7923      	ldrb	r3, [r4, #4]
    5850:	3301      	adds	r3, #1
    5852:	b2db      	uxtb	r3, r3
    5854:	7123      	strb	r3, [r4, #4]
    5856:	b98b      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5858:	78e3      	ldrb	r3, [r4, #3]
    585a:	3301      	adds	r3, #1
    585c:	b2db      	uxtb	r3, r3
    585e:	70e3      	strb	r3, [r4, #3]
    5860:	b963      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5862:	78a3      	ldrb	r3, [r4, #2]
    5864:	3301      	adds	r3, #1
    5866:	b2db      	uxtb	r3, r3
    5868:	70a3      	strb	r3, [r4, #2]
    586a:	b93b      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    586c:	7863      	ldrb	r3, [r4, #1]
    586e:	3301      	adds	r3, #1
    5870:	b2db      	uxtb	r3, r3
    5872:	7063      	strb	r3, [r4, #1]
    5874:	b913      	cbnz	r3, 587c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5876:	7823      	ldrb	r3, [r4, #0]
    5878:	3301      	adds	r3, #1
    587a:	7023      	strb	r3, [r4, #0]
    587c:	463b      	mov	r3, r7
    587e:	4622      	mov	r2, r4
    5880:	2101      	movs	r1, #1
    5882:	4640      	mov	r0, r8
    5884:	f000 fee2 	bl	664c <cc_mbedtls_aes_crypt_ecb>
    5888:	4683      	mov	fp, r0
    588a:	2800      	cmp	r0, #0
    588c:	d093      	beq.n	57b6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    588e:	f8da 3000 	ldr.w	r3, [sl]
    5892:	4648      	mov	r0, r9
    5894:	4798      	blx	r3
    5896:	4603      	mov	r3, r0
    5898:	2120      	movs	r1, #32
    589a:	a804      	add	r0, sp, #16
    589c:	2b00      	cmp	r3, #0
    589e:	bf18      	it	ne
    58a0:	469b      	movne	fp, r3
    58a2:	f7ff fc9b 	bl	51dc <mbedtls_platform_zeroize>
    58a6:	4638      	mov	r0, r7
    58a8:	2110      	movs	r1, #16
    58aa:	f7ff fc97 	bl	51dc <mbedtls_platform_zeroize>
    58ae:	4658      	mov	r0, fp
    58b0:	b00d      	add	sp, #52	; 0x34
    58b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58b6:	4642      	mov	r2, r8
    58b8:	4639      	mov	r1, r7
    58ba:	2300      	movs	r3, #0
    58bc:	4620      	mov	r0, r4
    58be:	f7ff fe7b 	bl	55b8 <mbedtls_ctr_drbg_reseed_internal>
    58c2:	f8df a068 	ldr.w	sl, [pc, #104]	; 592c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    58c6:	2800      	cmp	r0, #0
    58c8:	f43f af6d 	beq.w	57a6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    58cc:	4648      	mov	r0, r9
    58ce:	f8da 3000 	ldr.w	r3, [sl]
    58d2:	4798      	blx	r3
    58d4:	4683      	mov	fp, r0
    58d6:	2800      	cmp	r0, #0
    58d8:	f43f af65 	beq.w	57a6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    58dc:	e7e7      	b.n	58ae <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    58de:	4620      	mov	r0, r4
    58e0:	a904      	add	r1, sp, #16
    58e2:	f7ff fdc5 	bl	5470 <ctr_drbg_update_internal>
    58e6:	4683      	mov	fp, r0
    58e8:	2800      	cmp	r0, #0
    58ea:	d1d0      	bne.n	588e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    58ec:	6923      	ldr	r3, [r4, #16]
    58ee:	3301      	adds	r3, #1
    58f0:	6123      	str	r3, [r4, #16]
    58f2:	e7cc      	b.n	588e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    58f4:	4642      	mov	r2, r8
    58f6:	4639      	mov	r1, r7
    58f8:	a804      	add	r0, sp, #16
    58fa:	f7ff fc79 	bl	51f0 <block_cipher_df>
    58fe:	4683      	mov	fp, r0
    5900:	b118      	cbz	r0, 590a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    5902:	466f      	mov	r7, sp
    5904:	f8df a024 	ldr.w	sl, [pc, #36]	; 592c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5908:	e7c1      	b.n	588e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    590a:	4620      	mov	r0, r4
    590c:	a904      	add	r1, sp, #16
    590e:	f7ff fdaf 	bl	5470 <ctr_drbg_update_internal>
    5912:	4683      	mov	fp, r0
    5914:	2800      	cmp	r0, #0
    5916:	f43f af44 	beq.w	57a2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    591a:	e7f2      	b.n	5902 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    591c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    5920:	e7c5      	b.n	58ae <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5922:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    5926:	e7c2      	b.n	58ae <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5928:	200000c4 	.word	0x200000c4
    592c:	200000c8 	.word	0x200000c8

00005930 <entropy_update>:
    5930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5934:	2b20      	cmp	r3, #32
    5936:	461d      	mov	r5, r3
    5938:	4606      	mov	r6, r0
    593a:	4689      	mov	r9, r1
    593c:	4690      	mov	r8, r2
    593e:	b08b      	sub	sp, #44	; 0x2c
    5940:	d826      	bhi.n	5990 <entropy_update+0x60>
    5942:	b2db      	uxtb	r3, r3
    5944:	af02      	add	r7, sp, #8
    5946:	6831      	ldr	r1, [r6, #0]
    5948:	f88d 9004 	strb.w	r9, [sp, #4]
    594c:	f88d 3005 	strb.w	r3, [sp, #5]
    5950:	f106 0904 	add.w	r9, r6, #4
    5954:	b921      	cbnz	r1, 5960 <entropy_update+0x30>
    5956:	4648      	mov	r0, r9
    5958:	f000 febc 	bl	66d4 <cc_mbedtls_sha256_starts>
    595c:	4604      	mov	r4, r0
    595e:	b940      	cbnz	r0, 5972 <entropy_update+0x42>
    5960:	2301      	movs	r3, #1
    5962:	2202      	movs	r2, #2
    5964:	4648      	mov	r0, r9
    5966:	6033      	str	r3, [r6, #0]
    5968:	a901      	add	r1, sp, #4
    596a:	f000 fec7 	bl	66fc <cc_mbedtls_sha256_update>
    596e:	4604      	mov	r4, r0
    5970:	b138      	cbz	r0, 5982 <entropy_update+0x52>
    5972:	4638      	mov	r0, r7
    5974:	2120      	movs	r1, #32
    5976:	f7ff fc31 	bl	51dc <mbedtls_platform_zeroize>
    597a:	4620      	mov	r0, r4
    597c:	b00b      	add	sp, #44	; 0x2c
    597e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5982:	462a      	mov	r2, r5
    5984:	4641      	mov	r1, r8
    5986:	4648      	mov	r0, r9
    5988:	f000 feb8 	bl	66fc <cc_mbedtls_sha256_update>
    598c:	4604      	mov	r4, r0
    598e:	e7f0      	b.n	5972 <entropy_update+0x42>
    5990:	af02      	add	r7, sp, #8
    5992:	4619      	mov	r1, r3
    5994:	4610      	mov	r0, r2
    5996:	2300      	movs	r3, #0
    5998:	463a      	mov	r2, r7
    599a:	f000 ffb1 	bl	6900 <cc_mbedtls_sha256>
    599e:	4604      	mov	r4, r0
    59a0:	2800      	cmp	r0, #0
    59a2:	d1e6      	bne.n	5972 <entropy_update+0x42>
    59a4:	2320      	movs	r3, #32
    59a6:	46b8      	mov	r8, r7
    59a8:	461d      	mov	r5, r3
    59aa:	e7cc      	b.n	5946 <entropy_update+0x16>

000059ac <entropy_gather_internal.part.0>:
    59ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ae:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    59b2:	b0a7      	sub	sp, #156	; 0x9c
    59b4:	2b00      	cmp	r3, #0
    59b6:	bfd8      	it	le
    59b8:	ae02      	addle	r6, sp, #8
    59ba:	dd2c      	ble.n	5a16 <entropy_gather_internal.part.0+0x6a>
    59bc:	4605      	mov	r5, r0
    59be:	2300      	movs	r3, #0
    59c0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    59c4:	ae02      	add	r6, sp, #8
    59c6:	9301      	str	r3, [sp, #4]
    59c8:	f1a4 0701 	sub.w	r7, r4, #1
    59cc:	4631      	mov	r1, r6
    59ce:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    59d2:	2290      	movs	r2, #144	; 0x90
    59d4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    59d8:	ab01      	add	r3, sp, #4
    59da:	fab7 f787 	clz	r7, r7
    59de:	47a0      	blx	r4
    59e0:	097f      	lsrs	r7, r7, #5
    59e2:	4604      	mov	r4, r0
    59e4:	b910      	cbnz	r0, 59ec <entropy_gather_internal.part.0+0x40>
    59e6:	9b01      	ldr	r3, [sp, #4]
    59e8:	b93b      	cbnz	r3, 59fa <entropy_gather_internal.part.0+0x4e>
    59ea:	b1a7      	cbz	r7, 5a16 <entropy_gather_internal.part.0+0x6a>
    59ec:	4630      	mov	r0, r6
    59ee:	2190      	movs	r1, #144	; 0x90
    59f0:	f7ff fbf4 	bl	51dc <mbedtls_platform_zeroize>
    59f4:	4620      	mov	r0, r4
    59f6:	b027      	add	sp, #156	; 0x9c
    59f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59fa:	4601      	mov	r1, r0
    59fc:	4632      	mov	r2, r6
    59fe:	4628      	mov	r0, r5
    5a00:	f7ff ff96 	bl	5930 <entropy_update>
    5a04:	b950      	cbnz	r0, 5a1c <entropy_gather_internal.part.0+0x70>
    5a06:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    5a0a:	9a01      	ldr	r2, [sp, #4]
    5a0c:	4413      	add	r3, r2
    5a0e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    5a12:	2f00      	cmp	r7, #0
    5a14:	d1ea      	bne.n	59ec <entropy_gather_internal.part.0+0x40>
    5a16:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    5a1a:	e7e7      	b.n	59ec <entropy_gather_internal.part.0+0x40>
    5a1c:	4604      	mov	r4, r0
    5a1e:	4620      	mov	r0, r4
    5a20:	b027      	add	sp, #156	; 0x9c
    5a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005a24 <cc_mbedtls_entropy_init>:
    5a24:	b570      	push	{r4, r5, r6, lr}
    5a26:	2500      	movs	r5, #0
    5a28:	4604      	mov	r4, r0
    5a2a:	4629      	mov	r1, r5
    5a2c:	2214      	movs	r2, #20
    5a2e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    5a32:	30f8      	adds	r0, #248	; 0xf8
    5a34:	f002 f9ac 	bl	7d90 <memset>
    5a38:	4b16      	ldr	r3, [pc, #88]	; (5a94 <cc_mbedtls_entropy_init+0x70>)
    5a3a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	4630      	mov	r0, r6
    5a42:	4798      	blx	r3
    5a44:	4620      	mov	r0, r4
    5a46:	f840 5b04 	str.w	r5, [r0], #4
    5a4a:	f000 fe29 	bl	66a0 <cc_mbedtls_sha256_init>
    5a4e:	4b12      	ldr	r3, [pc, #72]	; (5a98 <cc_mbedtls_entropy_init+0x74>)
    5a50:	4630      	mov	r0, r6
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	4798      	blx	r3
    5a56:	b9d8      	cbnz	r0, 5a90 <cc_mbedtls_entropy_init+0x6c>
    5a58:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5a5c:	42ab      	cmp	r3, r5
    5a5e:	dc11      	bgt.n	5a84 <cc_mbedtls_entropy_init+0x60>
    5a60:	2101      	movs	r1, #1
    5a62:	2520      	movs	r5, #32
    5a64:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5a68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    5a6c:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    5a70:	480a      	ldr	r0, [pc, #40]	; (5a9c <cc_mbedtls_entropy_init+0x78>)
    5a72:	440b      	add	r3, r1
    5a74:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    5a78:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    5a7c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    5a80:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    5a84:	4b06      	ldr	r3, [pc, #24]	; (5aa0 <cc_mbedtls_entropy_init+0x7c>)
    5a86:	4630      	mov	r0, r6
    5a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	4718      	bx	r3
    5a90:	bd70      	pop	{r4, r5, r6, pc}
    5a92:	bf00      	nop
    5a94:	200000c0 	.word	0x200000c0
    5a98:	200000c4 	.word	0x200000c4
    5a9c:	000064e9 	.word	0x000064e9
    5aa0:	200000c8 	.word	0x200000c8

00005aa4 <cc_mbedtls_entropy_func>:
    5aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aa8:	2a20      	cmp	r2, #32
    5aaa:	b088      	sub	sp, #32
    5aac:	d878      	bhi.n	5ba0 <cc_mbedtls_entropy_func+0xfc>
    5aae:	4b3e      	ldr	r3, [pc, #248]	; (5ba8 <cc_mbedtls_entropy_func+0x104>)
    5ab0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    5ab4:	4604      	mov	r4, r0
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	4648      	mov	r0, r9
    5aba:	4617      	mov	r7, r2
    5abc:	4688      	mov	r8, r1
    5abe:	4798      	blx	r3
    5ac0:	4605      	mov	r5, r0
    5ac2:	bb40      	cbnz	r0, 5b16 <cc_mbedtls_entropy_func+0x72>
    5ac4:	f240 1601 	movw	r6, #257	; 0x101
    5ac8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5acc:	2b00      	cmp	r3, #0
    5ace:	d063      	beq.n	5b98 <cc_mbedtls_entropy_func+0xf4>
    5ad0:	4620      	mov	r0, r4
    5ad2:	f7ff ff6b 	bl	59ac <entropy_gather_internal.part.0>
    5ad6:	4605      	mov	r5, r0
    5ad8:	2800      	cmp	r0, #0
    5ada:	d15f      	bne.n	5b9c <cc_mbedtls_entropy_func+0xf8>
    5adc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	dd07      	ble.n	5af4 <cc_mbedtls_entropy_func+0x50>
    5ae4:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    5ae8:	4290      	cmp	r0, r2
    5aea:	d303      	bcc.n	5af4 <cc_mbedtls_entropy_func+0x50>
    5aec:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    5af0:	2a01      	cmp	r2, #1
    5af2:	d014      	beq.n	5b1e <cc_mbedtls_entropy_func+0x7a>
    5af4:	3e01      	subs	r6, #1
    5af6:	d1e9      	bne.n	5acc <cc_mbedtls_entropy_func+0x28>
    5af8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5afc:	466e      	mov	r6, sp
    5afe:	4630      	mov	r0, r6
    5b00:	2120      	movs	r1, #32
    5b02:	f7ff fb6b 	bl	51dc <mbedtls_platform_zeroize>
    5b06:	4b29      	ldr	r3, [pc, #164]	; (5bac <cc_mbedtls_entropy_func+0x108>)
    5b08:	4648      	mov	r0, r9
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	4798      	blx	r3
    5b0e:	2800      	cmp	r0, #0
    5b10:	bf18      	it	ne
    5b12:	f06f 051d 	mvnne.w	r5, #29
    5b16:	4628      	mov	r0, r5
    5b18:	b008      	add	sp, #32
    5b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b1e:	281f      	cmp	r0, #31
    5b20:	d9e8      	bls.n	5af4 <cc_mbedtls_entropy_func+0x50>
    5b22:	466e      	mov	r6, sp
    5b24:	4629      	mov	r1, r5
    5b26:	2220      	movs	r2, #32
    5b28:	4630      	mov	r0, r6
    5b2a:	f104 0a04 	add.w	sl, r4, #4
    5b2e:	f002 f92f 	bl	7d90 <memset>
    5b32:	4631      	mov	r1, r6
    5b34:	4650      	mov	r0, sl
    5b36:	f000 fe0b 	bl	6750 <cc_mbedtls_sha256_finish>
    5b3a:	4605      	mov	r5, r0
    5b3c:	2800      	cmp	r0, #0
    5b3e:	d1de      	bne.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5b40:	4650      	mov	r0, sl
    5b42:	f000 fdc1 	bl	66c8 <cc_mbedtls_sha256_free>
    5b46:	4650      	mov	r0, sl
    5b48:	f000 fdaa 	bl	66a0 <cc_mbedtls_sha256_init>
    5b4c:	4629      	mov	r1, r5
    5b4e:	4650      	mov	r0, sl
    5b50:	f000 fdc0 	bl	66d4 <cc_mbedtls_sha256_starts>
    5b54:	4605      	mov	r5, r0
    5b56:	2800      	cmp	r0, #0
    5b58:	d1d1      	bne.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5b5a:	4650      	mov	r0, sl
    5b5c:	2220      	movs	r2, #32
    5b5e:	4631      	mov	r1, r6
    5b60:	f000 fdcc 	bl	66fc <cc_mbedtls_sha256_update>
    5b64:	4605      	mov	r5, r0
    5b66:	2800      	cmp	r0, #0
    5b68:	d1c9      	bne.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5b6a:	4603      	mov	r3, r0
    5b6c:	4632      	mov	r2, r6
    5b6e:	2120      	movs	r1, #32
    5b70:	4630      	mov	r0, r6
    5b72:	f000 fec5 	bl	6900 <cc_mbedtls_sha256>
    5b76:	4605      	mov	r5, r0
    5b78:	2800      	cmp	r0, #0
    5b7a:	d1c0      	bne.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5b7c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5b80:	463a      	mov	r2, r7
    5b82:	2b00      	cmp	r3, #0
    5b84:	bfc8      	it	gt
    5b86:	2300      	movgt	r3, #0
    5b88:	4640      	mov	r0, r8
    5b8a:	4631      	mov	r1, r6
    5b8c:	bfc8      	it	gt
    5b8e:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    5b92:	f002 f8f2 	bl	7d7a <memcpy>
    5b96:	e7b2      	b.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5b98:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    5b9c:	466e      	mov	r6, sp
    5b9e:	e7ae      	b.n	5afe <cc_mbedtls_entropy_func+0x5a>
    5ba0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5ba4:	e7b7      	b.n	5b16 <cc_mbedtls_entropy_func+0x72>
    5ba6:	bf00      	nop
    5ba8:	200000c4 	.word	0x200000c4
    5bac:	200000c8 	.word	0x200000c8

00005bb0 <RndStartupTest.constprop.0>:
    5bb0:	b530      	push	{r4, r5, lr}
    5bb2:	b0c3      	sub	sp, #268	; 0x10c
    5bb4:	22dc      	movs	r2, #220	; 0xdc
    5bb6:	2100      	movs	r1, #0
    5bb8:	a80b      	add	r0, sp, #44	; 0x2c
    5bba:	f002 f8e9 	bl	7d90 <memset>
    5bbe:	2228      	movs	r2, #40	; 0x28
    5bc0:	2100      	movs	r1, #0
    5bc2:	a801      	add	r0, sp, #4
    5bc4:	f002 f8e4 	bl	7d90 <memset>
    5bc8:	a801      	add	r0, sp, #4
    5bca:	f000 fec1 	bl	6950 <RNG_PLAT_SetUserRngParameters>
    5bce:	4604      	mov	r4, r0
    5bd0:	b110      	cbz	r0, 5bd8 <RndStartupTest.constprop.0+0x28>
    5bd2:	4620      	mov	r0, r4
    5bd4:	b043      	add	sp, #268	; 0x10c
    5bd6:	bd30      	pop	{r4, r5, pc}
    5bd8:	4d18      	ldr	r5, [pc, #96]	; (5c3c <RndStartupTest.constprop.0+0x8c>)
    5bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5bde:	6828      	ldr	r0, [r5, #0]
    5be0:	f000 f93a 	bl	5e58 <CC_PalMutexLock>
    5be4:	4604      	mov	r4, r0
    5be6:	b9c0      	cbnz	r0, 5c1a <RndStartupTest.constprop.0+0x6a>
    5be8:	2000      	movs	r0, #0
    5bea:	f000 f965 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    5bee:	bb00      	cbnz	r0, 5c32 <RndStartupTest.constprop.0+0x82>
    5bf0:	4a13      	ldr	r2, [pc, #76]	; (5c40 <RndStartupTest.constprop.0+0x90>)
    5bf2:	a901      	add	r1, sp, #4
    5bf4:	a80b      	add	r0, sp, #44	; 0x2c
    5bf6:	f000 fc69 	bl	64cc <LLF_RND_RunTrngStartupTest>
    5bfa:	4604      	mov	r4, r0
    5bfc:	2001      	movs	r0, #1
    5bfe:	f000 f95b 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    5c02:	b990      	cbnz	r0, 5c2a <RndStartupTest.constprop.0+0x7a>
    5c04:	6828      	ldr	r0, [r5, #0]
    5c06:	f000 f92f 	bl	5e68 <CC_PalMutexUnlock>
    5c0a:	2800      	cmp	r0, #0
    5c0c:	d0e1      	beq.n	5bd2 <RndStartupTest.constprop.0+0x22>
    5c0e:	480d      	ldr	r0, [pc, #52]	; (5c44 <RndStartupTest.constprop.0+0x94>)
    5c10:	f7ff f9d8 	bl	4fc4 <CC_PalAbort>
    5c14:	4620      	mov	r0, r4
    5c16:	b043      	add	sp, #268	; 0x10c
    5c18:	bd30      	pop	{r4, r5, pc}
    5c1a:	480b      	ldr	r0, [pc, #44]	; (5c48 <RndStartupTest.constprop.0+0x98>)
    5c1c:	f7ff f9d2 	bl	4fc4 <CC_PalAbort>
    5c20:	2c01      	cmp	r4, #1
    5c22:	bf08      	it	eq
    5c24:	2405      	moveq	r4, #5
    5c26:	d0ed      	beq.n	5c04 <RndStartupTest.constprop.0+0x54>
    5c28:	e7de      	b.n	5be8 <RndStartupTest.constprop.0+0x38>
    5c2a:	4808      	ldr	r0, [pc, #32]	; (5c4c <RndStartupTest.constprop.0+0x9c>)
    5c2c:	f7ff f9ca 	bl	4fc4 <CC_PalAbort>
    5c30:	e7e8      	b.n	5c04 <RndStartupTest.constprop.0+0x54>
    5c32:	4807      	ldr	r0, [pc, #28]	; (5c50 <RndStartupTest.constprop.0+0xa0>)
    5c34:	f7ff f9c6 	bl	4fc4 <CC_PalAbort>
    5c38:	e7da      	b.n	5bf0 <RndStartupTest.constprop.0+0x40>
    5c3a:	bf00      	nop
    5c3c:	200000bc 	.word	0x200000bc
    5c40:	20000dac 	.word	0x20000dac
    5c44:	00008830 	.word	0x00008830
    5c48:	000087d8 	.word	0x000087d8
    5c4c:	00008810 	.word	0x00008810
    5c50:	000087f0 	.word	0x000087f0

00005c54 <CC_LibInit>:
    5c54:	b510      	push	{r4, lr}
    5c56:	b082      	sub	sp, #8
    5c58:	f000 f854 	bl	5d04 <CC_HalInit>
    5c5c:	b128      	cbz	r0, 5c6a <CC_LibInit+0x16>
    5c5e:	f000 f8a3 	bl	5da8 <CC_PalTerminate>
    5c62:	2403      	movs	r4, #3
    5c64:	4620      	mov	r0, r4
    5c66:	b002      	add	sp, #8
    5c68:	bd10      	pop	{r4, pc}
    5c6a:	f000 f86f 	bl	5d4c <CC_PalInit>
    5c6e:	b9d0      	cbnz	r0, 5ca6 <CC_LibInit+0x52>
    5c70:	f000 f922 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    5c74:	b9d8      	cbnz	r0, 5cae <CC_LibInit+0x5a>
    5c76:	4b1e      	ldr	r3, [pc, #120]	; (5cf0 <CC_LibInit+0x9c>)
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	0e1b      	lsrs	r3, r3, #24
    5c7c:	2bf0      	cmp	r3, #240	; 0xf0
    5c7e:	d10a      	bne.n	5c96 <CC_LibInit+0x42>
    5c80:	4a1c      	ldr	r2, [pc, #112]	; (5cf4 <CC_LibInit+0xa0>)
    5c82:	4b1d      	ldr	r3, [pc, #116]	; (5cf8 <CC_LibInit+0xa4>)
    5c84:	6812      	ldr	r2, [r2, #0]
    5c86:	429a      	cmp	r2, r3
    5c88:	d029      	beq.n	5cde <CC_LibInit+0x8a>
    5c8a:	f000 f83d 	bl	5d08 <CC_HalTerminate>
    5c8e:	2407      	movs	r4, #7
    5c90:	f000 f88a 	bl	5da8 <CC_PalTerminate>
    5c94:	e7e6      	b.n	5c64 <CC_LibInit+0x10>
    5c96:	2406      	movs	r4, #6
    5c98:	f000 f836 	bl	5d08 <CC_HalTerminate>
    5c9c:	f000 f884 	bl	5da8 <CC_PalTerminate>
    5ca0:	4620      	mov	r0, r4
    5ca2:	b002      	add	sp, #8
    5ca4:	bd10      	pop	{r4, pc}
    5ca6:	2404      	movs	r4, #4
    5ca8:	4620      	mov	r0, r4
    5caa:	b002      	add	sp, #8
    5cac:	bd10      	pop	{r4, pc}
    5cae:	f000 f82b 	bl	5d08 <CC_HalTerminate>
    5cb2:	f000 f879 	bl	5da8 <CC_PalTerminate>
    5cb6:	f7ff ff7b 	bl	5bb0 <RndStartupTest.constprop.0>
    5cba:	4604      	mov	r4, r0
    5cbc:	b958      	cbnz	r0, 5cd6 <CC_LibInit+0x82>
    5cbe:	4602      	mov	r2, r0
    5cc0:	4601      	mov	r1, r0
    5cc2:	f7ff f9a3 	bl	500c <nrf_cc3xx_platform_ctr_drbg_init>
    5cc6:	b930      	cbnz	r0, 5cd6 <CC_LibInit+0x82>
    5cc8:	2268      	movs	r2, #104	; 0x68
    5cca:	490c      	ldr	r1, [pc, #48]	; (5cfc <CC_LibInit+0xa8>)
    5ccc:	ab01      	add	r3, sp, #4
    5cce:	f7ff f9d1 	bl	5074 <nrf_cc3xx_platform_ctr_drbg_get>
    5cd2:	2800      	cmp	r0, #0
    5cd4:	d0c6      	beq.n	5c64 <CC_LibInit+0x10>
    5cd6:	2405      	movs	r4, #5
    5cd8:	4620      	mov	r0, r4
    5cda:	b002      	add	sp, #8
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	2001      	movs	r0, #1
    5ce0:	f000 f8ea 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d1e2      	bne.n	5cae <CC_LibInit+0x5a>
    5ce8:	4b05      	ldr	r3, [pc, #20]	; (5d00 <CC_LibInit+0xac>)
    5cea:	6018      	str	r0, [r3, #0]
    5cec:	e7e3      	b.n	5cb6 <CC_LibInit+0x62>
    5cee:	bf00      	nop
    5cf0:	50841928 	.word	0x50841928
    5cf4:	50841a24 	.word	0x50841a24
    5cf8:	20e00000 	.word	0x20e00000
    5cfc:	20000d44 	.word	0x20000d44
    5d00:	50841a0c 	.word	0x50841a0c

00005d04 <CC_HalInit>:
    5d04:	2000      	movs	r0, #0
    5d06:	4770      	bx	lr

00005d08 <CC_HalTerminate>:
    5d08:	2000      	movs	r0, #0
    5d0a:	4770      	bx	lr

00005d0c <CC_HalClearInterruptBit>:
    5d0c:	0543      	lsls	r3, r0, #21
    5d0e:	d503      	bpl.n	5d18 <CC_HalClearInterruptBit+0xc>
    5d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d14:	4b02      	ldr	r3, [pc, #8]	; (5d20 <CC_HalClearInterruptBit+0x14>)
    5d16:	601a      	str	r2, [r3, #0]
    5d18:	4b02      	ldr	r3, [pc, #8]	; (5d24 <CC_HalClearInterruptBit+0x18>)
    5d1a:	6018      	str	r0, [r3, #0]
    5d1c:	4770      	bx	lr
    5d1e:	bf00      	nop
    5d20:	50841108 	.word	0x50841108
    5d24:	50841a08 	.word	0x50841a08

00005d28 <CC_HalMaskInterrupt>:
    5d28:	4b01      	ldr	r3, [pc, #4]	; (5d30 <CC_HalMaskInterrupt+0x8>)
    5d2a:	6018      	str	r0, [r3, #0]
    5d2c:	4770      	bx	lr
    5d2e:	bf00      	nop
    5d30:	50841a04 	.word	0x50841a04

00005d34 <CC_HalWaitInterrupt>:
    5d34:	b108      	cbz	r0, 5d3a <CC_HalWaitInterrupt+0x6>
    5d36:	f000 b86d 	b.w	5e14 <CC_PalWaitInterrupt>
    5d3a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5d3e:	4770      	bx	lr

00005d40 <CC_HalWaitInterruptRND>:
    5d40:	b108      	cbz	r0, 5d46 <CC_HalWaitInterruptRND+0x6>
    5d42:	f000 b84f 	b.w	5de4 <CC_PalWaitInterruptRND>
    5d46:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5d4a:	4770      	bx	lr

00005d4c <CC_PalInit>:
    5d4c:	b510      	push	{r4, lr}
    5d4e:	4811      	ldr	r0, [pc, #68]	; (5d94 <CC_PalInit+0x48>)
    5d50:	f000 f86e 	bl	5e30 <CC_PalMutexCreate>
    5d54:	b100      	cbz	r0, 5d58 <CC_PalInit+0xc>
    5d56:	bd10      	pop	{r4, pc}
    5d58:	480f      	ldr	r0, [pc, #60]	; (5d98 <CC_PalInit+0x4c>)
    5d5a:	f000 f869 	bl	5e30 <CC_PalMutexCreate>
    5d5e:	2800      	cmp	r0, #0
    5d60:	d1f9      	bne.n	5d56 <CC_PalInit+0xa>
    5d62:	4c0e      	ldr	r4, [pc, #56]	; (5d9c <CC_PalInit+0x50>)
    5d64:	4620      	mov	r0, r4
    5d66:	f000 f863 	bl	5e30 <CC_PalMutexCreate>
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d1f3      	bne.n	5d56 <CC_PalInit+0xa>
    5d6e:	4b0c      	ldr	r3, [pc, #48]	; (5da0 <CC_PalInit+0x54>)
    5d70:	480c      	ldr	r0, [pc, #48]	; (5da4 <CC_PalInit+0x58>)
    5d72:	601c      	str	r4, [r3, #0]
    5d74:	f000 f85c 	bl	5e30 <CC_PalMutexCreate>
    5d78:	4601      	mov	r1, r0
    5d7a:	2800      	cmp	r0, #0
    5d7c:	d1eb      	bne.n	5d56 <CC_PalInit+0xa>
    5d7e:	f000 f82d 	bl	5ddc <CC_PalDmaInit>
    5d82:	4604      	mov	r4, r0
    5d84:	b108      	cbz	r0, 5d8a <CC_PalInit+0x3e>
    5d86:	4620      	mov	r0, r4
    5d88:	bd10      	pop	{r4, pc}
    5d8a:	f000 f877 	bl	5e7c <CC_PalPowerSaveModeInit>
    5d8e:	4620      	mov	r0, r4
    5d90:	e7fa      	b.n	5d88 <CC_PalInit+0x3c>
    5d92:	bf00      	nop
    5d94:	200000b8 	.word	0x200000b8
    5d98:	200000ac 	.word	0x200000ac
    5d9c:	200000b4 	.word	0x200000b4
    5da0:	200000bc 	.word	0x200000bc
    5da4:	200000b0 	.word	0x200000b0

00005da8 <CC_PalTerminate>:
    5da8:	b508      	push	{r3, lr}
    5daa:	4808      	ldr	r0, [pc, #32]	; (5dcc <CC_PalTerminate+0x24>)
    5dac:	f000 f84a 	bl	5e44 <CC_PalMutexDestroy>
    5db0:	4807      	ldr	r0, [pc, #28]	; (5dd0 <CC_PalTerminate+0x28>)
    5db2:	f000 f847 	bl	5e44 <CC_PalMutexDestroy>
    5db6:	4807      	ldr	r0, [pc, #28]	; (5dd4 <CC_PalTerminate+0x2c>)
    5db8:	f000 f844 	bl	5e44 <CC_PalMutexDestroy>
    5dbc:	4806      	ldr	r0, [pc, #24]	; (5dd8 <CC_PalTerminate+0x30>)
    5dbe:	f000 f841 	bl	5e44 <CC_PalMutexDestroy>
    5dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5dc6:	f000 b80b 	b.w	5de0 <CC_PalDmaTerminate>
    5dca:	bf00      	nop
    5dcc:	200000b8 	.word	0x200000b8
    5dd0:	200000ac 	.word	0x200000ac
    5dd4:	200000b4 	.word	0x200000b4
    5dd8:	200000b0 	.word	0x200000b0

00005ddc <CC_PalDmaInit>:
    5ddc:	2000      	movs	r0, #0
    5dde:	4770      	bx	lr

00005de0 <CC_PalDmaTerminate>:
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop

00005de4 <CC_PalWaitInterruptRND>:
    5de4:	4602      	mov	r2, r0
    5de6:	4807      	ldr	r0, [pc, #28]	; (5e04 <CC_PalWaitInterruptRND+0x20>)
    5de8:	6803      	ldr	r3, [r0, #0]
    5dea:	4213      	tst	r3, r2
    5dec:	d0fc      	beq.n	5de8 <CC_PalWaitInterruptRND+0x4>
    5dee:	b121      	cbz	r1, 5dfa <CC_PalWaitInterruptRND+0x16>
    5df0:	4b05      	ldr	r3, [pc, #20]	; (5e08 <CC_PalWaitInterruptRND+0x24>)
    5df2:	4806      	ldr	r0, [pc, #24]	; (5e0c <CC_PalWaitInterruptRND+0x28>)
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	600b      	str	r3, [r1, #0]
    5df8:	6003      	str	r3, [r0, #0]
    5dfa:	4b05      	ldr	r3, [pc, #20]	; (5e10 <CC_PalWaitInterruptRND+0x2c>)
    5dfc:	2000      	movs	r0, #0
    5dfe:	601a      	str	r2, [r3, #0]
    5e00:	4770      	bx	lr
    5e02:	bf00      	nop
    5e04:	50841a00 	.word	0x50841a00
    5e08:	50841104 	.word	0x50841104
    5e0c:	50841108 	.word	0x50841108
    5e10:	50841a08 	.word	0x50841a08

00005e14 <CC_PalWaitInterrupt>:
    5e14:	4602      	mov	r2, r0
    5e16:	4904      	ldr	r1, [pc, #16]	; (5e28 <CC_PalWaitInterrupt+0x14>)
    5e18:	680b      	ldr	r3, [r1, #0]
    5e1a:	421a      	tst	r2, r3
    5e1c:	d0fc      	beq.n	5e18 <CC_PalWaitInterrupt+0x4>
    5e1e:	4b03      	ldr	r3, [pc, #12]	; (5e2c <CC_PalWaitInterrupt+0x18>)
    5e20:	2000      	movs	r0, #0
    5e22:	601a      	str	r2, [r3, #0]
    5e24:	4770      	bx	lr
    5e26:	bf00      	nop
    5e28:	50841a00 	.word	0x50841a00
    5e2c:	50841a08 	.word	0x50841a08

00005e30 <CC_PalMutexCreate>:
    5e30:	b508      	push	{r3, lr}
    5e32:	4b03      	ldr	r3, [pc, #12]	; (5e40 <CC_PalMutexCreate+0x10>)
    5e34:	6802      	ldr	r2, [r0, #0]
    5e36:	681b      	ldr	r3, [r3, #0]
    5e38:	6810      	ldr	r0, [r2, #0]
    5e3a:	4798      	blx	r3
    5e3c:	2000      	movs	r0, #0
    5e3e:	bd08      	pop	{r3, pc}
    5e40:	2000006c 	.word	0x2000006c

00005e44 <CC_PalMutexDestroy>:
    5e44:	b508      	push	{r3, lr}
    5e46:	4b03      	ldr	r3, [pc, #12]	; (5e54 <CC_PalMutexDestroy+0x10>)
    5e48:	6802      	ldr	r2, [r0, #0]
    5e4a:	685b      	ldr	r3, [r3, #4]
    5e4c:	6810      	ldr	r0, [r2, #0]
    5e4e:	4798      	blx	r3
    5e50:	2000      	movs	r0, #0
    5e52:	bd08      	pop	{r3, pc}
    5e54:	2000006c 	.word	0x2000006c

00005e58 <CC_PalMutexLock>:
    5e58:	4b02      	ldr	r3, [pc, #8]	; (5e64 <CC_PalMutexLock+0xc>)
    5e5a:	6802      	ldr	r2, [r0, #0]
    5e5c:	689b      	ldr	r3, [r3, #8]
    5e5e:	6810      	ldr	r0, [r2, #0]
    5e60:	4718      	bx	r3
    5e62:	bf00      	nop
    5e64:	2000006c 	.word	0x2000006c

00005e68 <CC_PalMutexUnlock>:
    5e68:	b508      	push	{r3, lr}
    5e6a:	4b03      	ldr	r3, [pc, #12]	; (5e78 <CC_PalMutexUnlock+0x10>)
    5e6c:	6802      	ldr	r2, [r0, #0]
    5e6e:	68db      	ldr	r3, [r3, #12]
    5e70:	6810      	ldr	r0, [r2, #0]
    5e72:	4798      	blx	r3
    5e74:	2000      	movs	r0, #0
    5e76:	bd08      	pop	{r3, pc}
    5e78:	2000006c 	.word	0x2000006c

00005e7c <CC_PalPowerSaveModeInit>:
    5e7c:	b570      	push	{r4, r5, r6, lr}
    5e7e:	4c09      	ldr	r4, [pc, #36]	; (5ea4 <CC_PalPowerSaveModeInit+0x28>)
    5e80:	4d09      	ldr	r5, [pc, #36]	; (5ea8 <CC_PalPowerSaveModeInit+0x2c>)
    5e82:	6920      	ldr	r0, [r4, #16]
    5e84:	68ab      	ldr	r3, [r5, #8]
    5e86:	4798      	blx	r3
    5e88:	b118      	cbz	r0, 5e92 <CC_PalPowerSaveModeInit+0x16>
    5e8a:	4b08      	ldr	r3, [pc, #32]	; (5eac <CC_PalPowerSaveModeInit+0x30>)
    5e8c:	4808      	ldr	r0, [pc, #32]	; (5eb0 <CC_PalPowerSaveModeInit+0x34>)
    5e8e:	685b      	ldr	r3, [r3, #4]
    5e90:	4798      	blx	r3
    5e92:	2100      	movs	r1, #0
    5e94:	4a07      	ldr	r2, [pc, #28]	; (5eb4 <CC_PalPowerSaveModeInit+0x38>)
    5e96:	68eb      	ldr	r3, [r5, #12]
    5e98:	6011      	str	r1, [r2, #0]
    5e9a:	6920      	ldr	r0, [r4, #16]
    5e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ea0:	4718      	bx	r3
    5ea2:	bf00      	nop
    5ea4:	2000007c 	.word	0x2000007c
    5ea8:	2000006c 	.word	0x2000006c
    5eac:	2000005c 	.word	0x2000005c
    5eb0:	00008848 	.word	0x00008848
    5eb4:	20000fcc 	.word	0x20000fcc

00005eb8 <CC_PalPowerSaveModeSelect>:
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	4d1a      	ldr	r5, [pc, #104]	; (5f24 <CC_PalPowerSaveModeSelect+0x6c>)
    5ebc:	4e1a      	ldr	r6, [pc, #104]	; (5f28 <CC_PalPowerSaveModeSelect+0x70>)
    5ebe:	4604      	mov	r4, r0
    5ec0:	68b2      	ldr	r2, [r6, #8]
    5ec2:	6928      	ldr	r0, [r5, #16]
    5ec4:	4790      	blx	r2
    5ec6:	b9f0      	cbnz	r0, 5f06 <CC_PalPowerSaveModeSelect+0x4e>
    5ec8:	b15c      	cbz	r4, 5ee2 <CC_PalPowerSaveModeSelect+0x2a>
    5eca:	4c18      	ldr	r4, [pc, #96]	; (5f2c <CC_PalPowerSaveModeSelect+0x74>)
    5ecc:	6823      	ldr	r3, [r4, #0]
    5ece:	b1ab      	cbz	r3, 5efc <CC_PalPowerSaveModeSelect+0x44>
    5ed0:	2b01      	cmp	r3, #1
    5ed2:	d01a      	beq.n	5f0a <CC_PalPowerSaveModeSelect+0x52>
    5ed4:	3b01      	subs	r3, #1
    5ed6:	6023      	str	r3, [r4, #0]
    5ed8:	6928      	ldr	r0, [r5, #16]
    5eda:	68f3      	ldr	r3, [r6, #12]
    5edc:	4798      	blx	r3
    5ede:	2000      	movs	r0, #0
    5ee0:	bd70      	pop	{r4, r5, r6, pc}
    5ee2:	4c12      	ldr	r4, [pc, #72]	; (5f2c <CC_PalPowerSaveModeSelect+0x74>)
    5ee4:	6821      	ldr	r1, [r4, #0]
    5ee6:	b939      	cbnz	r1, 5ef8 <CC_PalPowerSaveModeSelect+0x40>
    5ee8:	2001      	movs	r0, #1
    5eea:	4b11      	ldr	r3, [pc, #68]	; (5f30 <CC_PalPowerSaveModeSelect+0x78>)
    5eec:	4a11      	ldr	r2, [pc, #68]	; (5f34 <CC_PalPowerSaveModeSelect+0x7c>)
    5eee:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    5ef2:	6813      	ldr	r3, [r2, #0]
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d1fc      	bne.n	5ef2 <CC_PalPowerSaveModeSelect+0x3a>
    5ef8:	3101      	adds	r1, #1
    5efa:	6021      	str	r1, [r4, #0]
    5efc:	68f3      	ldr	r3, [r6, #12]
    5efe:	6928      	ldr	r0, [r5, #16]
    5f00:	4798      	blx	r3
    5f02:	2000      	movs	r0, #0
    5f04:	bd70      	pop	{r4, r5, r6, pc}
    5f06:	480c      	ldr	r0, [pc, #48]	; (5f38 <CC_PalPowerSaveModeSelect+0x80>)
    5f08:	bd70      	pop	{r4, r5, r6, pc}
    5f0a:	4a0a      	ldr	r2, [pc, #40]	; (5f34 <CC_PalPowerSaveModeSelect+0x7c>)
    5f0c:	6813      	ldr	r3, [r2, #0]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d1fc      	bne.n	5f0c <CC_PalPowerSaveModeSelect+0x54>
    5f12:	4a07      	ldr	r2, [pc, #28]	; (5f30 <CC_PalPowerSaveModeSelect+0x78>)
    5f14:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5f18:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5f1c:	f7ff ff04 	bl	5d28 <CC_HalMaskInterrupt>
    5f20:	6823      	ldr	r3, [r4, #0]
    5f22:	e7d7      	b.n	5ed4 <CC_PalPowerSaveModeSelect+0x1c>
    5f24:	2000007c 	.word	0x2000007c
    5f28:	2000006c 	.word	0x2000006c
    5f2c:	20000fcc 	.word	0x20000fcc
    5f30:	50840000 	.word	0x50840000
    5f34:	50841910 	.word	0x50841910
    5f38:	ffff8fe9 	.word	0xffff8fe9

00005f3c <mutex_init>:
    5f3c:	4b01      	ldr	r3, [pc, #4]	; (5f44 <mutex_init+0x8>)
    5f3e:	681b      	ldr	r3, [r3, #0]
    5f40:	4718      	bx	r3
    5f42:	bf00      	nop
    5f44:	2000006c 	.word	0x2000006c

00005f48 <mutex_lock>:
    5f48:	4b01      	ldr	r3, [pc, #4]	; (5f50 <mutex_lock+0x8>)
    5f4a:	689b      	ldr	r3, [r3, #8]
    5f4c:	4718      	bx	r3
    5f4e:	bf00      	nop
    5f50:	2000006c 	.word	0x2000006c

00005f54 <mutex_unlock>:
    5f54:	4b01      	ldr	r3, [pc, #4]	; (5f5c <mutex_unlock+0x8>)
    5f56:	68db      	ldr	r3, [r3, #12]
    5f58:	4718      	bx	r3
    5f5a:	bf00      	nop
    5f5c:	2000006c 	.word	0x2000006c

00005f60 <startTrngHW>:
    5f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f64:	2800      	cmp	r0, #0
    5f66:	d07c      	beq.n	6062 <startTrngHW+0x102>
    5f68:	460c      	mov	r4, r1
    5f6a:	2900      	cmp	r1, #0
    5f6c:	d079      	beq.n	6062 <startTrngHW+0x102>
    5f6e:	461d      	mov	r5, r3
    5f70:	2b00      	cmp	r3, #0
    5f72:	d076      	beq.n	6062 <startTrngHW+0x102>
    5f74:	4606      	mov	r6, r0
    5f76:	b122      	cbz	r2, 5f82 <startTrngHW+0x22>
    5f78:	2201      	movs	r2, #1
    5f7a:	2300      	movs	r3, #0
    5f7c:	602a      	str	r2, [r5, #0]
    5f7e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    5f82:	682b      	ldr	r3, [r5, #0]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d068      	beq.n	605a <startTrngHW+0xfa>
    5f88:	4629      	mov	r1, r5
    5f8a:	4620      	mov	r0, r4
    5f8c:	f000 fddc 	bl	6b48 <LLF_RND_GetFastestRosc>
    5f90:	4607      	mov	r7, r0
    5f92:	2800      	cmp	r0, #0
    5f94:	d162      	bne.n	605c <startTrngHW+0xfc>
    5f96:	4621      	mov	r1, r4
    5f98:	6828      	ldr	r0, [r5, #0]
    5f9a:	f000 fdb7 	bl	6b0c <LLF_RND_GetRoscSampleCnt>
    5f9e:	4607      	mov	r7, r0
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d15b      	bne.n	605c <startTrngHW+0xfc>
    5fa4:	682b      	ldr	r3, [r5, #0]
    5fa6:	2b08      	cmp	r3, #8
    5fa8:	d06a      	beq.n	6080 <startTrngHW+0x120>
    5faa:	2b04      	cmp	r3, #4
    5fac:	d06b      	beq.n	6086 <startTrngHW+0x126>
    5fae:	f1a3 0802 	sub.w	r8, r3, #2
    5fb2:	fab8 f888 	clz	r8, r8
    5fb6:	ea4f 1858 	mov.w	r8, r8, lsr #5
    5fba:	2301      	movs	r3, #1
    5fbc:	469c      	mov	ip, r3
    5fbe:	4a33      	ldr	r2, [pc, #204]	; (608c <startTrngHW+0x12c>)
    5fc0:	4933      	ldr	r1, [pc, #204]	; (6090 <startTrngHW+0x130>)
    5fc2:	6013      	str	r3, [r2, #0]
    5fc4:	4610      	mov	r0, r2
    5fc6:	600b      	str	r3, [r1, #0]
    5fc8:	3a94      	subs	r2, #148	; 0x94
    5fca:	f8c0 c000 	str.w	ip, [r0]
    5fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5fd0:	6013      	str	r3, [r2, #0]
    5fd2:	6811      	ldr	r1, [r2, #0]
    5fd4:	428b      	cmp	r3, r1
    5fd6:	d1f8      	bne.n	5fca <startTrngHW+0x6a>
    5fd8:	f04f 0900 	mov.w	r9, #0
    5fdc:	4b2d      	ldr	r3, [pc, #180]	; (6094 <startTrngHW+0x134>)
    5fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5fe2:	f8c3 9000 	str.w	r9, [r3]
    5fe6:	f7ff fe91 	bl	5d0c <CC_HalClearInterruptBit>
    5fea:	f06f 021b 	mvn.w	r2, #27
    5fee:	4b2a      	ldr	r3, [pc, #168]	; (6098 <startTrngHW+0x138>)
    5ff0:	4648      	mov	r0, r9
    5ff2:	601a      	str	r2, [r3, #0]
    5ff4:	f7ff fe98 	bl	5d28 <CC_HalMaskInterrupt>
    5ff8:	4a28      	ldr	r2, [pc, #160]	; (609c <startTrngHW+0x13c>)
    5ffa:	4b29      	ldr	r3, [pc, #164]	; (60a0 <startTrngHW+0x140>)
    5ffc:	f8c2 8000 	str.w	r8, [r2]
    6000:	6818      	ldr	r0, [r3, #0]
    6002:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6006:	f7ff fe8f 	bl	5d28 <CC_HalMaskInterrupt>
    600a:	220a      	movs	r2, #10
    600c:	4b25      	ldr	r3, [pc, #148]	; (60a4 <startTrngHW+0x144>)
    600e:	601a      	str	r2, [r3, #0]
    6010:	9a08      	ldr	r2, [sp, #32]
    6012:	6923      	ldr	r3, [r4, #16]
    6014:	2a01      	cmp	r2, #1
    6016:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6018:	d027      	beq.n	606a <startTrngHW+0x10a>
    601a:	4a23      	ldr	r2, [pc, #140]	; (60a8 <startTrngHW+0x148>)
    601c:	fba2 2303 	umull	r2, r3, r2, r3
    6020:	091b      	lsrs	r3, r3, #4
    6022:	2201      	movs	r2, #1
    6024:	fb03 f301 	mul.w	r3, r3, r1
    6028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    602c:	491f      	ldr	r1, [pc, #124]	; (60ac <startTrngHW+0x14c>)
    602e:	03db      	lsls	r3, r3, #15
    6030:	099b      	lsrs	r3, r3, #6
    6032:	600b      	str	r3, [r1, #0]
    6034:	4b17      	ldr	r3, [pc, #92]	; (6094 <startTrngHW+0x134>)
    6036:	4638      	mov	r0, r7
    6038:	601a      	str	r2, [r3, #0]
    603a:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    603e:	682a      	ldr	r2, [r5, #0]
    6040:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6044:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    6048:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    604c:	682a      	ldr	r2, [r5, #0]
    604e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6052:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    6056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    605a:	4f15      	ldr	r7, [pc, #84]	; (60b0 <startTrngHW+0x150>)
    605c:	4638      	mov	r0, r7
    605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6062:	4f14      	ldr	r7, [pc, #80]	; (60b4 <startTrngHW+0x154>)
    6064:	4638      	mov	r0, r7
    6066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    606a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    606e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    6072:	3201      	adds	r2, #1
    6074:	d002      	beq.n	607c <startTrngHW+0x11c>
    6076:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    607a:	e7ce      	b.n	601a <startTrngHW+0xba>
    607c:	2316      	movs	r3, #22
    607e:	e7d0      	b.n	6022 <startTrngHW+0xc2>
    6080:	f04f 0803 	mov.w	r8, #3
    6084:	e799      	b.n	5fba <startTrngHW+0x5a>
    6086:	f04f 0802 	mov.w	r8, #2
    608a:	e796      	b.n	5fba <startTrngHW+0x5a>
    608c:	508411c4 	.word	0x508411c4
    6090:	50841140 	.word	0x50841140
    6094:	5084112c 	.word	0x5084112c
    6098:	50841100 	.word	0x50841100
    609c:	5084110c 	.word	0x5084110c
    60a0:	50841a04 	.word	0x50841a04
    60a4:	50841138 	.word	0x50841138
    60a8:	aaaaaaab 	.word	0xaaaaaaab
    60ac:	508411d8 	.word	0x508411d8
    60b0:	00f10c31 	.word	0x00f10c31
    60b4:	00f10c35 	.word	0x00f10c35

000060b8 <LLF_RND_RepetitionCounterTest.part.0>:
    60b8:	b4f0      	push	{r4, r5, r6, r7}
    60ba:	2400      	movs	r4, #0
    60bc:	00c9      	lsls	r1, r1, #3
    60be:	4626      	mov	r6, r4
    60c0:	4627      	mov	r7, r4
    60c2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    60c6:	e006      	b.n	60d6 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    60c8:	429f      	cmp	r7, r3
    60ca:	d015      	beq.n	60f8 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    60cc:	2601      	movs	r6, #1
    60ce:	4565      	cmp	r5, ip
    60d0:	d818      	bhi.n	6104 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    60d2:	462c      	mov	r4, r5
    60d4:	461f      	mov	r7, r3
    60d6:	0963      	lsrs	r3, r4, #5
    60d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    60dc:	f004 011f 	and.w	r1, r4, #31
    60e0:	40cb      	lsrs	r3, r1
    60e2:	291f      	cmp	r1, #31
    60e4:	f104 0501 	add.w	r5, r4, #1
    60e8:	bf18      	it	ne
    60ea:	f003 0301 	andne.w	r3, r3, #1
    60ee:	2c00      	cmp	r4, #0
    60f0:	d1ea      	bne.n	60c8 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    60f2:	2601      	movs	r6, #1
    60f4:	4635      	mov	r5, r6
    60f6:	e7ec      	b.n	60d2 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    60f8:	3601      	adds	r6, #1
    60fa:	4296      	cmp	r6, r2
    60fc:	d1e7      	bne.n	60ce <LLF_RND_RepetitionCounterTest.part.0+0x16>
    60fe:	4803      	ldr	r0, [pc, #12]	; (610c <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    6100:	bcf0      	pop	{r4, r5, r6, r7}
    6102:	4770      	bx	lr
    6104:	2000      	movs	r0, #0
    6106:	bcf0      	pop	{r4, r5, r6, r7}
    6108:	4770      	bx	lr
    610a:	bf00      	nop
    610c:	00f10c36 	.word	0x00f10c36

00006110 <LLF_RND_AdaptiveProportionTest>:
    6110:	2800      	cmp	r0, #0
    6112:	d05f      	beq.n	61d4 <LLF_RND_AdaptiveProportionTest+0xc4>
    6114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6118:	1e4c      	subs	r4, r1, #1
    611a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    611e:	d226      	bcs.n	616e <LLF_RND_AdaptiveProportionTest+0x5e>
    6120:	b32b      	cbz	r3, 616e <LLF_RND_AdaptiveProportionTest+0x5e>
    6122:	b322      	cbz	r2, 616e <LLF_RND_AdaptiveProportionTest+0x5e>
    6124:	00cc      	lsls	r4, r1, #3
    6126:	2b01      	cmp	r3, #1
    6128:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
    612c:	d02f      	beq.n	618e <LLF_RND_AdaptiveProportionTest+0x7e>
    612e:	2100      	movs	r1, #0
    6130:	468c      	mov	ip, r1
    6132:	460f      	mov	r7, r1
    6134:	460d      	mov	r5, r1
    6136:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    613a:	094c      	lsrs	r4, r1, #5
    613c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6140:	f001 061f 	and.w	r6, r1, #31
    6144:	40f4      	lsrs	r4, r6
    6146:	2e1f      	cmp	r6, #31
    6148:	bf18      	it	ne
    614a:	f004 0401 	andne.w	r4, r4, #1
    614e:	b921      	cbnz	r1, 615a <LLF_RND_AdaptiveProportionTest+0x4a>
    6150:	2501      	movs	r5, #1
    6152:	46ac      	mov	ip, r5
    6154:	4629      	mov	r1, r5
    6156:	4627      	mov	r7, r4
    6158:	e7ef      	b.n	613a <LLF_RND_AdaptiveProportionTest+0x2a>
    615a:	42ab      	cmp	r3, r5
    615c:	d013      	beq.n	6186 <LLF_RND_AdaptiveProportionTest+0x76>
    615e:	42a7      	cmp	r7, r4
    6160:	d101      	bne.n	6166 <LLF_RND_AdaptiveProportionTest+0x56>
    6162:	f10c 0c01 	add.w	ip, ip, #1
    6166:	4545      	cmp	r5, r8
    6168:	d104      	bne.n	6174 <LLF_RND_AdaptiveProportionTest+0x64>
    616a:	4562      	cmp	r2, ip
    616c:	d202      	bcs.n	6174 <LLF_RND_AdaptiveProportionTest+0x64>
    616e:	481a      	ldr	r0, [pc, #104]	; (61d8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6174:	463c      	mov	r4, r7
    6176:	3101      	adds	r1, #1
    6178:	458e      	cmp	lr, r1
    617a:	f105 0501 	add.w	r5, r5, #1
    617e:	d2ea      	bcs.n	6156 <LLF_RND_AdaptiveProportionTest+0x46>
    6180:	2000      	movs	r0, #0
    6182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6186:	2500      	movs	r5, #0
    6188:	f04f 0c01 	mov.w	ip, #1
    618c:	e7f3      	b.n	6176 <LLF_RND_AdaptiveProportionTest+0x66>
    618e:	2600      	movs	r6, #0
    6190:	46b4      	mov	ip, r6
    6192:	4637      	mov	r7, r6
    6194:	4631      	mov	r1, r6
    6196:	094b      	lsrs	r3, r1, #5
    6198:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    619c:	f001 051f 	and.w	r5, r1, #31
    61a0:	40eb      	lsrs	r3, r5
    61a2:	2d1f      	cmp	r5, #31
    61a4:	bf18      	it	ne
    61a6:	f003 0301 	andne.w	r3, r3, #1
    61aa:	b139      	cbz	r1, 61bc <LLF_RND_AdaptiveProportionTest+0xac>
    61ac:	b95f      	cbnz	r7, 61c6 <LLF_RND_AdaptiveProportionTest+0xb6>
    61ae:	459c      	cmp	ip, r3
    61b0:	d001      	beq.n	61b6 <LLF_RND_AdaptiveProportionTest+0xa6>
    61b2:	4663      	mov	r3, ip
    61b4:	e008      	b.n	61c8 <LLF_RND_AdaptiveProportionTest+0xb8>
    61b6:	4663      	mov	r3, ip
    61b8:	3601      	adds	r6, #1
    61ba:	e005      	b.n	61c8 <LLF_RND_AdaptiveProportionTest+0xb8>
    61bc:	2601      	movs	r6, #1
    61be:	4631      	mov	r1, r6
    61c0:	469c      	mov	ip, r3
    61c2:	2701      	movs	r7, #1
    61c4:	e7e7      	b.n	6196 <LLF_RND_AdaptiveProportionTest+0x86>
    61c6:	463e      	mov	r6, r7
    61c8:	42b2      	cmp	r2, r6
    61ca:	d3d0      	bcc.n	616e <LLF_RND_AdaptiveProportionTest+0x5e>
    61cc:	3101      	adds	r1, #1
    61ce:	42a1      	cmp	r1, r4
    61d0:	d1f6      	bne.n	61c0 <LLF_RND_AdaptiveProportionTest+0xb0>
    61d2:	e7d5      	b.n	6180 <LLF_RND_AdaptiveProportionTest+0x70>
    61d4:	4800      	ldr	r0, [pc, #0]	; (61d8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    61d6:	4770      	bx	lr
    61d8:	00f10c37 	.word	0x00f10c37

000061dc <getTrngSource>:
    61dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61e0:	b08d      	sub	sp, #52	; 0x34
    61e2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    61e4:	4607      	mov	r7, r0
    61e6:	460c      	mov	r4, r1
    61e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    61ea:	2e00      	cmp	r6, #0
    61ec:	d14d      	bne.n	628a <getTrngSource+0xae>
    61ee:	f8d1 b010 	ldr.w	fp, [r1, #16]
    61f2:	2100      	movs	r1, #0
    61f4:	601d      	str	r5, [r3, #0]
    61f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    61f8:	6019      	str	r1, [r3, #0]
    61fa:	2a00      	cmp	r2, #0
    61fc:	f000 8123 	beq.w	6446 <getTrngSource+0x26a>
    6200:	4a9d      	ldr	r2, [pc, #628]	; (6478 <getTrngSource+0x29c>)
    6202:	4b9e      	ldr	r3, [pc, #632]	; (647c <getTrngSource+0x2a0>)
    6204:	6811      	ldr	r1, [r2, #0]
    6206:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	429a      	cmp	r2, r3
    620c:	d148      	bne.n	62a0 <getTrngSource+0xc4>
    620e:	290a      	cmp	r1, #10
    6210:	d146      	bne.n	62a0 <getTrngSource+0xc4>
    6212:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    6216:	9304      	str	r3, [sp, #16]
    6218:	2304      	movs	r3, #4
    621a:	46b8      	mov	r8, r7
    621c:	9302      	str	r3, [sp, #8]
    621e:	4b98      	ldr	r3, [pc, #608]	; (6480 <getTrngSource+0x2a4>)
    6220:	fba3 230b 	umull	r2, r3, r3, fp
    6224:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6228:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    622c:	f105 0208 	add.w	r2, r5, #8
    6230:	9203      	str	r2, [sp, #12]
    6232:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    6236:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6238:	f8c3 b000 	str.w	fp, [r3]
    623c:	f1bb 0f00 	cmp.w	fp, #0
    6240:	f000 80c7 	beq.w	63d2 <getTrngSource+0x1f6>
    6244:	465d      	mov	r5, fp
    6246:	f04f 0900 	mov.w	r9, #0
    624a:	9e03      	ldr	r6, [sp, #12]
    624c:	f000 fc8c 	bl	6b68 <LLF_RND_TurnOffTrng>
    6250:	2300      	movs	r3, #0
    6252:	9305      	str	r3, [sp, #20]
    6254:	f1b8 0f00 	cmp.w	r8, #0
    6258:	f000 80e9 	beq.w	642e <getTrngSource+0x252>
    625c:	2c00      	cmp	r4, #0
    625e:	f000 80e6 	beq.w	642e <getTrngSource+0x252>
    6262:	9b04      	ldr	r3, [sp, #16]
    6264:	2b00      	cmp	r3, #0
    6266:	f000 80e0 	beq.w	642a <getTrngSource+0x24e>
    626a:	4620      	mov	r0, r4
    626c:	a904      	add	r1, sp, #16
    626e:	f000 fc6b 	bl	6b48 <LLF_RND_GetFastestRosc>
    6272:	b1b8      	cbz	r0, 62a4 <getTrngSource+0xc8>
    6274:	4b83      	ldr	r3, [pc, #524]	; (6484 <getTrngSource+0x2a8>)
    6276:	4298      	cmp	r0, r3
    6278:	f040 80ab 	bne.w	63d2 <getTrngSource+0x1f6>
    627c:	9002      	str	r0, [sp, #8]
    627e:	f000 fc73 	bl	6b68 <LLF_RND_TurnOffTrng>
    6282:	9802      	ldr	r0, [sp, #8]
    6284:	b00d      	add	sp, #52	; 0x34
    6286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    628a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    628e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    6292:	3001      	adds	r0, #1
    6294:	bf0c      	ite	eq
    6296:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    629a:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    629e:	e7a8      	b.n	61f2 <getTrngSource+0x16>
    62a0:	4879      	ldr	r0, [pc, #484]	; (6488 <getTrngSource+0x2ac>)
    62a2:	e7eb      	b.n	627c <getTrngSource+0xa0>
    62a4:	4621      	mov	r1, r4
    62a6:	9804      	ldr	r0, [sp, #16]
    62a8:	f000 fc30 	bl	6b0c <LLF_RND_GetRoscSampleCnt>
    62ac:	2800      	cmp	r0, #0
    62ae:	d1e1      	bne.n	6274 <getTrngSource+0x98>
    62b0:	9f04      	ldr	r7, [sp, #16]
    62b2:	2f08      	cmp	r7, #8
    62b4:	f000 80bd 	beq.w	6432 <getTrngSource+0x256>
    62b8:	2f04      	cmp	r7, #4
    62ba:	f000 80bc 	beq.w	6436 <getTrngSource+0x25a>
    62be:	f1a7 0702 	sub.w	r7, r7, #2
    62c2:	fab7 f787 	clz	r7, r7
    62c6:	097f      	lsrs	r7, r7, #5
    62c8:	2301      	movs	r3, #1
    62ca:	4619      	mov	r1, r3
    62cc:	486f      	ldr	r0, [pc, #444]	; (648c <getTrngSource+0x2b0>)
    62ce:	6003      	str	r3, [r0, #0]
    62d0:	f840 3c84 	str.w	r3, [r0, #-132]
    62d4:	4b6d      	ldr	r3, [pc, #436]	; (648c <getTrngSource+0x2b0>)
    62d6:	4869      	ldr	r0, [pc, #420]	; (647c <getTrngSource+0x2a0>)
    62d8:	6019      	str	r1, [r3, #0]
    62da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62dc:	6003      	str	r3, [r0, #0]
    62de:	6800      	ldr	r0, [r0, #0]
    62e0:	4283      	cmp	r3, r0
    62e2:	d1f7      	bne.n	62d4 <getTrngSource+0xf8>
    62e4:	2300      	movs	r3, #0
    62e6:	4a6a      	ldr	r2, [pc, #424]	; (6490 <getTrngSource+0x2b4>)
    62e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62ec:	6013      	str	r3, [r2, #0]
    62ee:	f7ff fd0d 	bl	5d0c <CC_HalClearInterruptBit>
    62f2:	2300      	movs	r3, #0
    62f4:	f06f 011b 	mvn.w	r1, #27
    62f8:	4618      	mov	r0, r3
    62fa:	4b66      	ldr	r3, [pc, #408]	; (6494 <getTrngSource+0x2b8>)
    62fc:	6019      	str	r1, [r3, #0]
    62fe:	f7ff fd13 	bl	5d28 <CC_HalMaskInterrupt>
    6302:	4965      	ldr	r1, [pc, #404]	; (6498 <getTrngSource+0x2bc>)
    6304:	4b65      	ldr	r3, [pc, #404]	; (649c <getTrngSource+0x2c0>)
    6306:	600f      	str	r7, [r1, #0]
    6308:	6818      	ldr	r0, [r3, #0]
    630a:	4f5d      	ldr	r7, [pc, #372]	; (6480 <getTrngSource+0x2a4>)
    630c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6310:	f7ff fd0a 	bl	5d28 <CC_HalMaskInterrupt>
    6314:	210a      	movs	r1, #10
    6316:	2201      	movs	r2, #1
    6318:	4b57      	ldr	r3, [pc, #348]	; (6478 <getTrngSource+0x29c>)
    631a:	4861      	ldr	r0, [pc, #388]	; (64a0 <getTrngSource+0x2c4>)
    631c:	6019      	str	r1, [r3, #0]
    631e:	6921      	ldr	r1, [r4, #16]
    6320:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6322:	fba7 c101 	umull	ip, r1, r7, r1
    6326:	0909      	lsrs	r1, r1, #4
    6328:	fb03 f301 	mul.w	r3, r3, r1
    632c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6330:	03db      	lsls	r3, r3, #15
    6332:	099b      	lsrs	r3, r3, #6
    6334:	6003      	str	r3, [r0, #0]
    6336:	4b56      	ldr	r3, [pc, #344]	; (6490 <getTrngSource+0x2b4>)
    6338:	a805      	add	r0, sp, #20
    633a:	601a      	str	r2, [r3, #0]
    633c:	9904      	ldr	r1, [sp, #16]
    633e:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    6342:	020b      	lsls	r3, r1, #8
    6344:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    6348:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    634c:	4313      	orrs	r3, r2
    634e:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    6352:	f000 fbcb 	bl	6aec <LLF_RND_WaitRngInterrupt>
    6356:	9b05      	ldr	r3, [sp, #20]
    6358:	f003 031a 	and.w	r3, r3, #26
    635c:	4303      	orrs	r3, r0
    635e:	d138      	bne.n	63d2 <getTrngSource+0x1f6>
    6360:	4b50      	ldr	r3, [pc, #320]	; (64a4 <getTrngSource+0x2c8>)
    6362:	fba7 2705 	umull	r2, r7, r7, r5
    6366:	681a      	ldr	r2, [r3, #0]
    6368:	3314      	adds	r3, #20
    636a:	9206      	str	r2, [sp, #24]
    636c:	f853 2c10 	ldr.w	r2, [r3, #-16]
    6370:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    6374:	9207      	str	r2, [sp, #28]
    6376:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    637a:	9208      	str	r2, [sp, #32]
    637c:	f853 2c08 	ldr.w	r2, [r3, #-8]
    6380:	9209      	str	r2, [sp, #36]	; 0x24
    6382:	f853 2c04 	ldr.w	r2, [r3, #-4]
    6386:	920a      	str	r2, [sp, #40]	; 0x28
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	930b      	str	r3, [sp, #44]	; 0x2c
    638c:	d102      	bne.n	6394 <getTrngSource+0x1b8>
    638e:	f1ba 0f00 	cmp.w	sl, #0
    6392:	d141      	bne.n	6418 <getTrngSource+0x23c>
    6394:	2218      	movs	r2, #24
    6396:	4630      	mov	r0, r6
    6398:	eb0d 0102 	add.w	r1, sp, r2
    639c:	f000 fb16 	bl	69cc <CC_PalMemCopyPlat>
    63a0:	3d18      	subs	r5, #24
    63a2:	3618      	adds	r6, #24
    63a4:	f109 0901 	add.w	r9, r9, #1
    63a8:	2d00      	cmp	r5, #0
    63aa:	f47f af4f 	bne.w	624c <getTrngSource+0x70>
    63ae:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    63b2:	d85d      	bhi.n	6470 <getTrngSource+0x294>
    63b4:	9d03      	ldr	r5, [sp, #12]
    63b6:	4659      	mov	r1, fp
    63b8:	4628      	mov	r0, r5
    63ba:	6962      	ldr	r2, [r4, #20]
    63bc:	f7ff fe7c 	bl	60b8 <LLF_RND_RepetitionCounterTest.part.0>
    63c0:	2800      	cmp	r0, #0
    63c2:	d04b      	beq.n	645c <getTrngSource+0x280>
    63c4:	2300      	movs	r3, #0
    63c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    63c8:	6013      	str	r3, [r2, #0]
    63ca:	4b2e      	ldr	r3, [pc, #184]	; (6484 <getTrngSource+0x2a8>)
    63cc:	4298      	cmp	r0, r3
    63ce:	f43f af55 	beq.w	627c <getTrngSource+0xa0>
    63d2:	9d04      	ldr	r5, [sp, #16]
    63d4:	2d08      	cmp	r5, #8
    63d6:	d034      	beq.n	6442 <getTrngSource+0x266>
    63d8:	2200      	movs	r2, #0
    63da:	ab04      	add	r3, sp, #16
    63dc:	4621      	mov	r1, r4
    63de:	4640      	mov	r0, r8
    63e0:	006d      	lsls	r5, r5, #1
    63e2:	9200      	str	r2, [sp, #0]
    63e4:	9504      	str	r5, [sp, #16]
    63e6:	f7ff fdbb 	bl	5f60 <startTrngHW>
    63ea:	4b2f      	ldr	r3, [pc, #188]	; (64a8 <getTrngSource+0x2cc>)
    63ec:	4298      	cmp	r0, r3
    63ee:	d024      	beq.n	643a <getTrngSource+0x25e>
    63f0:	2800      	cmp	r0, #0
    63f2:	f47f af43 	bne.w	627c <getTrngSource+0xa0>
    63f6:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    63fa:	0a13      	lsrs	r3, r2, #8
    63fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6400:	4313      	orrs	r3, r2
    6402:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6406:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    640a:	9b02      	ldr	r3, [sp, #8]
    640c:	3b01      	subs	r3, #1
    640e:	9302      	str	r3, [sp, #8]
    6410:	f47f af11 	bne.w	6236 <getTrngSource+0x5a>
    6414:	2000      	movs	r0, #0
    6416:	e731      	b.n	627c <getTrngSource+0xa0>
    6418:	4630      	mov	r0, r6
    641a:	4652      	mov	r2, sl
    641c:	a906      	add	r1, sp, #24
    641e:	f000 fad5 	bl	69cc <CC_PalMemCopyPlat>
    6422:	eba5 050a 	sub.w	r5, r5, sl
    6426:	4456      	add	r6, sl
    6428:	e7bc      	b.n	63a4 <getTrngSource+0x1c8>
    642a:	481f      	ldr	r0, [pc, #124]	; (64a8 <getTrngSource+0x2cc>)
    642c:	e722      	b.n	6274 <getTrngSource+0x98>
    642e:	481f      	ldr	r0, [pc, #124]	; (64ac <getTrngSource+0x2d0>)
    6430:	e720      	b.n	6274 <getTrngSource+0x98>
    6432:	2703      	movs	r7, #3
    6434:	e748      	b.n	62c8 <getTrngSource+0xec>
    6436:	2702      	movs	r7, #2
    6438:	e746      	b.n	62c8 <getTrngSource+0xec>
    643a:	6a23      	ldr	r3, [r4, #32]
    643c:	2b00      	cmp	r3, #0
    643e:	f43f af1d 	beq.w	627c <getTrngSource+0xa0>
    6442:	481b      	ldr	r0, [pc, #108]	; (64b0 <getTrngSource+0x2d4>)
    6444:	e71a      	b.n	627c <getTrngSource+0xa0>
    6446:	2201      	movs	r2, #1
    6448:	4621      	mov	r1, r4
    644a:	4638      	mov	r0, r7
    644c:	9600      	str	r6, [sp, #0]
    644e:	ab04      	add	r3, sp, #16
    6450:	f7ff fd86 	bl	5f60 <startTrngHW>
    6454:	2800      	cmp	r0, #0
    6456:	f43f aedf 	beq.w	6218 <getTrngSource+0x3c>
    645a:	e70f      	b.n	627c <getTrngSource+0xa0>
    645c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6460:	4659      	mov	r1, fp
    6462:	4628      	mov	r0, r5
    6464:	69a2      	ldr	r2, [r4, #24]
    6466:	f7ff fe53 	bl	6110 <LLF_RND_AdaptiveProportionTest>
    646a:	2800      	cmp	r0, #0
    646c:	d1aa      	bne.n	63c4 <getTrngSource+0x1e8>
    646e:	e7d1      	b.n	6414 <getTrngSource+0x238>
    6470:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6472:	601d      	str	r5, [r3, #0]
    6474:	e7ad      	b.n	63d2 <getTrngSource+0x1f6>
    6476:	bf00      	nop
    6478:	50841138 	.word	0x50841138
    647c:	50841130 	.word	0x50841130
    6480:	aaaaaaab 	.word	0xaaaaaaab
    6484:	00f10c02 	.word	0x00f10c02
    6488:	00f10c30 	.word	0x00f10c30
    648c:	508411c4 	.word	0x508411c4
    6490:	5084112c 	.word	0x5084112c
    6494:	50841100 	.word	0x50841100
    6498:	5084110c 	.word	0x5084110c
    649c:	50841a04 	.word	0x50841a04
    64a0:	508411d8 	.word	0x508411d8
    64a4:	50841114 	.word	0x50841114
    64a8:	00f10c31 	.word	0x00f10c31
    64ac:	00f10c35 	.word	0x00f10c35
    64b0:	00f10c32 	.word	0x00f10c32

000064b4 <LLF_RND_GetTrngSource>:
    64b4:	2300      	movs	r3, #0
    64b6:	b430      	push	{r4, r5}
    64b8:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    64bc:	9304      	str	r3, [sp, #16]
    64be:	9b02      	ldr	r3, [sp, #8]
    64c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
    64c4:	bc30      	pop	{r4, r5}
    64c6:	f7ff be89 	b.w	61dc <getTrngSource>
    64ca:	bf00      	nop

000064cc <LLF_RND_RunTrngStartupTest>:
    64cc:	b510      	push	{r4, lr}
    64ce:	2401      	movs	r4, #1
    64d0:	b086      	sub	sp, #24
    64d2:	ab05      	add	r3, sp, #20
    64d4:	e9cd 2401 	strd	r2, r4, [sp, #4]
    64d8:	9300      	str	r3, [sp, #0]
    64da:	2200      	movs	r2, #0
    64dc:	ab04      	add	r3, sp, #16
    64de:	f7ff fe7d 	bl	61dc <getTrngSource>
    64e2:	b006      	add	sp, #24
    64e4:	bd10      	pop	{r4, pc}
    64e6:	bf00      	nop

000064e8 <mbedtls_hardware_poll>:
    64e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64ec:	b088      	sub	sp, #32
    64ee:	9205      	str	r2, [sp, #20]
    64f0:	2900      	cmp	r1, #0
    64f2:	d068      	beq.n	65c6 <mbedtls_hardware_poll+0xde>
    64f4:	461c      	mov	r4, r3
    64f6:	2b00      	cmp	r3, #0
    64f8:	d065      	beq.n	65c6 <mbedtls_hardware_poll+0xde>
    64fa:	4615      	mov	r5, r2
    64fc:	2a00      	cmp	r2, #0
    64fe:	d062      	beq.n	65c6 <mbedtls_hardware_poll+0xde>
    6500:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 65e8 <mbedtls_hardware_poll+0x100>
    6504:	460e      	mov	r6, r1
    6506:	f8d8 0000 	ldr.w	r0, [r8]
    650a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    650e:	f7ff fca3 	bl	5e58 <CC_PalMutexLock>
    6512:	2800      	cmp	r0, #0
    6514:	d14c      	bne.n	65b0 <mbedtls_hardware_poll+0xc8>
    6516:	2000      	movs	r0, #0
    6518:	f7ff fcce 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    651c:	2800      	cmp	r0, #0
    651e:	d143      	bne.n	65a8 <mbedtls_hardware_poll+0xc0>
    6520:	482a      	ldr	r0, [pc, #168]	; (65cc <mbedtls_hardware_poll+0xe4>)
    6522:	f000 fa15 	bl	6950 <RNG_PLAT_SetUserRngParameters>
    6526:	b1e8      	cbz	r0, 6564 <mbedtls_hardware_poll+0x7c>
    6528:	2001      	movs	r0, #1
    652a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    652e:	f7ff fcc3 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    6532:	2800      	cmp	r0, #0
    6534:	d134      	bne.n	65a0 <mbedtls_hardware_poll+0xb8>
    6536:	f44f 7108 	mov.w	r1, #544	; 0x220
    653a:	4825      	ldr	r0, [pc, #148]	; (65d0 <mbedtls_hardware_poll+0xe8>)
    653c:	f7fe fe44 	bl	51c8 <mbedtls_zeroize_internal>
    6540:	21dc      	movs	r1, #220	; 0xdc
    6542:	4824      	ldr	r0, [pc, #144]	; (65d4 <mbedtls_hardware_poll+0xec>)
    6544:	f7fe fe40 	bl	51c8 <mbedtls_zeroize_internal>
    6548:	4820      	ldr	r0, [pc, #128]	; (65cc <mbedtls_hardware_poll+0xe4>)
    654a:	2128      	movs	r1, #40	; 0x28
    654c:	f7fe fe3c 	bl	51c8 <mbedtls_zeroize_internal>
    6550:	f8d8 0000 	ldr.w	r0, [r8]
    6554:	f7ff fc88 	bl	5e68 <CC_PalMutexUnlock>
    6558:	2800      	cmp	r0, #0
    655a:	d12d      	bne.n	65b8 <mbedtls_hardware_poll+0xd0>
    655c:	4638      	mov	r0, r7
    655e:	b008      	add	sp, #32
    6560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6564:	491a      	ldr	r1, [pc, #104]	; (65d0 <mbedtls_hardware_poll+0xe8>)
    6566:	ab07      	add	r3, sp, #28
    6568:	4602      	mov	r2, r0
    656a:	9003      	str	r0, [sp, #12]
    656c:	9102      	str	r1, [sp, #8]
    656e:	9300      	str	r3, [sp, #0]
    6570:	4916      	ldr	r1, [pc, #88]	; (65cc <mbedtls_hardware_poll+0xe4>)
    6572:	4818      	ldr	r0, [pc, #96]	; (65d4 <mbedtls_hardware_poll+0xec>)
    6574:	9401      	str	r4, [sp, #4]
    6576:	ab05      	add	r3, sp, #20
    6578:	f7ff ff9c 	bl	64b4 <LLF_RND_GetTrngSource>
    657c:	2800      	cmp	r0, #0
    657e:	d1d3      	bne.n	6528 <mbedtls_hardware_poll+0x40>
    6580:	6823      	ldr	r3, [r4, #0]
    6582:	42ab      	cmp	r3, r5
    6584:	d3d0      	bcc.n	6528 <mbedtls_hardware_poll+0x40>
    6586:	9907      	ldr	r1, [sp, #28]
    6588:	4607      	mov	r7, r0
    658a:	462a      	mov	r2, r5
    658c:	4630      	mov	r0, r6
    658e:	3108      	adds	r1, #8
    6590:	f000 fa1c 	bl	69cc <CC_PalMemCopyPlat>
    6594:	2001      	movs	r0, #1
    6596:	6025      	str	r5, [r4, #0]
    6598:	f7ff fc8e 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    659c:	2800      	cmp	r0, #0
    659e:	d0ca      	beq.n	6536 <mbedtls_hardware_poll+0x4e>
    65a0:	480d      	ldr	r0, [pc, #52]	; (65d8 <mbedtls_hardware_poll+0xf0>)
    65a2:	f7fe fd0f 	bl	4fc4 <CC_PalAbort>
    65a6:	e7c6      	b.n	6536 <mbedtls_hardware_poll+0x4e>
    65a8:	480c      	ldr	r0, [pc, #48]	; (65dc <mbedtls_hardware_poll+0xf4>)
    65aa:	f7fe fd0b 	bl	4fc4 <CC_PalAbort>
    65ae:	e7b7      	b.n	6520 <mbedtls_hardware_poll+0x38>
    65b0:	480b      	ldr	r0, [pc, #44]	; (65e0 <mbedtls_hardware_poll+0xf8>)
    65b2:	f7fe fd07 	bl	4fc4 <CC_PalAbort>
    65b6:	e7ae      	b.n	6516 <mbedtls_hardware_poll+0x2e>
    65b8:	480a      	ldr	r0, [pc, #40]	; (65e4 <mbedtls_hardware_poll+0xfc>)
    65ba:	f7fe fd03 	bl	4fc4 <CC_PalAbort>
    65be:	4638      	mov	r0, r7
    65c0:	b008      	add	sp, #32
    65c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    65ca:	e7c7      	b.n	655c <mbedtls_hardware_poll+0x74>
    65cc:	200012cc 	.word	0x200012cc
    65d0:	200010ac 	.word	0x200010ac
    65d4:	20000fd0 	.word	0x20000fd0
    65d8:	00008810 	.word	0x00008810
    65dc:	000087f0 	.word	0x000087f0
    65e0:	000087d8 	.word	0x000087d8
    65e4:	00008868 	.word	0x00008868
    65e8:	200000bc 	.word	0x200000bc

000065ec <cc_mbedtls_aes_init>:
    65ec:	b510      	push	{r4, lr}
    65ee:	4604      	mov	r4, r0
    65f0:	b130      	cbz	r0, 6600 <cc_mbedtls_aes_init+0x14>
    65f2:	2200      	movs	r2, #0
    65f4:	2301      	movs	r3, #1
    65f6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    65fa:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    65fe:	bd10      	pop	{r4, pc}
    6600:	4801      	ldr	r0, [pc, #4]	; (6608 <cc_mbedtls_aes_init+0x1c>)
    6602:	f7fe fcdf 	bl	4fc4 <CC_PalAbort>
    6606:	e7f4      	b.n	65f2 <cc_mbedtls_aes_init+0x6>
    6608:	00008880 	.word	0x00008880

0000660c <cc_mbedtls_aes_free>:
    660c:	b118      	cbz	r0, 6616 <cc_mbedtls_aes_free+0xa>
    660e:	2274      	movs	r2, #116	; 0x74
    6610:	2100      	movs	r1, #0
    6612:	f000 b9dd 	b.w	69d0 <CC_PalMemSetPlat>
    6616:	4770      	bx	lr

00006618 <cc_mbedtls_aes_setkey_enc>:
    6618:	b188      	cbz	r0, 663e <cc_mbedtls_aes_setkey_enc+0x26>
    661a:	b199      	cbz	r1, 6644 <cc_mbedtls_aes_setkey_enc+0x2c>
    661c:	b510      	push	{r4, lr}
    661e:	2400      	movs	r4, #0
    6620:	2a80      	cmp	r2, #128	; 0x80
    6622:	6384      	str	r4, [r0, #56]	; 0x38
    6624:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    6628:	d106      	bne.n	6638 <cc_mbedtls_aes_setkey_enc+0x20>
    662a:	6304      	str	r4, [r0, #48]	; 0x30
    662c:	2210      	movs	r2, #16
    662e:	3010      	adds	r0, #16
    6630:	f000 f9cc 	bl	69cc <CC_PalMemCopyPlat>
    6634:	4620      	mov	r0, r4
    6636:	bd10      	pop	{r4, pc}
    6638:	f06f 001f 	mvn.w	r0, #31
    663c:	bd10      	pop	{r4, pc}
    663e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6642:	4770      	bx	lr
    6644:	f06f 001f 	mvn.w	r0, #31
    6648:	4770      	bx	lr
    664a:	bf00      	nop

0000664c <cc_mbedtls_aes_crypt_ecb>:
    664c:	b328      	cbz	r0, 669a <cc_mbedtls_aes_crypt_ecb+0x4e>
    664e:	b322      	cbz	r2, 669a <cc_mbedtls_aes_crypt_ecb+0x4e>
    6650:	b31b      	cbz	r3, 669a <cc_mbedtls_aes_crypt_ecb+0x4e>
    6652:	2901      	cmp	r1, #1
    6654:	d821      	bhi.n	669a <cc_mbedtls_aes_crypt_ecb+0x4e>
    6656:	b570      	push	{r4, r5, r6, lr}
    6658:	4604      	mov	r4, r0
    665a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    665c:	b086      	sub	sp, #24
    665e:	d017      	beq.n	6690 <cc_mbedtls_aes_crypt_ecb+0x44>
    6660:	2901      	cmp	r1, #1
    6662:	d117      	bne.n	6694 <cc_mbedtls_aes_crypt_ecb+0x48>
    6664:	2510      	movs	r5, #16
    6666:	2100      	movs	r1, #0
    6668:	eb0d 0605 	add.w	r6, sp, r5
    666c:	6361      	str	r1, [r4, #52]	; 0x34
    666e:	4610      	mov	r0, r2
    6670:	4629      	mov	r1, r5
    6672:	9500      	str	r5, [sp, #0]
    6674:	aa02      	add	r2, sp, #8
    6676:	9601      	str	r6, [sp, #4]
    6678:	f000 fa84 	bl	6b84 <SetDataBuffersInfo>
    667c:	b950      	cbnz	r0, 6694 <cc_mbedtls_aes_crypt_ecb+0x48>
    667e:	462b      	mov	r3, r5
    6680:	4632      	mov	r2, r6
    6682:	4620      	mov	r0, r4
    6684:	a902      	add	r1, sp, #8
    6686:	f000 fd37 	bl	70f8 <ProcessAesDrv>
    668a:	b918      	cbnz	r0, 6694 <cc_mbedtls_aes_crypt_ecb+0x48>
    668c:	b006      	add	sp, #24
    668e:	bd70      	pop	{r4, r5, r6, pc}
    6690:	2900      	cmp	r1, #0
    6692:	d0e7      	beq.n	6664 <cc_mbedtls_aes_crypt_ecb+0x18>
    6694:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6698:	e7f8      	b.n	668c <cc_mbedtls_aes_crypt_ecb+0x40>
    669a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    669e:	4770      	bx	lr

000066a0 <cc_mbedtls_sha256_init>:
    66a0:	b510      	push	{r4, lr}
    66a2:	4604      	mov	r4, r0
    66a4:	b128      	cbz	r0, 66b2 <cc_mbedtls_sha256_init+0x12>
    66a6:	4620      	mov	r0, r4
    66a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66ac:	21f0      	movs	r1, #240	; 0xf0
    66ae:	f000 b991 	b.w	69d4 <CC_PalMemSetZeroPlat>
    66b2:	4804      	ldr	r0, [pc, #16]	; (66c4 <cc_mbedtls_sha256_init+0x24>)
    66b4:	f7fe fc86 	bl	4fc4 <CC_PalAbort>
    66b8:	4620      	mov	r0, r4
    66ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    66be:	21f0      	movs	r1, #240	; 0xf0
    66c0:	f000 b988 	b.w	69d4 <CC_PalMemSetZeroPlat>
    66c4:	00008894 	.word	0x00008894

000066c8 <cc_mbedtls_sha256_free>:
    66c8:	b110      	cbz	r0, 66d0 <cc_mbedtls_sha256_free+0x8>
    66ca:	21f0      	movs	r1, #240	; 0xf0
    66cc:	f7fe bd7c 	b.w	51c8 <mbedtls_zeroize_internal>
    66d0:	4770      	bx	lr
    66d2:	bf00      	nop

000066d4 <cc_mbedtls_sha256_starts>:
    66d4:	b508      	push	{r3, lr}
    66d6:	b161      	cbz	r1, 66f2 <cc_mbedtls_sha256_starts+0x1e>
    66d8:	2901      	cmp	r1, #1
    66da:	d107      	bne.n	66ec <cc_mbedtls_sha256_starts+0x18>
    66dc:	2102      	movs	r1, #2
    66de:	f000 f85b 	bl	6798 <mbedtls_sha_starts_internal>
    66e2:	2800      	cmp	r0, #0
    66e4:	bf18      	it	ne
    66e6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    66ea:	bd08      	pop	{r3, pc}
    66ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
    66f0:	bd08      	pop	{r3, pc}
    66f2:	2101      	movs	r1, #1
    66f4:	f000 f850 	bl	6798 <mbedtls_sha_starts_internal>
    66f8:	e7f3      	b.n	66e2 <cc_mbedtls_sha256_starts+0xe>
    66fa:	bf00      	nop

000066fc <cc_mbedtls_sha256_update>:
    66fc:	b570      	push	{r4, r5, r6, lr}
    66fe:	188e      	adds	r6, r1, r2
    6700:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    6704:	460b      	mov	r3, r1
    6706:	4614      	mov	r4, r2
    6708:	4605      	mov	r5, r0
    670a:	b0a0      	sub	sp, #128	; 0x80
    670c:	d801      	bhi.n	6712 <cc_mbedtls_sha256_update+0x16>
    670e:	2a80      	cmp	r2, #128	; 0x80
    6710:	d90c      	bls.n	672c <cc_mbedtls_sha256_update+0x30>
    6712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6716:	d917      	bls.n	6748 <cc_mbedtls_sha256_update+0x4c>
    6718:	4622      	mov	r2, r4
    671a:	4619      	mov	r1, r3
    671c:	4628      	mov	r0, r5
    671e:	f000 f87d 	bl	681c <mbedtls_sha_update_internal>
    6722:	4604      	mov	r4, r0
    6724:	b984      	cbnz	r4, 6748 <cc_mbedtls_sha256_update+0x4c>
    6726:	4620      	mov	r0, r4
    6728:	b020      	add	sp, #128	; 0x80
    672a:	bd70      	pop	{r4, r5, r6, pc}
    672c:	4668      	mov	r0, sp
    672e:	f000 f94d 	bl	69cc <CC_PalMemCopyPlat>
    6732:	4622      	mov	r2, r4
    6734:	4669      	mov	r1, sp
    6736:	4628      	mov	r0, r5
    6738:	f000 f870 	bl	681c <mbedtls_sha_update_internal>
    673c:	2180      	movs	r1, #128	; 0x80
    673e:	4604      	mov	r4, r0
    6740:	4668      	mov	r0, sp
    6742:	f000 f947 	bl	69d4 <CC_PalMemSetZeroPlat>
    6746:	e7ed      	b.n	6724 <cc_mbedtls_sha256_update+0x28>
    6748:	f06f 0436 	mvn.w	r4, #54	; 0x36
    674c:	e7eb      	b.n	6726 <cc_mbedtls_sha256_update+0x2a>
    674e:	bf00      	nop

00006750 <cc_mbedtls_sha256_finish>:
    6750:	b570      	push	{r4, r5, r6, lr}
    6752:	b1e8      	cbz	r0, 6790 <cc_mbedtls_sha256_finish+0x40>
    6754:	460e      	mov	r6, r1
    6756:	b1d9      	cbz	r1, 6790 <cc_mbedtls_sha256_finish+0x40>
    6758:	4604      	mov	r4, r0
    675a:	f000 f831 	bl	67c0 <mbedtls_sha_finish_internal>
    675e:	4605      	mov	r5, r0
    6760:	b9b0      	cbnz	r0, 6790 <cc_mbedtls_sha256_finish+0x40>
    6762:	6823      	ldr	r3, [r4, #0]
    6764:	2b01      	cmp	r3, #1
    6766:	d00b      	beq.n	6780 <cc_mbedtls_sha256_finish+0x30>
    6768:	2b02      	cmp	r3, #2
    676a:	d001      	beq.n	6770 <cc_mbedtls_sha256_finish+0x20>
    676c:	4628      	mov	r0, r5
    676e:	bd70      	pop	{r4, r5, r6, pc}
    6770:	4630      	mov	r0, r6
    6772:	221c      	movs	r2, #28
    6774:	f104 0108 	add.w	r1, r4, #8
    6778:	f000 f928 	bl	69cc <CC_PalMemCopyPlat>
    677c:	4628      	mov	r0, r5
    677e:	bd70      	pop	{r4, r5, r6, pc}
    6780:	4630      	mov	r0, r6
    6782:	2220      	movs	r2, #32
    6784:	f104 0108 	add.w	r1, r4, #8
    6788:	f000 f920 	bl	69cc <CC_PalMemCopyPlat>
    678c:	4628      	mov	r0, r5
    678e:	bd70      	pop	{r4, r5, r6, pc}
    6790:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6794:	e7ea      	b.n	676c <cc_mbedtls_sha256_finish+0x1c>
    6796:	bf00      	nop

00006798 <mbedtls_sha_starts_internal>:
    6798:	b178      	cbz	r0, 67ba <mbedtls_sha_starts_internal+0x22>
    679a:	b538      	push	{r3, r4, r5, lr}
    679c:	460d      	mov	r5, r1
    679e:	21f0      	movs	r1, #240	; 0xf0
    67a0:	4604      	mov	r4, r0
    67a2:	f000 f917 	bl	69d4 <CC_PalMemSetZeroPlat>
    67a6:	2340      	movs	r3, #64	; 0x40
    67a8:	4620      	mov	r0, r4
    67aa:	6025      	str	r5, [r4, #0]
    67ac:	65e3      	str	r3, [r4, #92]	; 0x5c
    67ae:	f000 fa21 	bl	6bf4 <InitHashDrv>
    67b2:	3800      	subs	r0, #0
    67b4:	bf18      	it	ne
    67b6:	2001      	movne	r0, #1
    67b8:	bd38      	pop	{r3, r4, r5, pc}
    67ba:	2001      	movs	r0, #1
    67bc:	4770      	bx	lr
    67be:	bf00      	nop

000067c0 <mbedtls_sha_finish_internal>:
    67c0:	b570      	push	{r4, r5, r6, lr}
    67c2:	6e05      	ldr	r5, [r0, #96]	; 0x60
    67c4:	b0a4      	sub	sp, #144	; 0x90
    67c6:	4604      	mov	r4, r0
    67c8:	ae04      	add	r6, sp, #16
    67ca:	b9e5      	cbnz	r5, 6806 <mbedtls_sha_finish_internal+0x46>
    67cc:	2201      	movs	r2, #1
    67ce:	2300      	movs	r3, #0
    67d0:	6062      	str	r2, [r4, #4]
    67d2:	4630      	mov	r0, r6
    67d4:	4629      	mov	r1, r5
    67d6:	e9cd 3300 	strd	r3, r3, [sp]
    67da:	aa02      	add	r2, sp, #8
    67dc:	f000 f9d2 	bl	6b84 <SetDataBuffersInfo>
    67e0:	b110      	cbz	r0, 67e8 <mbedtls_sha_finish_internal+0x28>
    67e2:	2001      	movs	r0, #1
    67e4:	b024      	add	sp, #144	; 0x90
    67e6:	bd70      	pop	{r4, r5, r6, pc}
    67e8:	462a      	mov	r2, r5
    67ea:	4620      	mov	r0, r4
    67ec:	a902      	add	r1, sp, #8
    67ee:	f000 fa2b 	bl	6c48 <ProcessHashDrv>
    67f2:	2800      	cmp	r0, #0
    67f4:	d1f5      	bne.n	67e2 <mbedtls_sha_finish_internal+0x22>
    67f6:	4620      	mov	r0, r4
    67f8:	f000 fb50 	bl	6e9c <FinishHashDrv>
    67fc:	2800      	cmp	r0, #0
    67fe:	d1f0      	bne.n	67e2 <mbedtls_sha_finish_internal+0x22>
    6800:	6620      	str	r0, [r4, #96]	; 0x60
    6802:	b024      	add	sp, #144	; 0x90
    6804:	bd70      	pop	{r4, r5, r6, pc}
    6806:	2d80      	cmp	r5, #128	; 0x80
    6808:	462a      	mov	r2, r5
    680a:	4630      	mov	r0, r6
    680c:	bf28      	it	cs
    680e:	2280      	movcs	r2, #128	; 0x80
    6810:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6814:	f000 f8da 	bl	69cc <CC_PalMemCopyPlat>
    6818:	6e25      	ldr	r5, [r4, #96]	; 0x60
    681a:	e7d7      	b.n	67cc <mbedtls_sha_finish_internal+0xc>

0000681c <mbedtls_sha_update_internal>:
    681c:	2800      	cmp	r0, #0
    681e:	d055      	beq.n	68cc <mbedtls_sha_update_internal+0xb0>
    6820:	b5f0      	push	{r4, r5, r6, r7, lr}
    6822:	4615      	mov	r5, r2
    6824:	b0a5      	sub	sp, #148	; 0x94
    6826:	b1b2      	cbz	r2, 6856 <mbedtls_sha_update_internal+0x3a>
    6828:	460e      	mov	r6, r1
    682a:	b351      	cbz	r1, 6882 <mbedtls_sha_update_internal+0x66>
    682c:	4604      	mov	r4, r0
    682e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    6832:	1a1a      	subs	r2, r3, r0
    6834:	fbb2 f7f3 	udiv	r7, r2, r3
    6838:	fb03 2717 	mls	r7, r3, r7, r2
    683c:	42af      	cmp	r7, r5
    683e:	bf28      	it	cs
    6840:	462f      	movcs	r7, r5
    6842:	2f00      	cmp	r7, #0
    6844:	d144      	bne.n	68d0 <mbedtls_sha_update_internal+0xb4>
    6846:	4283      	cmp	r3, r0
    6848:	d008      	beq.n	685c <mbedtls_sha_update_internal+0x40>
    684a:	fbb5 f7f3 	udiv	r7, r5, r3
    684e:	fb03 f707 	mul.w	r7, r3, r7
    6852:	b9cf      	cbnz	r7, 6888 <mbedtls_sha_update_internal+0x6c>
    6854:	bb6d      	cbnz	r5, 68b2 <mbedtls_sha_update_internal+0x96>
    6856:	4628      	mov	r0, r5
    6858:	b025      	add	sp, #148	; 0x94
    685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    685c:	2b80      	cmp	r3, #128	; 0x80
    685e:	bf28      	it	cs
    6860:	2380      	movcs	r3, #128	; 0x80
    6862:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6866:	461a      	mov	r2, r3
    6868:	a804      	add	r0, sp, #16
    686a:	f000 f8af 	bl	69cc <CC_PalMemCopyPlat>
    686e:	2300      	movs	r3, #0
    6870:	e9cd 3300 	strd	r3, r3, [sp]
    6874:	a804      	add	r0, sp, #16
    6876:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    6878:	aa02      	add	r2, sp, #8
    687a:	f000 f983 	bl	6b84 <SetDataBuffersInfo>
    687e:	2800      	cmp	r0, #0
    6880:	d033      	beq.n	68ea <mbedtls_sha_update_internal+0xce>
    6882:	2001      	movs	r0, #1
    6884:	b025      	add	sp, #148	; 0x94
    6886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6888:	2300      	movs	r3, #0
    688a:	4639      	mov	r1, r7
    688c:	4630      	mov	r0, r6
    688e:	e9cd 3300 	strd	r3, r3, [sp]
    6892:	aa02      	add	r2, sp, #8
    6894:	f000 f976 	bl	6b84 <SetDataBuffersInfo>
    6898:	2800      	cmp	r0, #0
    689a:	d1f2      	bne.n	6882 <mbedtls_sha_update_internal+0x66>
    689c:	463a      	mov	r2, r7
    689e:	4620      	mov	r0, r4
    68a0:	a902      	add	r1, sp, #8
    68a2:	f000 f9d1 	bl	6c48 <ProcessHashDrv>
    68a6:	2800      	cmp	r0, #0
    68a8:	d1eb      	bne.n	6882 <mbedtls_sha_update_internal+0x66>
    68aa:	1bed      	subs	r5, r5, r7
    68ac:	443e      	add	r6, r7
    68ae:	2d00      	cmp	r5, #0
    68b0:	d0d1      	beq.n	6856 <mbedtls_sha_update_internal+0x3a>
    68b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    68b4:	462a      	mov	r2, r5
    68b6:	3019      	adds	r0, #25
    68b8:	4631      	mov	r1, r6
    68ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    68be:	f000 f885 	bl	69cc <CC_PalMemCopyPlat>
    68c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
    68c4:	2000      	movs	r0, #0
    68c6:	442a      	add	r2, r5
    68c8:	6622      	str	r2, [r4, #96]	; 0x60
    68ca:	e7c5      	b.n	6858 <mbedtls_sha_update_internal+0x3c>
    68cc:	2001      	movs	r0, #1
    68ce:	4770      	bx	lr
    68d0:	f104 0364 	add.w	r3, r4, #100	; 0x64
    68d4:	4418      	add	r0, r3
    68d6:	463a      	mov	r2, r7
    68d8:	f000 f878 	bl	69cc <CC_PalMemCopyPlat>
    68dc:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    68e0:	4438      	add	r0, r7
    68e2:	443e      	add	r6, r7
    68e4:	1bed      	subs	r5, r5, r7
    68e6:	6620      	str	r0, [r4, #96]	; 0x60
    68e8:	e7ad      	b.n	6846 <mbedtls_sha_update_internal+0x2a>
    68ea:	4620      	mov	r0, r4
    68ec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    68ee:	a902      	add	r1, sp, #8
    68f0:	f000 f9aa 	bl	6c48 <ProcessHashDrv>
    68f4:	2800      	cmp	r0, #0
    68f6:	d1c4      	bne.n	6882 <mbedtls_sha_update_internal+0x66>
    68f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    68fa:	6620      	str	r0, [r4, #96]	; 0x60
    68fc:	e7a5      	b.n	684a <mbedtls_sha_update_internal+0x2e>
    68fe:	bf00      	nop

00006900 <cc_mbedtls_sha256>:
    6900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6902:	461c      	mov	r4, r3
    6904:	4605      	mov	r5, r0
    6906:	4811      	ldr	r0, [pc, #68]	; (694c <cc_mbedtls_sha256+0x4c>)
    6908:	460e      	mov	r6, r1
    690a:	4617      	mov	r7, r2
    690c:	f7ff fec8 	bl	66a0 <cc_mbedtls_sha256_init>
    6910:	4621      	mov	r1, r4
    6912:	480e      	ldr	r0, [pc, #56]	; (694c <cc_mbedtls_sha256+0x4c>)
    6914:	f7ff fede 	bl	66d4 <cc_mbedtls_sha256_starts>
    6918:	4604      	mov	r4, r0
    691a:	b120      	cbz	r0, 6926 <cc_mbedtls_sha256+0x26>
    691c:	480b      	ldr	r0, [pc, #44]	; (694c <cc_mbedtls_sha256+0x4c>)
    691e:	f7ff fed3 	bl	66c8 <cc_mbedtls_sha256_free>
    6922:	4620      	mov	r0, r4
    6924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6926:	4632      	mov	r2, r6
    6928:	4629      	mov	r1, r5
    692a:	4808      	ldr	r0, [pc, #32]	; (694c <cc_mbedtls_sha256+0x4c>)
    692c:	f7ff fee6 	bl	66fc <cc_mbedtls_sha256_update>
    6930:	4604      	mov	r4, r0
    6932:	2800      	cmp	r0, #0
    6934:	d1f2      	bne.n	691c <cc_mbedtls_sha256+0x1c>
    6936:	4639      	mov	r1, r7
    6938:	4804      	ldr	r0, [pc, #16]	; (694c <cc_mbedtls_sha256+0x4c>)
    693a:	f7ff ff09 	bl	6750 <cc_mbedtls_sha256_finish>
    693e:	4604      	mov	r4, r0
    6940:	4802      	ldr	r0, [pc, #8]	; (694c <cc_mbedtls_sha256+0x4c>)
    6942:	f7ff fec1 	bl	66c8 <cc_mbedtls_sha256_free>
    6946:	4620      	mov	r0, r4
    6948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    694a:	bf00      	nop
    694c:	200012f4 	.word	0x200012f4

00006950 <RNG_PLAT_SetUserRngParameters>:
    6950:	231c      	movs	r3, #28
    6952:	b530      	push	{r4, r5, lr}
    6954:	b083      	sub	sp, #12
    6956:	a901      	add	r1, sp, #4
    6958:	4604      	mov	r4, r0
    695a:	9301      	str	r3, [sp, #4]
    695c:	f000 f83e 	bl	69dc <CC_PalTrngParamGet>
    6960:	4605      	mov	r5, r0
    6962:	b938      	cbnz	r0, 6974 <RNG_PLAT_SetUserRngParameters+0x24>
    6964:	9b01      	ldr	r3, [sp, #4]
    6966:	2b1c      	cmp	r3, #28
    6968:	d007      	beq.n	697a <RNG_PLAT_SetUserRngParameters+0x2a>
    696a:	4d16      	ldr	r5, [pc, #88]	; (69c4 <RNG_PLAT_SetUserRngParameters+0x74>)
    696c:	4620      	mov	r0, r4
    696e:	211c      	movs	r1, #28
    6970:	f000 f830 	bl	69d4 <CC_PalMemSetZeroPlat>
    6974:	4628      	mov	r0, r5
    6976:	b003      	add	sp, #12
    6978:	bd30      	pop	{r4, r5, pc}
    697a:	2101      	movs	r1, #1
    697c:	e9d4 3200 	ldrd	r3, r2, [r4]
    6980:	3b00      	subs	r3, #0
    6982:	bf18      	it	ne
    6984:	2301      	movne	r3, #1
    6986:	61e1      	str	r1, [r4, #28]
    6988:	b10a      	cbz	r2, 698e <RNG_PLAT_SetUserRngParameters+0x3e>
    698a:	f043 0302 	orr.w	r3, r3, #2
    698e:	68a2      	ldr	r2, [r4, #8]
    6990:	b932      	cbnz	r2, 69a0 <RNG_PLAT_SetUserRngParameters+0x50>
    6992:	68e2      	ldr	r2, [r4, #12]
    6994:	b942      	cbnz	r2, 69a8 <RNG_PLAT_SetUserRngParameters+0x58>
    6996:	e9c4 3208 	strd	r3, r2, [r4, #32]
    699a:	b98b      	cbnz	r3, 69c0 <RNG_PLAT_SetUserRngParameters+0x70>
    699c:	4d0a      	ldr	r5, [pc, #40]	; (69c8 <RNG_PLAT_SetUserRngParameters+0x78>)
    699e:	e7e5      	b.n	696c <RNG_PLAT_SetUserRngParameters+0x1c>
    69a0:	68e2      	ldr	r2, [r4, #12]
    69a2:	f043 0304 	orr.w	r3, r3, #4
    69a6:	b13a      	cbz	r2, 69b8 <RNG_PLAT_SetUserRngParameters+0x68>
    69a8:	2200      	movs	r2, #0
    69aa:	4628      	mov	r0, r5
    69ac:	f043 0308 	orr.w	r3, r3, #8
    69b0:	e9c4 3208 	strd	r3, r2, [r4, #32]
    69b4:	b003      	add	sp, #12
    69b6:	bd30      	pop	{r4, r5, pc}
    69b8:	4615      	mov	r5, r2
    69ba:	e9c4 3208 	strd	r3, r2, [r4, #32]
    69be:	e7d9      	b.n	6974 <RNG_PLAT_SetUserRngParameters+0x24>
    69c0:	4615      	mov	r5, r2
    69c2:	e7d7      	b.n	6974 <RNG_PLAT_SetUserRngParameters+0x24>
    69c4:	00f00c37 	.word	0x00f00c37
    69c8:	00f00c0e 	.word	0x00f00c0e

000069cc <CC_PalMemCopyPlat>:
    69cc:	f001 b9bd 	b.w	7d4a <memmove>

000069d0 <CC_PalMemSetPlat>:
    69d0:	f001 b9de 	b.w	7d90 <memset>

000069d4 <CC_PalMemSetZeroPlat>:
    69d4:	460a      	mov	r2, r1
    69d6:	2100      	movs	r1, #0
    69d8:	f001 b9da 	b.w	7d90 <memset>

000069dc <CC_PalTrngParamGet>:
    69dc:	2800      	cmp	r0, #0
    69de:	d066      	beq.n	6aae <CC_PalTrngParamGet+0xd2>
    69e0:	2900      	cmp	r1, #0
    69e2:	d064      	beq.n	6aae <CC_PalTrngParamGet+0xd2>
    69e4:	680b      	ldr	r3, [r1, #0]
    69e6:	2b1c      	cmp	r3, #28
    69e8:	d161      	bne.n	6aae <CC_PalTrngParamGet+0xd2>
    69ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    69ee:	4a3b      	ldr	r2, [pc, #236]	; (6adc <CC_PalTrngParamGet+0x100>)
    69f0:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    69f4:	4291      	cmp	r1, r2
    69f6:	d05c      	beq.n	6ab2 <CC_PalTrngParamGet+0xd6>
    69f8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    69fc:	3201      	adds	r2, #1
    69fe:	d058      	beq.n	6ab2 <CC_PalTrngParamGet+0xd6>
    6a00:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    6a04:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a08:	6002      	str	r2, [r0, #0]
    6a0a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    6a0e:	4a34      	ldr	r2, [pc, #208]	; (6ae0 <CC_PalTrngParamGet+0x104>)
    6a10:	4291      	cmp	r1, r2
    6a12:	d060      	beq.n	6ad6 <CC_PalTrngParamGet+0xfa>
    6a14:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6a18:	3201      	adds	r2, #1
    6a1a:	d05c      	beq.n	6ad6 <CC_PalTrngParamGet+0xfa>
    6a1c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6a20:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a24:	6042      	str	r2, [r0, #4]
    6a26:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6a2a:	f512 7f94 	cmn.w	r2, #296	; 0x128
    6a2e:	d04f      	beq.n	6ad0 <CC_PalTrngParamGet+0xf4>
    6a30:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6a34:	3201      	adds	r2, #1
    6a36:	d04b      	beq.n	6ad0 <CC_PalTrngParamGet+0xf4>
    6a38:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6a3c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a40:	6082      	str	r2, [r0, #8]
    6a42:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    6a46:	4a27      	ldr	r2, [pc, #156]	; (6ae4 <CC_PalTrngParamGet+0x108>)
    6a48:	4291      	cmp	r1, r2
    6a4a:	d03e      	beq.n	6aca <CC_PalTrngParamGet+0xee>
    6a4c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    6a50:	3201      	adds	r2, #1
    6a52:	d03a      	beq.n	6aca <CC_PalTrngParamGet+0xee>
    6a54:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    6a58:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a5c:	60c2      	str	r2, [r0, #12]
    6a5e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6a62:	3270      	adds	r2, #112	; 0x70
    6a64:	d02f      	beq.n	6ac6 <CC_PalTrngParamGet+0xea>
    6a66:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6a6a:	3201      	adds	r2, #1
    6a6c:	d02b      	beq.n	6ac6 <CC_PalTrngParamGet+0xea>
    6a6e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    6a72:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a76:	6102      	str	r2, [r0, #16]
    6a78:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6a7c:	32af      	adds	r2, #175	; 0xaf
    6a7e:	d020      	beq.n	6ac2 <CC_PalTrngParamGet+0xe6>
    6a80:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6a84:	3201      	adds	r2, #1
    6a86:	d01c      	beq.n	6ac2 <CC_PalTrngParamGet+0xe6>
    6a88:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    6a8c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6a90:	6142      	str	r2, [r0, #20]
    6a92:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    6a96:	4a14      	ldr	r2, [pc, #80]	; (6ae8 <CC_PalTrngParamGet+0x10c>)
    6a98:	4291      	cmp	r1, r2
    6a9a:	d00d      	beq.n	6ab8 <CC_PalTrngParamGet+0xdc>
    6a9c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    6aa0:	3201      	adds	r2, #1
    6aa2:	d009      	beq.n	6ab8 <CC_PalTrngParamGet+0xdc>
    6aa4:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    6aa8:	6183      	str	r3, [r0, #24]
    6aaa:	2000      	movs	r0, #0
    6aac:	4770      	bx	lr
    6aae:	2001      	movs	r0, #1
    6ab0:	4770      	bx	lr
    6ab2:	f640 02fc 	movw	r2, #2300	; 0x8fc
    6ab6:	e7a5      	b.n	6a04 <CC_PalTrngParamGet+0x28>
    6ab8:	f240 3337 	movw	r3, #823	; 0x337
    6abc:	6183      	str	r3, [r0, #24]
    6abe:	2000      	movs	r0, #0
    6ac0:	4770      	bx	lr
    6ac2:	2251      	movs	r2, #81	; 0x51
    6ac4:	e7e2      	b.n	6a8c <CC_PalTrngParamGet+0xb0>
    6ac6:	2290      	movs	r2, #144	; 0x90
    6ac8:	e7d3      	b.n	6a72 <CC_PalTrngParamGet+0x96>
    6aca:	f642 1204 	movw	r2, #10500	; 0x2904
    6ace:	e7c3      	b.n	6a58 <CC_PalTrngParamGet+0x7c>
    6ad0:	f640 62d8 	movw	r2, #3800	; 0xed8
    6ad4:	e7b2      	b.n	6a3c <CC_PalTrngParamGet+0x60>
    6ad6:	f242 02d0 	movw	r2, #8400	; 0x20d0
    6ada:	e7a1      	b.n	6a20 <CC_PalTrngParamGet+0x44>
    6adc:	fffff8fc 	.word	0xfffff8fc
    6ae0:	ffff20d0 	.word	0xffff20d0
    6ae4:	ffff2904 	.word	0xffff2904
    6ae8:	fffff337 	.word	0xfffff337

00006aec <LLF_RND_WaitRngInterrupt>:
    6aec:	4601      	mov	r1, r0
    6aee:	b508      	push	{r3, lr}
    6af0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    6af4:	f7ff f924 	bl	5d40 <CC_HalWaitInterruptRND>
    6af8:	2300      	movs	r3, #0
    6afa:	4902      	ldr	r1, [pc, #8]	; (6b04 <LLF_RND_WaitRngInterrupt+0x18>)
    6afc:	4a02      	ldr	r2, [pc, #8]	; (6b08 <LLF_RND_WaitRngInterrupt+0x1c>)
    6afe:	600b      	str	r3, [r1, #0]
    6b00:	6013      	str	r3, [r2, #0]
    6b02:	bd08      	pop	{r3, pc}
    6b04:	508411c8 	.word	0x508411c8
    6b08:	5084112c 	.word	0x5084112c

00006b0c <LLF_RND_GetRoscSampleCnt>:
    6b0c:	3801      	subs	r0, #1
    6b0e:	2807      	cmp	r0, #7
    6b10:	d805      	bhi.n	6b1e <LLF_RND_GetRoscSampleCnt+0x12>
    6b12:	e8df f000 	tbb	[pc, r0]
    6b16:	0e0a      	.short	0x0e0a
    6b18:	04041204 	.word	0x04041204
    6b1c:	0604      	.short	0x0604
    6b1e:	4809      	ldr	r0, [pc, #36]	; (6b44 <LLF_RND_GetRoscSampleCnt+0x38>)
    6b20:	4770      	bx	lr
    6b22:	68cb      	ldr	r3, [r1, #12]
    6b24:	2000      	movs	r0, #0
    6b26:	624b      	str	r3, [r1, #36]	; 0x24
    6b28:	4770      	bx	lr
    6b2a:	680b      	ldr	r3, [r1, #0]
    6b2c:	2000      	movs	r0, #0
    6b2e:	624b      	str	r3, [r1, #36]	; 0x24
    6b30:	4770      	bx	lr
    6b32:	684b      	ldr	r3, [r1, #4]
    6b34:	2000      	movs	r0, #0
    6b36:	624b      	str	r3, [r1, #36]	; 0x24
    6b38:	4770      	bx	lr
    6b3a:	688b      	ldr	r3, [r1, #8]
    6b3c:	2000      	movs	r0, #0
    6b3e:	624b      	str	r3, [r1, #36]	; 0x24
    6b40:	4770      	bx	lr
    6b42:	bf00      	nop
    6b44:	00f10c31 	.word	0x00f10c31

00006b48 <LLF_RND_GetFastestRosc>:
    6b48:	680b      	ldr	r3, [r1, #0]
    6b4a:	e002      	b.n	6b52 <LLF_RND_GetFastestRosc+0xa>
    6b4c:	2b08      	cmp	r3, #8
    6b4e:	600b      	str	r3, [r1, #0]
    6b50:	d806      	bhi.n	6b60 <LLF_RND_GetFastestRosc+0x18>
    6b52:	6a02      	ldr	r2, [r0, #32]
    6b54:	4213      	tst	r3, r2
    6b56:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6b5a:	d0f7      	beq.n	6b4c <LLF_RND_GetFastestRosc+0x4>
    6b5c:	2000      	movs	r0, #0
    6b5e:	4770      	bx	lr
    6b60:	4800      	ldr	r0, [pc, #0]	; (6b64 <LLF_RND_GetFastestRosc+0x1c>)
    6b62:	4770      	bx	lr
    6b64:	00f10c31 	.word	0x00f10c31

00006b68 <LLF_RND_TurnOffTrng>:
    6b68:	2300      	movs	r3, #0
    6b6a:	4904      	ldr	r1, [pc, #16]	; (6b7c <LLF_RND_TurnOffTrng+0x14>)
    6b6c:	4a04      	ldr	r2, [pc, #16]	; (6b80 <LLF_RND_TurnOffTrng+0x18>)
    6b6e:	600b      	str	r3, [r1, #0]
    6b70:	f44f 6080 	mov.w	r0, #1024	; 0x400
    6b74:	6013      	str	r3, [r2, #0]
    6b76:	f7ff b8c9 	b.w	5d0c <CC_HalClearInterruptBit>
    6b7a:	bf00      	nop
    6b7c:	5084112c 	.word	0x5084112c
    6b80:	508411c4 	.word	0x508411c4

00006b84 <SetDataBuffersInfo>:
    6b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b88:	2600      	movs	r6, #0
    6b8a:	b082      	sub	sp, #8
    6b8c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6b90:	f88d 6007 	strb.w	r6, [sp, #7]
    6b94:	9e09      	ldr	r6, [sp, #36]	; 0x24
    6b96:	d327      	bcc.n	6be8 <SetDataBuffersInfo+0x64>
    6b98:	460c      	mov	r4, r1
    6b9a:	4404      	add	r4, r0
    6b9c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    6ba0:	4605      	mov	r5, r0
    6ba2:	d821      	bhi.n	6be8 <SetDataBuffersInfo+0x64>
    6ba4:	4617      	mov	r7, r2
    6ba6:	4698      	mov	r8, r3
    6ba8:	2201      	movs	r2, #1
    6baa:	f10d 0307 	add.w	r3, sp, #7
    6bae:	f000 ff9f 	bl	7af0 <CC_PalDataBufferAttrGet>
    6bb2:	4604      	mov	r4, r0
    6bb4:	b9c0      	cbnz	r0, 6be8 <SetDataBuffersInfo+0x64>
    6bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bba:	603d      	str	r5, [r7, #0]
    6bbc:	713b      	strb	r3, [r7, #4]
    6bbe:	b1ae      	cbz	r6, 6bec <SetDataBuffersInfo+0x68>
    6bc0:	f1b8 0f00 	cmp.w	r8, #0
    6bc4:	d009      	beq.n	6bda <SetDataBuffersInfo+0x56>
    6bc6:	4602      	mov	r2, r0
    6bc8:	9908      	ldr	r1, [sp, #32]
    6bca:	4640      	mov	r0, r8
    6bcc:	f10d 0307 	add.w	r3, sp, #7
    6bd0:	f000 ff8e 	bl	7af0 <CC_PalDataBufferAttrGet>
    6bd4:	b940      	cbnz	r0, 6be8 <SetDataBuffersInfo+0x64>
    6bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bda:	4620      	mov	r0, r4
    6bdc:	f8c6 8000 	str.w	r8, [r6]
    6be0:	7133      	strb	r3, [r6, #4]
    6be2:	b002      	add	sp, #8
    6be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6be8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    6bec:	4620      	mov	r0, r4
    6bee:	b002      	add	sp, #8
    6bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006bf4 <InitHashDrv>:
    6bf4:	b1e8      	cbz	r0, 6c32 <InitHashDrv+0x3e>
    6bf6:	b510      	push	{r4, lr}
    6bf8:	6804      	ldr	r4, [r0, #0]
    6bfa:	2c01      	cmp	r4, #1
    6bfc:	d004      	beq.n	6c08 <InitHashDrv+0x14>
    6bfe:	2c02      	cmp	r4, #2
    6c00:	d010      	beq.n	6c24 <InitHashDrv+0x30>
    6c02:	b144      	cbz	r4, 6c16 <InitHashDrv+0x22>
    6c04:	480c      	ldr	r0, [pc, #48]	; (6c38 <InitHashDrv+0x44>)
    6c06:	bd10      	pop	{r4, pc}
    6c08:	2220      	movs	r2, #32
    6c0a:	490c      	ldr	r1, [pc, #48]	; (6c3c <InitHashDrv+0x48>)
    6c0c:	3008      	adds	r0, #8
    6c0e:	f7ff fedd 	bl	69cc <CC_PalMemCopyPlat>
    6c12:	2000      	movs	r0, #0
    6c14:	bd10      	pop	{r4, pc}
    6c16:	2214      	movs	r2, #20
    6c18:	4909      	ldr	r1, [pc, #36]	; (6c40 <InitHashDrv+0x4c>)
    6c1a:	3008      	adds	r0, #8
    6c1c:	f7ff fed6 	bl	69cc <CC_PalMemCopyPlat>
    6c20:	4620      	mov	r0, r4
    6c22:	bd10      	pop	{r4, pc}
    6c24:	2220      	movs	r2, #32
    6c26:	4907      	ldr	r1, [pc, #28]	; (6c44 <InitHashDrv+0x50>)
    6c28:	3008      	adds	r0, #8
    6c2a:	f7ff fecf 	bl	69cc <CC_PalMemCopyPlat>
    6c2e:	2000      	movs	r0, #0
    6c30:	bd10      	pop	{r4, pc}
    6c32:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    6c36:	4770      	bx	lr
    6c38:	00f30001 	.word	0x00f30001
    6c3c:	000088d8 	.word	0x000088d8
    6c40:	000088a4 	.word	0x000088a4
    6c44:	000088b8 	.word	0x000088b8

00006c48 <ProcessHashDrv>:
    6c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c4c:	2900      	cmp	r1, #0
    6c4e:	f000 80ef 	beq.w	6e30 <ProcessHashDrv+0x1e8>
    6c52:	4604      	mov	r4, r0
    6c54:	2800      	cmp	r0, #0
    6c56:	f000 80ef 	beq.w	6e38 <ProcessHashDrv+0x1f0>
    6c5a:	6803      	ldr	r3, [r0, #0]
    6c5c:	4617      	mov	r7, r2
    6c5e:	460e      	mov	r6, r1
    6c60:	2b00      	cmp	r3, #0
    6c62:	f000 80b9 	beq.w	6dd8 <ProcessHashDrv+0x190>
    6c66:	3b01      	subs	r3, #1
    6c68:	2b01      	cmp	r3, #1
    6c6a:	f200 80cd 	bhi.w	6e08 <ProcessHashDrv+0x1c0>
    6c6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c72:	4873      	ldr	r0, [pc, #460]	; (6e40 <ProcessHashDrv+0x1f8>)
    6c74:	f04f 0802 	mov.w	r8, #2
    6c78:	f7ff f8ee 	bl	5e58 <CC_PalMutexLock>
    6c7c:	2800      	cmp	r0, #0
    6c7e:	f040 80b5 	bne.w	6dec <ProcessHashDrv+0x1a4>
    6c82:	2000      	movs	r0, #0
    6c84:	f7ff f918 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    6c88:	4605      	mov	r5, r0
    6c8a:	2800      	cmp	r0, #0
    6c8c:	f040 80b8 	bne.w	6e00 <ProcessHashDrv+0x1b8>
    6c90:	4a6c      	ldr	r2, [pc, #432]	; (6e44 <ProcessHashDrv+0x1fc>)
    6c92:	6813      	ldr	r3, [r2, #0]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d1fc      	bne.n	6c92 <ProcessHashDrv+0x4a>
    6c98:	486b      	ldr	r0, [pc, #428]	; (6e48 <ProcessHashDrv+0x200>)
    6c9a:	6803      	ldr	r3, [r0, #0]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d1fc      	bne.n	6c9a <ProcessHashDrv+0x52>
    6ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6ca4:	f7ff f832 	bl	5d0c <CC_HalClearInterruptBit>
    6ca8:	4b68      	ldr	r3, [pc, #416]	; (6e4c <ProcessHashDrv+0x204>)
    6caa:	6818      	ldr	r0, [r3, #0]
    6cac:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    6cb0:	f7ff f83a 	bl	5d28 <CC_HalMaskInterrupt>
    6cb4:	2301      	movs	r3, #1
    6cb6:	2007      	movs	r0, #7
    6cb8:	4a65      	ldr	r2, [pc, #404]	; (6e50 <ProcessHashDrv+0x208>)
    6cba:	4966      	ldr	r1, [pc, #408]	; (6e54 <ProcessHashDrv+0x20c>)
    6cbc:	6013      	str	r3, [r2, #0]
    6cbe:	6008      	str	r0, [r1, #0]
    6cc0:	f842 3c54 	str.w	r3, [r2, #-84]
    6cc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6cc6:	4b64      	ldr	r3, [pc, #400]	; (6e58 <ProcessHashDrv+0x210>)
    6cc8:	3a48      	subs	r2, #72	; 0x48
    6cca:	6019      	str	r1, [r3, #0]
    6ccc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6cce:	6011      	str	r1, [r2, #0]
    6cd0:	f843 8c0c 	str.w	r8, [r3, #-12]
    6cd4:	6823      	ldr	r3, [r4, #0]
    6cd6:	b163      	cbz	r3, 6cf2 <ProcessHashDrv+0xaa>
    6cd8:	3b01      	subs	r3, #1
    6cda:	2b01      	cmp	r3, #1
    6cdc:	d818      	bhi.n	6d10 <ProcessHashDrv+0xc8>
    6cde:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6ce0:	4b5e      	ldr	r3, [pc, #376]	; (6e5c <ProcessHashDrv+0x214>)
    6ce2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    6ce6:	6019      	str	r1, [r3, #0]
    6ce8:	6a21      	ldr	r1, [r4, #32]
    6cea:	6011      	str	r1, [r2, #0]
    6cec:	69e2      	ldr	r2, [r4, #28]
    6cee:	f843 2c08 	str.w	r2, [r3, #-8]
    6cf2:	69a1      	ldr	r1, [r4, #24]
    6cf4:	4b5a      	ldr	r3, [pc, #360]	; (6e60 <ProcessHashDrv+0x218>)
    6cf6:	4a5b      	ldr	r2, [pc, #364]	; (6e64 <ProcessHashDrv+0x21c>)
    6cf8:	6019      	str	r1, [r3, #0]
    6cfa:	6961      	ldr	r1, [r4, #20]
    6cfc:	6011      	str	r1, [r2, #0]
    6cfe:	6921      	ldr	r1, [r4, #16]
    6d00:	f843 1c08 	str.w	r1, [r3, #-8]
    6d04:	68e1      	ldr	r1, [r4, #12]
    6d06:	f842 1c08 	str.w	r1, [r2, #-8]
    6d0a:	68a2      	ldr	r2, [r4, #8]
    6d0c:	f843 2c10 	str.w	r2, [r3, #-16]
    6d10:	4a55      	ldr	r2, [pc, #340]	; (6e68 <ProcessHashDrv+0x220>)
    6d12:	6813      	ldr	r3, [r2, #0]
    6d14:	2b00      	cmp	r3, #0
    6d16:	d1fc      	bne.n	6d12 <ProcessHashDrv+0xca>
    6d18:	2f00      	cmp	r7, #0
    6d1a:	d059      	beq.n	6dd0 <ProcessHashDrv+0x188>
    6d1c:	6863      	ldr	r3, [r4, #4]
    6d1e:	2040      	movs	r0, #64	; 0x40
    6d20:	2b01      	cmp	r3, #1
    6d22:	bf04      	itt	eq
    6d24:	4a51      	ldreq	r2, [pc, #324]	; (6e6c <ProcessHashDrv+0x224>)
    6d26:	6013      	streq	r3, [r2, #0]
    6d28:	6831      	ldr	r1, [r6, #0]
    6d2a:	4a51      	ldr	r2, [pc, #324]	; (6e70 <ProcessHashDrv+0x228>)
    6d2c:	4b51      	ldr	r3, [pc, #324]	; (6e74 <ProcessHashDrv+0x22c>)
    6d2e:	6011      	str	r1, [r2, #0]
    6d30:	601f      	str	r7, [r3, #0]
    6d32:	f7fe ffff 	bl	5d34 <CC_HalWaitInterrupt>
    6d36:	4605      	mov	r5, r0
    6d38:	4a4b      	ldr	r2, [pc, #300]	; (6e68 <ProcessHashDrv+0x220>)
    6d3a:	6813      	ldr	r3, [r2, #0]
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d1fc      	bne.n	6d3a <ProcessHashDrv+0xf2>
    6d40:	4a41      	ldr	r2, [pc, #260]	; (6e48 <ProcessHashDrv+0x200>)
    6d42:	6813      	ldr	r3, [r2, #0]
    6d44:	2b00      	cmp	r3, #0
    6d46:	d1fc      	bne.n	6d42 <ProcessHashDrv+0xfa>
    6d48:	6823      	ldr	r3, [r4, #0]
    6d4a:	b15b      	cbz	r3, 6d64 <ProcessHashDrv+0x11c>
    6d4c:	3b01      	subs	r3, #1
    6d4e:	2b01      	cmp	r3, #1
    6d50:	d816      	bhi.n	6d80 <ProcessHashDrv+0x138>
    6d52:	4b42      	ldr	r3, [pc, #264]	; (6e5c <ProcessHashDrv+0x214>)
    6d54:	4a48      	ldr	r2, [pc, #288]	; (6e78 <ProcessHashDrv+0x230>)
    6d56:	6819      	ldr	r1, [r3, #0]
    6d58:	3b08      	subs	r3, #8
    6d5a:	6261      	str	r1, [r4, #36]	; 0x24
    6d5c:	6812      	ldr	r2, [r2, #0]
    6d5e:	6222      	str	r2, [r4, #32]
    6d60:	681b      	ldr	r3, [r3, #0]
    6d62:	61e3      	str	r3, [r4, #28]
    6d64:	4b3e      	ldr	r3, [pc, #248]	; (6e60 <ProcessHashDrv+0x218>)
    6d66:	4a3f      	ldr	r2, [pc, #252]	; (6e64 <ProcessHashDrv+0x21c>)
    6d68:	6819      	ldr	r1, [r3, #0]
    6d6a:	3a08      	subs	r2, #8
    6d6c:	61a1      	str	r1, [r4, #24]
    6d6e:	6891      	ldr	r1, [r2, #8]
    6d70:	3b10      	subs	r3, #16
    6d72:	6161      	str	r1, [r4, #20]
    6d74:	6899      	ldr	r1, [r3, #8]
    6d76:	6121      	str	r1, [r4, #16]
    6d78:	6812      	ldr	r2, [r2, #0]
    6d7a:	60e2      	str	r2, [r4, #12]
    6d7c:	681b      	ldr	r3, [r3, #0]
    6d7e:	60a3      	str	r3, [r4, #8]
    6d80:	2101      	movs	r1, #1
    6d82:	2300      	movs	r3, #0
    6d84:	4834      	ldr	r0, [pc, #208]	; (6e58 <ProcessHashDrv+0x210>)
    6d86:	4a3d      	ldr	r2, [pc, #244]	; (6e7c <ProcessHashDrv+0x234>)
    6d88:	6800      	ldr	r0, [r0, #0]
    6d8a:	64a0      	str	r0, [r4, #72]	; 0x48
    6d8c:	6810      	ldr	r0, [r2, #0]
    6d8e:	64e0      	str	r0, [r4, #76]	; 0x4c
    6d90:	f842 1c0c 	str.w	r1, [r2, #-12]
    6d94:	4835      	ldr	r0, [pc, #212]	; (6e6c <ProcessHashDrv+0x224>)
    6d96:	493a      	ldr	r1, [pc, #232]	; (6e80 <ProcessHashDrv+0x238>)
    6d98:	6003      	str	r3, [r0, #0]
    6d9a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    6d9e:	600b      	str	r3, [r1, #0]
    6da0:	6813      	ldr	r3, [r2, #0]
    6da2:	2b00      	cmp	r3, #0
    6da4:	d1fc      	bne.n	6da0 <ProcessHashDrv+0x158>
    6da6:	4a2a      	ldr	r2, [pc, #168]	; (6e50 <ProcessHashDrv+0x208>)
    6da8:	6013      	str	r3, [r2, #0]
    6daa:	2d00      	cmp	r5, #0
    6dac:	d13a      	bne.n	6e24 <ProcessHashDrv+0x1dc>
    6dae:	4b27      	ldr	r3, [pc, #156]	; (6e4c <ProcessHashDrv+0x204>)
    6db0:	6818      	ldr	r0, [r3, #0]
    6db2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6db6:	f7fe ffb7 	bl	5d28 <CC_HalMaskInterrupt>
    6dba:	2001      	movs	r0, #1
    6dbc:	f7ff f87c 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    6dc0:	bb60      	cbnz	r0, 6e1c <ProcessHashDrv+0x1d4>
    6dc2:	481f      	ldr	r0, [pc, #124]	; (6e40 <ProcessHashDrv+0x1f8>)
    6dc4:	f7ff f850 	bl	5e68 <CC_PalMutexUnlock>
    6dc8:	bb10      	cbnz	r0, 6e10 <ProcessHashDrv+0x1c8>
    6dca:	4628      	mov	r0, r5
    6dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dd0:	2204      	movs	r2, #4
    6dd2:	4b2b      	ldr	r3, [pc, #172]	; (6e80 <ProcessHashDrv+0x238>)
    6dd4:	601a      	str	r2, [r3, #0]
    6dd6:	e7af      	b.n	6d38 <ProcessHashDrv+0xf0>
    6dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6ddc:	4818      	ldr	r0, [pc, #96]	; (6e40 <ProcessHashDrv+0x1f8>)
    6dde:	f04f 0801 	mov.w	r8, #1
    6de2:	f7ff f839 	bl	5e58 <CC_PalMutexLock>
    6de6:	2800      	cmp	r0, #0
    6de8:	f43f af4b 	beq.w	6c82 <ProcessHashDrv+0x3a>
    6dec:	4825      	ldr	r0, [pc, #148]	; (6e84 <ProcessHashDrv+0x23c>)
    6dee:	f7fe f8e9 	bl	4fc4 <CC_PalAbort>
    6df2:	2000      	movs	r0, #0
    6df4:	f7ff f860 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    6df8:	4605      	mov	r5, r0
    6dfa:	2800      	cmp	r0, #0
    6dfc:	f43f af48 	beq.w	6c90 <ProcessHashDrv+0x48>
    6e00:	4821      	ldr	r0, [pc, #132]	; (6e88 <ProcessHashDrv+0x240>)
    6e02:	f7fe f8df 	bl	4fc4 <CC_PalAbort>
    6e06:	e743      	b.n	6c90 <ProcessHashDrv+0x48>
    6e08:	4d20      	ldr	r5, [pc, #128]	; (6e8c <ProcessHashDrv+0x244>)
    6e0a:	4628      	mov	r0, r5
    6e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e10:	481f      	ldr	r0, [pc, #124]	; (6e90 <ProcessHashDrv+0x248>)
    6e12:	f7fe f8d7 	bl	4fc4 <CC_PalAbort>
    6e16:	4628      	mov	r0, r5
    6e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e1c:	481d      	ldr	r0, [pc, #116]	; (6e94 <ProcessHashDrv+0x24c>)
    6e1e:	f7fe f8d1 	bl	4fc4 <CC_PalAbort>
    6e22:	e7ce      	b.n	6dc2 <ProcessHashDrv+0x17a>
    6e24:	2110      	movs	r1, #16
    6e26:	f104 0008 	add.w	r0, r4, #8
    6e2a:	f7ff fdd3 	bl	69d4 <CC_PalMemSetZeroPlat>
    6e2e:	e7be      	b.n	6dae <ProcessHashDrv+0x166>
    6e30:	4d19      	ldr	r5, [pc, #100]	; (6e98 <ProcessHashDrv+0x250>)
    6e32:	4628      	mov	r0, r5
    6e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e38:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    6e3c:	e7c5      	b.n	6dca <ProcessHashDrv+0x182>
    6e3e:	bf00      	nop
    6e40:	200000b8 	.word	0x200000b8
    6e44:	5084191c 	.word	0x5084191c
    6e48:	50841c20 	.word	0x50841c20
    6e4c:	50841a04 	.word	0x50841a04
    6e50:	50841818 	.word	0x50841818
    6e54:	50841900 	.word	0x50841900
    6e58:	508417cc 	.word	0x508417cc
    6e5c:	5084165c 	.word	0x5084165c
    6e60:	50841650 	.word	0x50841650
    6e64:	5084164c 	.word	0x5084164c
    6e68:	50841910 	.word	0x50841910
    6e6c:	50841684 	.word	0x50841684
    6e70:	50841c28 	.word	0x50841c28
    6e74:	50841c2c 	.word	0x50841c2c
    6e78:	50841658 	.word	0x50841658
    6e7c:	508417d0 	.word	0x508417d0
    6e80:	508417c8 	.word	0x508417c8
    6e84:	000087d8 	.word	0x000087d8
    6e88:	000087f0 	.word	0x000087f0
    6e8c:	00f30001 	.word	0x00f30001
    6e90:	00008830 	.word	0x00008830
    6e94:	00008810 	.word	0x00008810
    6e98:	00f30003 	.word	0x00f30003

00006e9c <FinishHashDrv>:
    6e9c:	2800      	cmp	r0, #0
    6e9e:	d03a      	beq.n	6f16 <FinishHashDrv+0x7a>
    6ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    6ea8:	fa92 f882 	rev.w	r8, r2
    6eac:	fa93 fe83 	rev.w	lr, r3
    6eb0:	6a02      	ldr	r2, [r0, #32]
    6eb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6eb4:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    6eb8:	ba12      	rev	r2, r2
    6eba:	ba24      	rev	r4, r4
    6ebc:	ba1b      	rev	r3, r3
    6ebe:	6104      	str	r4, [r0, #16]
    6ec0:	6202      	str	r2, [r0, #32]
    6ec2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    6ec4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    6ec6:	6243      	str	r3, [r0, #36]	; 0x24
    6ec8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6eca:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    6ece:	ba09      	rev	r1, r1
    6ed0:	ba36      	rev	r6, r6
    6ed2:	ba2d      	rev	r5, r5
    6ed4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    6ed6:	6086      	str	r6, [r0, #8]
    6ed8:	60c5      	str	r5, [r0, #12]
    6eda:	6b06      	ldr	r6, [r0, #48]	; 0x30
    6edc:	6b45      	ldr	r5, [r0, #52]	; 0x34
    6ede:	6141      	str	r1, [r0, #20]
    6ee0:	fa94 fc84 	rev.w	ip, r4
    6ee4:	ba19      	rev	r1, r3
    6ee6:	ba14      	rev	r4, r2
    6ee8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6eea:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6eec:	ba3f      	rev	r7, r7
    6eee:	ba36      	rev	r6, r6
    6ef0:	ba2d      	rev	r5, r5
    6ef2:	ba12      	rev	r2, r2
    6ef4:	ba1b      	rev	r3, r3
    6ef6:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    6efa:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    6efe:	f8c0 8018 	str.w	r8, [r0, #24]
    6f02:	f8c0 e01c 	str.w	lr, [r0, #28]
    6f06:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    6f0a:	62c7      	str	r7, [r0, #44]	; 0x2c
    6f0c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    6f10:	2000      	movs	r0, #0
    6f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f16:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    6f1a:	4770      	bx	lr

00006f1c <LoadAesKey>:
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d060      	beq.n	6fe2 <LoadAesKey+0xc6>
    6f20:	b538      	push	{r3, r4, r5, lr}
    6f22:	4604      	mov	r4, r0
    6f24:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    6f28:	2802      	cmp	r0, #2
    6f2a:	d016      	beq.n	6f5a <LoadAesKey+0x3e>
    6f2c:	2803      	cmp	r0, #3
    6f2e:	d03c      	beq.n	6faa <LoadAesKey+0x8e>
    6f30:	2800      	cmp	r0, #0
    6f32:	d02f      	beq.n	6f94 <LoadAesKey+0x78>
    6f34:	482c      	ldr	r0, [pc, #176]	; (6fe8 <LoadAesKey+0xcc>)
    6f36:	4d2d      	ldr	r5, [pc, #180]	; (6fec <LoadAesKey+0xd0>)
    6f38:	682a      	ldr	r2, [r5, #0]
    6f3a:	4b2d      	ldr	r3, [pc, #180]	; (6ff0 <LoadAesKey+0xd4>)
    6f3c:	6812      	ldr	r2, [r2, #0]
    6f3e:	492d      	ldr	r1, [pc, #180]	; (6ff4 <LoadAesKey+0xd8>)
    6f40:	601a      	str	r2, [r3, #0]
    6f42:	682b      	ldr	r3, [r5, #0]
    6f44:	4a2c      	ldr	r2, [pc, #176]	; (6ff8 <LoadAesKey+0xdc>)
    6f46:	685c      	ldr	r4, [r3, #4]
    6f48:	4b2c      	ldr	r3, [pc, #176]	; (6ffc <LoadAesKey+0xe0>)
    6f4a:	600c      	str	r4, [r1, #0]
    6f4c:	6829      	ldr	r1, [r5, #0]
    6f4e:	6889      	ldr	r1, [r1, #8]
    6f50:	6011      	str	r1, [r2, #0]
    6f52:	682a      	ldr	r2, [r5, #0]
    6f54:	68d2      	ldr	r2, [r2, #12]
    6f56:	601a      	str	r2, [r3, #0]
    6f58:	bd38      	pop	{r3, r4, r5, pc}
    6f5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6f5c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    6f5e:	f000 fbdd 	bl	771c <kmu_validate_slot_and_size_no_kdr>
    6f62:	4d22      	ldr	r5, [pc, #136]	; (6fec <LoadAesKey+0xd0>)
    6f64:	2800      	cmp	r0, #0
    6f66:	d1e7      	bne.n	6f38 <LoadAesKey+0x1c>
    6f68:	682a      	ldr	r2, [r5, #0]
    6f6a:	4b21      	ldr	r3, [pc, #132]	; (6ff0 <LoadAesKey+0xd4>)
    6f6c:	6810      	ldr	r0, [r2, #0]
    6f6e:	4921      	ldr	r1, [pc, #132]	; (6ff4 <LoadAesKey+0xd8>)
    6f70:	6018      	str	r0, [r3, #0]
    6f72:	6828      	ldr	r0, [r5, #0]
    6f74:	4a20      	ldr	r2, [pc, #128]	; (6ff8 <LoadAesKey+0xdc>)
    6f76:	6840      	ldr	r0, [r0, #4]
    6f78:	6008      	str	r0, [r1, #0]
    6f7a:	6829      	ldr	r1, [r5, #0]
    6f7c:	6889      	ldr	r1, [r1, #8]
    6f7e:	6011      	str	r1, [r2, #0]
    6f80:	682a      	ldr	r2, [r5, #0]
    6f82:	68d2      	ldr	r2, [r2, #12]
    6f84:	60da      	str	r2, [r3, #12]
    6f86:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6f88:	6c20      	ldr	r0, [r4, #64]	; 0x40
    6f8a:	f000 fc3b 	bl	7804 <kmu_load_key_aes>
    6f8e:	2800      	cmp	r0, #0
    6f90:	d025      	beq.n	6fde <LoadAesKey+0xc2>
    6f92:	e7d1      	b.n	6f38 <LoadAesKey+0x1c>
    6f94:	6921      	ldr	r1, [r4, #16]
    6f96:	4a16      	ldr	r2, [pc, #88]	; (6ff0 <LoadAesKey+0xd4>)
    6f98:	4b16      	ldr	r3, [pc, #88]	; (6ff4 <LoadAesKey+0xd8>)
    6f9a:	6011      	str	r1, [r2, #0]
    6f9c:	6961      	ldr	r1, [r4, #20]
    6f9e:	6019      	str	r1, [r3, #0]
    6fa0:	69a1      	ldr	r1, [r4, #24]
    6fa2:	6091      	str	r1, [r2, #8]
    6fa4:	69e2      	ldr	r2, [r4, #28]
    6fa6:	609a      	str	r2, [r3, #8]
    6fa8:	bd38      	pop	{r3, r4, r5, pc}
    6faa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6fac:	6c20      	ldr	r0, [r4, #64]	; 0x40
    6fae:	f000 fbf9 	bl	77a4 <kmu_validate_kdr_slot_and_size>
    6fb2:	4d0e      	ldr	r5, [pc, #56]	; (6fec <LoadAesKey+0xd0>)
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d1bf      	bne.n	6f38 <LoadAesKey+0x1c>
    6fb8:	682a      	ldr	r2, [r5, #0]
    6fba:	4b0d      	ldr	r3, [pc, #52]	; (6ff0 <LoadAesKey+0xd4>)
    6fbc:	6810      	ldr	r0, [r2, #0]
    6fbe:	490d      	ldr	r1, [pc, #52]	; (6ff4 <LoadAesKey+0xd8>)
    6fc0:	6018      	str	r0, [r3, #0]
    6fc2:	6828      	ldr	r0, [r5, #0]
    6fc4:	4a0c      	ldr	r2, [pc, #48]	; (6ff8 <LoadAesKey+0xdc>)
    6fc6:	6840      	ldr	r0, [r0, #4]
    6fc8:	6008      	str	r0, [r1, #0]
    6fca:	6829      	ldr	r1, [r5, #0]
    6fcc:	6889      	ldr	r1, [r1, #8]
    6fce:	6011      	str	r1, [r2, #0]
    6fd0:	682a      	ldr	r2, [r5, #0]
    6fd2:	68d2      	ldr	r2, [r2, #12]
    6fd4:	60da      	str	r2, [r3, #12]
    6fd6:	f000 fc09 	bl	77ec <kmu_use_kdr_key>
    6fda:	2800      	cmp	r0, #0
    6fdc:	d1ac      	bne.n	6f38 <LoadAesKey+0x1c>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd38      	pop	{r3, r4, r5, pc}
    6fe2:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    6fe6:	4770      	bx	lr
    6fe8:	00f10009 	.word	0x00f10009
    6fec:	200000a8 	.word	0x200000a8
    6ff0:	50841400 	.word	0x50841400
    6ff4:	50841404 	.word	0x50841404
    6ff8:	50841408 	.word	0x50841408
    6ffc:	5084140c 	.word	0x5084140c

00007000 <InitAes.part.0>:
    7000:	b510      	push	{r4, lr}
    7002:	4604      	mov	r4, r0
    7004:	4a31      	ldr	r2, [pc, #196]	; (70cc <InitAes.part.0+0xcc>)
    7006:	6813      	ldr	r3, [r2, #0]
    7008:	2b00      	cmp	r3, #0
    700a:	d1fc      	bne.n	7006 <InitAes.part.0+0x6>
    700c:	4a30      	ldr	r2, [pc, #192]	; (70d0 <InitAes.part.0+0xd0>)
    700e:	6813      	ldr	r3, [r2, #0]
    7010:	2b00      	cmp	r3, #0
    7012:	d1fc      	bne.n	700e <InitAes.part.0+0xe>
    7014:	4a2f      	ldr	r2, [pc, #188]	; (70d4 <InitAes.part.0+0xd4>)
    7016:	6813      	ldr	r3, [r2, #0]
    7018:	2b00      	cmp	r3, #0
    701a:	d1fc      	bne.n	7016 <InitAes.part.0+0x16>
    701c:	4a2e      	ldr	r2, [pc, #184]	; (70d8 <InitAes.part.0+0xd8>)
    701e:	6813      	ldr	r3, [r2, #0]
    7020:	2b00      	cmp	r3, #0
    7022:	d1fc      	bne.n	701e <InitAes.part.0+0x1e>
    7024:	4a2d      	ldr	r2, [pc, #180]	; (70dc <InitAes.part.0+0xdc>)
    7026:	6813      	ldr	r3, [r2, #0]
    7028:	2b00      	cmp	r3, #0
    702a:	d1fc      	bne.n	7026 <InitAes.part.0+0x26>
    702c:	4a2c      	ldr	r2, [pc, #176]	; (70e0 <InitAes.part.0+0xe0>)
    702e:	6813      	ldr	r3, [r2, #0]
    7030:	2b00      	cmp	r3, #0
    7032:	d1fc      	bne.n	702e <InitAes.part.0+0x2e>
    7034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7038:	f7fe fe68 	bl	5d0c <CC_HalClearInterruptBit>
    703c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    703e:	f023 0304 	bic.w	r3, r3, #4
    7042:	2b03      	cmp	r3, #3
    7044:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7046:	d036      	beq.n	70b6 <InitAes.part.0+0xb6>
    7048:	2b01      	cmp	r3, #1
    704a:	4b26      	ldr	r3, [pc, #152]	; (70e4 <InitAes.part.0+0xe4>)
    704c:	6818      	ldr	r0, [r3, #0]
    704e:	bf0c      	ite	eq
    7050:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    7054:	f020 0020 	bicne.w	r0, r0, #32
    7058:	f7fe fe66 	bl	5d28 <CC_HalMaskInterrupt>
    705c:	2101      	movs	r1, #1
    705e:	4b22      	ldr	r3, [pc, #136]	; (70e8 <InitAes.part.0+0xe8>)
    7060:	4a1a      	ldr	r2, [pc, #104]	; (70cc <InitAes.part.0+0xcc>)
    7062:	6019      	str	r1, [r3, #0]
    7064:	6813      	ldr	r3, [r2, #0]
    7066:	2b00      	cmp	r3, #0
    7068:	d1fc      	bne.n	7064 <InitAes.part.0+0x64>
    706a:	4a19      	ldr	r2, [pc, #100]	; (70d0 <InitAes.part.0+0xd0>)
    706c:	6813      	ldr	r3, [r2, #0]
    706e:	2b00      	cmp	r3, #0
    7070:	d1fc      	bne.n	706c <InitAes.part.0+0x6c>
    7072:	491e      	ldr	r1, [pc, #120]	; (70ec <InitAes.part.0+0xec>)
    7074:	4a15      	ldr	r2, [pc, #84]	; (70cc <InitAes.part.0+0xcc>)
    7076:	600b      	str	r3, [r1, #0]
    7078:	6813      	ldr	r3, [r2, #0]
    707a:	2b00      	cmp	r3, #0
    707c:	d1fc      	bne.n	7078 <InitAes.part.0+0x78>
    707e:	4a14      	ldr	r2, [pc, #80]	; (70d0 <InitAes.part.0+0xd0>)
    7080:	6813      	ldr	r3, [r2, #0]
    7082:	2b00      	cmp	r3, #0
    7084:	d1fc      	bne.n	7080 <InitAes.part.0+0x80>
    7086:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7088:	f022 0104 	bic.w	r1, r2, #4
    708c:	2903      	cmp	r1, #3
    708e:	bf18      	it	ne
    7090:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    7092:	ea4f 0282 	mov.w	r2, r2, lsl #2
    7096:	bf18      	it	ne
    7098:	f003 0301 	andne.w	r3, r3, #1
    709c:	4914      	ldr	r1, [pc, #80]	; (70f0 <InitAes.part.0+0xf0>)
    709e:	f002 021c 	and.w	r2, r2, #28
    70a2:	4313      	orrs	r3, r2
    70a4:	600b      	str	r3, [r1, #0]
    70a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    70a8:	2b07      	cmp	r3, #7
    70aa:	d102      	bne.n	70b2 <InitAes.part.0+0xb2>
    70ac:	2201      	movs	r2, #1
    70ae:	4b11      	ldr	r3, [pc, #68]	; (70f4 <InitAes.part.0+0xf4>)
    70b0:	601a      	str	r2, [r3, #0]
    70b2:	2000      	movs	r0, #0
    70b4:	bd10      	pop	{r4, pc}
    70b6:	2b01      	cmp	r3, #1
    70b8:	4b0a      	ldr	r3, [pc, #40]	; (70e4 <InitAes.part.0+0xe4>)
    70ba:	6818      	ldr	r0, [r3, #0]
    70bc:	bf0c      	ite	eq
    70be:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    70c2:	f020 0010 	bicne.w	r0, r0, #16
    70c6:	f7fe fe2f 	bl	5d28 <CC_HalMaskInterrupt>
    70ca:	e7c7      	b.n	705c <InitAes.part.0+0x5c>
    70cc:	50841910 	.word	0x50841910
    70d0:	50841470 	.word	0x50841470
    70d4:	50841d20 	.word	0x50841d20
    70d8:	50841c20 	.word	0x50841c20
    70dc:	50841d38 	.word	0x50841d38
    70e0:	50841c38 	.word	0x50841c38
    70e4:	50841a04 	.word	0x50841a04
    70e8:	50841900 	.word	0x50841900
    70ec:	508414bc 	.word	0x508414bc
    70f0:	508414c0 	.word	0x508414c0
    70f4:	5084147c 	.word	0x5084147c

000070f8 <ProcessAesDrv>:
    70f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70fc:	b087      	sub	sp, #28
    70fe:	2900      	cmp	r1, #0
    7100:	f000 80a5 	beq.w	724e <ProcessAesDrv+0x156>
    7104:	4616      	mov	r6, r2
    7106:	2a00      	cmp	r2, #0
    7108:	f000 80a1 	beq.w	724e <ProcessAesDrv+0x156>
    710c:	4604      	mov	r4, r0
    710e:	2800      	cmp	r0, #0
    7110:	f000 8141 	beq.w	7396 <ProcessAesDrv+0x29e>
    7114:	461f      	mov	r7, r3
    7116:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7118:	460d      	mov	r5, r1
    711a:	2b00      	cmp	r3, #0
    711c:	d150      	bne.n	71c0 <ProcessAesDrv+0xc8>
    711e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    7122:	d252      	bcs.n	71ca <ProcessAesDrv+0xd2>
    7124:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7128:	2b04      	cmp	r3, #4
    712a:	f000 810b 	beq.w	7344 <ProcessAesDrv+0x24c>
    712e:	f04f 0800 	mov.w	r8, #0
    7132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7136:	48a9      	ldr	r0, [pc, #676]	; (73dc <ProcessAesDrv+0x2e4>)
    7138:	f7fe fe8e 	bl	5e58 <CC_PalMutexLock>
    713c:	2800      	cmp	r0, #0
    713e:	f040 80e0 	bne.w	7302 <ProcessAesDrv+0x20a>
    7142:	2000      	movs	r0, #0
    7144:	f7fe feb8 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    7148:	2800      	cmp	r0, #0
    714a:	f040 80e3 	bne.w	7314 <ProcessAesDrv+0x21c>
    714e:	2101      	movs	r1, #1
    7150:	4ba3      	ldr	r3, [pc, #652]	; (73e0 <ProcessAesDrv+0x2e8>)
    7152:	4aa4      	ldr	r2, [pc, #656]	; (73e4 <ProcessAesDrv+0x2ec>)
    7154:	6019      	str	r1, [r3, #0]
    7156:	6813      	ldr	r3, [r2, #0]
    7158:	2b00      	cmp	r3, #0
    715a:	d1fc      	bne.n	7156 <ProcessAesDrv+0x5e>
    715c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    715e:	2b03      	cmp	r3, #3
    7160:	dc39      	bgt.n	71d6 <ProcessAesDrv+0xde>
    7162:	2b00      	cmp	r3, #0
    7164:	da3a      	bge.n	71dc <ProcessAesDrv+0xe4>
    7166:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 7430 <ProcessAesDrv+0x338>
    716a:	4a9e      	ldr	r2, [pc, #632]	; (73e4 <ProcessAesDrv+0x2ec>)
    716c:	6813      	ldr	r3, [r2, #0]
    716e:	2b00      	cmp	r3, #0
    7170:	d1fc      	bne.n	716c <ProcessAesDrv+0x74>
    7172:	f1b8 0f00 	cmp.w	r8, #0
    7176:	f040 80dc 	bne.w	7332 <ProcessAesDrv+0x23a>
    717a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    717c:	f023 0304 	bic.w	r3, r3, #4
    7180:	2b03      	cmp	r3, #3
    7182:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7184:	d058      	beq.n	7238 <ProcessAesDrv+0x140>
    7186:	2b01      	cmp	r3, #1
    7188:	4b97      	ldr	r3, [pc, #604]	; (73e8 <ProcessAesDrv+0x2f0>)
    718a:	6818      	ldr	r0, [r3, #0]
    718c:	bf0c      	ite	eq
    718e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    7192:	f040 0020 	orrne.w	r0, r0, #32
    7196:	f7fe fdc7 	bl	5d28 <CC_HalMaskInterrupt>
    719a:	2200      	movs	r2, #0
    719c:	4b90      	ldr	r3, [pc, #576]	; (73e0 <ProcessAesDrv+0x2e8>)
    719e:	2001      	movs	r0, #1
    71a0:	601a      	str	r2, [r3, #0]
    71a2:	f7fe fe89 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    71a6:	2800      	cmp	r0, #0
    71a8:	f040 80bf 	bne.w	732a <ProcessAesDrv+0x232>
    71ac:	488b      	ldr	r0, [pc, #556]	; (73dc <ProcessAesDrv+0x2e4>)
    71ae:	f7fe fe5b 	bl	5e68 <CC_PalMutexUnlock>
    71b2:	2800      	cmp	r0, #0
    71b4:	f040 80b2 	bne.w	731c <ProcessAesDrv+0x224>
    71b8:	4648      	mov	r0, r9
    71ba:	b007      	add	sp, #28
    71bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71c0:	2b01      	cmp	r3, #1
    71c2:	d1af      	bne.n	7124 <ProcessAesDrv+0x2c>
    71c4:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    71c8:	d3ac      	bcc.n	7124 <ProcessAesDrv+0x2c>
    71ca:	f8df 9268 	ldr.w	r9, [pc, #616]	; 7434 <ProcessAesDrv+0x33c>
    71ce:	4648      	mov	r0, r9
    71d0:	b007      	add	sp, #28
    71d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71d6:	3b06      	subs	r3, #6
    71d8:	2b01      	cmp	r3, #1
    71da:	d8c4      	bhi.n	7166 <ProcessAesDrv+0x6e>
    71dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    71de:	2b01      	cmp	r3, #1
    71e0:	f200 80d6 	bhi.w	7390 <ProcessAesDrv+0x298>
    71e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    71e6:	2b01      	cmp	r3, #1
    71e8:	d837      	bhi.n	725a <ProcessAesDrv+0x162>
    71ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
    71ec:	2b01      	cmp	r3, #1
    71ee:	f200 8134 	bhi.w	745a <ProcessAesDrv+0x362>
    71f2:	4620      	mov	r0, r4
    71f4:	f7ff ff04 	bl	7000 <InitAes.part.0>
    71f8:	4681      	mov	r9, r0
    71fa:	2800      	cmp	r0, #0
    71fc:	d1b5      	bne.n	716a <ProcessAesDrv+0x72>
    71fe:	4620      	mov	r0, r4
    7200:	f7ff fe8c 	bl	6f1c <LoadAesKey>
    7204:	4681      	mov	r9, r0
    7206:	2800      	cmp	r0, #0
    7208:	d1af      	bne.n	716a <ProcessAesDrv+0x72>
    720a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    720c:	2b07      	cmp	r3, #7
    720e:	d8aa      	bhi.n	7166 <ProcessAesDrv+0x6e>
    7210:	a201      	add	r2, pc, #4	; (adr r2, 7218 <ProcessAesDrv+0x120>)
    7212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7216:	bf00      	nop
    7218:	00007277 	.word	0x00007277
    721c:	00007261 	.word	0x00007261
    7220:	000073d3 	.word	0x000073d3
    7224:	00007261 	.word	0x00007261
    7228:	00007167 	.word	0x00007167
    722c:	00007167 	.word	0x00007167
    7230:	000073d3 	.word	0x000073d3
    7234:	00007261 	.word	0x00007261
    7238:	2b01      	cmp	r3, #1
    723a:	4b6b      	ldr	r3, [pc, #428]	; (73e8 <ProcessAesDrv+0x2f0>)
    723c:	6818      	ldr	r0, [r3, #0]
    723e:	bf0c      	ite	eq
    7240:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    7244:	f040 0010 	orrne.w	r0, r0, #16
    7248:	f7fe fd6e 	bl	5d28 <CC_HalMaskInterrupt>
    724c:	e7a5      	b.n	719a <ProcessAesDrv+0xa2>
    724e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 7438 <ProcessAesDrv+0x340>
    7252:	4648      	mov	r0, r9
    7254:	b007      	add	sp, #28
    7256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    725a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 743c <ProcessAesDrv+0x344>
    725e:	e784      	b.n	716a <ProcessAesDrv+0x72>
    7260:	6821      	ldr	r1, [r4, #0]
    7262:	4a62      	ldr	r2, [pc, #392]	; (73ec <ProcessAesDrv+0x2f4>)
    7264:	4b62      	ldr	r3, [pc, #392]	; (73f0 <ProcessAesDrv+0x2f8>)
    7266:	6011      	str	r1, [r2, #0]
    7268:	6861      	ldr	r1, [r4, #4]
    726a:	6019      	str	r1, [r3, #0]
    726c:	68a1      	ldr	r1, [r4, #8]
    726e:	6091      	str	r1, [r2, #8]
    7270:	68e2      	ldr	r2, [r4, #12]
    7272:	609a      	str	r2, [r3, #8]
    7274:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7276:	f023 0304 	bic.w	r3, r3, #4
    727a:	2b03      	cmp	r3, #3
    727c:	682a      	ldr	r2, [r5, #0]
    727e:	d009      	beq.n	7294 <ProcessAesDrv+0x19c>
    7280:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7282:	6833      	ldr	r3, [r6, #0]
    7284:	2901      	cmp	r1, #1
    7286:	bf07      	ittee	eq
    7288:	485a      	ldreq	r0, [pc, #360]	; (73f4 <ProcessAesDrv+0x2fc>)
    728a:	495b      	ldreq	r1, [pc, #364]	; (73f8 <ProcessAesDrv+0x300>)
    728c:	485b      	ldrne	r0, [pc, #364]	; (73fc <ProcessAesDrv+0x304>)
    728e:	495c      	ldrne	r1, [pc, #368]	; (7400 <ProcessAesDrv+0x308>)
    7290:	6003      	str	r3, [r0, #0]
    7292:	600f      	str	r7, [r1, #0]
    7294:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7296:	2b01      	cmp	r3, #1
    7298:	bf0b      	itete	eq
    729a:	4b5a      	ldreq	r3, [pc, #360]	; (7404 <ProcessAesDrv+0x30c>)
    729c:	4b5a      	ldrne	r3, [pc, #360]	; (7408 <ProcessAesDrv+0x310>)
    729e:	495b      	ldreq	r1, [pc, #364]	; (740c <ProcessAesDrv+0x314>)
    72a0:	495b      	ldrne	r1, [pc, #364]	; (7410 <ProcessAesDrv+0x318>)
    72a2:	600a      	str	r2, [r1, #0]
    72a4:	601f      	str	r7, [r3, #0]
    72a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    72a8:	f023 0304 	bic.w	r3, r3, #4
    72ac:	2b03      	cmp	r3, #3
    72ae:	d075      	beq.n	739c <ProcessAesDrv+0x2a4>
    72b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    72b2:	2b01      	cmp	r3, #1
    72b4:	bf0c      	ite	eq
    72b6:	2080      	moveq	r0, #128	; 0x80
    72b8:	2020      	movne	r0, #32
    72ba:	f7fe fd3b 	bl	5d34 <CC_HalWaitInterrupt>
    72be:	4681      	mov	r9, r0
    72c0:	2800      	cmp	r0, #0
    72c2:	f47f af52 	bne.w	716a <ProcessAesDrv+0x72>
    72c6:	4b47      	ldr	r3, [pc, #284]	; (73e4 <ProcessAesDrv+0x2ec>)
    72c8:	681a      	ldr	r2, [r3, #0]
    72ca:	2a00      	cmp	r2, #0
    72cc:	d1fc      	bne.n	72c8 <ProcessAesDrv+0x1d0>
    72ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    72d0:	4691      	mov	r9, r2
    72d2:	3b01      	subs	r3, #1
    72d4:	2b06      	cmp	r3, #6
    72d6:	d811      	bhi.n	72fc <ProcessAesDrv+0x204>
    72d8:	e8df f003 	tbb	[pc, r3]
    72dc:	1004bc04 	.word	0x1004bc04
    72e0:	bc10      	.short	0xbc10
    72e2:	04          	.byte	0x04
    72e3:	00          	.byte	0x00
    72e4:	4a41      	ldr	r2, [pc, #260]	; (73ec <ProcessAesDrv+0x2f4>)
    72e6:	4b42      	ldr	r3, [pc, #264]	; (73f0 <ProcessAesDrv+0x2f8>)
    72e8:	6811      	ldr	r1, [r2, #0]
    72ea:	3208      	adds	r2, #8
    72ec:	6021      	str	r1, [r4, #0]
    72ee:	6819      	ldr	r1, [r3, #0]
    72f0:	3308      	adds	r3, #8
    72f2:	6061      	str	r1, [r4, #4]
    72f4:	6812      	ldr	r2, [r2, #0]
    72f6:	60a2      	str	r2, [r4, #8]
    72f8:	681b      	ldr	r3, [r3, #0]
    72fa:	60e3      	str	r3, [r4, #12]
    72fc:	2301      	movs	r3, #1
    72fe:	65a3      	str	r3, [r4, #88]	; 0x58
    7300:	e733      	b.n	716a <ProcessAesDrv+0x72>
    7302:	4844      	ldr	r0, [pc, #272]	; (7414 <ProcessAesDrv+0x31c>)
    7304:	f7fd fe5e 	bl	4fc4 <CC_PalAbort>
    7308:	2000      	movs	r0, #0
    730a:	f7fe fdd5 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    730e:	2800      	cmp	r0, #0
    7310:	f43f af1d 	beq.w	714e <ProcessAesDrv+0x56>
    7314:	4840      	ldr	r0, [pc, #256]	; (7418 <ProcessAesDrv+0x320>)
    7316:	f7fd fe55 	bl	4fc4 <CC_PalAbort>
    731a:	e718      	b.n	714e <ProcessAesDrv+0x56>
    731c:	483f      	ldr	r0, [pc, #252]	; (741c <ProcessAesDrv+0x324>)
    731e:	f7fd fe51 	bl	4fc4 <CC_PalAbort>
    7322:	4648      	mov	r0, r9
    7324:	b007      	add	sp, #28
    7326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    732a:	483d      	ldr	r0, [pc, #244]	; (7420 <ProcessAesDrv+0x328>)
    732c:	f7fd fe4a 	bl	4fc4 <CC_PalAbort>
    7330:	e73c      	b.n	71ac <ProcessAesDrv+0xb4>
    7332:	2304      	movs	r3, #4
    7334:	2120      	movs	r1, #32
    7336:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    733a:	f104 0010 	add.w	r0, r4, #16
    733e:	f7ff fb49 	bl	69d4 <CC_PalMemSetZeroPlat>
    7342:	e71a      	b.n	717a <ProcessAesDrv+0x82>
    7344:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7346:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7348:	f000 f9d2 	bl	76f0 <kmu_validate_slot_and_size>
    734c:	b9e8      	cbnz	r0, 738a <ProcessAesDrv+0x292>
    734e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 7440 <ProcessAesDrv+0x348>
    7352:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 7444 <ProcessAesDrv+0x34c>
    7356:	f8d8 3000 	ldr.w	r3, [r8]
    735a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 7448 <ProcessAesDrv+0x350>
    735e:	681b      	ldr	r3, [r3, #0]
    7360:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 744c <ProcessAesDrv+0x354>
    7364:	f8cb 3000 	str.w	r3, [fp]
    7368:	f8d8 3000 	ldr.w	r3, [r8]
    736c:	4a2d      	ldr	r2, [pc, #180]	; (7424 <ProcessAesDrv+0x32c>)
    736e:	685b      	ldr	r3, [r3, #4]
    7370:	f8ca 3000 	str.w	r3, [sl]
    7374:	f8d8 3000 	ldr.w	r3, [r8]
    7378:	689b      	ldr	r3, [r3, #8]
    737a:	f8c9 3000 	str.w	r3, [r9]
    737e:	f8d8 3000 	ldr.w	r3, [r8]
    7382:	68db      	ldr	r3, [r3, #12]
    7384:	6013      	str	r3, [r2, #0]
    7386:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7388:	b171      	cbz	r1, 73a8 <ProcessAesDrv+0x2b0>
    738a:	f04f 0801 	mov.w	r8, #1
    738e:	e6d0      	b.n	7132 <ProcessAesDrv+0x3a>
    7390:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7450 <ProcessAesDrv+0x358>
    7394:	e6e9      	b.n	716a <ProcessAesDrv+0x72>
    7396:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    739a:	e70d      	b.n	71b8 <ProcessAesDrv+0xc0>
    739c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    739e:	2b01      	cmp	r3, #1
    73a0:	bf0c      	ite	eq
    73a2:	2040      	moveq	r0, #64	; 0x40
    73a4:	2010      	movne	r0, #16
    73a6:	e788      	b.n	72ba <ProcessAesDrv+0x1c2>
    73a8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    73ac:	9300      	str	r3, [sp, #0]
    73ae:	2310      	movs	r3, #16
    73b0:	f104 0010 	add.w	r0, r4, #16
    73b4:	e9cd 2001 	strd	r2, r0, [sp, #4]
    73b8:	9303      	str	r3, [sp, #12]
    73ba:	9005      	str	r0, [sp, #20]
    73bc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    73c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
    73c2:	f000 fa93 	bl	78ec <kmu_derive_cmac>
    73c6:	2800      	cmp	r0, #0
    73c8:	d14a      	bne.n	7460 <ProcessAesDrv+0x368>
    73ca:	2300      	movs	r3, #0
    73cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    73d0:	e7db      	b.n	738a <ProcessAesDrv+0x292>
    73d2:	6821      	ldr	r1, [r4, #0]
    73d4:	4a14      	ldr	r2, [pc, #80]	; (7428 <ProcessAesDrv+0x330>)
    73d6:	4b15      	ldr	r3, [pc, #84]	; (742c <ProcessAesDrv+0x334>)
    73d8:	e745      	b.n	7266 <ProcessAesDrv+0x16e>
    73da:	bf00      	nop
    73dc:	200000b8 	.word	0x200000b8
    73e0:	50841810 	.word	0x50841810
    73e4:	50841910 	.word	0x50841910
    73e8:	50841a04 	.word	0x50841a04
    73ec:	50841440 	.word	0x50841440
    73f0:	50841444 	.word	0x50841444
    73f4:	50841d28 	.word	0x50841d28
    73f8:	50841d2c 	.word	0x50841d2c
    73fc:	50841d30 	.word	0x50841d30
    7400:	50841d34 	.word	0x50841d34
    7404:	50841c2c 	.word	0x50841c2c
    7408:	50841c34 	.word	0x50841c34
    740c:	50841c28 	.word	0x50841c28
    7410:	50841c30 	.word	0x50841c30
    7414:	000087d8 	.word	0x000087d8
    7418:	000087f0 	.word	0x000087f0
    741c:	00008830 	.word	0x00008830
    7420:	00008810 	.word	0x00008810
    7424:	5084140c 	.word	0x5084140c
    7428:	50841460 	.word	0x50841460
    742c:	50841464 	.word	0x50841464
    7430:	00f10001 	.word	0x00f10001
    7434:	00f10005 	.word	0x00f10005
    7438:	00f1000b 	.word	0x00f1000b
    743c:	00f10003 	.word	0x00f10003
    7440:	200000a8 	.word	0x200000a8
    7444:	50841400 	.word	0x50841400
    7448:	50841404 	.word	0x50841404
    744c:	50841408 	.word	0x50841408
    7450:	00f10002 	.word	0x00f10002
    7454:	4a0f      	ldr	r2, [pc, #60]	; (7494 <ProcessAesDrv+0x39c>)
    7456:	4b10      	ldr	r3, [pc, #64]	; (7498 <ProcessAesDrv+0x3a0>)
    7458:	e746      	b.n	72e8 <ProcessAesDrv+0x1f0>
    745a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 74a0 <ProcessAesDrv+0x3a8>
    745e:	e684      	b.n	716a <ProcessAesDrv+0x72>
    7460:	f8d8 3000 	ldr.w	r3, [r8]
    7464:	9805      	ldr	r0, [sp, #20]
    7466:	681b      	ldr	r3, [r3, #0]
    7468:	4a0c      	ldr	r2, [pc, #48]	; (749c <ProcessAesDrv+0x3a4>)
    746a:	f8cb 3000 	str.w	r3, [fp]
    746e:	f8d8 3000 	ldr.w	r3, [r8]
    7472:	2110      	movs	r1, #16
    7474:	685b      	ldr	r3, [r3, #4]
    7476:	f8ca 3000 	str.w	r3, [sl]
    747a:	f8d8 3000 	ldr.w	r3, [r8]
    747e:	689b      	ldr	r3, [r3, #8]
    7480:	f8c9 3000 	str.w	r3, [r9]
    7484:	f8d8 3000 	ldr.w	r3, [r8]
    7488:	68db      	ldr	r3, [r3, #12]
    748a:	6013      	str	r3, [r2, #0]
    748c:	f7ff faa2 	bl	69d4 <CC_PalMemSetZeroPlat>
    7490:	e79b      	b.n	73ca <ProcessAesDrv+0x2d2>
    7492:	bf00      	nop
    7494:	50841460 	.word	0x50841460
    7498:	50841464 	.word	0x50841464
    749c:	5084140c 	.word	0x5084140c
    74a0:	00f10004 	.word	0x00f10004

000074a4 <FinishAesDrv>:
    74a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74a8:	b301      	cbz	r1, 74ec <FinishAesDrv+0x48>
    74aa:	b1fa      	cbz	r2, 74ec <FinishAesDrv+0x48>
    74ac:	4604      	mov	r4, r0
    74ae:	2800      	cmp	r0, #0
    74b0:	d07a      	beq.n	75a8 <FinishAesDrv+0x104>
    74b2:	461d      	mov	r5, r3
    74b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    74b6:	460e      	mov	r6, r1
    74b8:	2b07      	cmp	r3, #7
    74ba:	d01b      	beq.n	74f4 <FinishAesDrv+0x50>
    74bc:	b95d      	cbnz	r5, 74d6 <FinishAesDrv+0x32>
    74be:	2b03      	cmp	r3, #3
    74c0:	d110      	bne.n	74e4 <FinishAesDrv+0x40>
    74c2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    74c4:	b973      	cbnz	r3, 74e4 <FinishAesDrv+0x40>
    74c6:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    74ca:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    74ce:	2510      	movs	r5, #16
    74d0:	f100 0364 	add.w	r3, r0, #100	; 0x64
    74d4:	600b      	str	r3, [r1, #0]
    74d6:	462b      	mov	r3, r5
    74d8:	4631      	mov	r1, r6
    74da:	4620      	mov	r0, r4
    74dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    74e0:	f7ff be0a 	b.w	70f8 <ProcessAesDrv>
    74e4:	462f      	mov	r7, r5
    74e6:	4638      	mov	r0, r7
    74e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74ec:	4f68      	ldr	r7, [pc, #416]	; (7690 <FinishAesDrv+0x1ec>)
    74ee:	4638      	mov	r0, r7
    74f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    74f6:	2b00      	cmp	r3, #0
    74f8:	d159      	bne.n	75ae <FinishAesDrv+0x10a>
    74fa:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    74fe:	d25b      	bcs.n	75b8 <FinishAesDrv+0x114>
    7500:	b915      	cbnz	r5, 7508 <FinishAesDrv+0x64>
    7502:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7504:	2b00      	cmp	r3, #0
    7506:	d157      	bne.n	75b8 <FinishAesDrv+0x114>
    7508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    750c:	4861      	ldr	r0, [pc, #388]	; (7694 <FinishAesDrv+0x1f0>)
    750e:	f7fe fca3 	bl	5e58 <CC_PalMutexLock>
    7512:	2800      	cmp	r0, #0
    7514:	f040 809a 	bne.w	764c <FinishAesDrv+0x1a8>
    7518:	2000      	movs	r0, #0
    751a:	f7fe fccd 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    751e:	2800      	cmp	r0, #0
    7520:	f040 8090 	bne.w	7644 <FinishAesDrv+0x1a0>
    7524:	2101      	movs	r1, #1
    7526:	4b5c      	ldr	r3, [pc, #368]	; (7698 <FinishAesDrv+0x1f4>)
    7528:	4a5c      	ldr	r2, [pc, #368]	; (769c <FinishAesDrv+0x1f8>)
    752a:	6019      	str	r1, [r3, #0]
    752c:	6813      	ldr	r3, [r2, #0]
    752e:	2b00      	cmp	r3, #0
    7530:	d1fc      	bne.n	752c <FinishAesDrv+0x88>
    7532:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7534:	2b03      	cmp	r3, #3
    7536:	dd20      	ble.n	757a <FinishAesDrv+0xd6>
    7538:	3b06      	subs	r3, #6
    753a:	2b01      	cmp	r3, #1
    753c:	d81f      	bhi.n	757e <FinishAesDrv+0xda>
    753e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7540:	2b01      	cmp	r3, #1
    7542:	d83b      	bhi.n	75bc <FinishAesDrv+0x118>
    7544:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7546:	2b01      	cmp	r3, #1
    7548:	f200 8088 	bhi.w	765c <FinishAesDrv+0x1b8>
    754c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    754e:	2b01      	cmp	r3, #1
    7550:	f200 8086 	bhi.w	7660 <FinishAesDrv+0x1bc>
    7554:	4620      	mov	r0, r4
    7556:	f7ff fd53 	bl	7000 <InitAes.part.0>
    755a:	4607      	mov	r7, r0
    755c:	b980      	cbnz	r0, 7580 <FinishAesDrv+0xdc>
    755e:	4620      	mov	r0, r4
    7560:	f7ff fcdc 	bl	6f1c <LoadAesKey>
    7564:	4607      	mov	r7, r0
    7566:	b958      	cbnz	r0, 7580 <FinishAesDrv+0xdc>
    7568:	6b63      	ldr	r3, [r4, #52]	; 0x34
    756a:	2b07      	cmp	r3, #7
    756c:	d807      	bhi.n	757e <FinishAesDrv+0xda>
    756e:	e8df f003 	tbb	[pc, r3]
    7572:	2731      	.short	0x2731
    7574:	06062755 	.word	0x06062755
    7578:	2755      	.short	0x2755
    757a:	2b00      	cmp	r3, #0
    757c:	dadf      	bge.n	753e <FinishAesDrv+0x9a>
    757e:	4f48      	ldr	r7, [pc, #288]	; (76a0 <FinishAesDrv+0x1fc>)
    7580:	4a46      	ldr	r2, [pc, #280]	; (769c <FinishAesDrv+0x1f8>)
    7582:	6813      	ldr	r3, [r2, #0]
    7584:	2b00      	cmp	r3, #0
    7586:	d1fc      	bne.n	7582 <FinishAesDrv+0xde>
    7588:	4a43      	ldr	r2, [pc, #268]	; (7698 <FinishAesDrv+0x1f4>)
    758a:	2001      	movs	r0, #1
    758c:	6013      	str	r3, [r2, #0]
    758e:	f7fe fc93 	bl	5eb8 <CC_PalPowerSaveModeSelect>
    7592:	2800      	cmp	r0, #0
    7594:	d15e      	bne.n	7654 <FinishAesDrv+0x1b0>
    7596:	483f      	ldr	r0, [pc, #252]	; (7694 <FinishAesDrv+0x1f0>)
    7598:	f7fe fc66 	bl	5e68 <CC_PalMutexUnlock>
    759c:	2800      	cmp	r0, #0
    759e:	d0a2      	beq.n	74e6 <FinishAesDrv+0x42>
    75a0:	4840      	ldr	r0, [pc, #256]	; (76a4 <FinishAesDrv+0x200>)
    75a2:	f7fd fd0f 	bl	4fc4 <CC_PalAbort>
    75a6:	e79e      	b.n	74e6 <FinishAesDrv+0x42>
    75a8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    75ac:	e79b      	b.n	74e6 <FinishAesDrv+0x42>
    75ae:	2b01      	cmp	r3, #1
    75b0:	d1a6      	bne.n	7500 <FinishAesDrv+0x5c>
    75b2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    75b6:	d3a3      	bcc.n	7500 <FinishAesDrv+0x5c>
    75b8:	4f3b      	ldr	r7, [pc, #236]	; (76a8 <FinishAesDrv+0x204>)
    75ba:	e794      	b.n	74e6 <FinishAesDrv+0x42>
    75bc:	4f3b      	ldr	r7, [pc, #236]	; (76ac <FinishAesDrv+0x208>)
    75be:	e7df      	b.n	7580 <FinishAesDrv+0xdc>
    75c0:	6821      	ldr	r1, [r4, #0]
    75c2:	4a3b      	ldr	r2, [pc, #236]	; (76b0 <FinishAesDrv+0x20c>)
    75c4:	4b3b      	ldr	r3, [pc, #236]	; (76b4 <FinishAesDrv+0x210>)
    75c6:	6011      	str	r1, [r2, #0]
    75c8:	6861      	ldr	r1, [r4, #4]
    75ca:	6019      	str	r1, [r3, #0]
    75cc:	68a1      	ldr	r1, [r4, #8]
    75ce:	6091      	str	r1, [r2, #8]
    75d0:	68e2      	ldr	r2, [r4, #12]
    75d2:	609a      	str	r2, [r3, #8]
    75d4:	2301      	movs	r3, #1
    75d6:	4938      	ldr	r1, [pc, #224]	; (76b8 <FinishAesDrv+0x214>)
    75d8:	4a38      	ldr	r2, [pc, #224]	; (76bc <FinishAesDrv+0x218>)
    75da:	600b      	str	r3, [r1, #0]
    75dc:	6015      	str	r5, [r2, #0]
    75de:	2d00      	cmp	r5, #0
    75e0:	d140      	bne.n	7664 <FinishAesDrv+0x1c0>
    75e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    75e4:	b90a      	cbnz	r2, 75ea <FinishAesDrv+0x146>
    75e6:	4a36      	ldr	r2, [pc, #216]	; (76c0 <FinishAesDrv+0x21c>)
    75e8:	6013      	str	r3, [r2, #0]
    75ea:	4b2c      	ldr	r3, [pc, #176]	; (769c <FinishAesDrv+0x1f8>)
    75ec:	681f      	ldr	r7, [r3, #0]
    75ee:	2f00      	cmp	r7, #0
    75f0:	d1fc      	bne.n	75ec <FinishAesDrv+0x148>
    75f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    75f4:	3b01      	subs	r3, #1
    75f6:	2b06      	cmp	r3, #6
    75f8:	d8c2      	bhi.n	7580 <FinishAesDrv+0xdc>
    75fa:	a201      	add	r2, pc, #4	; (adr r2, 7600 <FinishAesDrv+0x15c>)
    75fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7600:	00007625 	.word	0x00007625
    7604:	0000763f 	.word	0x0000763f
    7608:	00007625 	.word	0x00007625
    760c:	00007581 	.word	0x00007581
    7610:	00007581 	.word	0x00007581
    7614:	0000763f 	.word	0x0000763f
    7618:	00007625 	.word	0x00007625
    761c:	6821      	ldr	r1, [r4, #0]
    761e:	4a29      	ldr	r2, [pc, #164]	; (76c4 <FinishAesDrv+0x220>)
    7620:	4b29      	ldr	r3, [pc, #164]	; (76c8 <FinishAesDrv+0x224>)
    7622:	e7d0      	b.n	75c6 <FinishAesDrv+0x122>
    7624:	4a22      	ldr	r2, [pc, #136]	; (76b0 <FinishAesDrv+0x20c>)
    7626:	4b23      	ldr	r3, [pc, #140]	; (76b4 <FinishAesDrv+0x210>)
    7628:	6811      	ldr	r1, [r2, #0]
    762a:	3208      	adds	r2, #8
    762c:	6021      	str	r1, [r4, #0]
    762e:	6819      	ldr	r1, [r3, #0]
    7630:	3308      	adds	r3, #8
    7632:	6061      	str	r1, [r4, #4]
    7634:	6812      	ldr	r2, [r2, #0]
    7636:	60a2      	str	r2, [r4, #8]
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	60e3      	str	r3, [r4, #12]
    763c:	e7a0      	b.n	7580 <FinishAesDrv+0xdc>
    763e:	4a21      	ldr	r2, [pc, #132]	; (76c4 <FinishAesDrv+0x220>)
    7640:	4b21      	ldr	r3, [pc, #132]	; (76c8 <FinishAesDrv+0x224>)
    7642:	e7f1      	b.n	7628 <FinishAesDrv+0x184>
    7644:	4821      	ldr	r0, [pc, #132]	; (76cc <FinishAesDrv+0x228>)
    7646:	f7fd fcbd 	bl	4fc4 <CC_PalAbort>
    764a:	e76b      	b.n	7524 <FinishAesDrv+0x80>
    764c:	4820      	ldr	r0, [pc, #128]	; (76d0 <FinishAesDrv+0x22c>)
    764e:	f7fd fcb9 	bl	4fc4 <CC_PalAbort>
    7652:	e761      	b.n	7518 <FinishAesDrv+0x74>
    7654:	481f      	ldr	r0, [pc, #124]	; (76d4 <FinishAesDrv+0x230>)
    7656:	f7fd fcb5 	bl	4fc4 <CC_PalAbort>
    765a:	e79c      	b.n	7596 <FinishAesDrv+0xf2>
    765c:	4f1e      	ldr	r7, [pc, #120]	; (76d8 <FinishAesDrv+0x234>)
    765e:	e78f      	b.n	7580 <FinishAesDrv+0xdc>
    7660:	4f1e      	ldr	r7, [pc, #120]	; (76dc <FinishAesDrv+0x238>)
    7662:	e78d      	b.n	7580 <FinishAesDrv+0xdc>
    7664:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7666:	6833      	ldr	r3, [r6, #0]
    7668:	2a01      	cmp	r2, #1
    766a:	d00a      	beq.n	7682 <FinishAesDrv+0x1de>
    766c:	2010      	movs	r0, #16
    766e:	491c      	ldr	r1, [pc, #112]	; (76e0 <FinishAesDrv+0x23c>)
    7670:	4a1c      	ldr	r2, [pc, #112]	; (76e4 <FinishAesDrv+0x240>)
    7672:	600b      	str	r3, [r1, #0]
    7674:	6015      	str	r5, [r2, #0]
    7676:	f7fe fb5d 	bl	5d34 <CC_HalWaitInterrupt>
    767a:	4607      	mov	r7, r0
    767c:	2800      	cmp	r0, #0
    767e:	d0b4      	beq.n	75ea <FinishAesDrv+0x146>
    7680:	e77e      	b.n	7580 <FinishAesDrv+0xdc>
    7682:	4919      	ldr	r1, [pc, #100]	; (76e8 <FinishAesDrv+0x244>)
    7684:	4a19      	ldr	r2, [pc, #100]	; (76ec <FinishAesDrv+0x248>)
    7686:	600b      	str	r3, [r1, #0]
    7688:	2040      	movs	r0, #64	; 0x40
    768a:	6015      	str	r5, [r2, #0]
    768c:	e7f3      	b.n	7676 <FinishAesDrv+0x1d2>
    768e:	bf00      	nop
    7690:	00f1000b 	.word	0x00f1000b
    7694:	200000b8 	.word	0x200000b8
    7698:	50841810 	.word	0x50841810
    769c:	50841910 	.word	0x50841910
    76a0:	00f10001 	.word	0x00f10001
    76a4:	00008830 	.word	0x00008830
    76a8:	00f10005 	.word	0x00f10005
    76ac:	00f10002 	.word	0x00f10002
    76b0:	50841440 	.word	0x50841440
    76b4:	50841444 	.word	0x50841444
    76b8:	5084147c 	.word	0x5084147c
    76bc:	508414bc 	.word	0x508414bc
    76c0:	50841524 	.word	0x50841524
    76c4:	50841460 	.word	0x50841460
    76c8:	50841464 	.word	0x50841464
    76cc:	000087f0 	.word	0x000087f0
    76d0:	000087d8 	.word	0x000087d8
    76d4:	00008810 	.word	0x00008810
    76d8:	00f10003 	.word	0x00f10003
    76dc:	00f10004 	.word	0x00f10004
    76e0:	50841c30 	.word	0x50841c30
    76e4:	50841c34 	.word	0x50841c34
    76e8:	50841c28 	.word	0x50841c28
    76ec:	50841c2c 	.word	0x50841c2c

000076f0 <kmu_validate_slot_and_size>:
    76f0:	287f      	cmp	r0, #127	; 0x7f
    76f2:	d80c      	bhi.n	770e <kmu_validate_slot_and_size+0x1e>
    76f4:	b149      	cbz	r1, 770a <kmu_validate_slot_and_size+0x1a>
    76f6:	2903      	cmp	r1, #3
    76f8:	d001      	beq.n	76fe <kmu_validate_slot_and_size+0xe>
    76fa:	4806      	ldr	r0, [pc, #24]	; (7714 <kmu_validate_slot_and_size+0x24>)
    76fc:	4770      	bx	lr
    76fe:	4906      	ldr	r1, [pc, #24]	; (7718 <kmu_validate_slot_and_size+0x28>)
    7700:	287f      	cmp	r0, #127	; 0x7f
    7702:	bf0c      	ite	eq
    7704:	4608      	moveq	r0, r1
    7706:	2000      	movne	r0, #0
    7708:	4770      	bx	lr
    770a:	4608      	mov	r0, r1
    770c:	4770      	bx	lr
    770e:	4802      	ldr	r0, [pc, #8]	; (7718 <kmu_validate_slot_and_size+0x28>)
    7710:	4770      	bx	lr
    7712:	bf00      	nop
    7714:	00f70003 	.word	0x00f70003
    7718:	00f70001 	.word	0x00f70001

0000771c <kmu_validate_slot_and_size_no_kdr>:
    771c:	b4f0      	push	{r4, r5, r6, r7}
    771e:	4a1c      	ldr	r2, [pc, #112]	; (7790 <kmu_validate_slot_and_size_no_kdr+0x74>)
    7720:	00c5      	lsls	r5, r0, #3
    7722:	1c44      	adds	r4, r0, #1
    7724:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
    7728:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    772c:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7730:	681c      	ldr	r4, [r3, #0]
    7732:	b082      	sub	sp, #8
    7734:	f3bf 8f4f 	dsb	sy
    7738:	2300      	movs	r3, #0
    773a:	9400      	str	r4, [sp, #0]
    773c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7740:	9e00      	ldr	r6, [sp, #0]
    7742:	4c14      	ldr	r4, [pc, #80]	; (7794 <kmu_validate_slot_and_size_no_kdr+0x78>)
    7744:	42a6      	cmp	r6, r4
    7746:	d018      	beq.n	777a <kmu_validate_slot_and_size_no_kdr+0x5e>
    7748:	b1a9      	cbz	r1, 7776 <kmu_validate_slot_and_size_no_kdr+0x5a>
    774a:	4e13      	ldr	r6, [pc, #76]	; (7798 <kmu_validate_slot_and_size_no_kdr+0x7c>)
    774c:	1c87      	adds	r7, r0, #2
    774e:	442e      	add	r6, r5
    7750:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
    7754:	6835      	ldr	r5, [r6, #0]
    7756:	f3bf 8f4f 	dsb	sy
    775a:	9501      	str	r5, [sp, #4]
    775c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7760:	9a01      	ldr	r2, [sp, #4]
    7762:	42a2      	cmp	r2, r4
    7764:	d009      	beq.n	777a <kmu_validate_slot_and_size_no_kdr+0x5e>
    7766:	287f      	cmp	r0, #127	; 0x7f
    7768:	d807      	bhi.n	777a <kmu_validate_slot_and_size_no_kdr+0x5e>
    776a:	2903      	cmp	r1, #3
    776c:	d10b      	bne.n	7786 <kmu_validate_slot_and_size_no_kdr+0x6a>
    776e:	287f      	cmp	r0, #127	; 0x7f
    7770:	d003      	beq.n	777a <kmu_validate_slot_and_size_no_kdr+0x5e>
    7772:	4618      	mov	r0, r3
    7774:	e002      	b.n	777c <kmu_validate_slot_and_size_no_kdr+0x60>
    7776:	287f      	cmp	r0, #127	; 0x7f
    7778:	d903      	bls.n	7782 <kmu_validate_slot_and_size_no_kdr+0x66>
    777a:	4808      	ldr	r0, [pc, #32]	; (779c <kmu_validate_slot_and_size_no_kdr+0x80>)
    777c:	b002      	add	sp, #8
    777e:	bcf0      	pop	{r4, r5, r6, r7}
    7780:	4770      	bx	lr
    7782:	4608      	mov	r0, r1
    7784:	e7fa      	b.n	777c <kmu_validate_slot_and_size_no_kdr+0x60>
    7786:	4806      	ldr	r0, [pc, #24]	; (77a0 <kmu_validate_slot_and_size_no_kdr+0x84>)
    7788:	b002      	add	sp, #8
    778a:	bcf0      	pop	{r4, r5, r6, r7}
    778c:	4770      	bx	lr
    778e:	bf00      	nop
    7790:	50039000 	.word	0x50039000
    7794:	50841a50 	.word	0x50841a50
    7798:	00ff8408 	.word	0x00ff8408
    779c:	00f70001 	.word	0x00f70001
    77a0:	00f70003 	.word	0x00f70003

000077a4 <kmu_validate_kdr_slot_and_size>:
    77a4:	b9b9      	cbnz	r1, 77d6 <kmu_validate_kdr_slot_and_size+0x32>
    77a6:	4a0d      	ldr	r2, [pc, #52]	; (77dc <kmu_validate_kdr_slot_and_size+0x38>)
    77a8:	00c3      	lsls	r3, r0, #3
    77aa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    77ae:	3001      	adds	r0, #1
    77b0:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    77b4:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    77b8:	b082      	sub	sp, #8
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	f3bf 8f4f 	dsb	sy
    77c0:	9301      	str	r3, [sp, #4]
    77c2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    77c6:	9a01      	ldr	r2, [sp, #4]
    77c8:	4b05      	ldr	r3, [pc, #20]	; (77e0 <kmu_validate_kdr_slot_and_size+0x3c>)
    77ca:	4806      	ldr	r0, [pc, #24]	; (77e4 <kmu_validate_kdr_slot_and_size+0x40>)
    77cc:	429a      	cmp	r2, r3
    77ce:	bf08      	it	eq
    77d0:	2000      	moveq	r0, #0
    77d2:	b002      	add	sp, #8
    77d4:	4770      	bx	lr
    77d6:	4804      	ldr	r0, [pc, #16]	; (77e8 <kmu_validate_kdr_slot_and_size+0x44>)
    77d8:	4770      	bx	lr
    77da:	bf00      	nop
    77dc:	50039000 	.word	0x50039000
    77e0:	50841a50 	.word	0x50841a50
    77e4:	00f70001 	.word	0x00f70001
    77e8:	00f70003 	.word	0x00f70003

000077ec <kmu_use_kdr_key>:
    77ec:	2000      	movs	r0, #0
    77ee:	2201      	movs	r2, #1
    77f0:	4902      	ldr	r1, [pc, #8]	; (77fc <kmu_use_kdr_key+0x10>)
    77f2:	4b03      	ldr	r3, [pc, #12]	; (7800 <kmu_use_kdr_key+0x14>)
    77f4:	6008      	str	r0, [r1, #0]
    77f6:	601a      	str	r2, [r3, #0]
    77f8:	4770      	bx	lr
    77fa:	bf00      	nop
    77fc:	50841a38 	.word	0x50841a38
    7800:	50841478 	.word	0x50841478

00007804 <kmu_load_key_aes>:
    7804:	b109      	cbz	r1, 780a <kmu_load_key_aes+0x6>
    7806:	4832      	ldr	r0, [pc, #200]	; (78d0 <kmu_load_key_aes+0xcc>)
    7808:	4770      	bx	lr
    780a:	b430      	push	{r4, r5}
    780c:	2401      	movs	r4, #1
    780e:	4b31      	ldr	r3, [pc, #196]	; (78d4 <kmu_load_key_aes+0xd0>)
    7810:	4a31      	ldr	r2, [pc, #196]	; (78d8 <kmu_load_key_aes+0xd4>)
    7812:	b084      	sub	sp, #16
    7814:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7818:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    781c:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    7820:	00c2      	lsls	r2, r0, #3
    7822:	9502      	str	r5, [sp, #8]
    7824:	9d02      	ldr	r5, [sp, #8]
    7826:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    782a:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    782e:	4420      	add	r0, r4
    7830:	9502      	str	r5, [sp, #8]
    7832:	9d02      	ldr	r5, [sp, #8]
    7834:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7838:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    783c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    7840:	9102      	str	r1, [sp, #8]
    7842:	9902      	ldr	r1, [sp, #8]
    7844:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
    7848:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    784c:	6812      	ldr	r2, [r2, #0]
    784e:	f3bf 8f4f 	dsb	sy
    7852:	9203      	str	r2, [sp, #12]
    7854:	9903      	ldr	r1, [sp, #12]
    7856:	4a21      	ldr	r2, [pc, #132]	; (78dc <kmu_load_key_aes+0xd8>)
    7858:	4291      	cmp	r1, r2
    785a:	d132      	bne.n	78c2 <kmu_load_key_aes+0xbe>
    785c:	461a      	mov	r2, r3
    785e:	601c      	str	r4, [r3, #0]
    7860:	e005      	b.n	786e <kmu_load_key_aes+0x6a>
    7862:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7866:	b9db      	cbnz	r3, 78a0 <kmu_load_key_aes+0x9c>
    7868:	f89d 3007 	ldrb.w	r3, [sp, #7]
    786c:	b9c3      	cbnz	r3, 78a0 <kmu_load_key_aes+0x9c>
    786e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7872:	3b00      	subs	r3, #0
    7874:	bf18      	it	ne
    7876:	2301      	movne	r3, #1
    7878:	f88d 3005 	strb.w	r3, [sp, #5]
    787c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7880:	3b00      	subs	r3, #0
    7882:	bf18      	it	ne
    7884:	2301      	movne	r3, #1
    7886:	f88d 3006 	strb.w	r3, [sp, #6]
    788a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    788e:	3b00      	subs	r3, #0
    7890:	bf18      	it	ne
    7892:	2301      	movne	r3, #1
    7894:	f88d 3007 	strb.w	r3, [sp, #7]
    7898:	f89d 3005 	ldrb.w	r3, [sp, #5]
    789c:	2b00      	cmp	r3, #0
    789e:	d0e0      	beq.n	7862 <kmu_load_key_aes+0x5e>
    78a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    78a4:	b98b      	cbnz	r3, 78ca <kmu_load_key_aes+0xc6>
    78a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    78ae:	b933      	cbnz	r3, 78be <kmu_load_key_aes+0xba>
    78b0:	4610      	mov	r0, r2
    78b2:	4b08      	ldr	r3, [pc, #32]	; (78d4 <kmu_load_key_aes+0xd0>)
    78b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    78b8:	b004      	add	sp, #16
    78ba:	bc30      	pop	{r4, r5}
    78bc:	4770      	bx	lr
    78be:	4808      	ldr	r0, [pc, #32]	; (78e0 <kmu_load_key_aes+0xdc>)
    78c0:	e7fa      	b.n	78b8 <kmu_load_key_aes+0xb4>
    78c2:	4808      	ldr	r0, [pc, #32]	; (78e4 <kmu_load_key_aes+0xe0>)
    78c4:	b004      	add	sp, #16
    78c6:	bc30      	pop	{r4, r5}
    78c8:	4770      	bx	lr
    78ca:	4807      	ldr	r0, [pc, #28]	; (78e8 <kmu_load_key_aes+0xe4>)
    78cc:	e7f4      	b.n	78b8 <kmu_load_key_aes+0xb4>
    78ce:	bf00      	nop
    78d0:	00f1000c 	.word	0x00f1000c
    78d4:	50039000 	.word	0x50039000
    78d8:	50840000 	.word	0x50840000
    78dc:	50841400 	.word	0x50841400
    78e0:	00f70002 	.word	0x00f70002
    78e4:	00f70006 	.word	0x00f70006
    78e8:	00f70001 	.word	0x00f70001

000078ec <kmu_derive_cmac>:
    78ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78f0:	2400      	movs	r4, #0
    78f2:	b0ce      	sub	sp, #312	; 0x138
    78f4:	4605      	mov	r5, r0
    78f6:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    78fa:	468a      	mov	sl, r1
    78fc:	4617      	mov	r7, r2
    78fe:	4621      	mov	r1, r4
    7900:	2274      	movs	r2, #116	; 0x74
    7902:	a810      	add	r0, sp, #64	; 0x40
    7904:	4698      	mov	r8, r3
    7906:	f000 fa43 	bl	7d90 <memset>
    790a:	4621      	mov	r1, r4
    790c:	2280      	movs	r2, #128	; 0x80
    790e:	a82e      	add	r0, sp, #184	; 0xb8
    7910:	942d      	str	r4, [sp, #180]	; 0xb4
    7912:	f000 fa3d 	bl	7d90 <memset>
    7916:	2384      	movs	r3, #132	; 0x84
    7918:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    791c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    7920:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    7924:	9306      	str	r3, [sp, #24]
    7926:	d873      	bhi.n	7a10 <kmu_derive_cmac+0x124>
    7928:	ab06      	add	r3, sp, #24
    792a:	ac2d      	add	r4, sp, #180	; 0xb4
    792c:	9301      	str	r3, [sp, #4]
    792e:	4641      	mov	r1, r8
    7930:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    7934:	4638      	mov	r0, r7
    7936:	9602      	str	r6, [sp, #8]
    7938:	9400      	str	r4, [sp, #0]
    793a:	f000 f87d 	bl	7a38 <UtilCmacBuildDataForDerivation>
    793e:	2800      	cmp	r0, #0
    7940:	d16d      	bne.n	7a1e <kmu_derive_cmac+0x132>
    7942:	2200      	movs	r2, #0
    7944:	2301      	movs	r3, #1
    7946:	2101      	movs	r1, #1
    7948:	2707      	movs	r7, #7
    794a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    794e:	4a36      	ldr	r2, [pc, #216]	; (7a28 <kmu_derive_cmac+0x13c>)
    7950:	00eb      	lsls	r3, r5, #3
    7952:	9520      	str	r5, [sp, #128]	; 0x80
    7954:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7958:	440d      	add	r5, r1
    795a:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
    795e:	901e      	str	r0, [sp, #120]	; 0x78
    7960:	9128      	str	r1, [sp, #160]	; 0xa0
    7962:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7966:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
    796a:	681b      	ldr	r3, [r3, #0]
    796c:	f3bf 8f4f 	dsb	sy
    7970:	9307      	str	r3, [sp, #28]
    7972:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7976:	9a07      	ldr	r2, [sp, #28]
    7978:	4b2c      	ldr	r3, [pc, #176]	; (7a2c <kmu_derive_cmac+0x140>)
    797a:	429a      	cmp	r2, r3
    797c:	d142      	bne.n	7a04 <kmu_derive_cmac+0x118>
    797e:	2203      	movs	r2, #3
    7980:	f10d 0317 	add.w	r3, sp, #23
    7984:	701a      	strb	r2, [r3, #0]
    7986:	781b      	ldrb	r3, [r3, #0]
    7988:	2110      	movs	r1, #16
    798a:	a810      	add	r0, sp, #64	; 0x40
    798c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    7990:	f7ff f820 	bl	69d4 <CC_PalMemSetZeroPlat>
    7994:	2210      	movs	r2, #16
    7996:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    799a:	9200      	str	r2, [sp, #0]
    799c:	4620      	mov	r0, r4
    799e:	9906      	ldr	r1, [sp, #24]
    79a0:	ab0c      	add	r3, sp, #48	; 0x30
    79a2:	aa08      	add	r2, sp, #32
    79a4:	f8cd 8004 	str.w	r8, [sp, #4]
    79a8:	f7ff f8ec 	bl	6b84 <SetDataBuffersInfo>
    79ac:	4607      	mov	r7, r0
    79ae:	bb00      	cbnz	r0, 79f2 <kmu_derive_cmac+0x106>
    79b0:	2401      	movs	r4, #1
    79b2:	e010      	b.n	79d6 <kmu_derive_cmac+0xea>
    79b4:	2e10      	cmp	r6, #16
    79b6:	4635      	mov	r5, r6
    79b8:	bf28      	it	cs
    79ba:	2510      	movcs	r5, #16
    79bc:	a910      	add	r1, sp, #64	; 0x40
    79be:	462a      	mov	r2, r5
    79c0:	f7ff f804 	bl	69cc <CC_PalMemCopyPlat>
    79c4:	2110      	movs	r1, #16
    79c6:	a810      	add	r0, sp, #64	; 0x40
    79c8:	f7ff f804 	bl	69d4 <CC_PalMemSetZeroPlat>
    79cc:	3401      	adds	r4, #1
    79ce:	1b76      	subs	r6, r6, r5
    79d0:	442f      	add	r7, r5
    79d2:	b2e4      	uxtb	r4, r4
    79d4:	d021      	beq.n	7a1a <kmu_derive_cmac+0x12e>
    79d6:	9b06      	ldr	r3, [sp, #24]
    79d8:	4642      	mov	r2, r8
    79da:	a908      	add	r1, sp, #32
    79dc:	a810      	add	r0, sp, #64	; 0x40
    79de:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    79e2:	f7ff fd5f 	bl	74a4 <FinishAesDrv>
    79e6:	4603      	mov	r3, r0
    79e8:	eb09 0007 	add.w	r0, r9, r7
    79ec:	2b00      	cmp	r3, #0
    79ee:	d0e1      	beq.n	79b4 <kmu_derive_cmac+0xc8>
    79f0:	461f      	mov	r7, r3
    79f2:	a810      	add	r0, sp, #64	; 0x40
    79f4:	2274      	movs	r2, #116	; 0x74
    79f6:	2100      	movs	r1, #0
    79f8:	f7fe ffea 	bl	69d0 <CC_PalMemSetPlat>
    79fc:	4638      	mov	r0, r7
    79fe:	b04e      	add	sp, #312	; 0x138
    7a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a04:	2202      	movs	r2, #2
    7a06:	f10d 0317 	add.w	r3, sp, #23
    7a0a:	f88d 2017 	strb.w	r2, [sp, #23]
    7a0e:	e7ba      	b.n	7986 <kmu_derive_cmac+0x9a>
    7a10:	4f07      	ldr	r7, [pc, #28]	; (7a30 <kmu_derive_cmac+0x144>)
    7a12:	4638      	mov	r0, r7
    7a14:	b04e      	add	sp, #312	; 0x138
    7a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a1a:	4637      	mov	r7, r6
    7a1c:	e7e9      	b.n	79f2 <kmu_derive_cmac+0x106>
    7a1e:	4f05      	ldr	r7, [pc, #20]	; (7a34 <kmu_derive_cmac+0x148>)
    7a20:	4638      	mov	r0, r7
    7a22:	b04e      	add	sp, #312	; 0x138
    7a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a28:	50039000 	.word	0x50039000
    7a2c:	50841a50 	.word	0x50841a50
    7a30:	00f1000f 	.word	0x00f1000f
    7a34:	00f1000e 	.word	0x00f1000e

00007a38 <UtilCmacBuildDataForDerivation>:
    7a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a3c:	2600      	movs	r6, #0
    7a3e:	b082      	sub	sp, #8
    7a40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7a42:	9601      	str	r6, [sp, #4]
    7a44:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    7a48:	d83b      	bhi.n	7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a4a:	00ee      	lsls	r6, r5, #3
    7a4c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    7a50:	461f      	mov	r7, r3
    7a52:	bf34      	ite	cc
    7a54:	2303      	movcc	r3, #3
    7a56:	2304      	movcs	r3, #4
    7a58:	1e4d      	subs	r5, r1, #1
    7a5a:	2d3f      	cmp	r5, #63	; 0x3f
    7a5c:	460c      	mov	r4, r1
    7a5e:	9300      	str	r3, [sp, #0]
    7a60:	d82f      	bhi.n	7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a62:	b370      	cbz	r0, 7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a64:	4690      	mov	r8, r2
    7a66:	b117      	cbz	r7, 7a6e <UtilCmacBuildDataForDerivation+0x36>
    7a68:	b35a      	cbz	r2, 7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a6a:	2f40      	cmp	r7, #64	; 0x40
    7a6c:	d829      	bhi.n	7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a6e:	9a08      	ldr	r2, [sp, #32]
    7a70:	b33a      	cbz	r2, 7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7a74:	6811      	ldr	r1, [r2, #0]
    7a76:	b321      	cbz	r1, 7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a78:	19e2      	adds	r2, r4, r7
    7a7a:	4413      	add	r3, r2
    7a7c:	4299      	cmp	r1, r3
    7a7e:	d320      	bcc.n	7ac2 <UtilCmacBuildDataForDerivation+0x8a>
    7a80:	9b08      	ldr	r3, [sp, #32]
    7a82:	4622      	mov	r2, r4
    7a84:	4601      	mov	r1, r0
    7a86:	1c58      	adds	r0, r3, #1
    7a88:	f7fe ffa0 	bl	69cc <CC_PalMemCopyPlat>
    7a8c:	2200      	movs	r2, #0
    7a8e:	9b08      	ldr	r3, [sp, #32]
    7a90:	4423      	add	r3, r4
    7a92:	705a      	strb	r2, [r3, #1]
    7a94:	3402      	adds	r4, #2
    7a96:	bb07      	cbnz	r7, 7ada <UtilCmacBuildDataForDerivation+0xa2>
    7a98:	2eff      	cmp	r6, #255	; 0xff
    7a9a:	9600      	str	r6, [sp, #0]
    7a9c:	d915      	bls.n	7aca <UtilCmacBuildDataForDerivation+0x92>
    7a9e:	9b08      	ldr	r3, [sp, #32]
    7aa0:	0235      	lsls	r5, r6, #8
    7aa2:	b2ad      	uxth	r5, r5
    7aa4:	1918      	adds	r0, r3, r4
    7aa6:	2202      	movs	r2, #2
    7aa8:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    7aac:	a901      	add	r1, sp, #4
    7aae:	9501      	str	r5, [sp, #4]
    7ab0:	f7fe ff8c 	bl	69cc <CC_PalMemCopyPlat>
    7ab4:	3402      	adds	r4, #2
    7ab6:	2000      	movs	r0, #0
    7ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7aba:	601c      	str	r4, [r3, #0]
    7abc:	b002      	add	sp, #8
    7abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ac2:	480a      	ldr	r0, [pc, #40]	; (7aec <UtilCmacBuildDataForDerivation+0xb4>)
    7ac4:	b002      	add	sp, #8
    7ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aca:	9b08      	ldr	r3, [sp, #32]
    7acc:	2201      	movs	r2, #1
    7ace:	1918      	adds	r0, r3, r4
    7ad0:	4669      	mov	r1, sp
    7ad2:	f7fe ff7b 	bl	69cc <CC_PalMemCopyPlat>
    7ad6:	3401      	adds	r4, #1
    7ad8:	e7ed      	b.n	7ab6 <UtilCmacBuildDataForDerivation+0x7e>
    7ada:	9b08      	ldr	r3, [sp, #32]
    7adc:	4641      	mov	r1, r8
    7ade:	1918      	adds	r0, r3, r4
    7ae0:	463a      	mov	r2, r7
    7ae2:	f7fe ff73 	bl	69cc <CC_PalMemCopyPlat>
    7ae6:	443c      	add	r4, r7
    7ae8:	e7d6      	b.n	7a98 <UtilCmacBuildDataForDerivation+0x60>
    7aea:	bf00      	nop
    7aec:	80000006 	.word	0x80000006

00007af0 <CC_PalDataBufferAttrGet>:
    7af0:	2000      	movs	r0, #0
    7af2:	7018      	strb	r0, [r3, #0]
    7af4:	4770      	bx	lr
    7af6:	bf00      	nop

00007af8 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    7af8:	b508      	push	{r3, lr}
	spm_config();
    7afa:	f7f9 fb45 	bl	1188 <spm_config>
	spm_jump();
}
    7afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    7b02:	f7f9 baf9 	b.w	10f8 <spm_jump>

00007b06 <arch_printk_char_out>:
}
    7b06:	2000      	movs	r0, #0
    7b08:	4770      	bx	lr

00007b0a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    7b0a:	b40f      	push	{r0, r1, r2, r3}
    7b0c:	b507      	push	{r0, r1, r2, lr}
    7b0e:	a904      	add	r1, sp, #16
    7b10:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7b14:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7b16:	f7f8 fd27 	bl	568 <vprintk>
	}
	va_end(ap);
}
    7b1a:	b003      	add	sp, #12
    7b1c:	f85d eb04 	ldr.w	lr, [sp], #4
    7b20:	b004      	add	sp, #16
    7b22:	4770      	bx	lr

00007b24 <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
    7b24:	b538      	push	{r3, r4, r5, lr}
    7b26:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7b28:	4605      	mov	r5, r0
    7b2a:	b158      	cbz	r0, 7b44 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7b2c:	b151      	cbz	r1, 7b44 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7b2e:	680b      	ldr	r3, [r1, #0]
    7b30:	b143      	cbz	r3, 7b44 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7b32:	684b      	ldr	r3, [r1, #4]
    7b34:	b133      	cbz	r3, 7b44 <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7b36:	2220      	movs	r2, #32
    7b38:	2100      	movs	r1, #0
    7b3a:	f000 f929 	bl	7d90 <memset>

	return 0;
    7b3e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7b40:	612c      	str	r4, [r5, #16]
}
    7b42:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7b44:	f06f 0015 	mvn.w	r0, #21
    7b48:	e7fb      	b.n	7b42 <onoff_manager_init+0x1e>

00007b4a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7b4a:	4604      	mov	r4, r0
    7b4c:	b508      	push	{r3, lr}
    7b4e:	4608      	mov	r0, r1
    7b50:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7b52:	461a      	mov	r2, r3
    7b54:	47a0      	blx	r4
	return z_impl_z_current_get();
    7b56:	f7fc febb 	bl	48d0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7b5a:	f7fa f9c7 	bl	1eec <z_impl_k_thread_abort>

00007b5e <encode_uint>:
{
    7b5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b62:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7b64:	78d3      	ldrb	r3, [r2, #3]
{
    7b66:	4680      	mov	r8, r0
	switch (specifier) {
    7b68:	2b6f      	cmp	r3, #111	; 0x6f
{
    7b6a:	460f      	mov	r7, r1
    7b6c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7b6e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7b72:	d029      	beq.n	7bc8 <encode_uint+0x6a>
    7b74:	d824      	bhi.n	7bc0 <encode_uint+0x62>
		return 16;
    7b76:	2b58      	cmp	r3, #88	; 0x58
    7b78:	bf14      	ite	ne
    7b7a:	260a      	movne	r6, #10
    7b7c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    7b7e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7b82:	4632      	mov	r2, r6
    7b84:	2300      	movs	r3, #0
    7b86:	4640      	mov	r0, r8
    7b88:	4639      	mov	r1, r7
    7b8a:	f7f8 fb57 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b8e:	2a09      	cmp	r2, #9
    7b90:	b2d4      	uxtb	r4, r2
    7b92:	d81e      	bhi.n	7bd2 <encode_uint+0x74>
    7b94:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7b96:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b98:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7b9a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7b9e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7ba2:	d301      	bcc.n	7ba8 <encode_uint+0x4a>
    7ba4:	45d1      	cmp	r9, sl
    7ba6:	d811      	bhi.n	7bcc <encode_uint+0x6e>
	if (conv->flag_hash) {
    7ba8:	782b      	ldrb	r3, [r5, #0]
    7baa:	069b      	lsls	r3, r3, #26
    7bac:	d505      	bpl.n	7bba <encode_uint+0x5c>
		if (radix == 8) {
    7bae:	2e08      	cmp	r6, #8
    7bb0:	d115      	bne.n	7bde <encode_uint+0x80>
			conv->altform_0 = true;
    7bb2:	78ab      	ldrb	r3, [r5, #2]
    7bb4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7bb8:	70ab      	strb	r3, [r5, #2]
}
    7bba:	4648      	mov	r0, r9
    7bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7bc0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7bc4:	2b70      	cmp	r3, #112	; 0x70
    7bc6:	e7d7      	b.n	7b78 <encode_uint+0x1a>
	switch (specifier) {
    7bc8:	2608      	movs	r6, #8
    7bca:	e7d8      	b.n	7b7e <encode_uint+0x20>
		value /= radix;
    7bcc:	4680      	mov	r8, r0
    7bce:	460f      	mov	r7, r1
    7bd0:	e7d7      	b.n	7b82 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7bd2:	f1bb 0f19 	cmp.w	fp, #25
    7bd6:	bf94      	ite	ls
    7bd8:	3437      	addls	r4, #55	; 0x37
    7bda:	3457      	addhi	r4, #87	; 0x57
    7bdc:	e7db      	b.n	7b96 <encode_uint+0x38>
		} else if (radix == 16) {
    7bde:	2e10      	cmp	r6, #16
    7be0:	d1eb      	bne.n	7bba <encode_uint+0x5c>
			conv->altform_0c = true;
    7be2:	78ab      	ldrb	r3, [r5, #2]
    7be4:	f043 0310 	orr.w	r3, r3, #16
    7be8:	e7e6      	b.n	7bb8 <encode_uint+0x5a>

00007bea <outs>:
{
    7bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bee:	4607      	mov	r7, r0
    7bf0:	4688      	mov	r8, r1
    7bf2:	4615      	mov	r5, r2
    7bf4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7bf6:	4614      	mov	r4, r2
    7bf8:	42b4      	cmp	r4, r6
    7bfa:	eba4 0005 	sub.w	r0, r4, r5
    7bfe:	d302      	bcc.n	7c06 <outs+0x1c>
    7c00:	b93e      	cbnz	r6, 7c12 <outs+0x28>
    7c02:	7823      	ldrb	r3, [r4, #0]
    7c04:	b12b      	cbz	r3, 7c12 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7c06:	4641      	mov	r1, r8
    7c08:	f814 0b01 	ldrb.w	r0, [r4], #1
    7c0c:	47b8      	blx	r7
		if (rc < 0) {
    7c0e:	2800      	cmp	r0, #0
    7c10:	daf2      	bge.n	7bf8 <outs+0xe>
}
    7c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007c16 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7c16:	4040      	eors	r0, r0
    7c18:	f380 8811 	msr	BASEPRI, r0
    7c1c:	f04f 0004 	mov.w	r0, #4
    7c20:	df02      	svc	2
}
    7c22:	4770      	bx	lr

00007c24 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7c24:	4770      	bx	lr

00007c26 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7c26:	b084      	sub	sp, #16
    7c28:	ab04      	add	r3, sp, #16
    7c2a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7c2e:	2300      	movs	r3, #0
    7c30:	f383 8811 	msr	BASEPRI, r3
    7c34:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7c38:	b004      	add	sp, #16
    7c3a:	4770      	bx	lr

00007c3c <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    7c3c:	b40f      	push	{r0, r1, r2, r3}
    7c3e:	b507      	push	{r0, r1, r2, lr}
    7c40:	a904      	add	r1, sp, #16
    7c42:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7c46:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7c48:	f7f8 fc8e 	bl	568 <vprintk>
	va_end(ap);
}
    7c4c:	b003      	add	sp, #12
    7c4e:	f85d eb04 	ldr.w	lr, [sp], #4
    7c52:	b004      	add	sp, #16
    7c54:	4770      	bx	lr

00007c56 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7c56:	2200      	movs	r2, #0
    7c58:	e9c0 2200 	strd	r2, r2, [r0]
    7c5c:	6082      	str	r2, [r0, #8]
}
    7c5e:	4770      	bx	lr

00007c60 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    7c60:	2000      	movs	r0, #0
{
    7c62:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7c64:	f7f9 f850 	bl	d08 <sys_reboot>

00007c68 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7c68:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7c6a:	6800      	ldr	r0, [r0, #0]
    7c6c:	f7f9 bcd4 	b.w	1618 <z_arm_fatal_error>

00007c70 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7c70:	2100      	movs	r1, #0
    7c72:	2001      	movs	r0, #1
    7c74:	f7f9 bcd0 	b.w	1618 <z_arm_fatal_error>

00007c78 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    7c78:	4602      	mov	r2, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
    7c7a:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    7c7c:	4608      	mov	r0, r1
    7c7e:	b9c1      	cbnz	r1, 7cb2 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    7c80:	2b00      	cmp	r3, #0
    7c82:	db27      	blt.n	7cd4 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7c84:	2001      	movs	r0, #1
    7c86:	095b      	lsrs	r3, r3, #5
    7c88:	009b      	lsls	r3, r3, #2
    7c8a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7c8e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7c92:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    7c96:	f002 021f 	and.w	r2, r2, #31
    7c9a:	4090      	lsls	r0, r2
    7c9c:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7ca0:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    7ca4:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    7ca8:	40d0      	lsrs	r0, r2
    7caa:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    7cae:	b2c0      	uxtb	r0, r0
    7cb0:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	db0d      	blt.n	7cd2 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    7cb6:	2101      	movs	r1, #1
    7cb8:	095b      	lsrs	r3, r3, #5
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7cc0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    7cc4:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    7cc8:	f002 021f 	and.w	r2, r2, #31
    7ccc:	4091      	lsls	r1, r2
    7cce:	4301      	orrs	r1, r0
    7cd0:	e7e6      	b.n	7ca0 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    7cd2:	2000      	movs	r0, #0
	}
}
    7cd4:	4770      	bx	lr

00007cd6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7cd6:	b508      	push	{r3, lr}
	handler();
    7cd8:	f7f9 fd10 	bl	16fc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7ce0:	f7f9 bdd2 	b.w	1888 <z_arm_exc_exit>

00007ce4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    7ce4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    7ce6:	f383 880b 	msr	PSPLIM, r3
}
    7cea:	4770      	bx	lr

00007cec <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    7cec:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    7cf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7cf4:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    7cf6:	bf08      	it	eq
    7cf8:	f06f 0015 	mvneq.w	r0, #21
    7cfc:	4770      	bx	lr

00007cfe <arm_cmse_addr_is_secure>:
    7cfe:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    7d02:	f3c0 5080 	ubfx	r0, r0, #22, #1
    7d06:	4770      	bx	lr

00007d08 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7d08:	4603      	mov	r3, r0
	size_t n = 0;
    7d0a:	2000      	movs	r0, #0

	while (*s != '\0') {
    7d0c:	5c1a      	ldrb	r2, [r3, r0]
    7d0e:	b902      	cbnz	r2, 7d12 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7d10:	4770      	bx	lr
		n++;
    7d12:	3001      	adds	r0, #1
    7d14:	e7fa      	b.n	7d0c <strlen+0x4>

00007d16 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7d16:	4603      	mov	r3, r0
	size_t n = 0;
    7d18:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7d1a:	5c1a      	ldrb	r2, [r3, r0]
    7d1c:	b10a      	cbz	r2, 7d22 <strnlen+0xc>
    7d1e:	4288      	cmp	r0, r1
    7d20:	d100      	bne.n	7d24 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7d22:	4770      	bx	lr
		n++;
    7d24:	3001      	adds	r0, #1
    7d26:	e7f8      	b.n	7d1a <strnlen+0x4>

00007d28 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    7d28:	4603      	mov	r3, r0
    7d2a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    7d2c:	b15a      	cbz	r2, 7d46 <memcmp+0x1e>
    7d2e:	3901      	subs	r1, #1
    7d30:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    7d32:	f813 0b01 	ldrb.w	r0, [r3], #1
    7d36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7d3a:	42a3      	cmp	r3, r4
    7d3c:	d001      	beq.n	7d42 <memcmp+0x1a>
    7d3e:	4290      	cmp	r0, r2
    7d40:	d0f7      	beq.n	7d32 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    7d42:	1a80      	subs	r0, r0, r2
}
    7d44:	bd10      	pop	{r4, pc}
		return 0;
    7d46:	4610      	mov	r0, r2
    7d48:	e7fc      	b.n	7d44 <memcmp+0x1c>

00007d4a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    7d4a:	1a43      	subs	r3, r0, r1
    7d4c:	4293      	cmp	r3, r2
{
    7d4e:	b510      	push	{r4, lr}
    7d50:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    7d54:	d308      	bcc.n	7d68 <memmove+0x1e>
	char *dest = d;
    7d56:	4602      	mov	r2, r0
    7d58:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    7d5a:	429a      	cmp	r2, r3
    7d5c:	d007      	beq.n	7d6e <memmove+0x24>
			*dest = *src;
    7d5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7d62:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    7d66:	e7f8      	b.n	7d5a <memmove+0x10>
    7d68:	440a      	add	r2, r1
		while (n > 0) {
    7d6a:	428a      	cmp	r2, r1
    7d6c:	d100      	bne.n	7d70 <memmove+0x26>
		}
	}

	return d;
}
    7d6e:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    7d70:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    7d74:	f803 4d01 	strb.w	r4, [r3, #-1]!
    7d78:	e7f7      	b.n	7d6a <memmove+0x20>

00007d7a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7d7a:	b510      	push	{r4, lr}
    7d7c:	1e43      	subs	r3, r0, #1
    7d7e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7d80:	4291      	cmp	r1, r2
    7d82:	d100      	bne.n	7d86 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7d84:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7d86:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7d8e:	e7f7      	b.n	7d80 <memcpy+0x6>

00007d90 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7d90:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    7d92:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7d94:	4402      	add	r2, r0
    7d96:	4293      	cmp	r3, r2
    7d98:	d100      	bne.n	7d9c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7d9a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7d9c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7da0:	e7f9      	b.n	7d96 <memset+0x6>

00007da2 <_stdout_hook_default>:
}
    7da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7da6:	4770      	bx	lr

00007da8 <set_on_state>:
	__asm__ volatile(
    7da8:	f04f 0320 	mov.w	r3, #32
    7dac:	f3ef 8211 	mrs	r2, BASEPRI
    7db0:	f383 8812 	msr	BASEPRI_MAX, r3
    7db4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7db8:	6803      	ldr	r3, [r0, #0]
    7dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7dbe:	f043 0302 	orr.w	r3, r3, #2
    7dc2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7dc4:	f382 8811 	msr	BASEPRI, r2
    7dc8:	f3bf 8f6f 	isb	sy
}
    7dcc:	4770      	bx	lr

00007dce <async_start>:
{
    7dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dd0:	9f06      	ldr	r7, [sp, #24]
    7dd2:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    7dd4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7dd6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7dd8:	f04f 0020 	mov.w	r0, #32
    7ddc:	f3ef 8c11 	mrs	ip, BASEPRI
    7de0:	f380 8812 	msr	BASEPRI_MAX, r0
    7de4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7de8:	260c      	movs	r6, #12
    7dea:	fb06 4601 	mla	r6, r6, r1, r4
    7dee:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7df0:	f000 0e07 	and.w	lr, r0, #7
    7df4:	f1be 0f01 	cmp.w	lr, #1
    7df8:	d110      	bne.n	7e1c <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7dfa:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    7dfc:	2600      	movs	r6, #0
	__asm__ volatile(
    7dfe:	f38c 8811 	msr	BASEPRI, ip
    7e02:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    7e06:	b93e      	cbnz	r6, 7e18 <async_start+0x4a>
	subdata->cb = cb;
    7e08:	200c      	movs	r0, #12
    7e0a:	4341      	muls	r1, r0
    7e0c:	440c      	add	r4, r1
	subdata->user_data = user_data;
    7e0e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    7e12:	686b      	ldr	r3, [r5, #4]
    7e14:	585b      	ldr	r3, [r3, r1]
    7e16:	4798      	blx	r3
}
    7e18:	4630      	mov	r0, r6
    7e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7e1c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7e20:	4287      	cmp	r7, r0
    7e22:	bf14      	ite	ne
    7e24:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    7e28:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7e2c:	e7e7      	b.n	7dfe <async_start+0x30>

00007e2e <api_start>:
{
    7e2e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7e30:	2480      	movs	r4, #128	; 0x80
    7e32:	9400      	str	r4, [sp, #0]
    7e34:	f7ff ffcb 	bl	7dce <async_start>
}
    7e38:	b002      	add	sp, #8
    7e3a:	bd10      	pop	{r4, pc}

00007e3c <onoff_started_callback>:
	return &data->mgr[type];
    7e3c:	6900      	ldr	r0, [r0, #16]
    7e3e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7e40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7e44:	2100      	movs	r1, #0
    7e46:	4710      	bx	r2

00007e48 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7e48:	2000      	movs	r0, #0
    7e4a:	f7fb b873 	b.w	2f34 <nrfx_clock_start>

00007e4e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7e4e:	2000      	movs	r0, #0
    7e50:	f7fb b8c2 	b.w	2fd8 <nrfx_clock_stop>

00007e54 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7e54:	2280      	movs	r2, #128	; 0x80
    7e56:	f7fa bb1d 	b.w	2494 <stop>

00007e5a <blocking_start_callback>:
{
    7e5a:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    7e5c:	f7fb bdf2 	b.w	3a44 <z_impl_k_sem_give>

00007e60 <uarte_nrfx_config_get>:
{
    7e60:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7e62:	6902      	ldr	r2, [r0, #16]
    7e64:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7e68:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7e6c:	2000      	movs	r0, #0
    7e6e:	4770      	bx	lr

00007e70 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7e70:	6843      	ldr	r3, [r0, #4]
    7e72:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7e74:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7e78:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7e7c:	4770      	bx	lr

00007e7e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7e7e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    7e80:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7e82:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7e88:	b148      	cbz	r0, 7e9e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e8a:	2000      	movs	r0, #0
	*c = data->rx_data;
    7e8c:	7c52      	ldrb	r2, [r2, #17]
    7e8e:	700a      	strb	r2, [r1, #0]
    7e90:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7e94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e98:	2201      	movs	r2, #1
    7e9a:	601a      	str	r2, [r3, #0]
	return 0;
    7e9c:	4770      	bx	lr
		return -1;
    7e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7ea2:	4770      	bx	lr

00007ea4 <nrf_gpio_cfg_input>:
{
    7ea4:	b513      	push	{r0, r1, r4, lr}
    7ea6:	460c      	mov	r4, r1
    7ea8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7eaa:	a801      	add	r0, sp, #4
    7eac:	f7fa fc42 	bl	2734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7eb0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7eb2:	00a4      	lsls	r4, r4, #2
    reg->PIN_CNF[pin_number] = cnf;
    7eb4:	3380      	adds	r3, #128	; 0x80
    7eb6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    7eba:	b002      	add	sp, #8
    7ebc:	bd10      	pop	{r4, pc}

00007ebe <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7ebe:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7ec0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ec2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7ec6:	b940      	cbnz	r0, 7eda <__kernel_ram_size+0xa>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7ec8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7eca:	079b      	lsls	r3, r3, #30
    7ecc:	d406      	bmi.n	7edc <__kernel_ram_size+0xc>
    7ece:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7ed2:	3800      	subs	r0, #0
    7ed4:	bf18      	it	ne
    7ed6:	2001      	movne	r0, #1
    7ed8:	4770      	bx	lr
    7eda:	2001      	movs	r0, #1
}
    7edc:	4770      	bx	lr

00007ede <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    7ede:	6843      	ldr	r3, [r0, #4]
    7ee0:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7ee2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7ee6:	05d1      	lsls	r1, r2, #23
    7ee8:	d518      	bpl.n	7f1c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7eea:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    7eee:	b1aa      	cbz	r2, 7f1c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7ef0:	f04f 0120 	mov.w	r1, #32
    7ef4:	f3ef 8211 	mrs	r2, BASEPRI
    7ef8:	f381 8812 	msr	BASEPRI_MAX, r1
    7efc:	f3bf 8f6f 	isb	sy
    7f00:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7f04:	b131      	cbz	r1, 7f14 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f06:	2100      	movs	r1, #0
    7f08:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7f0c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f10:	2101      	movs	r1, #1
    7f12:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7f14:	f382 8811 	msr	BASEPRI, r2
    7f18:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7f1c:	6842      	ldr	r2, [r0, #4]
    7f1e:	6852      	ldr	r2, [r2, #4]
    7f20:	06d2      	lsls	r2, r2, #27
    7f22:	d515      	bpl.n	7f50 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    7f24:	f04f 0120 	mov.w	r1, #32
    7f28:	f3ef 8211 	mrs	r2, BASEPRI
    7f2c:	f381 8812 	msr	BASEPRI_MAX, r1
    7f30:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f34:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7f38:	b111      	cbz	r1, 7f40 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7f3a:	2100      	movs	r1, #0
    7f3c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7f44:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7f48:	f382 8811 	msr	BASEPRI, r2
    7f4c:	f3bf 8f6f 	isb	sy
}
    7f50:	4770      	bx	lr

00007f52 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7f52:	2300      	movs	r3, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    7f54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return dev->config;
    7f58:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return dev->data;
    7f5c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    7f5e:	f8d8 4000 	ldr.w	r4, [r8]
static int uarte_instance_init(const struct device *dev,
    7f62:	4606      	mov	r6, r0
    7f64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7f68:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    7f6a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f6c:	68eb      	ldr	r3, [r5, #12]
    7f6e:	1c5a      	adds	r2, r3, #1
    7f70:	d011      	beq.n	7f96 <uarte_instance_init.constprop.0+0x44>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f72:	a801      	add	r0, sp, #4
    7f74:	9301      	str	r3, [sp, #4]
    7f76:	f7fa fbdd 	bl	2734 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f7a:	2301      	movs	r3, #1
    7f7c:	9a01      	ldr	r2, [sp, #4]
    7f7e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7f80:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    7f82:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f84:	a801      	add	r0, sp, #4
    7f86:	9301      	str	r3, [sp, #4]
    7f88:	f7fa fbd4 	bl	2734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7f8c:	2203      	movs	r2, #3
    7f8e:	9b01      	ldr	r3, [sp, #4]
    7f90:	3380      	adds	r3, #128	; 0x80
    7f92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f96:	6928      	ldr	r0, [r5, #16]
    7f98:	1c43      	adds	r3, r0, #1
    7f9a:	d006      	beq.n	7faa <uarte_instance_init.constprop.0+0x58>
			nrf_gpio_cfg_input(cfg->rx_pin,
    7f9c:	7f2b      	ldrb	r3, [r5, #28]
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	bf14      	ite	ne
    7fa2:	2103      	movne	r1, #3
    7fa4:	2100      	moveq	r1, #0
    7fa6:	f7ff ff7d 	bl	7ea4 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7faa:	696b      	ldr	r3, [r5, #20]
    7fac:	1c5a      	adds	r2, r3, #1
    7fae:	d011      	beq.n	7fd4 <uarte_instance_init.constprop.0+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7fb0:	a801      	add	r0, sp, #4
    7fb2:	9301      	str	r3, [sp, #4]
    7fb4:	f7fa fbbe 	bl	2734 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7fb8:	2301      	movs	r3, #1
    7fba:	9a01      	ldr	r2, [sp, #4]
    7fbc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7fbe:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    7fc0:	696b      	ldr	r3, [r5, #20]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7fc2:	a801      	add	r0, sp, #4
    7fc4:	9301      	str	r3, [sp, #4]
    7fc6:	f7fa fbb5 	bl	2734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7fca:	2203      	movs	r2, #3
    7fcc:	9b01      	ldr	r3, [sp, #4]
    7fce:	3380      	adds	r3, #128	; 0x80
    7fd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7fd4:	69a8      	ldr	r0, [r5, #24]
    7fd6:	1c43      	adds	r3, r0, #1
    7fd8:	d006      	beq.n	7fe8 <uarte_instance_init.constprop.0+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    7fda:	7f6b      	ldrb	r3, [r5, #29]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	bf14      	ite	ne
    7fe0:	2103      	movne	r1, #3
    7fe2:	2100      	moveq	r1, #0
    7fe4:	f7ff ff5e 	bl	7ea4 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    7fe8:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    7fec:	682b      	ldr	r3, [r5, #0]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    7fee:	4630      	mov	r0, r6
    p_reg->PSEL.TXD = pseltxd;
    7ff0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    7ff4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    7ff8:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    7ffc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8000:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    8002:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    8006:	3104      	adds	r1, #4
    8008:	f7fa fbc6 	bl	2798 <uarte_nrfx_configure>
	if (err) {
    800c:	bb40      	cbnz	r0, 8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    800e:	2308      	movs	r3, #8
    8010:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8014:	f898 3008 	ldrb.w	r3, [r8, #8]
    8018:	b95b      	cbnz	r3, 8032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    801a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    801e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8022:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8026:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    802a:	2301      	movs	r3, #1
    802c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8030:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8032:	f8d8 3004 	ldr.w	r3, [r8, #4]

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8036:	3710      	adds	r7, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8038:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    803a:	bf5c      	itt	pl
    803c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    8040:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8044:	06db      	lsls	r3, r3, #27
    8046:	bf44      	itt	mi
    8048:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    804c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    8050:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8052:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8056:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    805a:	2301      	movs	r3, #1
    805c:	60a3      	str	r3, [r4, #8]
    805e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8060:	b002      	add	sp, #8
    8062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008066 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8066:	b510      	push	{r4, lr}
    8068:	4604      	mov	r4, r0
    806a:	2200      	movs	r2, #0
    806c:	2101      	movs	r1, #1
    806e:	2009      	movs	r0, #9
    8070:	f7f9 fb1e 	bl	16b0 <z_arm_irq_priority_set>
    8074:	2009      	movs	r0, #9
    8076:	f7f9 fafd 	bl	1674 <arch_irq_enable>
    807a:	4620      	mov	r0, r4
    807c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8080:	f7ff bf67 	b.w	7f52 <uarte_instance_init.constprop.0>

00008084 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    8084:	b510      	push	{r4, lr}
    8086:	4604      	mov	r4, r0
    8088:	2200      	movs	r2, #0
    808a:	2101      	movs	r1, #1
    808c:	2008      	movs	r0, #8
    808e:	f7f9 fb0f 	bl	16b0 <z_arm_irq_priority_set>
    8092:	2008      	movs	r0, #8
    8094:	f7f9 faee 	bl	1674 <arch_irq_enable>
    8098:	4620      	mov	r0, r4
    809a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    809e:	f7ff bf58 	b.w	7f52 <uarte_instance_init.constprop.0>

000080a2 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    80a2:	2200      	movs	r2, #0
{
    80a4:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    80a6:	4611      	mov	r1, r2
    80a8:	4610      	mov	r0, r2
    80aa:	f7fc ffaf 	bl	500c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
			return -EINVAL;
    80ae:	2800      	cmp	r0, #0
		}
	#endif

	return 0;
}
    80b0:	bf18      	it	ne
    80b2:	f06f 0015 	mvnne.w	r0, #21
    80b6:	bd08      	pop	{r3, pc}

000080b8 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    80b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    80bc:	6913      	ldr	r3, [r2, #16]
    80be:	f023 0301 	bic.w	r3, r3, #1
    80c2:	6113      	str	r3, [r2, #16]
}
    80c4:	4770      	bx	lr

000080c6 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    80c6:	f7fc bf49 	b.w	4f5c <nrf_cc3xx_platform_init>

000080ca <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    80ca:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    80cc:	f7f9 f9ce 	bl	146c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    80d0:	f7f9 fa78 	bl	15c4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    80d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    80d8:	f7fc bf40 	b.w	4f5c <nrf_cc3xx_platform_init>

000080dc <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    80dc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    80e0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    80e4:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    80e8:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    80ec:	2a09      	cmp	r2, #9
    80ee:	d103      	bne.n	80f8 <nrf91_errata_14+0x1c>
                switch(var2)
    80f0:	1e43      	subs	r3, r0, #1
    80f2:	4258      	negs	r0, r3
    80f4:	4158      	adcs	r0, r3
    80f6:	4770      	bx	lr
        return false;
    80f8:	2000      	movs	r0, #0
}
    80fa:	4770      	bx	lr

000080fc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    80fc:	4700      	bx	r0

000080fe <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    80fe:	f000 b865 	b.w	81cc <z_impl_k_busy_wait>

00008102 <z_device_state_init>:
}
    8102:	4770      	bx	lr

00008104 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8104:	b138      	cbz	r0, 8116 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8106:	68c3      	ldr	r3, [r0, #12]
    8108:	8818      	ldrh	r0, [r3, #0]
    810a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    810e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8112:	4258      	negs	r0, r3
    8114:	4158      	adcs	r0, r3
}
    8116:	4770      	bx	lr

00008118 <k_mem_slab_init>:
{
    8118:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    811a:	2400      	movs	r4, #0
    811c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    811e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8120:	ea41 0402 	orr.w	r4, r1, r2
    8124:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8128:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    812c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    812e:	d10c      	bne.n	814a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8130:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8132:	42a3      	cmp	r3, r4
    8134:	d103      	bne.n	813e <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8136:	e9c0 0000 	strd	r0, r0, [r0]
}
    813a:	2000      	movs	r0, #0
}
    813c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    813e:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8140:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    8142:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    8144:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8146:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8148:	e7f3      	b.n	8132 <k_mem_slab_init+0x1a>
		return -EINVAL;
    814a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    814e:	e7f5      	b.n	813c <k_mem_slab_init+0x24>

00008150 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8150:	f3ef 8005 	mrs	r0, IPSR
}
    8154:	3800      	subs	r0, #0
    8156:	bf18      	it	ne
    8158:	2001      	movne	r0, #1
    815a:	4770      	bx	lr

0000815c <k_thread_name_get>:
}
    815c:	2000      	movs	r0, #0
    815e:	4770      	bx	lr

00008160 <z_pm_save_idle_exit>:
{
    8160:	b508      	push	{r3, lr}
	pm_system_resume();
    8162:	f7f8 fe85 	bl	e70 <pm_system_resume>
}
    8166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    816a:	f7fa bd77 	b.w	2c5c <sys_clock_idle_exit>

0000816e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    816e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8172:	428b      	cmp	r3, r1
    8174:	d001      	beq.n	817a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8176:	f7fc b8ed 	b.w	4354 <z_set_prio>
}
    817a:	2000      	movs	r0, #0
    817c:	4770      	bx	lr

0000817e <z_impl_k_mutex_init>:
{
    817e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8180:	2000      	movs	r0, #0
    8182:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8186:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    818a:	4770      	bx	lr

0000818c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    818c:	4603      	mov	r3, r0
    818e:	b920      	cbnz	r0, 819a <z_reschedule_irqlock+0xe>
    8190:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8194:	b90a      	cbnz	r2, 819a <z_reschedule_irqlock+0xe>
    8196:	f7f9 bad1 	b.w	173c <arch_swap>
    819a:	f383 8811 	msr	BASEPRI, r3
    819e:	f3bf 8f6f 	isb	sy
}
    81a2:	4770      	bx	lr

000081a4 <z_reschedule_unlocked>:
	__asm__ volatile(
    81a4:	f04f 0320 	mov.w	r3, #32
    81a8:	f3ef 8011 	mrs	r0, BASEPRI
    81ac:	f383 8812 	msr	BASEPRI_MAX, r3
    81b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    81b4:	f7ff bfea 	b.w	818c <z_reschedule_irqlock>

000081b8 <z_priq_dumb_best>:
{
    81b8:	4603      	mov	r3, r0
	return list->head == list;
    81ba:	6800      	ldr	r0, [r0, #0]
}
    81bc:	4283      	cmp	r3, r0
    81be:	bf08      	it	eq
    81c0:	2000      	moveq	r0, #0
    81c2:	4770      	bx	lr

000081c4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    81c4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    81c6:	f7fc fe7f 	bl	4ec8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    81ca:	bd08      	pop	{r3, pc}

000081cc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    81cc:	b108      	cbz	r0, 81d2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    81ce:	f7f8 bdc7 	b.w	d60 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    81d2:	4770      	bx	lr

000081d4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    81d4:	4770      	bx	lr
	...

000081d8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    81d8:	f7fa bda6 	b.w	2d28 <SystemInit>

Disassembly of section .gnu.sgstubs:

000098e0 <spm_firmware_info_nse-0x6700>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f1 b9fe 	b.w	13e4 <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 b9d6 	b.w	139c <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_request_read_nse>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 b99e 	b.w	1334 <__acle_se_spm_request_read_nse>
	...
